
nucleo-f446re-freertos-balanc3r.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a110  0800a110  0000b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a584  0800a584  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a584  0800a584  0000b584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a58c  0800a58c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a58c  0800a58c  0000b58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a590  0800a590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a594  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  200001d8  0800a76c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e60  0800a76c  0000ce60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0ef  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af3  00000000  00000000  000282f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b6  00000000  00000000  0002d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256cb  00000000  00000000  0002e88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1f7  00000000  00000000  00053f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfd37  00000000  00000000  00070150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fe87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000762c  00000000  00000000  0014fecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001574f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0f8 	.word	0x0800a0f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a0f8 	.word	0x0800a0f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t buf[14];
	buf[0] = 0x6B;
 8000f1c:	236b      	movs	r3, #107	@ 0x6b
 8000f1e:	f887 3020 	strb.w	r3, [r7, #32]
	buf[1] = 0x01;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 2, customTimeout);
 8000f28:	23d0      	movs	r3, #208	@ 0xd0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2364      	movs	r3, #100	@ 0x64
 8000f2e:	f107 0220 	add.w	r2, r7, #32
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2302      	movs	r3, #2
 8000f36:	4832      	ldr	r0, [pc, #200]	@ (8001000 <StartDefaultTask+0xec>)
 8000f38:	f001 fa04 	bl	8002344 <HAL_I2C_Master_Transmit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (ret != HAL_OK) {
 8000f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <StartDefaultTask+0x42>
		printf("Error TX Wakeup\n");
 8000f4a:	482e      	ldr	r0, [pc, #184]	@ (8001004 <StartDefaultTask+0xf0>)
 8000f4c:	f007 f904 	bl	8008158 <puts>
		osThreadTerminate(NULL);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f003 fda5 	bl	8004aa0 <osThreadTerminate>
	}
	osDelay(100);
 8000f56:	2064      	movs	r0, #100	@ 0x64
 8000f58:	f003 fdcf 	bl	8004afa <osDelay>
	buf[0] = REG_CONFIG;
 8000f5c:	231a      	movs	r3, #26
 8000f5e:	f887 3020 	strb.w	r3, [r7, #32]
	buf[1] = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf[2] = 1 << 3;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	buf[3] = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 4, customTimeout);
 8000f74:	23d0      	movs	r3, #208	@ 0xd0
 8000f76:	4619      	mov	r1, r3
 8000f78:	2364      	movs	r3, #100	@ 0x64
 8000f7a:	f107 0220 	add.w	r2, r7, #32
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2304      	movs	r3, #4
 8000f82:	481f      	ldr	r0, [pc, #124]	@ (8001000 <StartDefaultTask+0xec>)
 8000f84:	f001 f9de 	bl	8002344 <HAL_I2C_Master_Transmit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (ret != HAL_OK) {
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <StartDefaultTask+0x8e>
		printf("Error TX Config\n");
 8000f96:	481c      	ldr	r0, [pc, #112]	@ (8001008 <StartDefaultTask+0xf4>)
 8000f98:	f007 f8de 	bl	8008158 <puts>
		osThreadTerminate(NULL);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f003 fd7f 	bl	8004aa0 <osThreadTerminate>
	}

	printf("Config Wrote Successfully!\n");
 8000fa2:	481a      	ldr	r0, [pc, #104]	@ (800100c <StartDefaultTask+0xf8>)
 8000fa4:	f007 f8d8 	bl	8008158 <puts>
		calibrateGyro(buf);
	}

	for(;;)
	{
		Gval vals = getGyroVals(buf);
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f833 	bl	8001018 <getGyroVals>
 8000fb2:	eeb0 5a40 	vmov.f32	s10, s0
 8000fb6:	eef0 5a60 	vmov.f32	s11, s1
 8000fba:	eeb0 6a41 	vmov.f32	s12, s2
 8000fbe:	eef0 6a61 	vmov.f32	s13, s3
 8000fc2:	eeb0 7a42 	vmov.f32	s14, s4
 8000fc6:	eef0 7a62 	vmov.f32	s15, s5
 8000fca:	ed87 5b02 	vstr	d5, [r7, #8]
 8000fce:	ed87 6b04 	vstr	d6, [r7, #16]
 8000fd2:	ed87 7b06 	vstr	d7, [r7, #24]
		printf("x:%.3f\ty:%.3f\tz:%.3f\n", vals.x, vals.y, vals.z);
 8000fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000fda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000fe6:	e9cd 2300 	strd	r2, r3, [sp]
 8000fea:	4622      	mov	r2, r4
 8000fec:	462b      	mov	r3, r5
 8000fee:	4808      	ldr	r0, [pc, #32]	@ (8001010 <StartDefaultTask+0xfc>)
 8000ff0:	f007 f84a 	bl	8008088 <iprintf>
		osDelay(30);
 8000ff4:	201e      	movs	r0, #30
 8000ff6:	f003 fd80 	bl	8004afa <osDelay>
	{
 8000ffa:	bf00      	nop
 8000ffc:	e7d4      	b.n	8000fa8 <StartDefaultTask+0x94>
 8000ffe:	bf00      	nop
 8001000:	200001f4 	.word	0x200001f4
 8001004:	0800a110 	.word	0x0800a110
 8001008:	0800a120 	.word	0x0800a120
 800100c:	0800a130 	.word	0x0800a130
 8001010:	0800a14c 	.word	0x0800a14c
 8001014:	00000000 	.word	0x00000000

08001018 <getGyroVals>:
	}
	printf("Error?\n");
	osThreadTerminate(NULL);

}
Gval getGyroVals(uint8_t* buf) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b098      	sub	sp, #96	@ 0x60
 800101c:	af02      	add	r7, sp, #8
 800101e:	61f8      	str	r0, [r7, #28]
	Gval vals = {0.0, 0.0, 0.0};
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	HAL_StatusTypeDef ret;
	buf[0] = REG_VALS_START;
 8001044:	223b      	movs	r2, #59	@ 0x3b
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 1, customTimeout);
 800104a:	23d0      	movs	r3, #208	@ 0xd0
 800104c:	4619      	mov	r1, r3
 800104e:	2364      	movs	r3, #100	@ 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	485e      	ldr	r0, [pc, #376]	@ (80011d0 <getGyroVals+0x1b8>)
 8001058:	f001 f974 	bl	8002344 <HAL_I2C_Master_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (ret != HAL_OK) {
 8001062:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <getGyroVals+0x5a>
		printf("Error TX\n");
 800106a:	485a      	ldr	r0, [pc, #360]	@ (80011d4 <getGyroVals+0x1bc>)
 800106c:	f007 f874 	bl	8008158 <puts>
 8001070:	e079      	b.n	8001166 <getGyroVals+0x14e>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buf, 14, customTimeout);
 8001072:	23d0      	movs	r3, #208	@ 0xd0
 8001074:	4619      	mov	r1, r3
 8001076:	2364      	movs	r3, #100	@ 0x64
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	230e      	movs	r3, #14
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	4854      	ldr	r0, [pc, #336]	@ (80011d0 <getGyroVals+0x1b8>)
 8001080:	f001 fa5e 	bl	8002540 <HAL_I2C_Master_Receive>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (ret != HAL_OK) {
 800108a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <getGyroVals+0x82>
			printf("Error RX\n");
 8001092:	4851      	ldr	r0, [pc, #324]	@ (80011d8 <getGyroVals+0x1c0>)
 8001094:	f007 f860 	bl	8008158 <puts>
 8001098:	e065      	b.n	8001166 <getGyroVals+0x14e>
		} else {
			int rawGyro = (int16_t)((buf[8] << 8) | buf[9]);
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3308      	adds	r3, #8
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3309      	adds	r3, #9
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
			vals.x = (rawGyro /  65.5) - X_CALIB_OFFSET;
 80010b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80010b6:	f7ff fa55 	bl	8000564 <__aeabi_i2d>
 80010ba:	a33d      	add	r3, pc, #244	@ (adr r3, 80011b0 <getGyroVals+0x198>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff fbe4 	bl	800088c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	a33a      	add	r3, pc, #232	@ (adr r3, 80011b8 <getGyroVals+0x1a0>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff f8fb 	bl	80002cc <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 2308 	strd	r2, r3, [r7, #32]
			rawGyro = (int16_t)((buf[10] << 8) | buf[11]);
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	330a      	adds	r3, #10
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	330b      	adds	r3, #11
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	653b      	str	r3, [r7, #80]	@ 0x50
			vals.y = (rawGyro /  65.5) - Y_CALIB_OFFSET;
 80010f8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80010fa:	f7ff fa33 	bl	8000564 <__aeabi_i2d>
 80010fe:	a32c      	add	r3, pc, #176	@ (adr r3, 80011b0 <getGyroVals+0x198>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fbc2 	bl	800088c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	a32b      	add	r3, pc, #172	@ (adr r3, 80011c0 <getGyroVals+0x1a8>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff f8d7 	bl	80002c8 <__aeabi_dsub>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			rawGyro = (int16_t)((buf[12] << 8) | buf[13]);
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	330c      	adds	r3, #12
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b21b      	sxth	r3, r3
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	330d      	adds	r3, #13
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	653b      	str	r3, [r7, #80]	@ 0x50
			vals.z = (rawGyro /  65.5) - Z_CALIB_OFFSET;
 800113c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800113e:	f7ff fa11 	bl	8000564 <__aeabi_i2d>
 8001142:	a31b      	add	r3, pc, #108	@ (adr r3, 80011b0 <getGyroVals+0x198>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fba0 	bl	800088c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	a31c      	add	r3, pc, #112	@ (adr r3, 80011c8 <getGyroVals+0x1b0>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff f8b5 	bl	80002c8 <__aeabi_dsub>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		}
	}

	return vals;
 8001166:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800116a:	f107 0520 	add.w	r5, r7, #32
 800116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001172:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001176:	e884 0003 	stmia.w	r4, {r0, r1}
 800117a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800117e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001186:	ec45 4b15 	vmov	d5, r4, r5
 800118a:	ec41 0b16 	vmov	d6, r0, r1
 800118e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001192:	eeb0 0a45 	vmov.f32	s0, s10
 8001196:	eef0 0a65 	vmov.f32	s1, s11
 800119a:	eeb0 1a46 	vmov.f32	s2, s12
 800119e:	eef0 1a66 	vmov.f32	s3, s13
 80011a2:	eeb0 2a47 	vmov.f32	s4, s14
 80011a6:	eef0 2a67 	vmov.f32	s5, s15
 80011aa:	3758      	adds	r7, #88	@ 0x58
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40506000 	.word	0x40506000
 80011b8:	7ced9168 	.word	0x7ced9168
 80011bc:	4013b53f 	.word	0x4013b53f
 80011c0:	51eb851f 	.word	0x51eb851f
 80011c4:	3fdd1eb8 	.word	0x3fdd1eb8
 80011c8:	4189374c 	.word	0x4189374c
 80011cc:	3fb0e560 	.word	0x3fb0e560
 80011d0:	200001f4 	.word	0x200001f4
 80011d4:	0800a164 	.word	0x0800a164
 80011d8:	0800a170 	.word	0x0800a170

080011dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001204:	e000      	b.n	8001208 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001206:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001208:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f9      	beq.n	8001206 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001212:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f000 fc72 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f81c 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f000 f90a 	bl	8001450 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123c:	f000 f8de 	bl	80013fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001240:	f000 f884 	bl	800134c <MX_I2C1_Init>
  MX_UART4_Init();
 8001244:	f000 f8b0 	bl	80013a8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001248:	f003 fb4e 	bl	80048e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800124c:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <main+0x38>)
 800124e:	2100      	movs	r1, #0
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <main+0x3c>)
 8001252:	f003 fb93 	bl	800497c <osThreadNew>
 8001256:	4603      	mov	r3, r0
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <main+0x40>)
 800125a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800125c:	f003 fb68 	bl	8004930 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <main+0x34>
 8001264:	0800a1d4 	.word	0x0800a1d4
 8001268:	08000f15 	.word	0x08000f15
 800126c:	200002d8 	.word	0x200002d8

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	@ 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2234      	movs	r2, #52	@ 0x34
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f007 f84a 	bl	8008318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <SystemClock_Config+0xd4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	4a29      	ldr	r2, [pc, #164]	@ (8001344 <SystemClock_Config+0xd4>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <SystemClock_Config+0xd4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <SystemClock_Config+0xd8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012bc:	4a22      	ldr	r2, [pc, #136]	@ (8001348 <SystemClock_Config+0xd8>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <SystemClock_Config+0xd8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2310      	movs	r3, #16
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012e4:	2310      	movs	r3, #16
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fa52 	bl	80037a8 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800130a:	f000 f987 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fec0 	bl	80030b0 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001336:	f000 f971 	bl	800161c <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	@ 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2C1_Init+0x50>)
 8001352:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <MX_I2C1_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_I2C1_Init+0x50>)
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_I2C1_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_I2C1_Init+0x50>)
 800136a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	@ (800139c <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_I2C1_Init+0x50>)
 800138a:	f000 fe97 	bl	80020bc <HAL_I2C_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001394:	f000 f942 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001f4 	.word	0x200001f4
 80013a0:	40005400 	.word	0x40005400
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_UART4_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_UART4_Init+0x4c>)
 80013e0:	f002 ff72 	bl	80042c8 <HAL_HalfDuplex_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f917 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000248 	.word	0x20000248
 80013f8:	40004c00 	.word	0x40004c00

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <MX_USART2_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001434:	f002 fef8 	bl	8004228 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 f8ed 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000290 	.word	0x20000290
 800144c:	40004400 	.word	0x40004400

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b51      	ldr	r3, [pc, #324]	@ (80015b0 <MX_GPIO_Init+0x160>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a50      	ldr	r2, [pc, #320]	@ (80015b0 <MX_GPIO_Init+0x160>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <MX_GPIO_Init+0x160>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b4a      	ldr	r3, [pc, #296]	@ (80015b0 <MX_GPIO_Init+0x160>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <MX_GPIO_Init+0x160>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b47      	ldr	r3, [pc, #284]	@ (80015b0 <MX_GPIO_Init+0x160>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <MX_GPIO_Init+0x160>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a42      	ldr	r2, [pc, #264]	@ (80015b0 <MX_GPIO_Init+0x160>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <MX_GPIO_Init+0x160>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <MX_GPIO_Init+0x160>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a3b      	ldr	r2, [pc, #236]	@ (80015b0 <MX_GPIO_Init+0x160>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b39      	ldr	r3, [pc, #228]	@ (80015b0 <MX_GPIO_Init+0x160>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2160      	movs	r1, #96	@ 0x60
 80014da:	4836      	ldr	r0, [pc, #216]	@ (80015b4 <MX_GPIO_Init+0x164>)
 80014dc:	f000 fdd4 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2120      	movs	r1, #32
 80014e4:	4834      	ldr	r0, [pc, #208]	@ (80015b8 <MX_GPIO_Init+0x168>)
 80014e6:	f000 fdcf 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	482e      	ldr	r0, [pc, #184]	@ (80015bc <MX_GPIO_Init+0x16c>)
 8001502:	f000 fc2d 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001506:	2360      	movs	r3, #96	@ 0x60
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4825      	ldr	r0, [pc, #148]	@ (80015b4 <MX_GPIO_Init+0x164>)
 800151e:	f000 fc1f 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001522:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	481f      	ldr	r0, [pc, #124]	@ (80015b4 <MX_GPIO_Init+0x164>)
 8001538:	f000 fc12 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800153c:	2320      	movs	r3, #32
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800154c:	2307      	movs	r3, #7
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4819      	ldr	r0, [pc, #100]	@ (80015bc <MX_GPIO_Init+0x16c>)
 8001558:	f000 fc02 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4813      	ldr	r0, [pc, #76]	@ (80015bc <MX_GPIO_Init+0x16c>)
 8001570:	f000 fbf6 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001574:	2320      	movs	r3, #32
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <MX_GPIO_Init+0x168>)
 800158c:	f000 fbe8 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001590:	2340      	movs	r3, #64	@ 0x40
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_GPIO_Init+0x168>)
 80015a4:	f000 fbdc 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800

080015c0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e009      	b.n	80015e6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	60ba      	str	r2, [r7, #8]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fdfe 	bl	80011dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbf1      	blt.n	80015d2 <_write+0x12>
  }
  return len;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800160a:	f000 faa7 	bl	8001b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40001000 	.word	0x40001000

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <Error_Handler+0x8>

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_MspInit+0x54>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_MspInit+0x54>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_MspInit+0x54>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_MspInit+0x54>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_MspInit+0x54>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	@ 0x40
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_MspInit+0x54>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	210f      	movs	r1, #15
 800166a:	f06f 0001 	mvn.w	r0, #1
 800166e:	f000 fb4d 	bl	8001d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <HAL_I2C_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12c      	bne.n	80016fc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d0:	2304      	movs	r3, #4
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <HAL_I2C_MspInit+0x8c>)
 80016dc:	f000 fb40 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <HAL_UART_MspInit+0xe8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12c      	bne.n	800178c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <HAL_UART_MspInit+0xec>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a30      	ldr	r2, [pc, #192]	@ (80017fc <HAL_UART_MspInit+0xec>)
 800173c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <HAL_UART_MspInit+0xec>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <HAL_UART_MspInit+0xec>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a29      	ldr	r2, [pc, #164]	@ (80017fc <HAL_UART_MspInit+0xec>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_UART_MspInit+0xec>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800176a:	2301      	movs	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800177a:	2308      	movs	r3, #8
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	481e      	ldr	r0, [pc, #120]	@ (8001800 <HAL_UART_MspInit+0xf0>)
 8001786:	f000 faeb 	bl	8001d60 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800178a:	e030      	b.n	80017ee <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1c      	ldr	r2, [pc, #112]	@ (8001804 <HAL_UART_MspInit+0xf4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_UART_MspInit+0xec>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <HAL_UART_MspInit+0xec>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_UART_MspInit+0xec>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_UART_MspInit+0xec>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a10      	ldr	r2, [pc, #64]	@ (80017fc <HAL_UART_MspInit+0xec>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_UART_MspInit+0xec>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ce:	230c      	movs	r3, #12
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017de:	2307      	movs	r3, #7
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HAL_UART_MspInit+0xf0>)
 80017ea:	f000 fab9 	bl	8001d60 <HAL_GPIO_Init>
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	@ 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40004c00 	.word	0x40004c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	40004400 	.word	0x40004400

08001808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	@ 0x38
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <HAL_InitTick+0xe4>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	4a32      	ldr	r2, [pc, #200]	@ (80018ec <HAL_InitTick+0xe4>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	6413      	str	r3, [r2, #64]	@ 0x40
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <HAL_InitTick+0xe4>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001834:	f107 0210 	add.w	r2, r7, #16
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f001 fd50 	bl	80032e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800184e:	f001 fd21 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8001852:	6378      	str	r0, [r7, #52]	@ 0x34
 8001854:	e004      	b.n	8001860 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001856:	f001 fd1d 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 800185a:	4603      	mov	r3, r0
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	4a23      	ldr	r2, [pc, #140]	@ (80018f0 <HAL_InitTick+0xe8>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	3b01      	subs	r3, #1
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_InitTick+0xec>)
 8001870:	4a21      	ldr	r2, [pc, #132]	@ (80018f8 <HAL_InitTick+0xf0>)
 8001872:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <HAL_InitTick+0xec>)
 8001876:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800187a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <HAL_InitTick+0xec>)
 800187e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001880:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <HAL_InitTick+0xec>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_InitTick+0xec>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_InitTick+0xec>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001894:	4817      	ldr	r0, [pc, #92]	@ (80018f4 <HAL_InitTick+0xec>)
 8001896:	f002 fa25 	bl	8003ce4 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80018a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11b      	bne.n	80018e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018a8:	4812      	ldr	r0, [pc, #72]	@ (80018f4 <HAL_InitTick+0xec>)
 80018aa:	f002 fa75 	bl	8003d98 <HAL_TIM_Base_Start_IT>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80018b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d111      	bne.n	80018e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018bc:	2036      	movs	r0, #54	@ 0x36
 80018be:	f000 fa41 	bl	8001d44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d808      	bhi.n	80018da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	2036      	movs	r0, #54	@ 0x36
 80018ce:	f000 fa1d 	bl	8001d0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <HAL_InitTick+0xf4>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e002      	b.n	80018e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3738      	adds	r7, #56	@ 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	200002dc 	.word	0x200002dc
 80018f8:	40001000 	.word	0x40001000
 80018fc:	20000004 	.word	0x20000004

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <NMI_Handler+0x4>

08001908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <MemManage_Handler+0x4>

08001918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <UsageFault_Handler+0x4>

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <TIM6_DAC_IRQHandler+0x10>)
 800193e:	f002 fa9b 	bl	8003e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002dc 	.word	0x200002dc

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001966:	f006 fd87 	bl	8008478 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
  return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
  while (1) {}    /* Make sure we hang here */
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <_exit+0x12>

08001992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00a      	b.n	80019ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a4:	f3af 8000 	nop.w
 80019a8:	4601      	mov	r1, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dbf0      	blt.n	80019a4 <_read+0x12>
  }

  return len;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_close>:
  }
  return len;
}

int _close(int file)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f4:	605a      	str	r2, [r3, #4]
  return 0;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_isatty>:

int _isatty(int file)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f006 fd08 	bl	8008478 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20020000 	.word	0x20020000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	20000324 	.word	0x20000324
 8001a9c:	20004e60 	.word	0x20004e60

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001afc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ac8:	f7ff ffea 	bl	8001aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001acc:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ace:	490d      	ldr	r1, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f006 fcc7 	bl	8008484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff fb99 	bl	800122c <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b08:	0800a594 	.word	0x0800a594
  ldr r2, =_sbss
 8001b0c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b10:	20004e60 	.word	0x20004e60

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f8d8 	bl	8001cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f7ff fe5e 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fd6c 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000328 	.word	0x20000328

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000328 	.word	0x20000328

08001b9c <__NVIC_SetPriorityGrouping>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	@ (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	@ (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff4c 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1e:	f7ff ff61 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7ff ffb1 	bl	8001c90 <NVIC_EncodePriority>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff80 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff54 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e165      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8154 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d005      	beq.n	8001db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d130      	bne.n	8001e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 0201 	and.w	r2, r3, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d017      	beq.n	8001e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80ae 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b5d      	ldr	r3, [pc, #372]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a5c      	ldr	r2, [pc, #368]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f02:	4a58      	ldr	r2, [pc, #352]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x308>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4e      	ldr	r2, [pc, #312]	@ (800206c <HAL_GPIO_Init+0x30c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	@ (8002070 <HAL_GPIO_Init+0x310>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_GPIO_Init+0x314>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_GPIO_Init+0x318>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x20a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x31c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x206>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a49      	ldr	r2, [pc, #292]	@ (8002080 <HAL_GPIO_Init+0x320>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x202>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4935      	ldr	r1, [pc, #212]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a31      	ldr	r2, [pc, #196]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a26      	ldr	r2, [pc, #152]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002012:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_GPIO_Init+0x324>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203c:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <HAL_GPIO_Init+0x324>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae96 	bls.w	8001d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800
 8002084:	40013c00 	.word	0x40013c00

08002088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	041a      	lsls	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	619a      	str	r2, [r3, #24]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e12b      	b.n	8002326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff facc 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	@ 0x24
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800210e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800211e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002120:	f001 f8b8 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8002124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a81      	ldr	r2, [pc, #516]	@ (8002330 <HAL_I2C_Init+0x274>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d807      	bhi.n	8002140 <HAL_I2C_Init+0x84>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a80      	ldr	r2, [pc, #512]	@ (8002334 <HAL_I2C_Init+0x278>)
 8002134:	4293      	cmp	r3, r2
 8002136:	bf94      	ite	ls
 8002138:	2301      	movls	r3, #1
 800213a:	2300      	movhi	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e006      	b.n	800214e <HAL_I2C_Init+0x92>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a7d      	ldr	r2, [pc, #500]	@ (8002338 <HAL_I2C_Init+0x27c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0e7      	b.n	8002326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a78      	ldr	r2, [pc, #480]	@ (800233c <HAL_I2C_Init+0x280>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9b      	lsrs	r3, r3, #18
 8002160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a6a      	ldr	r2, [pc, #424]	@ (8002330 <HAL_I2C_Init+0x274>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d802      	bhi.n	8002190 <HAL_I2C_Init+0xd4>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3301      	adds	r3, #1
 800218e:	e009      	b.n	80021a4 <HAL_I2C_Init+0xe8>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	4a69      	ldr	r2, [pc, #420]	@ (8002340 <HAL_I2C_Init+0x284>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	3301      	adds	r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	495c      	ldr	r1, [pc, #368]	@ (8002330 <HAL_I2C_Init+0x274>)
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d819      	bhi.n	80021f8 <HAL_I2C_Init+0x13c>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d2:	1c59      	adds	r1, r3, #1
 80021d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021d8:	400b      	ands	r3, r1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_I2C_Init+0x138>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e59      	subs	r1, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f2:	e051      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e04f      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d111      	bne.n	8002224 <HAL_I2C_Init+0x168>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1e58      	subs	r0, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	440b      	add	r3, r1
 800220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e012      	b.n	800224a <HAL_I2C_Init+0x18e>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Init+0x196>
 800224e:	2301      	movs	r3, #1
 8002250:	e022      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10e      	bne.n	8002278 <HAL_I2C_Init+0x1bc>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e58      	subs	r0, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	fbb0 f3f3 	udiv	r3, r0, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002276:	e00f      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	0099      	lsls	r1, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	fbb0 f3f3 	udiv	r3, r0, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	6809      	ldr	r1, [r1, #0]
 800229c:	4313      	orrs	r3, r2
 800229e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6911      	ldr	r1, [r2, #16]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68d2      	ldr	r2, [r2, #12]
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	430b      	orrs	r3, r1
 80022da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	000186a0 	.word	0x000186a0
 8002334:	001e847f 	.word	0x001e847f
 8002338:	003d08ff 	.word	0x003d08ff
 800233c:	431bde83 	.word	0x431bde83
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	461a      	mov	r2, r3
 8002350:	460b      	mov	r3, r1
 8002352:	817b      	strh	r3, [r7, #10]
 8002354:	4613      	mov	r3, r2
 8002356:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fc14 	bl	8001b84 <HAL_GetTick>
 800235c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	f040 80e0 	bne.w	800252c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2319      	movs	r3, #25
 8002372:	2201      	movs	r2, #1
 8002374:	4970      	ldr	r1, [pc, #448]	@ (8002538 <HAL_I2C_Master_Transmit+0x1f4>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fc64 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	e0d3      	b.n	800252e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_I2C_Master_Transmit+0x50>
 8002390:	2302      	movs	r3, #2
 8002392:	e0cc      	b.n	800252e <HAL_I2C_Master_Transmit+0x1ea>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d007      	beq.n	80023ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	@ 0x21
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2210      	movs	r2, #16
 80023d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a50      	ldr	r2, [pc, #320]	@ (800253c <HAL_I2C_Master_Transmit+0x1f8>)
 80023fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 face 	bl	80029a4 <I2C_MasterRequestWrite>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e08d      	b.n	800252e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002428:	e066      	b.n	80024f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	6a39      	ldr	r1, [r7, #32]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fd22 	bl	8002e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06b      	b.n	800252e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d11b      	bne.n	80024cc <HAL_I2C_Master_Transmit+0x188>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d017      	beq.n	80024cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	6a39      	ldr	r1, [r7, #32]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fd19 	bl	8002f08 <I2C_WaitOnBTFFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e01a      	b.n	800252e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d194      	bne.n	800242a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	00100002 	.word	0x00100002
 800253c:	ffff0000 	.word	0xffff0000

08002540 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	@ 0x30
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	461a      	mov	r2, r3
 800254c:	460b      	mov	r3, r1
 800254e:	817b      	strh	r3, [r7, #10]
 8002550:	4613      	mov	r3, r2
 8002552:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff fb16 	bl	8001b84 <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	f040 8217 	bne.w	8002996 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2319      	movs	r3, #25
 800256e:	2201      	movs	r2, #1
 8002570:	497c      	ldr	r1, [pc, #496]	@ (8002764 <HAL_I2C_Master_Receive+0x224>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb66 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
 8002580:	e20a      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_I2C_Master_Receive+0x50>
 800258c:	2302      	movs	r3, #2
 800258e:	e203      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d007      	beq.n	80025b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2222      	movs	r2, #34	@ 0x22
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2210      	movs	r2, #16
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002768 <HAL_I2C_Master_Receive+0x228>)
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025f8:	8979      	ldrh	r1, [r7, #10]
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fa52 	bl	8002aa8 <I2C_MasterRequestRead>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1c4      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d113      	bne.n	800263e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e198      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002642:	2b01      	cmp	r3, #1
 8002644:	d11b      	bne.n	800267e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e178      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	2b02      	cmp	r3, #2
 8002684:	d11b      	bne.n	80026be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002694:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	e158      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026e4:	e144      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	f200 80f1 	bhi.w	80028d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d123      	bne.n	8002740 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fc4b 	bl	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e145      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800273e:	e117      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b02      	cmp	r3, #2
 8002746:	d14e      	bne.n	80027e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	2200      	movs	r2, #0
 8002750:	4906      	ldr	r1, [pc, #24]	@ (800276c <HAL_I2C_Master_Receive+0x22c>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa76 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e11a      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
 8002762:	bf00      	nop
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000
 800276c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027e4:	e0c4      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	2200      	movs	r2, #0
 80027ee:	496c      	ldr	r1, [pc, #432]	@ (80029a0 <HAL_I2C_Master_Receive+0x460>)
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa27 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cb      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	2200      	movs	r2, #0
 800284a:	4955      	ldr	r1, [pc, #340]	@ (80029a0 <HAL_I2C_Master_Receive+0x460>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f9f9 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e09d      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028d0:	e04e      	b.n	8002970 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fb5e 	bl	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e058      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d124      	bne.n	8002970 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	f47f aeb6 	bne.w	80026e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00010004 	.word	0x00010004

080029a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d006      	beq.n	80029ce <I2C_MasterRequestWrite+0x2a>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d003      	beq.n	80029ce <I2C_MasterRequestWrite+0x2a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00b      	b.n	80029f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d107      	bne.n	80029f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f91d 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1e:	d103      	bne.n	8002a28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e035      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a34:	d108      	bne.n	8002a48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e01b      	b.n	8002a80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	11db      	asrs	r3, r3, #7
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f063 030f 	orn	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	490e      	ldr	r1, [pc, #56]	@ (8002aa0 <I2C_MasterRequestWrite+0xfc>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f966 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e010      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4907      	ldr	r1, [pc, #28]	@ (8002aa4 <I2C_MasterRequestWrite+0x100>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f956 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	00010008 	.word	0x00010008
 8002aa4:	00010002 	.word	0x00010002

08002aa8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002acc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d006      	beq.n	8002ae2 <I2C_MasterRequestRead+0x3a>
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d003      	beq.n	8002ae2 <I2C_MasterRequestRead+0x3a>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ae0:	d108      	bne.n	8002af4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e00b      	b.n	8002b0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	2b11      	cmp	r3, #17
 8002afa:	d107      	bne.n	8002b0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f893 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b32:	d103      	bne.n	8002b3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e079      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b48:	d108      	bne.n	8002b5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e05f      	b.n	8002c1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	11db      	asrs	r3, r3, #7
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0306 	and.w	r3, r3, #6
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f063 030f 	orn	r3, r3, #15
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4930      	ldr	r1, [pc, #192]	@ (8002c3c <I2C_MasterRequestRead+0x194>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8dc 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e054      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4929      	ldr	r1, [pc, #164]	@ (8002c40 <I2C_MasterRequestRead+0x198>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8cc 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e044      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f831 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf6:	d103      	bne.n	8002c00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e017      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	11db      	asrs	r3, r3, #7
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0306 	and.w	r3, r3, #6
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f063 030e 	orn	r3, r3, #14
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <I2C_MasterRequestRead+0x198>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f888 	bl	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	00010008 	.word	0x00010008
 8002c40:	00010002 	.word	0x00010002

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e048      	b.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d044      	beq.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe ff91 	bl	8001b84 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d139      	bne.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10d      	bne.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	43da      	mvns	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	e00c      	b.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d116      	bne.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e023      	b.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	0c1b      	lsrs	r3, r3, #16
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10d      	bne.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	e00c      	b.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d093      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d46:	e071      	b.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	d123      	bne.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e067      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d041      	beq.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7fe feec 	bl	8001b84 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d136      	bne.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e00b      	b.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e021      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10c      	bne.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e00b      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f af6d 	bne.w	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	e034      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8e3 	bl	8003052 <I2C_IsAcknowledgeFailed>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e034      	b.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d028      	beq.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7fe fe71 	bl	8001b84 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11d      	bne.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b80      	cmp	r3, #128	@ 0x80
 8002ec0:	d016      	beq.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e007      	b.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b80      	cmp	r3, #128	@ 0x80
 8002efc:	d1c3      	bne.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f89b 	bl	8003052 <I2C_IsAcknowledgeFailed>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e034      	b.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d028      	beq.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe fe29 	bl	8001b84 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11d      	bne.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d016      	beq.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e007      	b.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d1c3      	bne.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa4:	e049      	b.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d119      	bne.n	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e030      	b.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fe fdcc 	bl	8001b84 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b40      	cmp	r3, #64	@ 0x40
 800300a:	d016      	beq.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e007      	b.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d1ae      	bne.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003068:	d11b      	bne.n	80030a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003072:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0cc      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b68      	ldr	r3, [pc, #416]	@ (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d90c      	bls.n	80030ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b65      	ldr	r3, [pc, #404]	@ (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b63      	ldr	r3, [pc, #396]	@ (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003104:	4b59      	ldr	r3, [pc, #356]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a58      	ldr	r2, [pc, #352]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800310e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311c:	4b53      	ldr	r3, [pc, #332]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a52      	ldr	r2, [pc, #328]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b50      	ldr	r3, [pc, #320]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	494d      	ldr	r1, [pc, #308]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d044      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b47      	ldr	r3, [pc, #284]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d119      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d003      	beq.n	800316e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316a:	2b03      	cmp	r3, #3
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b3f      	ldr	r3, [pc, #252]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b3b      	ldr	r3, [pc, #236]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e067      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b37      	ldr	r3, [pc, #220]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4934      	ldr	r1, [pc, #208]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a0:	f7fe fcf0 	bl	8001b84 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fe fcec 	bl	8001b84 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20c      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b22      	ldr	r3, [pc, #136]	@ (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e032      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4916      	ldr	r1, [pc, #88]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003222:	4b12      	ldr	r3, [pc, #72]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	490e      	ldr	r1, [pc, #56]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003236:	f000 f887 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490a      	ldr	r1, [pc, #40]	@ (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003252:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fad6 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023c00 	.word	0x40023c00
 800326c:	40023800 	.word	0x40023800
 8003270:	0800a1f8 	.word	0x0800a1f8
 8003274:	20000000 	.word	0x20000000
 8003278:	20000004 	.word	0x20000004

0800327c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003280:	4b03      	ldr	r3, [pc, #12]	@ (8003290 <HAL_RCC_GetHCLKFreq+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000000 	.word	0x20000000

08003294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003298:	f7ff fff0 	bl	800327c <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0a9b      	lsrs	r3, r3, #10
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4903      	ldr	r1, [pc, #12]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	0800a208 	.word	0x0800a208

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032c0:	f7ff ffdc 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	@ (80032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	0800a208 	.word	0x0800a208

080032e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	220f      	movs	r2, #15
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032f4:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003326:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <HAL_RCC_GetClockConfig+0x60>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800
 8003344:	40023c00 	.word	0x40023c00

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b0ae      	sub	sp, #184	@ 0xb8
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336e:	4bcb      	ldr	r3, [pc, #812]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b0c      	cmp	r3, #12
 8003378:	f200 8206 	bhi.w	8003788 <HAL_RCC_GetSysClockFreq+0x440>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <HAL_RCC_GetSysClockFreq+0x3c>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033b9 	.word	0x080033b9
 8003388:	08003789 	.word	0x08003789
 800338c:	08003789 	.word	0x08003789
 8003390:	08003789 	.word	0x08003789
 8003394:	080033c1 	.word	0x080033c1
 8003398:	08003789 	.word	0x08003789
 800339c:	08003789 	.word	0x08003789
 80033a0:	08003789 	.word	0x08003789
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	08003789 	.word	0x08003789
 80033ac:	08003789 	.word	0x08003789
 80033b0:	08003789 	.word	0x08003789
 80033b4:	080035b9 	.word	0x080035b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4bb9      	ldr	r3, [pc, #740]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033be:	e1e7      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	4bb8      	ldr	r3, [pc, #736]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033c6:	e1e3      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c8:	4bb4      	ldr	r3, [pc, #720]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d4:	4bb1      	ldr	r3, [pc, #708]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d071      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e0:	4bae      	ldr	r3, [pc, #696]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	099b      	lsrs	r3, r3, #6
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003406:	4622      	mov	r2, r4
 8003408:	462b      	mov	r3, r5
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	0159      	lsls	r1, r3, #5
 8003414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003418:	0150      	lsls	r0, r2, #5
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4621      	mov	r1, r4
 8003420:	1a51      	subs	r1, r2, r1
 8003422:	6439      	str	r1, [r7, #64]	@ 0x40
 8003424:	4629      	mov	r1, r5
 8003426:	eb63 0301 	sbc.w	r3, r3, r1
 800342a:	647b      	str	r3, [r7, #68]	@ 0x44
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003438:	4649      	mov	r1, r9
 800343a:	018b      	lsls	r3, r1, #6
 800343c:	4641      	mov	r1, r8
 800343e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003442:	4641      	mov	r1, r8
 8003444:	018a      	lsls	r2, r1, #6
 8003446:	4641      	mov	r1, r8
 8003448:	1a51      	subs	r1, r2, r1
 800344a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800344c:	4649      	mov	r1, r9
 800344e:	eb63 0301 	sbc.w	r3, r3, r1
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003460:	4649      	mov	r1, r9
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4641      	mov	r1, r8
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4641      	mov	r1, r8
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4622      	mov	r2, r4
 8003476:	189b      	adds	r3, r3, r2
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
 800347a:	462b      	mov	r3, r5
 800347c:	460a      	mov	r2, r1
 800347e:	eb42 0303 	adc.w	r3, r2, r3
 8003482:	637b      	str	r3, [r7, #52]	@ 0x34
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003490:	4629      	mov	r1, r5
 8003492:	024b      	lsls	r3, r1, #9
 8003494:	4621      	mov	r1, r4
 8003496:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349a:	4621      	mov	r1, r4
 800349c:	024a      	lsls	r2, r1, #9
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034b4:	f7fd fb98 	bl	8000be8 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c2:	e067      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b75      	ldr	r3, [pc, #468]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034de:	2300      	movs	r3, #0
 80034e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4621      	mov	r1, r4
 8003500:	1a51      	subs	r1, r2, r1
 8003502:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003504:	4629      	mov	r1, r5
 8003506:	eb63 0301 	sbc.w	r3, r3, r1
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003518:	4649      	mov	r1, r9
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003522:	4641      	mov	r1, r8
 8003524:	018a      	lsls	r2, r1, #6
 8003526:	4641      	mov	r1, r8
 8003528:	ebb2 0a01 	subs.w	sl, r2, r1
 800352c:	4649      	mov	r1, r9
 800352e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800353e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003546:	4692      	mov	sl, r2
 8003548:	469b      	mov	fp, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb1a 0303 	adds.w	r3, sl, r3
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	462b      	mov	r3, r5
 8003554:	eb4b 0303 	adc.w	r3, fp, r3
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800357c:	2200      	movs	r2, #0
 800357e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003580:	677a      	str	r2, [r7, #116]	@ 0x74
 8003582:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003586:	f7fd fb2f 	bl	8000be8 <__aeabi_uldivmod>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4613      	mov	r3, r2
 8003590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003594:	4b41      	ldr	r3, [pc, #260]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80035a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035b6:	e0eb      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4b38      	ldr	r3, [pc, #224]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c4:	4b35      	ldr	r3, [pc, #212]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d06b      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d0:	4b32      	ldr	r3, [pc, #200]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	2200      	movs	r2, #0
 80035d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e4:	2300      	movs	r3, #0
 80035e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035ec:	4622      	mov	r2, r4
 80035ee:	462b      	mov	r3, r5
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	0159      	lsls	r1, r3, #5
 80035fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fe:	0150      	lsls	r0, r2, #5
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4621      	mov	r1, r4
 8003606:	1a51      	subs	r1, r2, r1
 8003608:	61b9      	str	r1, [r7, #24]
 800360a:	4629      	mov	r1, r5
 800360c:	eb63 0301 	sbc.w	r3, r3, r1
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800361e:	4659      	mov	r1, fp
 8003620:	018b      	lsls	r3, r1, #6
 8003622:	4651      	mov	r1, sl
 8003624:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003628:	4651      	mov	r1, sl
 800362a:	018a      	lsls	r2, r1, #6
 800362c:	4651      	mov	r1, sl
 800362e:	ebb2 0801 	subs.w	r8, r2, r1
 8003632:	4659      	mov	r1, fp
 8003634:	eb63 0901 	sbc.w	r9, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364c:	4690      	mov	r8, r2
 800364e:	4699      	mov	r9, r3
 8003650:	4623      	mov	r3, r4
 8003652:	eb18 0303 	adds.w	r3, r8, r3
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	462b      	mov	r3, r5
 800365a:	eb49 0303 	adc.w	r3, r9, r3
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800366c:	4629      	mov	r1, r5
 800366e:	024b      	lsls	r3, r1, #9
 8003670:	4621      	mov	r1, r4
 8003672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003676:	4621      	mov	r1, r4
 8003678:	024a      	lsls	r2, r1, #9
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003682:	2200      	movs	r2, #0
 8003684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003686:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800368c:	f7fd faac 	bl	8000be8 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800369a:	e065      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x420>
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b3d      	ldr	r3, [pc, #244]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	2200      	movs	r2, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	4611      	mov	r1, r2
 80036b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ba:	2300      	movs	r3, #0
 80036bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80036be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036c2:	4642      	mov	r2, r8
 80036c4:	464b      	mov	r3, r9
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	0159      	lsls	r1, r3, #5
 80036d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d4:	0150      	lsls	r0, r2, #5
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4641      	mov	r1, r8
 80036dc:	1a51      	subs	r1, r2, r1
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	4649      	mov	r1, r9
 80036e2:	eb63 0301 	sbc.w	r3, r3, r1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036f4:	4659      	mov	r1, fp
 80036f6:	018b      	lsls	r3, r1, #6
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fe:	4651      	mov	r1, sl
 8003700:	018a      	lsls	r2, r1, #6
 8003702:	4651      	mov	r1, sl
 8003704:	1a54      	subs	r4, r2, r1
 8003706:	4659      	mov	r1, fp
 8003708:	eb63 0501 	sbc.w	r5, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	464b      	mov	r3, r9
 8003728:	eb45 0303 	adc.w	r3, r5, r3
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373a:	4629      	mov	r1, r5
 800373c:	028b      	lsls	r3, r1, #10
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003744:	4621      	mov	r1, r4
 8003746:	028a      	lsls	r2, r1, #10
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003750:	2200      	movs	r2, #0
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003754:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003756:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800375a:	f7fd fa45 	bl	8000be8 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4613      	mov	r3, r2
 8003764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003768:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0f1b      	lsrs	r3, r3, #28
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800377a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003786:	e003      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800378a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800378e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003794:	4618      	mov	r0, r3
 8003796:	37b8      	adds	r7, #184	@ 0xb8
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400

080037a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e28d      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8083 	beq.w	80038ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037c8:	4b94      	ldr	r3, [pc, #592]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d019      	beq.n	8003808 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037d4:	4b91      	ldr	r3, [pc, #580]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037e0:	4b8e      	ldr	r3, [pc, #568]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ec:	d00c      	beq.n	8003808 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d112      	bne.n	8003820 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b88      	ldr	r3, [pc, #544]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b84      	ldr	r3, [pc, #528]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05b      	beq.n	80038cc <HAL_RCC_OscConfig+0x124>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d157      	bne.n	80038cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e25a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x90>
 800382a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xcc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0xb4>
 8003842:	4b76      	ldr	r3, [pc, #472]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b73      	ldr	r3, [pc, #460]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a72      	ldr	r2, [pc, #456]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xcc>
 800385c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6e      	ldr	r2, [pc, #440]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b6c      	ldr	r3, [pc, #432]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe f982 	bl	8001b84 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe f97e 	bl	8001b84 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e21f      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xdc>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe f96e 	bl	8001b84 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe f96a 	bl	8001b84 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e20b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x104>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d06f      	beq.n	80039ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038da:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038e6:	4b4d      	ldr	r3, [pc, #308]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d105      	bne.n	80038fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d11c      	bne.n	8003944 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	4b44      	ldr	r3, [pc, #272]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	4b41      	ldr	r3, [pc, #260]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x186>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1d3      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4937      	ldr	r1, [pc, #220]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	e03a      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <HAL_RCC_OscConfig+0x278>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe f917 	bl	8001b84 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe f913 	bl	8001b84 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1b4      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b28      	ldr	r3, [pc, #160]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4925      	ldr	r1, [pc, #148]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCC_OscConfig+0x278>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe f8f6 	bl	8001b84 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399c:	f7fe f8f2 	bl	8001b84 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e193      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d036      	beq.n	8003a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe f8d6 	bl	8001b84 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039dc:	f7fe f8d2 	bl	8001b84 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e173      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80039f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x234>
 80039fa:	e01b      	b.n	8003a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe f8bf 	bl	8001b84 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	e00e      	b.n	8003a28 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0a:	f7fe f8bb 	bl	8001b84 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d907      	bls.n	8003a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e15c      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	42470000 	.word	0x42470000
 8003a24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	4b8a      	ldr	r3, [pc, #552]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ea      	bne.n	8003a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8097 	beq.w	8003b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a46:	4b83      	ldr	r3, [pc, #524]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b7f      	ldr	r3, [pc, #508]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a62:	4b7c      	ldr	r3, [pc, #496]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b79      	ldr	r3, [pc, #484]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7e:	4b76      	ldr	r3, [pc, #472]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a75      	ldr	r2, [pc, #468]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe f87b 	bl	8001b84 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe f877 	bl	8001b84 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e118      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x31e>
 8003ab8:	4b66      	ldr	r3, [pc, #408]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4a65      	ldr	r2, [pc, #404]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac4:	e01c      	b.n	8003b00 <HAL_RCC_OscConfig+0x358>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x340>
 8003ace:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	4a60      	ldr	r2, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ada:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	4a5d      	ldr	r2, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0x358>
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a59      	ldr	r2, [pc, #356]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	4a56      	ldr	r2, [pc, #344]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe f83c 	bl	8001b84 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fe f838 	bl	8001b84 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0d7      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	4b4b      	ldr	r3, [pc, #300]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ee      	beq.n	8003b10 <HAL_RCC_OscConfig+0x368>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fe f826 	bl	8001b84 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fe f822 	bl	8001b84 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0c1      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b52:	4b40      	ldr	r3, [pc, #256]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ee      	bne.n	8003b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	4a3a      	ldr	r2, [pc, #232]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80ad 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7a:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d060      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d145      	bne.n	8003c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b33      	ldr	r3, [pc, #204]	@ (8003c5c <HAL_RCC_OscConfig+0x4b4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fff6 	bl	8001b84 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fff2 	bl	8001b84 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e093      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b29      	ldr	r3, [pc, #164]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x4b4>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fd ffc7 	bl	8001b84 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fd ffc3 	bl	8001b84 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e064      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x452>
 8003c18:	e05c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCC_OscConfig+0x4b4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd ffb0 	bl	8001b84 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd ffac 	bl	8001b84 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e04d      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x480>
 8003c46:	e045      	b.n	8003cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e040      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce0 <HAL_RCC_OscConfig+0x538>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d030      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d129      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d122      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d119      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d10f      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e041      	b.n	8003d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f839 	bl	8003d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 f9c0 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d001      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e04e      	b.n	8003e4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	@ (8003e5c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d022      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dda:	d01d      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e60 <HAL_TIM_Base_Start_IT+0xc8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d018      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1e      	ldr	r2, [pc, #120]	@ (8003e64 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d010      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3a:	e007      	b.n	8003e4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40000c00 	.word	0x40000c00
 8003e6c:	40010400 	.word	0x40010400
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40001800 	.word	0x40001800

08003e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d020      	beq.n	8003edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0202 	mvn.w	r2, #2
 8003eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8d2 	bl	800406c <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8c4 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8d5 	bl	8004080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d020      	beq.n	8003f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0204 	mvn.w	r2, #4
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8ac 	bl	800406c <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f89e 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f8af 	bl	8004080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d020      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0208 	mvn.w	r2, #8
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f886 	bl	800406c <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f878 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f889 	bl	8004080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d020      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01b      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0210 	mvn.w	r2, #16
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2208      	movs	r2, #8
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f860 	bl	800406c <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f852 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f863 	bl	8004080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0201 	mvn.w	r2, #1
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd fb0a 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f906 	bl	8004214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f834 	bl	8004094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0220 	mvn.w	r2, #32
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8d8 	bl	8004200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a46      	ldr	r2, [pc, #280]	@ (80041d4 <TIM_Base_SetConfig+0x12c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c6:	d00f      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a43      	ldr	r2, [pc, #268]	@ (80041d8 <TIM_Base_SetConfig+0x130>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a42      	ldr	r2, [pc, #264]	@ (80041dc <TIM_Base_SetConfig+0x134>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a41      	ldr	r2, [pc, #260]	@ (80041e0 <TIM_Base_SetConfig+0x138>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a40      	ldr	r2, [pc, #256]	@ (80041e4 <TIM_Base_SetConfig+0x13c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a35      	ldr	r2, [pc, #212]	@ (80041d4 <TIM_Base_SetConfig+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02b      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d027      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a32      	ldr	r2, [pc, #200]	@ (80041d8 <TIM_Base_SetConfig+0x130>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d023      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a31      	ldr	r2, [pc, #196]	@ (80041dc <TIM_Base_SetConfig+0x134>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01f      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a30      	ldr	r2, [pc, #192]	@ (80041e0 <TIM_Base_SetConfig+0x138>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01b      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2f      	ldr	r2, [pc, #188]	@ (80041e4 <TIM_Base_SetConfig+0x13c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d017      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <TIM_Base_SetConfig+0x140>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2d      	ldr	r2, [pc, #180]	@ (80041ec <TIM_Base_SetConfig+0x144>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00f      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2c      	ldr	r2, [pc, #176]	@ (80041f0 <TIM_Base_SetConfig+0x148>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00b      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2b      	ldr	r2, [pc, #172]	@ (80041f4 <TIM_Base_SetConfig+0x14c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2a      	ldr	r2, [pc, #168]	@ (80041f8 <TIM_Base_SetConfig+0x150>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a29      	ldr	r2, [pc, #164]	@ (80041fc <TIM_Base_SetConfig+0x154>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a10      	ldr	r2, [pc, #64]	@ (80041d4 <TIM_Base_SetConfig+0x12c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0xf8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <TIM_Base_SetConfig+0x13c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d103      	bne.n	80041a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]
  }
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800
 80041f4:	40001800 	.word	0x40001800
 80041f8:	40001c00 	.word	0x40001c00
 80041fc:	40002000 	.word	0x40002000

08004200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e042      	b.n	80042c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fa5e 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	@ 0x24
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800426a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f883 	bl	8004378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e04a      	b.n	8004370 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fa0e 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	@ 0x24
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800430a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f833 	bl	8004378 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004330:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0208 	orr.w	r2, r2, #8
 8004340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b0c0      	sub	sp, #256	@ 0x100
 800437e:	af00      	add	r7, sp, #0
 8004380:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	ea40 0301 	orr.w	r3, r0, r1
 80043a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043d0:	f021 010c 	bic.w	r1, r1, #12
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043de:	430b      	orrs	r3, r1
 80043e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	6999      	ldr	r1, [r3, #24]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	ea40 0301 	orr.w	r3, r0, r1
 80043fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b8f      	ldr	r3, [pc, #572]	@ (8004644 <UART_SetConfig+0x2cc>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d005      	beq.n	8004418 <UART_SetConfig+0xa0>
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b8d      	ldr	r3, [pc, #564]	@ (8004648 <UART_SetConfig+0x2d0>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d104      	bne.n	8004422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe ff50 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 800441c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004420:	e003      	b.n	800442a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7fe ff37 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8004426:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004434:	f040 810c 	bne.w	8004650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443c:	2200      	movs	r2, #0
 800443e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004442:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800444a:	4622      	mov	r2, r4
 800444c:	462b      	mov	r3, r5
 800444e:	1891      	adds	r1, r2, r2
 8004450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004452:	415b      	adcs	r3, r3
 8004454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800445a:	4621      	mov	r1, r4
 800445c:	eb12 0801 	adds.w	r8, r2, r1
 8004460:	4629      	mov	r1, r5
 8004462:	eb43 0901 	adc.w	r9, r3, r1
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	4623      	mov	r3, r4
 8004480:	eb18 0303 	adds.w	r3, r8, r3
 8004484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004488:	462b      	mov	r3, r5
 800448a:	eb49 0303 	adc.w	r3, r9, r3
 800448e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800449e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044a6:	460b      	mov	r3, r1
 80044a8:	18db      	adds	r3, r3, r3
 80044aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ac:	4613      	mov	r3, r2
 80044ae:	eb42 0303 	adc.w	r3, r2, r3
 80044b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044bc:	f7fc fb94 	bl	8000be8 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4b61      	ldr	r3, [pc, #388]	@ (800464c <UART_SetConfig+0x2d4>)
 80044c6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	011c      	lsls	r4, r3, #4
 80044ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044e8:	415b      	adcs	r3, r3
 80044ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044f0:	4641      	mov	r1, r8
 80044f2:	eb12 0a01 	adds.w	sl, r2, r1
 80044f6:	4649      	mov	r1, r9
 80044f8:	eb43 0b01 	adc.w	fp, r3, r1
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800450c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004510:	4692      	mov	sl, r2
 8004512:	469b      	mov	fp, r3
 8004514:	4643      	mov	r3, r8
 8004516:	eb1a 0303 	adds.w	r3, sl, r3
 800451a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800451e:	464b      	mov	r3, r9
 8004520:	eb4b 0303 	adc.w	r3, fp, r3
 8004524:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004534:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	643b      	str	r3, [r7, #64]	@ 0x40
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	647b      	str	r3, [r7, #68]	@ 0x44
 800454a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800454e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004552:	f7fc fb49 	bl	8000be8 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4611      	mov	r1, r2
 800455c:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <UART_SetConfig+0x2d4>)
 800455e:	fba3 2301 	umull	r2, r3, r3, r1
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2264      	movs	r2, #100	@ 0x64
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	1acb      	subs	r3, r1, r3
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004572:	4b36      	ldr	r3, [pc, #216]	@ (800464c <UART_SetConfig+0x2d4>)
 8004574:	fba3 2302 	umull	r2, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004580:	441c      	add	r4, r3
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800458c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	1891      	adds	r1, r2, r2
 800459a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800459c:	415b      	adcs	r3, r3
 800459e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045a4:	4641      	mov	r1, r8
 80045a6:	1851      	adds	r1, r2, r1
 80045a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80045aa:	4649      	mov	r1, r9
 80045ac:	414b      	adcs	r3, r1
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045bc:	4659      	mov	r1, fp
 80045be:	00cb      	lsls	r3, r1, #3
 80045c0:	4651      	mov	r1, sl
 80045c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c6:	4651      	mov	r1, sl
 80045c8:	00ca      	lsls	r2, r1, #3
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	4642      	mov	r2, r8
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045d8:	464b      	mov	r3, r9
 80045da:	460a      	mov	r2, r1
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045f8:	460b      	mov	r3, r1
 80045fa:	18db      	adds	r3, r3, r3
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045fe:	4613      	mov	r3, r2
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800460a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800460e:	f7fc faeb 	bl	8000be8 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <UART_SetConfig+0x2d4>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	@ 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	3332      	adds	r3, #50	@ 0x32
 800462a:	4a08      	ldr	r2, [pc, #32]	@ (800464c <UART_SetConfig+0x2d4>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	f003 0207 	and.w	r2, r3, #7
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4422      	add	r2, r4
 800463e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004640:	e106      	b.n	8004850 <UART_SetConfig+0x4d8>
 8004642:	bf00      	nop
 8004644:	40011000 	.word	0x40011000
 8004648:	40011400 	.word	0x40011400
 800464c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800465a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800465e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004662:	4642      	mov	r2, r8
 8004664:	464b      	mov	r3, r9
 8004666:	1891      	adds	r1, r2, r2
 8004668:	6239      	str	r1, [r7, #32]
 800466a:	415b      	adcs	r3, r3
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
 800466e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004672:	4641      	mov	r1, r8
 8004674:	1854      	adds	r4, r2, r1
 8004676:	4649      	mov	r1, r9
 8004678:	eb43 0501 	adc.w	r5, r3, r1
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	00eb      	lsls	r3, r5, #3
 8004686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468a:	00e2      	lsls	r2, r4, #3
 800468c:	4614      	mov	r4, r2
 800468e:	461d      	mov	r5, r3
 8004690:	4643      	mov	r3, r8
 8004692:	18e3      	adds	r3, r4, r3
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004698:	464b      	mov	r3, r9
 800469a:	eb45 0303 	adc.w	r3, r5, r3
 800469e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046be:	4629      	mov	r1, r5
 80046c0:	008b      	lsls	r3, r1, #2
 80046c2:	4621      	mov	r1, r4
 80046c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c8:	4621      	mov	r1, r4
 80046ca:	008a      	lsls	r2, r1, #2
 80046cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046d0:	f7fc fa8a 	bl	8000be8 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4b60      	ldr	r3, [pc, #384]	@ (800485c <UART_SetConfig+0x4e4>)
 80046da:	fba3 2302 	umull	r2, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	011c      	lsls	r4, r3, #4
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	61b9      	str	r1, [r7, #24]
 80046fc:	415b      	adcs	r3, r3
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6139      	str	r1, [r7, #16]
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004738:	464b      	mov	r3, r9
 800473a:	460a      	mov	r2, r1
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800474e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800475c:	4649      	mov	r1, r9
 800475e:	008b      	lsls	r3, r1, #2
 8004760:	4641      	mov	r1, r8
 8004762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004766:	4641      	mov	r1, r8
 8004768:	008a      	lsls	r2, r1, #2
 800476a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800476e:	f7fc fa3b 	bl	8000be8 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4611      	mov	r1, r2
 8004778:	4b38      	ldr	r3, [pc, #224]	@ (800485c <UART_SetConfig+0x4e4>)
 800477a:	fba3 2301 	umull	r2, r3, r3, r1
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2264      	movs	r2, #100	@ 0x64
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	1acb      	subs	r3, r1, r3
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	3332      	adds	r3, #50	@ 0x32
 800478c:	4a33      	ldr	r2, [pc, #204]	@ (800485c <UART_SetConfig+0x4e4>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004798:	441c      	add	r4, r3
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479e:	2200      	movs	r2, #0
 80047a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80047a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	1891      	adds	r1, r2, r2
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	415b      	adcs	r3, r3
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b8:	4641      	mov	r1, r8
 80047ba:	1851      	adds	r1, r2, r1
 80047bc:	6039      	str	r1, [r7, #0]
 80047be:	4649      	mov	r1, r9
 80047c0:	414b      	adcs	r3, r1
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047d0:	4659      	mov	r1, fp
 80047d2:	00cb      	lsls	r3, r1, #3
 80047d4:	4651      	mov	r1, sl
 80047d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047da:	4651      	mov	r1, sl
 80047dc:	00ca      	lsls	r2, r1, #3
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	4642      	mov	r2, r8
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ea:	464b      	mov	r3, r9
 80047ec:	460a      	mov	r2, r1
 80047ee:	eb42 0303 	adc.w	r3, r2, r3
 80047f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80047fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800480c:	4649      	mov	r1, r9
 800480e:	008b      	lsls	r3, r1, #2
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004816:	4641      	mov	r1, r8
 8004818:	008a      	lsls	r2, r1, #2
 800481a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800481e:	f7fc f9e3 	bl	8000be8 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <UART_SetConfig+0x4e4>)
 8004828:	fba3 1302 	umull	r1, r3, r3, r2
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	2164      	movs	r1, #100	@ 0x64
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	3332      	adds	r3, #50	@ 0x32
 800483a:	4a08      	ldr	r2, [pc, #32]	@ (800485c <UART_SetConfig+0x4e4>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f003 020f 	and.w	r2, r3, #15
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4422      	add	r2, r4
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004856:	46bd      	mov	sp, r7
 8004858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485c:	51eb851f 	.word	0x51eb851f

08004860 <__NVIC_SetPriority>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	6039      	str	r1, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db0a      	blt.n	800488a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	490c      	ldr	r1, [pc, #48]	@ (80048ac <__NVIC_SetPriority+0x4c>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	440b      	add	r3, r1
 8004884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004888:	e00a      	b.n	80048a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4908      	ldr	r1, [pc, #32]	@ (80048b0 <__NVIC_SetPriority+0x50>)
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	3b04      	subs	r3, #4
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	440b      	add	r3, r1
 800489e:	761a      	strb	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000e100 	.word	0xe000e100
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048b8:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <SysTick_Handler+0x1c>)
 80048ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048bc:	f001 fe4e 	bl	800655c <xTaskGetSchedulerState>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048c6:	f002 fc47 	bl	8007158 <xPortSysTickHandler>
  }
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000e010 	.word	0xe000e010

080048d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048d8:	2100      	movs	r1, #0
 80048da:	f06f 0004 	mvn.w	r0, #4
 80048de:	f7ff ffbf 	bl	8004860 <__NVIC_SetPriority>
#endif
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ee:	f3ef 8305 	mrs	r3, IPSR
 80048f2:	603b      	str	r3, [r7, #0]
  return(result);
 80048f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048fa:	f06f 0305 	mvn.w	r3, #5
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	e00c      	b.n	800491c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <osKernelInitialize+0x44>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800490a:	4b08      	ldr	r3, [pc, #32]	@ (800492c <osKernelInitialize+0x44>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004910:	2300      	movs	r3, #0
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e002      	b.n	800491c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800491c:	687b      	ldr	r3, [r7, #4]
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	2000032c 	.word	0x2000032c

08004930 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004936:	f3ef 8305 	mrs	r3, IPSR
 800493a:	603b      	str	r3, [r7, #0]
  return(result);
 800493c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004942:	f06f 0305 	mvn.w	r3, #5
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	e010      	b.n	800496c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <osKernelStart+0x48>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d109      	bne.n	8004966 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004952:	f7ff ffbf 	bl	80048d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <osKernelStart+0x48>)
 8004958:	2202      	movs	r2, #2
 800495a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800495c:	f001 f99a 	bl	8005c94 <vTaskStartScheduler>
      stat = osOK;
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	e002      	b.n	800496c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800496c:	687b      	ldr	r3, [r7, #4]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	2000032c 	.word	0x2000032c

0800497c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	@ 0x38
 8004980:	af04      	add	r7, sp, #16
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498c:	f3ef 8305 	mrs	r3, IPSR
 8004990:	617b      	str	r3, [r7, #20]
  return(result);
 8004992:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004994:	2b00      	cmp	r3, #0
 8004996:	d17e      	bne.n	8004a96 <osThreadNew+0x11a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d07b      	beq.n	8004a96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80049a2:	2318      	movs	r3, #24
 80049a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d045      	beq.n	8004a42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <osThreadNew+0x48>
        name = attr->name;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <osThreadNew+0x6e>
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b38      	cmp	r3, #56	@ 0x38
 80049dc:	d805      	bhi.n	80049ea <osThreadNew+0x6e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <osThreadNew+0x72>
        return (NULL);
 80049ea:	2300      	movs	r3, #0
 80049ec:	e054      	b.n	8004a98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <osThreadNew+0xa8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a0c:	d90a      	bls.n	8004a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <osThreadNew+0xa8>
        mem = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e010      	b.n	8004a46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10c      	bne.n	8004a46 <osThreadNew+0xca>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d108      	bne.n	8004a46 <osThreadNew+0xca>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <osThreadNew+0xca>
          mem = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e001      	b.n	8004a46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d110      	bne.n	8004a6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a54:	9202      	str	r2, [sp, #8]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fe46 	bl	80056f4 <xTaskCreateStatic>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e013      	b.n	8004a96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d110      	bne.n	8004a96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fe94 	bl	80057b4 <xTaskCreate>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <osThreadNew+0x11a>
            hTask = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a96:	693b      	ldr	r3, [r7, #16]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aac:	f3ef 8305 	mrs	r3, IPSR
 8004ab0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8004ab8:	f06f 0305 	mvn.w	r3, #5
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e017      	b.n	8004af0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8004ac6:	f06f 0303 	mvn.w	r3, #3
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e010      	b.n	8004af0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004ace:	6938      	ldr	r0, [r7, #16]
 8004ad0:	f001 f878 	bl	8005bc4 <eTaskGetState>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d005      	beq.n	8004aea <osThreadTerminate+0x4a>
      stat = osOK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8004ae2:	6938      	ldr	r0, [r7, #16]
 8004ae4:	f000 ffc4 	bl	8005a70 <vTaskDelete>
 8004ae8:	e002      	b.n	8004af0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8004aea:	f06f 0302 	mvn.w	r3, #2
 8004aee:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004af0:	697b      	ldr	r3, [r7, #20]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b02:	f3ef 8305 	mrs	r3, IPSR
 8004b06:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <osDelay+0x1c>
    stat = osErrorISR;
 8004b0e:	f06f 0305 	mvn.w	r3, #5
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e007      	b.n	8004b26 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f001 f819 	bl	8005b58 <vTaskDelay>
    }
  }

  return (stat);
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a07      	ldr	r2, [pc, #28]	@ (8004b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8004b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a06      	ldr	r2, [pc, #24]	@ (8004b60 <vApplicationGetIdleTaskMemory+0x30>)
 8004b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	@ 0x80
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000330 	.word	0x20000330
 8004b60:	200003d8 	.word	0x200003d8

08004b64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a07      	ldr	r2, [pc, #28]	@ (8004b90 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a06      	ldr	r2, [pc, #24]	@ (8004b94 <vApplicationGetTimerTaskMemory+0x30>)
 8004b7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	200005d8 	.word	0x200005d8
 8004b94:	20000680 	.word	0x20000680

08004b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0208 	add.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f103 0208 	add.w	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f103 0208 	add.w	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d103      	bne.n	8004c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e00c      	b.n	8004c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e002      	b.n	8004c68 <vListInsert+0x2e>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d2f6      	bcs.n	8004c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6852      	ldr	r2, [r2, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d103      	bne.n	8004ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d2c:	f002 f984 	bl	8007038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	441a      	add	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	22ff      	movs	r2, #255	@ 0xff
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22ff      	movs	r2, #255	@ 0xff
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d114      	bne.n	8004dac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01a      	beq.n	8004dc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3310      	adds	r3, #16
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fa1e 	bl	80061d0 <xTaskRemoveFromEventList>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d012      	beq.n	8004dc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd0 <xQueueGenericReset+0xd0>)
 8004d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	e009      	b.n	8004dc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3310      	adds	r3, #16
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fef1 	bl	8004b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3324      	adds	r3, #36	@ 0x24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff feec 	bl	8004b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dc0:	f002 f96c 	bl	800709c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dc4:	2301      	movs	r3, #1
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	@ 0x38
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <xQueueGenericCreateStatic+0x56>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <xQueueGenericCreateStatic+0x5a>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <xQueueGenericCreateStatic+0x5c>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	623b      	str	r3, [r7, #32]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <xQueueGenericCreateStatic+0x84>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <xQueueGenericCreateStatic+0x88>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <xQueueGenericCreateStatic+0x8a>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61fb      	str	r3, [r7, #28]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e7a:	2350      	movs	r3, #80	@ 0x50
 8004e7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b50      	cmp	r3, #80	@ 0x50
 8004e82:	d00b      	beq.n	8004e9c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	61bb      	str	r3, [r7, #24]
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	e7fd      	b.n	8004e98 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eb0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f805 	bl	8004ece <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3730      	adds	r7, #48	@ 0x30
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e002      	b.n	8004ef0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004efc:	2101      	movs	r1, #1
 8004efe:	69b8      	ldr	r0, [r7, #24]
 8004f00:	f7ff fefe 	bl	8004d00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	@ 0x38
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f22:	2300      	movs	r3, #0
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <xQueueGenericSend+0x34>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <xQueueGenericSend+0x42>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <xQueueGenericSend+0x46>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <xQueueGenericSend+0x48>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <xQueueGenericSend+0x64>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d103      	bne.n	8004f86 <xQueueGenericSend+0x72>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <xQueueGenericSend+0x76>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueGenericSend+0x78>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <xQueueGenericSend+0x94>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	623b      	str	r3, [r7, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fa8:	f001 fad8 	bl	800655c <xTaskGetSchedulerState>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <xQueueGenericSend+0xa4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <xQueueGenericSend+0xa8>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <xQueueGenericSend+0xaa>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <xQueueGenericSend+0xc6>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	61fb      	str	r3, [r7, #28]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fda:	f002 f82d 	bl	8007038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <xQueueGenericSend+0xdc>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d129      	bne.n	8005044 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ff6:	f000 fa0f 	bl	8005418 <prvCopyDataToQueue>
 8004ffa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	3324      	adds	r3, #36	@ 0x24
 8005008:	4618      	mov	r0, r3
 800500a:	f001 f8e1 	bl	80061d0 <xTaskRemoveFromEventList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d013      	beq.n	800503c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005014:	4b3f      	ldr	r3, [pc, #252]	@ (8005114 <xQueueGenericSend+0x200>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	e00a      	b.n	800503c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800502c:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <xQueueGenericSend+0x200>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800503c:	f002 f82e 	bl	800709c <vPortExitCritical>
				return pdPASS;
 8005040:	2301      	movs	r3, #1
 8005042:	e063      	b.n	800510c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800504a:	f002 f827 	bl	800709c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800504e:	2300      	movs	r3, #0
 8005050:	e05c      	b.n	800510c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f91b 	bl	8006298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005062:	2301      	movs	r3, #1
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005066:	f002 f819 	bl	800709c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800506a:	f000 fe83 	bl	8005d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800506e:	f001 ffe3 	bl	8007038 <vPortEnterCritical>
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005078:	b25b      	sxtb	r3, r3
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d103      	bne.n	8005088 <xQueueGenericSend+0x174>
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800508e:	b25b      	sxtb	r3, r3
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d103      	bne.n	800509e <xQueueGenericSend+0x18a>
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800509e:	f001 fffd 	bl	800709c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050a2:	1d3a      	adds	r2, r7, #4
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 f90a 	bl	80062c4 <xTaskCheckForTimeOut>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d124      	bne.n	8005100 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b8:	f000 faa6 	bl	8005608 <prvIsQueueFull>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	3310      	adds	r3, #16
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f82e 	bl	800612c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050d2:	f000 fa31 	bl	8005538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050d6:	f000 fe5b 	bl	8005d90 <xTaskResumeAll>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f af7c 	bne.w	8004fda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80050e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <xQueueGenericSend+0x200>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	e772      	b.n	8004fda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050f6:	f000 fa1f 	bl	8005538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050fa:	f000 fe49 	bl	8005d90 <xTaskResumeAll>
 80050fe:	e76c      	b.n	8004fda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005102:	f000 fa19 	bl	8005538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005106:	f000 fe43 	bl	8005d90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800510a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800510c:	4618      	mov	r0, r3
 800510e:	3738      	adds	r7, #56	@ 0x38
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b090      	sub	sp, #64	@ 0x40
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <xQueueGenericSendFromISR+0x3e>
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <xQueueGenericSendFromISR+0x42>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueGenericSendFromISR+0x44>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	e7fd      	b.n	8005174 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d103      	bne.n	8005186 <xQueueGenericSendFromISR+0x6e>
 800517e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <xQueueGenericSendFromISR+0x72>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xQueueGenericSendFromISR+0x74>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051a8:	f002 f826 	bl	80071f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051ac:	f3ef 8211 	mrs	r2, BASEPRI
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61fa      	str	r2, [r7, #28]
 80051c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <xQueueGenericSendFromISR+0xc2>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d12f      	bne.n	800523a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80051f0:	f000 f912 	bl	8005418 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d112      	bne.n	8005224 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	3324      	adds	r3, #36	@ 0x24
 800520a:	4618      	mov	r0, r3
 800520c:	f000 ffe0 	bl	80061d0 <xTaskRemoveFromEventList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e007      	b.n	8005234 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005224:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005228:	3301      	adds	r3, #1
 800522a:	b2db      	uxtb	r3, r3
 800522c:	b25a      	sxtb	r2, r3
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005234:	2301      	movs	r3, #1
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005238:	e001      	b.n	800523e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800523a:	2300      	movs	r3, #0
 800523c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005240:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005248:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800524a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800524c:	4618      	mov	r0, r3
 800524e:	3740      	adds	r7, #64	@ 0x40
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	@ 0x30
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <xQueueReceive+0x32>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	623b      	str	r3, [r7, #32]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <xQueueReceive+0x40>
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <xQueueReceive+0x44>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <xQueueReceive+0x46>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <xQueueReceive+0x62>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	61fb      	str	r3, [r7, #28]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052b6:	f001 f951 	bl	800655c <xTaskGetSchedulerState>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <xQueueReceive+0x72>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <xQueueReceive+0x76>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <xQueueReceive+0x78>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <xQueueReceive+0x94>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	61bb      	str	r3, [r7, #24]
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052e8:	f001 fea6 	bl	8007038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01f      	beq.n	8005338 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fc:	f000 f8f6 	bl	80054ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005306:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00f      	beq.n	8005330 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	3310      	adds	r3, #16
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ff5b 	bl	80061d0 <xTaskRemoveFromEventList>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005320:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <xQueueReceive+0x1c0>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005330:	f001 feb4 	bl	800709c <vPortExitCritical>
				return pdPASS;
 8005334:	2301      	movs	r3, #1
 8005336:	e069      	b.n	800540c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800533e:	f001 fead 	bl	800709c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005342:	2300      	movs	r3, #0
 8005344:	e062      	b.n	800540c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	4618      	mov	r0, r3
 8005352:	f000 ffa1 	bl	8006298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800535a:	f001 fe9f 	bl	800709c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800535e:	f000 fd09 	bl	8005d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005362:	f001 fe69 	bl	8007038 <vPortEnterCritical>
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800536c:	b25b      	sxtb	r3, r3
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d103      	bne.n	800537c <xQueueReceive+0x128>
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005382:	b25b      	sxtb	r3, r3
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d103      	bne.n	8005392 <xQueueReceive+0x13e>
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005392:	f001 fe83 	bl	800709c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005396:	1d3a      	adds	r2, r7, #4
 8005398:	f107 0310 	add.w	r3, r7, #16
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 ff90 	bl	80062c4 <xTaskCheckForTimeOut>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d123      	bne.n	80053f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ac:	f000 f916 	bl	80055dc <prvIsQueueEmpty>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d017      	beq.n	80053e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	3324      	adds	r3, #36	@ 0x24
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 feb4 	bl	800612c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c6:	f000 f8b7 	bl	8005538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053ca:	f000 fce1 	bl	8005d90 <xTaskResumeAll>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d189      	bne.n	80052e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <xQueueReceive+0x1c0>)
 80053d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	e780      	b.n	80052e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053e8:	f000 f8a6 	bl	8005538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ec:	f000 fcd0 	bl	8005d90 <xTaskResumeAll>
 80053f0:	e77a      	b.n	80052e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053f4:	f000 f8a0 	bl	8005538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053f8:	f000 fcca 	bl	8005d90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fe:	f000 f8ed 	bl	80055dc <prvIsQueueEmpty>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	f43f af6f 	beq.w	80052e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800540a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800540c:	4618      	mov	r0, r3
 800540e:	3730      	adds	r7, #48	@ 0x30
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10d      	bne.n	8005452 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d14d      	bne.n	80054da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f001 f8a8 	bl	8006598 <xTaskPriorityDisinherit>
 8005448:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e043      	b.n	80054da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d119      	bne.n	800548c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6858      	ldr	r0, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	461a      	mov	r2, r3
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	f003 f835 	bl	80084d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d32b      	bcc.n	80054da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e026      	b.n	80054da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68d8      	ldr	r0, [r3, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	461a      	mov	r2, r3
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	f003 f81b 	bl	80084d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	425b      	negs	r3, r3
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d207      	bcs.n	80054c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	425b      	negs	r3, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d105      	bne.n	80054da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80054e2:	697b      	ldr	r3, [r7, #20]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	441a      	add	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d303      	bcc.n	8005520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68d9      	ldr	r1, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	461a      	mov	r2, r3
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	f002 ffd1 	bl	80084d2 <memcpy>
	}
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005540:	f001 fd7a 	bl	8007038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800554c:	e011      	b.n	8005572 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3324      	adds	r3, #36	@ 0x24
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fe38 	bl	80061d0 <xTaskRemoveFromEventList>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005566:	f000 ff11 	bl	800638c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	3b01      	subs	r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	dce9      	bgt.n	800554e <prvUnlockQueue+0x16>
 800557a:	e000      	b.n	800557e <prvUnlockQueue+0x46>
					break;
 800557c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	22ff      	movs	r2, #255	@ 0xff
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005586:	f001 fd89 	bl	800709c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800558a:	f001 fd55 	bl	8007038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005596:	e011      	b.n	80055bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d012      	beq.n	80055c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3310      	adds	r3, #16
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fe13 	bl	80061d0 <xTaskRemoveFromEventList>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055b0:	f000 feec 	bl	800638c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055b4:	7bbb      	ldrb	r3, [r7, #14]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dce9      	bgt.n	8005598 <prvUnlockQueue+0x60>
 80055c4:	e000      	b.n	80055c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	22ff      	movs	r2, #255	@ 0xff
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80055d0:	f001 fd64 	bl	800709c <vPortExitCritical>
}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055e4:	f001 fd28 	bl	8007038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e001      	b.n	80055fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f001 fd4f 	bl	800709c <vPortExitCritical>

	return xReturn;
 80055fe:	68fb      	ldr	r3, [r7, #12]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005610:	f001 fd12 	bl	8007038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	429a      	cmp	r2, r3
 800561e:	d102      	bne.n	8005626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005620:	2301      	movs	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e001      	b.n	800562a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800562a:	f001 fd37 	bl	800709c <vPortExitCritical>

	return xReturn;
 800562e:	68fb      	ldr	r3, [r7, #12]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e014      	b.n	8005672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005648:	4a0f      	ldr	r2, [pc, #60]	@ (8005688 <vQueueAddToRegistry+0x50>)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10b      	bne.n	800566c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005654:	490c      	ldr	r1, [pc, #48]	@ (8005688 <vQueueAddToRegistry+0x50>)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800565e:	4a0a      	ldr	r2, [pc, #40]	@ (8005688 <vQueueAddToRegistry+0x50>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800566a:	e006      	b.n	800567a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b07      	cmp	r3, #7
 8005676:	d9e7      	bls.n	8005648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000a80 	.word	0x20000a80

0800568c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800569c:	f001 fccc 	bl	8007038 <vPortEnterCritical>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056a6:	b25b      	sxtb	r3, r3
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d103      	bne.n	80056b6 <vQueueWaitForMessageRestricted+0x2a>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d103      	bne.n	80056cc <vQueueWaitForMessageRestricted+0x40>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056cc:	f001 fce6 	bl	800709c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3324      	adds	r3, #36	@ 0x24
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd49 	bl	8006178 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056e6:	6978      	ldr	r0, [r7, #20]
 80056e8:	f7ff ff26 	bl	8005538 <prvUnlockQueue>
	}
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	@ 0x38
 80056f8:	af04      	add	r7, sp, #16
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	623b      	str	r3, [r7, #32]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	61fb      	str	r3, [r7, #28]
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800573e:	23a8      	movs	r3, #168	@ 0xa8
 8005740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2ba8      	cmp	r3, #168	@ 0xa8
 8005746:	d00b      	beq.n	8005760 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61bb      	str	r3, [r7, #24]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005760:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01e      	beq.n	80057a6 <xTaskCreateStatic+0xb2>
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01b      	beq.n	80057a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	2202      	movs	r2, #2
 800577c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005780:	2300      	movs	r3, #0
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	f107 0314 	add.w	r3, r7, #20
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f851 	bl	8005840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057a0:	f000 f8f6 	bl	8005990 <prvAddNewTaskToReadyList>
 80057a4:	e001      	b.n	80057aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057aa:	697b      	ldr	r3, [r7, #20]
	}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	@ 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08c      	sub	sp, #48	@ 0x30
 80057b8:	af04      	add	r7, sp, #16
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 fd57 	bl	800727c <pvPortMalloc>
 80057ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00e      	beq.n	80057f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057d6:	20a8      	movs	r0, #168	@ 0xa8
 80057d8:	f001 fd50 	bl	800727c <pvPortMalloc>
 80057dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80057ea:	e005      	b.n	80057f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ec:	6978      	ldr	r0, [r7, #20]
 80057ee:	f001 fe13 	bl	8007418 <vPortFree>
 80057f2:	e001      	b.n	80057f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	2300      	movs	r3, #0
 800580a:	9303      	str	r3, [sp, #12]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	9302      	str	r3, [sp, #8]
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f80f 	bl	8005840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005822:	69f8      	ldr	r0, [r7, #28]
 8005824:	f000 f8b4 	bl	8005990 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005828:	2301      	movs	r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e002      	b.n	8005834 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005834:	69bb      	ldr	r3, [r7, #24]
	}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	461a      	mov	r2, r3
 8005858:	21a5      	movs	r1, #165	@ 0xa5
 800585a:	f002 fd5d 	bl	8008318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005868:	3b01      	subs	r3, #1
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f023 0307 	bic.w	r3, r3, #7
 8005876:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	617b      	str	r3, [r7, #20]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01f      	beq.n	80058e0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e012      	b.n	80058cc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	7819      	ldrb	r1, [r3, #0]
 80058ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	3334      	adds	r3, #52	@ 0x34
 80058b6:	460a      	mov	r2, r1
 80058b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d9e9      	bls.n	80058a6 <prvInitialiseNewTask+0x66>
 80058d2:	e000      	b.n	80058d6 <prvInitialiseNewTask+0x96>
			{
				break;
 80058d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058de:	e003      	b.n	80058e8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	2b37      	cmp	r3, #55	@ 0x37
 80058ec:	d901      	bls.n	80058f2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058ee:	2337      	movs	r3, #55	@ 0x37
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	2200      	movs	r2, #0
 8005902:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005906:	3304      	adds	r3, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff f965 	bl	8004bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	3318      	adds	r3, #24
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff f960 	bl	8004bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	2200      	movs	r2, #0
 800593a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	3354      	adds	r3, #84	@ 0x54
 8005942:	224c      	movs	r2, #76	@ 0x4c
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f002 fce6 	bl	8008318 <memset>
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	4a0d      	ldr	r2, [pc, #52]	@ (8005984 <prvInitialiseNewTask+0x144>)
 8005950:	659a      	str	r2, [r3, #88]	@ 0x58
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	4a0c      	ldr	r2, [pc, #48]	@ (8005988 <prvInitialiseNewTask+0x148>)
 8005956:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	4a0c      	ldr	r2, [pc, #48]	@ (800598c <prvInitialiseNewTask+0x14c>)
 800595c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	69b8      	ldr	r0, [r7, #24]
 8005964:	f001 fa36 	bl	8006dd4 <pxPortInitialiseStack>
 8005968:	4602      	mov	r2, r0
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800597a:	bf00      	nop
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20004d14 	.word	0x20004d14
 8005988:	20004d7c 	.word	0x20004d7c
 800598c:	20004de4 	.word	0x20004de4

08005990 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005998:	f001 fb4e 	bl	8007038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800599c:	4b2d      	ldr	r3, [pc, #180]	@ (8005a54 <prvAddNewTaskToReadyList+0xc4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <prvAddNewTaskToReadyList+0xc4>)
 80059a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a58 <prvAddNewTaskToReadyList+0xc8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005a58 <prvAddNewTaskToReadyList+0xc8>)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059b4:	4b27      	ldr	r3, [pc, #156]	@ (8005a54 <prvAddNewTaskToReadyList+0xc4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d110      	bne.n	80059de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059bc:	f000 fd0a 	bl	80063d4 <prvInitialiseTaskLists>
 80059c0:	e00d      	b.n	80059de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059c2:	4b26      	ldr	r3, [pc, #152]	@ (8005a5c <prvAddNewTaskToReadyList+0xcc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ca:	4b23      	ldr	r3, [pc, #140]	@ (8005a58 <prvAddNewTaskToReadyList+0xc8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d802      	bhi.n	80059de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a58 <prvAddNewTaskToReadyList+0xc8>)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059de:	4b20      	ldr	r3, [pc, #128]	@ (8005a60 <prvAddNewTaskToReadyList+0xd0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <prvAddNewTaskToReadyList+0xd0>)
 80059e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a60 <prvAddNewTaskToReadyList+0xd0>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a64 <prvAddNewTaskToReadyList+0xd4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d903      	bls.n	8005a04 <prvAddNewTaskToReadyList+0x74>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	4a18      	ldr	r2, [pc, #96]	@ (8005a64 <prvAddNewTaskToReadyList+0xd4>)
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <prvAddNewTaskToReadyList+0xd8>)
 8005a12:	441a      	add	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7ff f8e9 	bl	8004bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a20:	f001 fb3c 	bl	800709c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a24:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <prvAddNewTaskToReadyList+0xcc>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00e      	beq.n	8005a4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <prvAddNewTaskToReadyList+0xc8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d207      	bcs.n	8005a4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a6c <prvAddNewTaskToReadyList+0xdc>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000f94 	.word	0x20000f94
 8005a58:	20000ac0 	.word	0x20000ac0
 8005a5c:	20000fa0 	.word	0x20000fa0
 8005a60:	20000fb0 	.word	0x20000fb0
 8005a64:	20000f9c 	.word	0x20000f9c
 8005a68:	20000ac4 	.word	0x20000ac4
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005a78:	f001 fade 	bl	8007038 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <vTaskDelete+0x18>
 8005a82:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <vTaskDelete+0xc8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	e000      	b.n	8005a8a <vTaskDelete+0x1a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff f90b 	bl	8004cac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3318      	adds	r3, #24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff f902 	bl	8004cac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005aa8:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <vTaskDelete+0xcc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a23      	ldr	r2, [pc, #140]	@ (8005b3c <vTaskDelete+0xcc>)
 8005ab0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005ab2:	4b21      	ldr	r3, [pc, #132]	@ (8005b38 <vTaskDelete+0xc8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10b      	bne.n	8005ad4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	481f      	ldr	r0, [pc, #124]	@ (8005b40 <vTaskDelete+0xd0>)
 8005ac4:	f7ff f895 	bl	8004bf2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b44 <vTaskDelete+0xd4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	4a1d      	ldr	r2, [pc, #116]	@ (8005b44 <vTaskDelete+0xd4>)
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e009      	b.n	8005ae8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b48 <vTaskDelete+0xd8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <vTaskDelete+0xd8>)
 8005adc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fce6 	bl	80064b0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005ae4:	f000 fd1a 	bl	800651c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005ae8:	f001 fad8 	bl	800709c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005aec:	4b17      	ldr	r3, [pc, #92]	@ (8005b4c <vTaskDelete+0xdc>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01c      	beq.n	8005b2e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8005af4:	4b10      	ldr	r3, [pc, #64]	@ (8005b38 <vTaskDelete+0xc8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d117      	bne.n	8005b2e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005afe:	4b14      	ldr	r3, [pc, #80]	@ (8005b50 <vTaskDelete+0xe0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <vTaskDelete+0xae>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60bb      	str	r3, [r7, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <vTaskDelete+0xe4>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000ac0 	.word	0x20000ac0
 8005b3c:	20000fb0 	.word	0x20000fb0
 8005b40:	20000f68 	.word	0x20000f68
 8005b44:	20000f7c 	.word	0x20000f7c
 8005b48:	20000f94 	.word	0x20000f94
 8005b4c:	20000fa0 	.word	0x20000fa0
 8005b50:	20000fbc 	.word	0x20000fbc
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b6a:	4b14      	ldr	r3, [pc, #80]	@ (8005bbc <vTaskDelay+0x64>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <vTaskDelay+0x32>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60bb      	str	r3, [r7, #8]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b8a:	f000 f8f3 	bl	8005d74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b8e:	2100      	movs	r1, #0
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fd71 	bl	8006678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b96:	f000 f8fb 	bl	8005d90 <xTaskResumeAll>
 8005b9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d107      	bne.n	8005bb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005ba2:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <vTaskDelay+0x68>)
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000fbc 	.word	0x20000fbc
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <eTaskGetState+0x2a>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60bb      	str	r3, [r7, #8]
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	e7fd      	b.n	8005bea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005bee:	4b24      	ldr	r3, [pc, #144]	@ (8005c80 <eTaskGetState+0xbc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d102      	bne.n	8005bfe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e03a      	b.n	8005c74 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8005bfe:	f001 fa1b 	bl	8007038 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8005c08:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <eTaskGetState+0xc0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c88 <eTaskGetState+0xc4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005c14:	f001 fa42 	bl	800709c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d003      	beq.n	8005c28 <eTaskGetState+0x64>
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d102      	bne.n	8005c2e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e022      	b.n	8005c74 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4a16      	ldr	r2, [pc, #88]	@ (8005c8c <eTaskGetState+0xc8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d112      	bne.n	8005c5c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d102      	bne.n	8005c50 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e011      	b.n	8005c74 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8005c50:	2303      	movs	r3, #3
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e00e      	b.n	8005c74 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005c56:	2302      	movs	r3, #2
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e00b      	b.n	8005c74 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c90 <eTaskGetState+0xcc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d002      	beq.n	8005c6a <eTaskGetState+0xa6>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e001      	b.n	8005c74 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005c70:	2301      	movs	r3, #1
 8005c72:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000ac0 	.word	0x20000ac0
 8005c84:	20000f4c 	.word	0x20000f4c
 8005c88:	20000f50 	.word	0x20000f50
 8005c8c:	20000f80 	.word	0x20000f80
 8005c90:	20000f68 	.word	0x20000f68

08005c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	@ 0x28
 8005c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	1d39      	adds	r1, r7, #4
 8005ca6:	f107 0308 	add.w	r3, r7, #8
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe ff40 	bl	8004b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	9202      	str	r2, [sp, #8]
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	4924      	ldr	r1, [pc, #144]	@ (8005d54 <vTaskStartScheduler+0xc0>)
 8005cc4:	4824      	ldr	r0, [pc, #144]	@ (8005d58 <vTaskStartScheduler+0xc4>)
 8005cc6:	f7ff fd15 	bl	80056f4 <xTaskCreateStatic>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4a23      	ldr	r2, [pc, #140]	@ (8005d5c <vTaskStartScheduler+0xc8>)
 8005cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cd0:	4b22      	ldr	r3, [pc, #136]	@ (8005d5c <vTaskStartScheduler+0xc8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e001      	b.n	8005ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ce8:	f000 fd1a 	bl	8006720 <xTimerCreateTimerTask>
 8005cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d11b      	bne.n	8005d2c <vTaskStartScheduler+0x98>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
}
 8005d06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d08:	4b15      	ldr	r3, [pc, #84]	@ (8005d60 <vTaskStartScheduler+0xcc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3354      	adds	r3, #84	@ 0x54
 8005d0e:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <vTaskStartScheduler+0xd0>)
 8005d10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <vTaskStartScheduler+0xd4>)
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d1a:	4b14      	ldr	r3, [pc, #80]	@ (8005d6c <vTaskStartScheduler+0xd8>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d20:	4b13      	ldr	r3, [pc, #76]	@ (8005d70 <vTaskStartScheduler+0xdc>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d26:	f001 f8e3 	bl	8006ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d2a:	e00f      	b.n	8005d4c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d10b      	bne.n	8005d4c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60fb      	str	r3, [r7, #12]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <vTaskStartScheduler+0xb4>
}
 8005d4c:	bf00      	nop
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	0800a1bc 	.word	0x0800a1bc
 8005d58:	080063a5 	.word	0x080063a5
 8005d5c:	20000fb8 	.word	0x20000fb8
 8005d60:	20000ac0 	.word	0x20000ac0
 8005d64:	2000001c 	.word	0x2000001c
 8005d68:	20000fb4 	.word	0x20000fb4
 8005d6c:	20000fa0 	.word	0x20000fa0
 8005d70:	20000f98 	.word	0x20000f98

08005d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d78:	4b04      	ldr	r3, [pc, #16]	@ (8005d8c <vTaskSuspendAll+0x18>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a03      	ldr	r2, [pc, #12]	@ (8005d8c <vTaskSuspendAll+0x18>)
 8005d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000fbc 	.word	0x20000fbc

08005d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ea8 <xTaskResumeAll+0x118>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <xTaskResumeAll+0x2e>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	603b      	str	r3, [r7, #0]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dbe:	f001 f93b 	bl	8007038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dc2:	4b39      	ldr	r3, [pc, #228]	@ (8005ea8 <xTaskResumeAll+0x118>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	4a37      	ldr	r2, [pc, #220]	@ (8005ea8 <xTaskResumeAll+0x118>)
 8005dca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dcc:	4b36      	ldr	r3, [pc, #216]	@ (8005ea8 <xTaskResumeAll+0x118>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d162      	bne.n	8005e9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dd4:	4b35      	ldr	r3, [pc, #212]	@ (8005eac <xTaskResumeAll+0x11c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d05e      	beq.n	8005e9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ddc:	e02f      	b.n	8005e3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dde:	4b34      	ldr	r3, [pc, #208]	@ (8005eb0 <xTaskResumeAll+0x120>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3318      	adds	r3, #24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe ff5e 	bl	8004cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe ff59 	bl	8004cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb4 <xTaskResumeAll+0x124>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d903      	bls.n	8005e0e <xTaskResumeAll+0x7e>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb4 <xTaskResumeAll+0x124>)
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4a27      	ldr	r2, [pc, #156]	@ (8005eb8 <xTaskResumeAll+0x128>)
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f7fe fee4 	bl	8004bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2e:	4b23      	ldr	r3, [pc, #140]	@ (8005ebc <xTaskResumeAll+0x12c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d302      	bcc.n	8005e3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e38:	4b21      	ldr	r3, [pc, #132]	@ (8005ec0 <xTaskResumeAll+0x130>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb0 <xTaskResumeAll+0x120>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1cb      	bne.n	8005dde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e4c:	f000 fb66 	bl	800651c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e50:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec4 <xTaskResumeAll+0x134>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d010      	beq.n	8005e7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e5c:	f000 f846 	bl	8005eec <xTaskIncrementTick>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e66:	4b16      	ldr	r3, [pc, #88]	@ (8005ec0 <xTaskResumeAll+0x130>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f1      	bne.n	8005e5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e78:	4b12      	ldr	r3, [pc, #72]	@ (8005ec4 <xTaskResumeAll+0x134>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <xTaskResumeAll+0x130>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e86:	2301      	movs	r3, #1
 8005e88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec8 <xTaskResumeAll+0x138>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e9a:	f001 f8ff 	bl	800709c <vPortExitCritical>

	return xAlreadyYielded;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000fbc 	.word	0x20000fbc
 8005eac:	20000f94 	.word	0x20000f94
 8005eb0:	20000f54 	.word	0x20000f54
 8005eb4:	20000f9c 	.word	0x20000f9c
 8005eb8:	20000ac4 	.word	0x20000ac4
 8005ebc:	20000ac0 	.word	0x20000ac0
 8005ec0:	20000fa8 	.word	0x20000fa8
 8005ec4:	20000fa4 	.word	0x20000fa4
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ed2:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <xTaskGetTickCount+0x1c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ed8:	687b      	ldr	r3, [r7, #4]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000f98 	.word	0x20000f98

08005eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8006034 <xTaskIncrementTick+0x148>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 8090 	bne.w	8006020 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f00:	4b4d      	ldr	r3, [pc, #308]	@ (8006038 <xTaskIncrementTick+0x14c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f08:	4a4b      	ldr	r2, [pc, #300]	@ (8006038 <xTaskIncrementTick+0x14c>)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d121      	bne.n	8005f58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f14:	4b49      	ldr	r3, [pc, #292]	@ (800603c <xTaskIncrementTick+0x150>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	603b      	str	r3, [r7, #0]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <xTaskIncrementTick+0x46>
 8005f36:	4b41      	ldr	r3, [pc, #260]	@ (800603c <xTaskIncrementTick+0x150>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	4b40      	ldr	r3, [pc, #256]	@ (8006040 <xTaskIncrementTick+0x154>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a3e      	ldr	r2, [pc, #248]	@ (800603c <xTaskIncrementTick+0x150>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	4a3e      	ldr	r2, [pc, #248]	@ (8006040 <xTaskIncrementTick+0x154>)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8006044 <xTaskIncrementTick+0x158>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	4a3c      	ldr	r2, [pc, #240]	@ (8006044 <xTaskIncrementTick+0x158>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	f000 fae2 	bl	800651c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f58:	4b3b      	ldr	r3, [pc, #236]	@ (8006048 <xTaskIncrementTick+0x15c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d349      	bcc.n	8005ff6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f62:	4b36      	ldr	r3, [pc, #216]	@ (800603c <xTaskIncrementTick+0x150>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6c:	4b36      	ldr	r3, [pc, #216]	@ (8006048 <xTaskIncrementTick+0x15c>)
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f72:	601a      	str	r2, [r3, #0]
					break;
 8005f74:	e03f      	b.n	8005ff6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f76:	4b31      	ldr	r3, [pc, #196]	@ (800603c <xTaskIncrementTick+0x150>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d203      	bcs.n	8005f96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8006048 <xTaskIncrementTick+0x15c>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f94:	e02f      	b.n	8005ff6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fe86 	bl	8004cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	3318      	adds	r3, #24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe fe7d 	bl	8004cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	4b25      	ldr	r3, [pc, #148]	@ (800604c <xTaskIncrementTick+0x160>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d903      	bls.n	8005fc6 <xTaskIncrementTick+0xda>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	4a22      	ldr	r2, [pc, #136]	@ (800604c <xTaskIncrementTick+0x160>)
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006050 <xTaskIncrementTick+0x164>)
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f7fe fe08 	bl	8004bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8006054 <xTaskIncrementTick+0x168>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d3b8      	bcc.n	8005f62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ff4:	e7b5      	b.n	8005f62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ff6:	4b17      	ldr	r3, [pc, #92]	@ (8006054 <xTaskIncrementTick+0x168>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffc:	4914      	ldr	r1, [pc, #80]	@ (8006050 <xTaskIncrementTick+0x164>)
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d901      	bls.n	8006012 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006012:	4b11      	ldr	r3, [pc, #68]	@ (8006058 <xTaskIncrementTick+0x16c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e004      	b.n	800602a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006020:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <xTaskIncrementTick+0x170>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	4a0d      	ldr	r2, [pc, #52]	@ (800605c <xTaskIncrementTick+0x170>)
 8006028:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000fbc 	.word	0x20000fbc
 8006038:	20000f98 	.word	0x20000f98
 800603c:	20000f4c 	.word	0x20000f4c
 8006040:	20000f50 	.word	0x20000f50
 8006044:	20000fac 	.word	0x20000fac
 8006048:	20000fb4 	.word	0x20000fb4
 800604c:	20000f9c 	.word	0x20000f9c
 8006050:	20000ac4 	.word	0x20000ac4
 8006054:	20000ac0 	.word	0x20000ac0
 8006058:	20000fa8 	.word	0x20000fa8
 800605c:	20000fa4 	.word	0x20000fa4

08006060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006066:	4b2b      	ldr	r3, [pc, #172]	@ (8006114 <vTaskSwitchContext+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800606e:	4b2a      	ldr	r3, [pc, #168]	@ (8006118 <vTaskSwitchContext+0xb8>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006074:	e047      	b.n	8006106 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006076:	4b28      	ldr	r3, [pc, #160]	@ (8006118 <vTaskSwitchContext+0xb8>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607c:	4b27      	ldr	r3, [pc, #156]	@ (800611c <vTaskSwitchContext+0xbc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e011      	b.n	80060a8 <vTaskSwitchContext+0x48>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <vTaskSwitchContext+0x3e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	491d      	ldr	r1, [pc, #116]	@ (8006120 <vTaskSwitchContext+0xc0>)
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0e3      	beq.n	8006084 <vTaskSwitchContext+0x24>
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a16      	ldr	r2, [pc, #88]	@ (8006120 <vTaskSwitchContext+0xc0>)
 80060c8:	4413      	add	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	3308      	adds	r3, #8
 80060de:	429a      	cmp	r2, r3
 80060e0:	d104      	bne.n	80060ec <vTaskSwitchContext+0x8c>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <vTaskSwitchContext+0xc4>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4a09      	ldr	r2, [pc, #36]	@ (800611c <vTaskSwitchContext+0xbc>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060fc:	4b09      	ldr	r3, [pc, #36]	@ (8006124 <vTaskSwitchContext+0xc4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3354      	adds	r3, #84	@ 0x54
 8006102:	4a09      	ldr	r2, [pc, #36]	@ (8006128 <vTaskSwitchContext+0xc8>)
 8006104:	6013      	str	r3, [r2, #0]
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000fbc 	.word	0x20000fbc
 8006118:	20000fa8 	.word	0x20000fa8
 800611c:	20000f9c 	.word	0x20000f9c
 8006120:	20000ac4 	.word	0x20000ac4
 8006124:	20000ac0 	.word	0x20000ac0
 8006128:	2000001c 	.word	0x2000001c

0800612c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006154:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <vTaskPlaceOnEventList+0x48>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3318      	adds	r3, #24
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fe fd6c 	bl	8004c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006162:	2101      	movs	r1, #1
 8006164:	6838      	ldr	r0, [r7, #0]
 8006166:	f000 fa87 	bl	8006678 <prvAddCurrentTaskToDelayedList>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000ac0 	.word	0x20000ac0

08006178 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	617b      	str	r3, [r7, #20]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061a2:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <vTaskPlaceOnEventListRestricted+0x54>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3318      	adds	r3, #24
 80061a8:	4619      	mov	r1, r3
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7fe fd21 	bl	8004bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f000 fa5a 	bl	8006678 <prvAddCurrentTaskToDelayedList>
	}
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000ac0 	.word	0x20000ac0

080061d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60fb      	str	r3, [r7, #12]
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3318      	adds	r3, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fd52 	bl	8004cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006208:	4b1d      	ldr	r3, [pc, #116]	@ (8006280 <xTaskRemoveFromEventList+0xb0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11d      	bne.n	800624c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe fd49 	bl	8004cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621e:	4b19      	ldr	r3, [pc, #100]	@ (8006284 <xTaskRemoveFromEventList+0xb4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d903      	bls.n	800622e <xTaskRemoveFromEventList+0x5e>
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <xTaskRemoveFromEventList+0xb4>)
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4a13      	ldr	r2, [pc, #76]	@ (8006288 <xTaskRemoveFromEventList+0xb8>)
 800623c:	441a      	add	r2, r3
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fe fcd4 	bl	8004bf2 <vListInsertEnd>
 800624a:	e005      	b.n	8006258 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	3318      	adds	r3, #24
 8006250:	4619      	mov	r1, r3
 8006252:	480e      	ldr	r0, [pc, #56]	@ (800628c <xTaskRemoveFromEventList+0xbc>)
 8006254:	f7fe fccd 	bl	8004bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <xTaskRemoveFromEventList+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	429a      	cmp	r2, r3
 8006264:	d905      	bls.n	8006272 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006266:	2301      	movs	r3, #1
 8006268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800626a:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <xTaskRemoveFromEventList+0xc4>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e001      	b.n	8006276 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000fbc 	.word	0x20000fbc
 8006284:	20000f9c 	.word	0x20000f9c
 8006288:	20000ac4 	.word	0x20000ac4
 800628c:	20000f54 	.word	0x20000f54
 8006290:	20000ac0 	.word	0x20000ac0
 8006294:	20000fa8 	.word	0x20000fa8

08006298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062a0:	4b06      	ldr	r3, [pc, #24]	@ (80062bc <vTaskInternalSetTimeOutState+0x24>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062a8:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <vTaskInternalSetTimeOutState+0x28>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000fac 	.word	0x20000fac
 80062c0:	20000f98 	.word	0x20000f98

080062c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10b      	bne.n	800630a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800630a:	f000 fe95 	bl	8007038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800630e:	4b1d      	ldr	r3, [pc, #116]	@ (8006384 <xTaskCheckForTimeOut+0xc0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d102      	bne.n	800632e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	e023      	b.n	8006376 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b15      	ldr	r3, [pc, #84]	@ (8006388 <xTaskCheckForTimeOut+0xc4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d007      	beq.n	800634a <xTaskCheckForTimeOut+0x86>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	429a      	cmp	r2, r3
 8006342:	d302      	bcc.n	800634a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e015      	b.n	8006376 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	d20b      	bcs.n	800636c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff99 	bl	8006298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	e004      	b.n	8006376 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006376:	f000 fe91 	bl	800709c <vPortExitCritical>

	return xReturn;
 800637a:	69fb      	ldr	r3, [r7, #28]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000f98 	.word	0x20000f98
 8006388:	20000fac 	.word	0x20000fac

0800638c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006390:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <vTaskMissedYield+0x14>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000fa8 	.word	0x20000fa8

080063a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063ac:	f000 f852 	bl	8006454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063b0:	4b06      	ldr	r3, [pc, #24]	@ (80063cc <prvIdleTask+0x28>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d9f9      	bls.n	80063ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <prvIdleTask+0x2c>)
 80063ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063c8:	e7f0      	b.n	80063ac <prvIdleTask+0x8>
 80063ca:	bf00      	nop
 80063cc:	20000ac4 	.word	0x20000ac4
 80063d0:	e000ed04 	.word	0xe000ed04

080063d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	e00c      	b.n	80063fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <prvInitialiseTaskLists+0x60>)
 80063ec:	4413      	add	r3, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fbd2 	bl	8004b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b37      	cmp	r3, #55	@ 0x37
 80063fe:	d9ef      	bls.n	80063e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006400:	480d      	ldr	r0, [pc, #52]	@ (8006438 <prvInitialiseTaskLists+0x64>)
 8006402:	f7fe fbc9 	bl	8004b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006406:	480d      	ldr	r0, [pc, #52]	@ (800643c <prvInitialiseTaskLists+0x68>)
 8006408:	f7fe fbc6 	bl	8004b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800640c:	480c      	ldr	r0, [pc, #48]	@ (8006440 <prvInitialiseTaskLists+0x6c>)
 800640e:	f7fe fbc3 	bl	8004b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006412:	480c      	ldr	r0, [pc, #48]	@ (8006444 <prvInitialiseTaskLists+0x70>)
 8006414:	f7fe fbc0 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006418:	480b      	ldr	r0, [pc, #44]	@ (8006448 <prvInitialiseTaskLists+0x74>)
 800641a:	f7fe fbbd 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800641e:	4b0b      	ldr	r3, [pc, #44]	@ (800644c <prvInitialiseTaskLists+0x78>)
 8006420:	4a05      	ldr	r2, [pc, #20]	@ (8006438 <prvInitialiseTaskLists+0x64>)
 8006422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006424:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <prvInitialiseTaskLists+0x7c>)
 8006426:	4a05      	ldr	r2, [pc, #20]	@ (800643c <prvInitialiseTaskLists+0x68>)
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000ac4 	.word	0x20000ac4
 8006438:	20000f24 	.word	0x20000f24
 800643c:	20000f38 	.word	0x20000f38
 8006440:	20000f54 	.word	0x20000f54
 8006444:	20000f68 	.word	0x20000f68
 8006448:	20000f80 	.word	0x20000f80
 800644c:	20000f4c 	.word	0x20000f4c
 8006450:	20000f50 	.word	0x20000f50

08006454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800645a:	e019      	b.n	8006490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800645c:	f000 fdec 	bl	8007038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006460:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <prvCheckTasksWaitingTermination+0x50>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3304      	adds	r3, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe fc1d 	bl	8004cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006472:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <prvCheckTasksWaitingTermination+0x54>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	4a0b      	ldr	r2, [pc, #44]	@ (80064a8 <prvCheckTasksWaitingTermination+0x54>)
 800647a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800647c:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <prvCheckTasksWaitingTermination+0x58>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3b01      	subs	r3, #1
 8006482:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <prvCheckTasksWaitingTermination+0x58>)
 8006484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006486:	f000 fe09 	bl	800709c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f810 	bl	80064b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <prvCheckTasksWaitingTermination+0x58>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e1      	bne.n	800645c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000f68 	.word	0x20000f68
 80064a8:	20000f94 	.word	0x20000f94
 80064ac:	20000f7c 	.word	0x20000f7c

080064b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3354      	adds	r3, #84	@ 0x54
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 ff47 	bl	8008350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 ffa1 	bl	8007418 <vPortFree>
				vPortFree( pxTCB );
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 ff9e 	bl	8007418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064dc:	e019      	b.n	8006512 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d103      	bne.n	80064f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 ff95 	bl	8007418 <vPortFree>
	}
 80064ee:	e010      	b.n	8006512 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d00b      	beq.n	8006512 <prvDeleteTCB+0x62>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	60fb      	str	r3, [r7, #12]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <prvDeleteTCB+0x5e>
	}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <prvResetNextTaskUnblockTime+0x38>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <prvResetNextTaskUnblockTime+0x3c>)
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006534:	e008      	b.n	8006548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006536:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <prvResetNextTaskUnblockTime+0x38>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4a04      	ldr	r2, [pc, #16]	@ (8006558 <prvResetNextTaskUnblockTime+0x3c>)
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000f4c 	.word	0x20000f4c
 8006558:	20000fb4 	.word	0x20000fb4

0800655c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <xTaskGetSchedulerState+0x34>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d102      	bne.n	8006570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800656a:	2301      	movs	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	e008      	b.n	8006582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006570:	4b08      	ldr	r3, [pc, #32]	@ (8006594 <xTaskGetSchedulerState+0x38>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006578:	2302      	movs	r3, #2
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e001      	b.n	8006582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006582:	687b      	ldr	r3, [r7, #4]
	}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20000fa0 	.word	0x20000fa0
 8006594:	20000fbc 	.word	0x20000fbc

08006598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d058      	beq.n	8006660 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065ae:	4b2f      	ldr	r3, [pc, #188]	@ (800666c <xTaskPriorityDisinherit+0xd4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d00b      	beq.n	80065d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60bb      	str	r3, [r7, #8]
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f4:	1e5a      	subs	r2, r3, #1
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006602:	429a      	cmp	r2, r3
 8006604:	d02c      	beq.n	8006660 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800660a:	2b00      	cmp	r3, #0
 800660c:	d128      	bne.n	8006660 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fb4a 	bl	8004cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006630:	4b0f      	ldr	r3, [pc, #60]	@ (8006670 <xTaskPriorityDisinherit+0xd8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d903      	bls.n	8006640 <xTaskPriorityDisinherit+0xa8>
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663c:	4a0c      	ldr	r2, [pc, #48]	@ (8006670 <xTaskPriorityDisinherit+0xd8>)
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a09      	ldr	r2, [pc, #36]	@ (8006674 <xTaskPriorityDisinherit+0xdc>)
 800664e:	441a      	add	r2, r3
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fe facb 	bl	8004bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006660:	697b      	ldr	r3, [r7, #20]
	}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000ac0 	.word	0x20000ac0
 8006670:	20000f9c 	.word	0x20000f9c
 8006674:	20000ac4 	.word	0x20000ac4

08006678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006682:	4b21      	ldr	r3, [pc, #132]	@ (8006708 <prvAddCurrentTaskToDelayedList+0x90>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006688:	4b20      	ldr	r3, [pc, #128]	@ (800670c <prvAddCurrentTaskToDelayedList+0x94>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3304      	adds	r3, #4
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fb0c 	bl	8004cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d10a      	bne.n	80066b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a2:	4b1a      	ldr	r3, [pc, #104]	@ (800670c <prvAddCurrentTaskToDelayedList+0x94>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4819      	ldr	r0, [pc, #100]	@ (8006710 <prvAddCurrentTaskToDelayedList+0x98>)
 80066ac:	f7fe faa1 	bl	8004bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066b0:	e026      	b.n	8006700 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4413      	add	r3, r2
 80066b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ba:	4b14      	ldr	r3, [pc, #80]	@ (800670c <prvAddCurrentTaskToDelayedList+0x94>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d209      	bcs.n	80066de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ca:	4b12      	ldr	r3, [pc, #72]	@ (8006714 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b0f      	ldr	r3, [pc, #60]	@ (800670c <prvAddCurrentTaskToDelayedList+0x94>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe faaf 	bl	8004c3a <vListInsert>
}
 80066dc:	e010      	b.n	8006700 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066de:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <prvAddCurrentTaskToDelayedList+0x94>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7fe faa5 	bl	8004c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066f0:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <prvAddCurrentTaskToDelayedList+0xa4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d202      	bcs.n	8006700 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <prvAddCurrentTaskToDelayedList+0xa4>)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6013      	str	r3, [r2, #0]
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000f98 	.word	0x20000f98
 800670c:	20000ac0 	.word	0x20000ac0
 8006710:	20000f80 	.word	0x20000f80
 8006714:	20000f50 	.word	0x20000f50
 8006718:	20000f4c 	.word	0x20000f4c
 800671c:	20000fb4 	.word	0x20000fb4

08006720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	@ 0x28
 8006724:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800672a:	f000 fb13 	bl	8006d54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800672e:	4b1d      	ldr	r3, [pc, #116]	@ (80067a4 <xTimerCreateTimerTask+0x84>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d021      	beq.n	800677a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800673e:	1d3a      	adds	r2, r7, #4
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	f107 030c 	add.w	r3, r7, #12
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fa0b 	bl	8004b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	9202      	str	r2, [sp, #8]
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	2302      	movs	r3, #2
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2300      	movs	r3, #0
 800675e:	460a      	mov	r2, r1
 8006760:	4911      	ldr	r1, [pc, #68]	@ (80067a8 <xTimerCreateTimerTask+0x88>)
 8006762:	4812      	ldr	r0, [pc, #72]	@ (80067ac <xTimerCreateTimerTask+0x8c>)
 8006764:	f7fe ffc6 	bl	80056f4 <xTaskCreateStatic>
 8006768:	4603      	mov	r3, r0
 800676a:	4a11      	ldr	r2, [pc, #68]	@ (80067b0 <xTimerCreateTimerTask+0x90>)
 800676c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800676e:	4b10      	ldr	r3, [pc, #64]	@ (80067b0 <xTimerCreateTimerTask+0x90>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006776:	2301      	movs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006798:	697b      	ldr	r3, [r7, #20]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000ff0 	.word	0x20000ff0
 80067a8:	0800a1c4 	.word	0x0800a1c4
 80067ac:	080068ed 	.word	0x080068ed
 80067b0:	20000ff4 	.word	0x20000ff4

080067b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	@ 0x28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10b      	bne.n	80067e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	623b      	str	r3, [r7, #32]
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067e4:	4b19      	ldr	r3, [pc, #100]	@ (800684c <xTimerGenericCommand+0x98>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02a      	beq.n	8006842 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	dc18      	bgt.n	8006830 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067fe:	f7ff fead 	bl	800655c <xTaskGetSchedulerState>
 8006802:	4603      	mov	r3, r0
 8006804:	2b02      	cmp	r3, #2
 8006806:	d109      	bne.n	800681c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006808:	4b10      	ldr	r3, [pc, #64]	@ (800684c <xTimerGenericCommand+0x98>)
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	f107 0110 	add.w	r1, r7, #16
 8006810:	2300      	movs	r3, #0
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	f7fe fb7e 	bl	8004f14 <xQueueGenericSend>
 8006818:	6278      	str	r0, [r7, #36]	@ 0x24
 800681a:	e012      	b.n	8006842 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800681c:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <xTimerGenericCommand+0x98>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	f107 0110 	add.w	r1, r7, #16
 8006824:	2300      	movs	r3, #0
 8006826:	2200      	movs	r2, #0
 8006828:	f7fe fb74 	bl	8004f14 <xQueueGenericSend>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24
 800682e:	e008      	b.n	8006842 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006830:	4b06      	ldr	r3, [pc, #24]	@ (800684c <xTimerGenericCommand+0x98>)
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	f107 0110 	add.w	r1, r7, #16
 8006838:	2300      	movs	r3, #0
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	f7fe fc6c 	bl	8005118 <xQueueGenericSendFromISR>
 8006840:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006844:	4618      	mov	r0, r3
 8006846:	3728      	adds	r7, #40	@ 0x28
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000ff0 	.word	0x20000ff0

08006850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af02      	add	r7, sp, #8
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <prvProcessExpiredTimer+0x98>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3304      	adds	r3, #4
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe fa1f 	bl	8004cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d023      	beq.n	80068c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	18d1      	adds	r1, r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	6978      	ldr	r0, [r7, #20]
 800688a:	f000 f8d5 	bl	8006a38 <prvInsertTimerInActiveList>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d020      	beq.n	80068d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006894:	2300      	movs	r3, #0
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	2100      	movs	r1, #0
 800689e:	6978      	ldr	r0, [r7, #20]
 80068a0:	f7ff ff88 	bl	80067b4 <xTimerGenericCommand>
 80068a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d114      	bne.n	80068d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	6978      	ldr	r0, [r7, #20]
 80068dc:	4798      	blx	r3
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000fe8 	.word	0x20000fe8

080068ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068f4:	f107 0308 	add.w	r3, r7, #8
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f859 	bl	80069b0 <prvGetNextExpireTime>
 80068fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4619      	mov	r1, r3
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f805 	bl	8006914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800690a:	f000 f8d7 	bl	8006abc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800690e:	bf00      	nop
 8006910:	e7f0      	b.n	80068f4 <prvTimerTask+0x8>
	...

08006914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800691e:	f7ff fa29 	bl	8005d74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006922:	f107 0308 	add.w	r3, r7, #8
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f866 	bl	80069f8 <prvSampleTimeNow>
 800692c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d130      	bne.n	8006996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <prvProcessTimerOrBlockTask+0x3c>
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	429a      	cmp	r2, r3
 8006940:	d806      	bhi.n	8006950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006942:	f7ff fa25 	bl	8005d90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff81 	bl	8006850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800694e:	e024      	b.n	800699a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006956:	4b13      	ldr	r3, [pc, #76]	@ (80069a4 <prvProcessTimerOrBlockTask+0x90>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <prvProcessTimerOrBlockTask+0x50>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <prvProcessTimerOrBlockTask+0x52>
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006968:	4b0f      	ldr	r3, [pc, #60]	@ (80069a8 <prvProcessTimerOrBlockTask+0x94>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	f7fe fe89 	bl	800568c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800697a:	f7ff fa09 	bl	8005d90 <xTaskResumeAll>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <prvProcessTimerOrBlockTask+0x98>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
}
 8006994:	e001      	b.n	800699a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006996:	f7ff f9fb 	bl	8005d90 <xTaskResumeAll>
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000fec 	.word	0x20000fec
 80069a8:	20000ff0 	.word	0x20000ff0
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069b8:	4b0e      	ldr	r3, [pc, #56]	@ (80069f4 <prvGetNextExpireTime+0x44>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <prvGetNextExpireTime+0x16>
 80069c2:	2201      	movs	r2, #1
 80069c4:	e000      	b.n	80069c8 <prvGetNextExpireTime+0x18>
 80069c6:	2200      	movs	r2, #0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d4:	4b07      	ldr	r3, [pc, #28]	@ (80069f4 <prvGetNextExpireTime+0x44>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e001      	b.n	80069e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000fe8 	.word	0x20000fe8

080069f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a00:	f7ff fa64 	bl	8005ecc <xTaskGetTickCount>
 8006a04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a06:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <prvSampleTimeNow+0x3c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d205      	bcs.n	8006a1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a10:	f000 f93a 	bl	8006c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a22:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <prvSampleTimeNow+0x3c>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000ff8 	.word	0x20000ff8

08006a38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d812      	bhi.n	8006a84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e01b      	b.n	8006aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a72:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <prvInsertTimerInActiveList+0x7c>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7fe f8dc 	bl	8004c3a <vListInsert>
 8006a82:	e012      	b.n	8006aaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d206      	bcs.n	8006a9a <prvInsertTimerInActiveList+0x62>
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d302      	bcc.n	8006a9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e007      	b.n	8006aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a9a:	4b07      	ldr	r3, [pc, #28]	@ (8006ab8 <prvInsertTimerInActiveList+0x80>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f7fe f8c8 	bl	8004c3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aaa:	697b      	ldr	r3, [r7, #20]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000fec 	.word	0x20000fec
 8006ab8:	20000fe8 	.word	0x20000fe8

08006abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	@ 0x38
 8006ac0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ac2:	e0ce      	b.n	8006c62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da19      	bge.n	8006afe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	3304      	adds	r3, #4
 8006ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	61fb      	str	r3, [r7, #28]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006af4:	6850      	ldr	r0, [r2, #4]
 8006af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006af8:	6892      	ldr	r2, [r2, #8]
 8006afa:	4611      	mov	r1, r2
 8006afc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f2c0 80ae 	blt.w	8006c62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	3304      	adds	r3, #4
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe f8c8 	bl	8004cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff ff6a 	bl	80069f8 <prvSampleTimeNow>
 8006b24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	f200 8097 	bhi.w	8006c5c <prvProcessReceivedCommands+0x1a0>
 8006b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b34 <prvProcessReceivedCommands+0x78>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b5d 	.word	0x08006b5d
 8006b40:	08006bd3 	.word	0x08006bd3
 8006b44:	08006be7 	.word	0x08006be7
 8006b48:	08006c33 	.word	0x08006c33
 8006b4c:	08006b5d 	.word	0x08006b5d
 8006b50:	08006b5d 	.word	0x08006b5d
 8006b54:	08006bd3 	.word	0x08006bd3
 8006b58:	08006be7 	.word	0x08006be7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	18d1      	adds	r1, r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b7c:	f7ff ff5c 	bl	8006a38 <prvInsertTimerInActiveList>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d06c      	beq.n	8006c60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d061      	beq.n	8006c60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bae:	f7ff fe01 	bl	80067b4 <xTimerGenericCommand>
 8006bb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d152      	bne.n	8006c60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	61bb      	str	r3, [r7, #24]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006be4:	e03d      	b.n	8006c62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	617b      	str	r3, [r7, #20]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	18d1      	adds	r1, r2, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c2c:	f7ff ff04 	bl	8006a38 <prvInsertTimerInActiveList>
					break;
 8006c30:	e017      	b.n	8006c62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c42:	f000 fbe9 	bl	8007418 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c46:	e00c      	b.n	8006c62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c5a:	e002      	b.n	8006c62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <prvProcessReceivedCommands+0x1a6>
					break;
 8006c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <prvProcessReceivedCommands+0x1c8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	1d39      	adds	r1, r7, #4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe faf2 	bl	8005254 <xQueueReceive>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f47f af26 	bne.w	8006ac4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3730      	adds	r7, #48	@ 0x30
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000ff0 	.word	0x20000ff0

08006c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c8e:	e049      	b.n	8006d24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c90:	4b2e      	ldr	r3, [pc, #184]	@ (8006d4c <prvSwitchTimerLists+0xc4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d4c <prvSwitchTimerLists+0xc4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fd ffff 	bl	8004cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d02f      	beq.n	8006d24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d90e      	bls.n	8006cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d4c <prvSwitchTimerLists+0xc4>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4619      	mov	r1, r3
 8006cec:	4610      	mov	r0, r2
 8006cee:	f7fd ffa4 	bl	8004c3a <vListInsert>
 8006cf2:	e017      	b.n	8006d24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff fd58 	bl	80067b4 <xTimerGenericCommand>
 8006d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	603b      	str	r3, [r7, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d24:	4b09      	ldr	r3, [pc, #36]	@ (8006d4c <prvSwitchTimerLists+0xc4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1b0      	bne.n	8006c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d2e:	4b07      	ldr	r3, [pc, #28]	@ (8006d4c <prvSwitchTimerLists+0xc4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d34:	4b06      	ldr	r3, [pc, #24]	@ (8006d50 <prvSwitchTimerLists+0xc8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a04      	ldr	r2, [pc, #16]	@ (8006d4c <prvSwitchTimerLists+0xc4>)
 8006d3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d3c:	4a04      	ldr	r2, [pc, #16]	@ (8006d50 <prvSwitchTimerLists+0xc8>)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	6013      	str	r3, [r2, #0]
}
 8006d42:	bf00      	nop
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000fe8 	.word	0x20000fe8
 8006d50:	20000fec 	.word	0x20000fec

08006d54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d5a:	f000 f96d 	bl	8007038 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d5e:	4b15      	ldr	r3, [pc, #84]	@ (8006db4 <prvCheckForValidListAndQueue+0x60>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d120      	bne.n	8006da8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d66:	4814      	ldr	r0, [pc, #80]	@ (8006db8 <prvCheckForValidListAndQueue+0x64>)
 8006d68:	f7fd ff16 	bl	8004b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d6c:	4813      	ldr	r0, [pc, #76]	@ (8006dbc <prvCheckForValidListAndQueue+0x68>)
 8006d6e:	f7fd ff13 	bl	8004b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d72:	4b13      	ldr	r3, [pc, #76]	@ (8006dc0 <prvCheckForValidListAndQueue+0x6c>)
 8006d74:	4a10      	ldr	r2, [pc, #64]	@ (8006db8 <prvCheckForValidListAndQueue+0x64>)
 8006d76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d78:	4b12      	ldr	r3, [pc, #72]	@ (8006dc4 <prvCheckForValidListAndQueue+0x70>)
 8006d7a:	4a10      	ldr	r2, [pc, #64]	@ (8006dbc <prvCheckForValidListAndQueue+0x68>)
 8006d7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	4b11      	ldr	r3, [pc, #68]	@ (8006dc8 <prvCheckForValidListAndQueue+0x74>)
 8006d84:	4a11      	ldr	r2, [pc, #68]	@ (8006dcc <prvCheckForValidListAndQueue+0x78>)
 8006d86:	2110      	movs	r1, #16
 8006d88:	200a      	movs	r0, #10
 8006d8a:	f7fe f823 	bl	8004dd4 <xQueueGenericCreateStatic>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4a08      	ldr	r2, [pc, #32]	@ (8006db4 <prvCheckForValidListAndQueue+0x60>)
 8006d92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d94:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <prvCheckForValidListAndQueue+0x60>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d9c:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <prvCheckForValidListAndQueue+0x60>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	490b      	ldr	r1, [pc, #44]	@ (8006dd0 <prvCheckForValidListAndQueue+0x7c>)
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fc48 	bl	8005638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006da8:	f000 f978 	bl	800709c <vPortExitCritical>
}
 8006dac:	bf00      	nop
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000ff0 	.word	0x20000ff0
 8006db8:	20000fc0 	.word	0x20000fc0
 8006dbc:	20000fd4 	.word	0x20000fd4
 8006dc0:	20000fe8 	.word	0x20000fe8
 8006dc4:	20000fec 	.word	0x20000fec
 8006dc8:	2000109c 	.word	0x2000109c
 8006dcc:	20000ffc 	.word	0x20000ffc
 8006dd0:	0800a1cc 	.word	0x0800a1cc

08006dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3b04      	subs	r3, #4
 8006de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3b04      	subs	r3, #4
 8006df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0201 	bic.w	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3b04      	subs	r3, #4
 8006e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e04:	4a0c      	ldr	r2, [pc, #48]	@ (8006e38 <pxPortInitialiseStack+0x64>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3b14      	subs	r3, #20
 8006e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3b04      	subs	r3, #4
 8006e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f06f 0202 	mvn.w	r2, #2
 8006e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3b20      	subs	r3, #32
 8006e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	08006e3d 	.word	0x08006e3d

08006e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e46:	4b13      	ldr	r3, [pc, #76]	@ (8006e94 <prvTaskExitError+0x58>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d00b      	beq.n	8006e68 <prvTaskExitError+0x2c>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <prvTaskExitError+0x28>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60bb      	str	r3, [r7, #8]
}
 8006e7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e7c:	bf00      	nop
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0fc      	beq.n	8006e7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	2000000c 	.word	0x2000000c
	...

08006ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ea0:	4b07      	ldr	r3, [pc, #28]	@ (8006ec0 <pxCurrentTCBConst2>)
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	6808      	ldr	r0, [r1, #0]
 8006ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	f380 8809 	msr	PSP, r0
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f380 8811 	msr	BASEPRI, r0
 8006eba:	4770      	bx	lr
 8006ebc:	f3af 8000 	nop.w

08006ec0 <pxCurrentTCBConst2>:
 8006ec0:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ec8:	4808      	ldr	r0, [pc, #32]	@ (8006eec <prvPortStartFirstTask+0x24>)
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	6800      	ldr	r0, [r0, #0]
 8006ece:	f380 8808 	msr	MSP, r0
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8814 	msr	CONTROL, r0
 8006eda:	b662      	cpsie	i
 8006edc:	b661      	cpsie	f
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	df00      	svc	0
 8006ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eea:	bf00      	nop
 8006eec:	e000ed08 	.word	0xe000ed08

08006ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ef6:	4b47      	ldr	r3, [pc, #284]	@ (8007014 <xPortStartScheduler+0x124>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a47      	ldr	r2, [pc, #284]	@ (8007018 <xPortStartScheduler+0x128>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10b      	bne.n	8006f18 <xPortStartScheduler+0x28>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f18:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <xPortStartScheduler+0x124>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800701c <xPortStartScheduler+0x12c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10b      	bne.n	8006f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	613b      	str	r3, [r7, #16]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f3a:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <xPortStartScheduler+0x130>)
 8006f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	22ff      	movs	r2, #255	@ 0xff
 8006f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4b31      	ldr	r3, [pc, #196]	@ (8007024 <xPortStartScheduler+0x134>)
 8006f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f62:	4b31      	ldr	r3, [pc, #196]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f64:	2207      	movs	r2, #7
 8006f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f68:	e009      	b.n	8006f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4a2d      	ldr	r2, [pc, #180]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d0ef      	beq.n	8006f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f8a:	4b27      	ldr	r3, [pc, #156]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1c3 0307 	rsb	r3, r3, #7
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d00b      	beq.n	8006fae <xPortStartScheduler+0xbe>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60bb      	str	r3, [r7, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fae:	4b1e      	ldr	r3, [pc, #120]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fc0:	4a19      	ldr	r2, [pc, #100]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fcc:	4b17      	ldr	r3, [pc, #92]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fd8:	4b14      	ldr	r3, [pc, #80]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a13      	ldr	r2, [pc, #76]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fe4:	f000 f8da 	bl	800719c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fe8:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <xPortStartScheduler+0x140>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fee:	f000 f8f9 	bl	80071e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <xPortStartScheduler+0x144>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8007034 <xPortStartScheduler+0x144>)
 8006ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ffe:	f7ff ff63 	bl	8006ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007002:	f7ff f82d 	bl	8006060 <vTaskSwitchContext>
	prvTaskExitError();
 8007006:	f7ff ff19 	bl	8006e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000ed00 	.word	0xe000ed00
 8007018:	410fc271 	.word	0x410fc271
 800701c:	410fc270 	.word	0x410fc270
 8007020:	e000e400 	.word	0xe000e400
 8007024:	200010ec 	.word	0x200010ec
 8007028:	200010f0 	.word	0x200010f0
 800702c:	e000ed20 	.word	0xe000ed20
 8007030:	2000000c 	.word	0x2000000c
 8007034:	e000ef34 	.word	0xe000ef34

08007038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
}
 8007050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007052:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <vPortEnterCritical+0x5c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a0e      	ldr	r2, [pc, #56]	@ (8007094 <vPortEnterCritical+0x5c>)
 800705a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800705c:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <vPortEnterCritical+0x5c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d110      	bne.n	8007086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007064:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <vPortEnterCritical+0x60>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <vPortEnterCritical+0x4e>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	603b      	str	r3, [r7, #0]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <vPortEnterCritical+0x4a>
	}
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	2000000c 	.word	0x2000000c
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070a2:	4b12      	ldr	r3, [pc, #72]	@ (80070ec <vPortExitCritical+0x50>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <vPortExitCritical+0x26>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	607b      	str	r3, [r7, #4]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <vPortExitCritical+0x50>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <vPortExitCritical+0x50>)
 80070ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <vPortExitCritical+0x50>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <vPortExitCritical+0x44>
 80070d4:	2300      	movs	r3, #0
 80070d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f383 8811 	msr	BASEPRI, r3
}
 80070de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000000c 	.word	0x2000000c

080070f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070f0:	f3ef 8009 	mrs	r0, PSP
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4b15      	ldr	r3, [pc, #84]	@ (8007150 <pxCurrentTCBConst>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	f01e 0f10 	tst.w	lr, #16
 8007100:	bf08      	it	eq
 8007102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710a:	6010      	str	r0, [r2, #0]
 800710c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007114:	f380 8811 	msr	BASEPRI, r0
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f7fe ff9e 	bl	8006060 <vTaskSwitchContext>
 8007124:	f04f 0000 	mov.w	r0, #0
 8007128:	f380 8811 	msr	BASEPRI, r0
 800712c:	bc09      	pop	{r0, r3}
 800712e:	6819      	ldr	r1, [r3, #0]
 8007130:	6808      	ldr	r0, [r1, #0]
 8007132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007136:	f01e 0f10 	tst.w	lr, #16
 800713a:	bf08      	it	eq
 800713c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007140:	f380 8809 	msr	PSP, r0
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w

08007150 <pxCurrentTCBConst>:
 8007150:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	607b      	str	r3, [r7, #4]
}
 8007170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007172:	f7fe febb 	bl	8005eec <xTaskIncrementTick>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800717c:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <xPortSysTickHandler+0x40>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <vPortSetupTimerInterrupt+0x38>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <vPortSetupTimerInterrupt+0x3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	@ (80071dc <vPortSetupTimerInterrupt+0x40>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <vPortSetupTimerInterrupt+0x44>)
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071be:	4b04      	ldr	r3, [pc, #16]	@ (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	e000e010 	.word	0xe000e010
 80071d4:	e000e018 	.word	0xe000e018
 80071d8:	20000000 	.word	0x20000000
 80071dc:	10624dd3 	.word	0x10624dd3
 80071e0:	e000e014 	.word	0xe000e014

080071e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80071f4 <vPortEnableVFP+0x10>
 80071e8:	6801      	ldr	r1, [r0, #0]
 80071ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80071ee:	6001      	str	r1, [r0, #0]
 80071f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071f2:	bf00      	nop
 80071f4:	e000ed88 	.word	0xe000ed88

080071f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071fe:	f3ef 8305 	mrs	r3, IPSR
 8007202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d915      	bls.n	8007236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800720a:	4a18      	ldr	r2, [pc, #96]	@ (800726c <vPortValidateInterruptPriority+0x74>)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007214:	4b16      	ldr	r3, [pc, #88]	@ (8007270 <vPortValidateInterruptPriority+0x78>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	7afa      	ldrb	r2, [r7, #11]
 800721a:	429a      	cmp	r2, r3
 800721c:	d20b      	bcs.n	8007236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	e7fd      	b.n	8007232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007236:	4b0f      	ldr	r3, [pc, #60]	@ (8007274 <vPortValidateInterruptPriority+0x7c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800723e:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <vPortValidateInterruptPriority+0x80>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d90b      	bls.n	800725e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	603b      	str	r3, [r7, #0]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <vPortValidateInterruptPriority+0x62>
	}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	e000e3f0 	.word	0xe000e3f0
 8007270:	200010ec 	.word	0x200010ec
 8007274:	e000ed0c 	.word	0xe000ed0c
 8007278:	200010f0 	.word	0x200010f0

0800727c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	@ 0x28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007288:	f7fe fd74 	bl	8005d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800728c:	4b5c      	ldr	r3, [pc, #368]	@ (8007400 <pvPortMalloc+0x184>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007294:	f000 f924 	bl	80074e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007298:	4b5a      	ldr	r3, [pc, #360]	@ (8007404 <pvPortMalloc+0x188>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4013      	ands	r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 8095 	bne.w	80073d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01e      	beq.n	80072ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80072ac:	2208      	movs	r2, #8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d015      	beq.n	80072ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f023 0307 	bic.w	r3, r3, #7
 80072c4:	3308      	adds	r3, #8
 80072c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <pvPortMalloc+0x6e>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	617b      	str	r3, [r7, #20]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d06f      	beq.n	80073d0 <pvPortMalloc+0x154>
 80072f0:	4b45      	ldr	r3, [pc, #276]	@ (8007408 <pvPortMalloc+0x18c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d86a      	bhi.n	80073d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072fa:	4b44      	ldr	r3, [pc, #272]	@ (800740c <pvPortMalloc+0x190>)
 80072fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072fe:	4b43      	ldr	r3, [pc, #268]	@ (800740c <pvPortMalloc+0x190>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007304:	e004      	b.n	8007310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d903      	bls.n	8007322 <pvPortMalloc+0xa6>
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f1      	bne.n	8007306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007322:	4b37      	ldr	r3, [pc, #220]	@ (8007400 <pvPortMalloc+0x184>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007328:	429a      	cmp	r2, r3
 800732a:	d051      	beq.n	80073d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2208      	movs	r2, #8
 8007332:	4413      	add	r3, r2
 8007334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	1ad2      	subs	r2, r2, r3
 8007346:	2308      	movs	r3, #8
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	429a      	cmp	r2, r3
 800734c:	d920      	bls.n	8007390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800734e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4413      	add	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <pvPortMalloc+0xfc>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	613b      	str	r3, [r7, #16]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800738a:	69b8      	ldr	r0, [r7, #24]
 800738c:	f000 f90a 	bl	80075a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007390:	4b1d      	ldr	r3, [pc, #116]	@ (8007408 <pvPortMalloc+0x18c>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	4a1b      	ldr	r2, [pc, #108]	@ (8007408 <pvPortMalloc+0x18c>)
 800739c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800739e:	4b1a      	ldr	r3, [pc, #104]	@ (8007408 <pvPortMalloc+0x18c>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <pvPortMalloc+0x194>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d203      	bcs.n	80073b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073aa:	4b17      	ldr	r3, [pc, #92]	@ (8007408 <pvPortMalloc+0x18c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a18      	ldr	r2, [pc, #96]	@ (8007410 <pvPortMalloc+0x194>)
 80073b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <pvPortMalloc+0x188>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073c6:	4b13      	ldr	r3, [pc, #76]	@ (8007414 <pvPortMalloc+0x198>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	4a11      	ldr	r2, [pc, #68]	@ (8007414 <pvPortMalloc+0x198>)
 80073ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073d0:	f7fe fcde 	bl	8005d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <pvPortMalloc+0x17a>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <pvPortMalloc+0x176>
	return pvReturn;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3728      	adds	r7, #40	@ 0x28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20004cfc 	.word	0x20004cfc
 8007404:	20004d10 	.word	0x20004d10
 8007408:	20004d00 	.word	0x20004d00
 800740c:	20004cf4 	.word	0x20004cf4
 8007410:	20004d04 	.word	0x20004d04
 8007414:	20004d08 	.word	0x20004d08

08007418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d04f      	beq.n	80074ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800742a:	2308      	movs	r3, #8
 800742c:	425b      	negs	r3, r3
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4413      	add	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	4b25      	ldr	r3, [pc, #148]	@ (80074d4 <vPortFree+0xbc>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <vPortFree+0x46>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00b      	beq.n	800747e <vPortFree+0x66>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	4b14      	ldr	r3, [pc, #80]	@ (80074d4 <vPortFree+0xbc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4013      	ands	r3, r2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01e      	beq.n	80074ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11a      	bne.n	80074ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	4b0e      	ldr	r3, [pc, #56]	@ (80074d4 <vPortFree+0xbc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	43db      	mvns	r3, r3
 800749e:	401a      	ands	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074a4:	f7fe fc66 	bl	8005d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4b0a      	ldr	r3, [pc, #40]	@ (80074d8 <vPortFree+0xc0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4413      	add	r3, r2
 80074b2:	4a09      	ldr	r2, [pc, #36]	@ (80074d8 <vPortFree+0xc0>)
 80074b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074b6:	6938      	ldr	r0, [r7, #16]
 80074b8:	f000 f874 	bl	80075a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074bc:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <vPortFree+0xc4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	4a06      	ldr	r2, [pc, #24]	@ (80074dc <vPortFree+0xc4>)
 80074c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074c6:	f7fe fc63 	bl	8005d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ca:	bf00      	nop
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20004d10 	.word	0x20004d10
 80074d8:	20004d00 	.word	0x20004d00
 80074dc:	20004d0c 	.word	0x20004d0c

080074e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80074ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074ec:	4b27      	ldr	r3, [pc, #156]	@ (800758c <prvHeapInit+0xac>)
 80074ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3307      	adds	r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0307 	bic.w	r3, r3, #7
 8007506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	4a1f      	ldr	r2, [pc, #124]	@ (800758c <prvHeapInit+0xac>)
 8007510:	4413      	add	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007518:	4a1d      	ldr	r2, [pc, #116]	@ (8007590 <prvHeapInit+0xb0>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800751e:	4b1c      	ldr	r3, [pc, #112]	@ (8007590 <prvHeapInit+0xb0>)
 8007520:	2200      	movs	r2, #0
 8007522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800752c:	2208      	movs	r2, #8
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0307 	bic.w	r3, r3, #7
 800753a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a15      	ldr	r2, [pc, #84]	@ (8007594 <prvHeapInit+0xb4>)
 8007540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007542:	4b14      	ldr	r3, [pc, #80]	@ (8007594 <prvHeapInit+0xb4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800754a:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <prvHeapInit+0xb4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007560:	4b0c      	ldr	r3, [pc, #48]	@ (8007594 <prvHeapInit+0xb4>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4a0a      	ldr	r2, [pc, #40]	@ (8007598 <prvHeapInit+0xb8>)
 800756e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a09      	ldr	r2, [pc, #36]	@ (800759c <prvHeapInit+0xbc>)
 8007576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007578:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <prvHeapInit+0xc0>)
 800757a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800757e:	601a      	str	r2, [r3, #0]
}
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	200010f4 	.word	0x200010f4
 8007590:	20004cf4 	.word	0x20004cf4
 8007594:	20004cfc 	.word	0x20004cfc
 8007598:	20004d04 	.word	0x20004d04
 800759c:	20004d00 	.word	0x20004d00
 80075a0:	20004d10 	.word	0x20004d10

080075a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075ac:	4b28      	ldr	r3, [pc, #160]	@ (8007650 <prvInsertBlockIntoFreeList+0xac>)
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e002      	b.n	80075b8 <prvInsertBlockIntoFreeList+0x14>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d8f7      	bhi.n	80075b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	4413      	add	r3, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d108      	bne.n	80075e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	441a      	add	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	441a      	add	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d118      	bne.n	800762c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b15      	ldr	r3, [pc, #84]	@ (8007654 <prvInsertBlockIntoFreeList+0xb0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d00d      	beq.n	8007622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	441a      	add	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e008      	b.n	8007634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007622:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <prvInsertBlockIntoFreeList+0xb0>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e003      	b.n	8007634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	429a      	cmp	r2, r3
 800763a:	d002      	beq.n	8007642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20004cf4 	.word	0x20004cf4
 8007654:	20004cfc 	.word	0x20004cfc

08007658 <__cvt>:
 8007658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	ec57 6b10 	vmov	r6, r7, d0
 8007660:	2f00      	cmp	r7, #0
 8007662:	460c      	mov	r4, r1
 8007664:	4619      	mov	r1, r3
 8007666:	463b      	mov	r3, r7
 8007668:	bfbb      	ittet	lt
 800766a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800766e:	461f      	movlt	r7, r3
 8007670:	2300      	movge	r3, #0
 8007672:	232d      	movlt	r3, #45	@ 0x2d
 8007674:	700b      	strb	r3, [r1, #0]
 8007676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007678:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800767c:	4691      	mov	r9, r2
 800767e:	f023 0820 	bic.w	r8, r3, #32
 8007682:	bfbc      	itt	lt
 8007684:	4632      	movlt	r2, r6
 8007686:	4616      	movlt	r6, r2
 8007688:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800768c:	d005      	beq.n	800769a <__cvt+0x42>
 800768e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007692:	d100      	bne.n	8007696 <__cvt+0x3e>
 8007694:	3401      	adds	r4, #1
 8007696:	2102      	movs	r1, #2
 8007698:	e000      	b.n	800769c <__cvt+0x44>
 800769a:	2103      	movs	r1, #3
 800769c:	ab03      	add	r3, sp, #12
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	ab02      	add	r3, sp, #8
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	ec47 6b10 	vmov	d0, r6, r7
 80076a8:	4653      	mov	r3, sl
 80076aa:	4622      	mov	r2, r4
 80076ac:	f000 ffa8 	bl	8008600 <_dtoa_r>
 80076b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076b4:	4605      	mov	r5, r0
 80076b6:	d119      	bne.n	80076ec <__cvt+0x94>
 80076b8:	f019 0f01 	tst.w	r9, #1
 80076bc:	d00e      	beq.n	80076dc <__cvt+0x84>
 80076be:	eb00 0904 	add.w	r9, r0, r4
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	f7f9 fa1d 	bl	8000b08 <__aeabi_dcmpeq>
 80076ce:	b108      	cbz	r0, 80076d4 <__cvt+0x7c>
 80076d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80076d4:	2230      	movs	r2, #48	@ 0x30
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	454b      	cmp	r3, r9
 80076da:	d31e      	bcc.n	800771a <__cvt+0xc2>
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076e0:	1b5b      	subs	r3, r3, r5
 80076e2:	4628      	mov	r0, r5
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	b004      	add	sp, #16
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076f0:	eb00 0904 	add.w	r9, r0, r4
 80076f4:	d1e5      	bne.n	80076c2 <__cvt+0x6a>
 80076f6:	7803      	ldrb	r3, [r0, #0]
 80076f8:	2b30      	cmp	r3, #48	@ 0x30
 80076fa:	d10a      	bne.n	8007712 <__cvt+0xba>
 80076fc:	2200      	movs	r2, #0
 80076fe:	2300      	movs	r3, #0
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f9 fa00 	bl	8000b08 <__aeabi_dcmpeq>
 8007708:	b918      	cbnz	r0, 8007712 <__cvt+0xba>
 800770a:	f1c4 0401 	rsb	r4, r4, #1
 800770e:	f8ca 4000 	str.w	r4, [sl]
 8007712:	f8da 3000 	ldr.w	r3, [sl]
 8007716:	4499      	add	r9, r3
 8007718:	e7d3      	b.n	80076c2 <__cvt+0x6a>
 800771a:	1c59      	adds	r1, r3, #1
 800771c:	9103      	str	r1, [sp, #12]
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	e7d9      	b.n	80076d6 <__cvt+0x7e>

08007722 <__exponent>:
 8007722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007724:	2900      	cmp	r1, #0
 8007726:	bfba      	itte	lt
 8007728:	4249      	neglt	r1, r1
 800772a:	232d      	movlt	r3, #45	@ 0x2d
 800772c:	232b      	movge	r3, #43	@ 0x2b
 800772e:	2909      	cmp	r1, #9
 8007730:	7002      	strb	r2, [r0, #0]
 8007732:	7043      	strb	r3, [r0, #1]
 8007734:	dd29      	ble.n	800778a <__exponent+0x68>
 8007736:	f10d 0307 	add.w	r3, sp, #7
 800773a:	461d      	mov	r5, r3
 800773c:	270a      	movs	r7, #10
 800773e:	461a      	mov	r2, r3
 8007740:	fbb1 f6f7 	udiv	r6, r1, r7
 8007744:	fb07 1416 	mls	r4, r7, r6, r1
 8007748:	3430      	adds	r4, #48	@ 0x30
 800774a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800774e:	460c      	mov	r4, r1
 8007750:	2c63      	cmp	r4, #99	@ 0x63
 8007752:	f103 33ff 	add.w	r3, r3, #4294967295
 8007756:	4631      	mov	r1, r6
 8007758:	dcf1      	bgt.n	800773e <__exponent+0x1c>
 800775a:	3130      	adds	r1, #48	@ 0x30
 800775c:	1e94      	subs	r4, r2, #2
 800775e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007762:	1c41      	adds	r1, r0, #1
 8007764:	4623      	mov	r3, r4
 8007766:	42ab      	cmp	r3, r5
 8007768:	d30a      	bcc.n	8007780 <__exponent+0x5e>
 800776a:	f10d 0309 	add.w	r3, sp, #9
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	42ac      	cmp	r4, r5
 8007772:	bf88      	it	hi
 8007774:	2300      	movhi	r3, #0
 8007776:	3302      	adds	r3, #2
 8007778:	4403      	add	r3, r0
 800777a:	1a18      	subs	r0, r3, r0
 800777c:	b003      	add	sp, #12
 800777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007780:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007784:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007788:	e7ed      	b.n	8007766 <__exponent+0x44>
 800778a:	2330      	movs	r3, #48	@ 0x30
 800778c:	3130      	adds	r1, #48	@ 0x30
 800778e:	7083      	strb	r3, [r0, #2]
 8007790:	70c1      	strb	r1, [r0, #3]
 8007792:	1d03      	adds	r3, r0, #4
 8007794:	e7f1      	b.n	800777a <__exponent+0x58>
	...

08007798 <_printf_float>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	b08d      	sub	sp, #52	@ 0x34
 800779e:	460c      	mov	r4, r1
 80077a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077a4:	4616      	mov	r6, r2
 80077a6:	461f      	mov	r7, r3
 80077a8:	4605      	mov	r5, r0
 80077aa:	f000 fdbd 	bl	8008328 <_localeconv_r>
 80077ae:	6803      	ldr	r3, [r0, #0]
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f8 fd7c 	bl	80002b0 <strlen>
 80077b8:	2300      	movs	r3, #0
 80077ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80077bc:	f8d8 3000 	ldr.w	r3, [r8]
 80077c0:	9005      	str	r0, [sp, #20]
 80077c2:	3307      	adds	r3, #7
 80077c4:	f023 0307 	bic.w	r3, r3, #7
 80077c8:	f103 0208 	add.w	r2, r3, #8
 80077cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077d0:	f8d4 b000 	ldr.w	fp, [r4]
 80077d4:	f8c8 2000 	str.w	r2, [r8]
 80077d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80077e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80077ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077ee:	4b9c      	ldr	r3, [pc, #624]	@ (8007a60 <_printf_float+0x2c8>)
 80077f0:	f04f 32ff 	mov.w	r2, #4294967295
 80077f4:	f7f9 f9ba 	bl	8000b6c <__aeabi_dcmpun>
 80077f8:	bb70      	cbnz	r0, 8007858 <_printf_float+0xc0>
 80077fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077fe:	4b98      	ldr	r3, [pc, #608]	@ (8007a60 <_printf_float+0x2c8>)
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	f7f9 f994 	bl	8000b30 <__aeabi_dcmple>
 8007808:	bb30      	cbnz	r0, 8007858 <_printf_float+0xc0>
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4640      	mov	r0, r8
 8007810:	4649      	mov	r1, r9
 8007812:	f7f9 f983 	bl	8000b1c <__aeabi_dcmplt>
 8007816:	b110      	cbz	r0, 800781e <_printf_float+0x86>
 8007818:	232d      	movs	r3, #45	@ 0x2d
 800781a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800781e:	4a91      	ldr	r2, [pc, #580]	@ (8007a64 <_printf_float+0x2cc>)
 8007820:	4b91      	ldr	r3, [pc, #580]	@ (8007a68 <_printf_float+0x2d0>)
 8007822:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007826:	bf8c      	ite	hi
 8007828:	4690      	movhi	r8, r2
 800782a:	4698      	movls	r8, r3
 800782c:	2303      	movs	r3, #3
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	f02b 0304 	bic.w	r3, fp, #4
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	f04f 0900 	mov.w	r9, #0
 800783a:	9700      	str	r7, [sp, #0]
 800783c:	4633      	mov	r3, r6
 800783e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 f9d2 	bl	8007bec <_printf_common>
 8007848:	3001      	adds	r0, #1
 800784a:	f040 808d 	bne.w	8007968 <_printf_float+0x1d0>
 800784e:	f04f 30ff 	mov.w	r0, #4294967295
 8007852:	b00d      	add	sp, #52	@ 0x34
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f9 f984 	bl	8000b6c <__aeabi_dcmpun>
 8007864:	b140      	cbz	r0, 8007878 <_printf_float+0xe0>
 8007866:	464b      	mov	r3, r9
 8007868:	2b00      	cmp	r3, #0
 800786a:	bfbc      	itt	lt
 800786c:	232d      	movlt	r3, #45	@ 0x2d
 800786e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007872:	4a7e      	ldr	r2, [pc, #504]	@ (8007a6c <_printf_float+0x2d4>)
 8007874:	4b7e      	ldr	r3, [pc, #504]	@ (8007a70 <_printf_float+0x2d8>)
 8007876:	e7d4      	b.n	8007822 <_printf_float+0x8a>
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800787e:	9206      	str	r2, [sp, #24]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	d13b      	bne.n	80078fc <_printf_float+0x164>
 8007884:	2306      	movs	r3, #6
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800788c:	2300      	movs	r3, #0
 800788e:	6022      	str	r2, [r4, #0]
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	ab0a      	add	r3, sp, #40	@ 0x28
 8007894:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007898:	ab09      	add	r3, sp, #36	@ 0x24
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	6861      	ldr	r1, [r4, #4]
 800789e:	ec49 8b10 	vmov	d0, r8, r9
 80078a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078a6:	4628      	mov	r0, r5
 80078a8:	f7ff fed6 	bl	8007658 <__cvt>
 80078ac:	9b06      	ldr	r3, [sp, #24]
 80078ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078b0:	2b47      	cmp	r3, #71	@ 0x47
 80078b2:	4680      	mov	r8, r0
 80078b4:	d129      	bne.n	800790a <_printf_float+0x172>
 80078b6:	1cc8      	adds	r0, r1, #3
 80078b8:	db02      	blt.n	80078c0 <_printf_float+0x128>
 80078ba:	6863      	ldr	r3, [r4, #4]
 80078bc:	4299      	cmp	r1, r3
 80078be:	dd41      	ble.n	8007944 <_printf_float+0x1ac>
 80078c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80078c4:	fa5f fa8a 	uxtb.w	sl, sl
 80078c8:	3901      	subs	r1, #1
 80078ca:	4652      	mov	r2, sl
 80078cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80078d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80078d2:	f7ff ff26 	bl	8007722 <__exponent>
 80078d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078d8:	1813      	adds	r3, r2, r0
 80078da:	2a01      	cmp	r2, #1
 80078dc:	4681      	mov	r9, r0
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	dc02      	bgt.n	80078e8 <_printf_float+0x150>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	07d2      	lsls	r2, r2, #31
 80078e6:	d501      	bpl.n	80078ec <_printf_float+0x154>
 80078e8:	3301      	adds	r3, #1
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0a2      	beq.n	800783a <_printf_float+0xa2>
 80078f4:	232d      	movs	r3, #45	@ 0x2d
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fa:	e79e      	b.n	800783a <_printf_float+0xa2>
 80078fc:	9a06      	ldr	r2, [sp, #24]
 80078fe:	2a47      	cmp	r2, #71	@ 0x47
 8007900:	d1c2      	bne.n	8007888 <_printf_float+0xf0>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1c0      	bne.n	8007888 <_printf_float+0xf0>
 8007906:	2301      	movs	r3, #1
 8007908:	e7bd      	b.n	8007886 <_printf_float+0xee>
 800790a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800790e:	d9db      	bls.n	80078c8 <_printf_float+0x130>
 8007910:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007914:	d118      	bne.n	8007948 <_printf_float+0x1b0>
 8007916:	2900      	cmp	r1, #0
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	dd0b      	ble.n	8007934 <_printf_float+0x19c>
 800791c:	6121      	str	r1, [r4, #16]
 800791e:	b913      	cbnz	r3, 8007926 <_printf_float+0x18e>
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	07d0      	lsls	r0, r2, #31
 8007924:	d502      	bpl.n	800792c <_printf_float+0x194>
 8007926:	3301      	adds	r3, #1
 8007928:	440b      	add	r3, r1
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800792e:	f04f 0900 	mov.w	r9, #0
 8007932:	e7db      	b.n	80078ec <_printf_float+0x154>
 8007934:	b913      	cbnz	r3, 800793c <_printf_float+0x1a4>
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	07d2      	lsls	r2, r2, #31
 800793a:	d501      	bpl.n	8007940 <_printf_float+0x1a8>
 800793c:	3302      	adds	r3, #2
 800793e:	e7f4      	b.n	800792a <_printf_float+0x192>
 8007940:	2301      	movs	r3, #1
 8007942:	e7f2      	b.n	800792a <_printf_float+0x192>
 8007944:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800794a:	4299      	cmp	r1, r3
 800794c:	db05      	blt.n	800795a <_printf_float+0x1c2>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	6121      	str	r1, [r4, #16]
 8007952:	07d8      	lsls	r0, r3, #31
 8007954:	d5ea      	bpl.n	800792c <_printf_float+0x194>
 8007956:	1c4b      	adds	r3, r1, #1
 8007958:	e7e7      	b.n	800792a <_printf_float+0x192>
 800795a:	2900      	cmp	r1, #0
 800795c:	bfd4      	ite	le
 800795e:	f1c1 0202 	rsble	r2, r1, #2
 8007962:	2201      	movgt	r2, #1
 8007964:	4413      	add	r3, r2
 8007966:	e7e0      	b.n	800792a <_printf_float+0x192>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	055a      	lsls	r2, r3, #21
 800796c:	d407      	bmi.n	800797e <_printf_float+0x1e6>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	4642      	mov	r2, r8
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	d12b      	bne.n	80079d4 <_printf_float+0x23c>
 800797c:	e767      	b.n	800784e <_printf_float+0xb6>
 800797e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007982:	f240 80dd 	bls.w	8007b40 <_printf_float+0x3a8>
 8007986:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	f7f9 f8bb 	bl	8000b08 <__aeabi_dcmpeq>
 8007992:	2800      	cmp	r0, #0
 8007994:	d033      	beq.n	80079fe <_printf_float+0x266>
 8007996:	4a37      	ldr	r2, [pc, #220]	@ (8007a74 <_printf_float+0x2dc>)
 8007998:	2301      	movs	r3, #1
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	47b8      	blx	r7
 80079a0:	3001      	adds	r0, #1
 80079a2:	f43f af54 	beq.w	800784e <_printf_float+0xb6>
 80079a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079aa:	4543      	cmp	r3, r8
 80079ac:	db02      	blt.n	80079b4 <_printf_float+0x21c>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	07d8      	lsls	r0, r3, #31
 80079b2:	d50f      	bpl.n	80079d4 <_printf_float+0x23c>
 80079b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	f43f af45 	beq.w	800784e <_printf_float+0xb6>
 80079c4:	f04f 0900 	mov.w	r9, #0
 80079c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80079cc:	f104 0a1a 	add.w	sl, r4, #26
 80079d0:	45c8      	cmp	r8, r9
 80079d2:	dc09      	bgt.n	80079e8 <_printf_float+0x250>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	079b      	lsls	r3, r3, #30
 80079d8:	f100 8103 	bmi.w	8007be2 <_printf_float+0x44a>
 80079dc:	68e0      	ldr	r0, [r4, #12]
 80079de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079e0:	4298      	cmp	r0, r3
 80079e2:	bfb8      	it	lt
 80079e4:	4618      	movlt	r0, r3
 80079e6:	e734      	b.n	8007852 <_printf_float+0xba>
 80079e8:	2301      	movs	r3, #1
 80079ea:	4652      	mov	r2, sl
 80079ec:	4631      	mov	r1, r6
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b8      	blx	r7
 80079f2:	3001      	adds	r0, #1
 80079f4:	f43f af2b 	beq.w	800784e <_printf_float+0xb6>
 80079f8:	f109 0901 	add.w	r9, r9, #1
 80079fc:	e7e8      	b.n	80079d0 <_printf_float+0x238>
 80079fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dc39      	bgt.n	8007a78 <_printf_float+0x2e0>
 8007a04:	4a1b      	ldr	r2, [pc, #108]	@ (8007a74 <_printf_float+0x2dc>)
 8007a06:	2301      	movs	r3, #1
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af1d 	beq.w	800784e <_printf_float+0xb6>
 8007a14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a18:	ea59 0303 	orrs.w	r3, r9, r3
 8007a1c:	d102      	bne.n	8007a24 <_printf_float+0x28c>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	07d9      	lsls	r1, r3, #31
 8007a22:	d5d7      	bpl.n	80079d4 <_printf_float+0x23c>
 8007a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b8      	blx	r7
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f43f af0d 	beq.w	800784e <_printf_float+0xb6>
 8007a34:	f04f 0a00 	mov.w	sl, #0
 8007a38:	f104 0b1a 	add.w	fp, r4, #26
 8007a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3e:	425b      	negs	r3, r3
 8007a40:	4553      	cmp	r3, sl
 8007a42:	dc01      	bgt.n	8007a48 <_printf_float+0x2b0>
 8007a44:	464b      	mov	r3, r9
 8007a46:	e793      	b.n	8007970 <_printf_float+0x1d8>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	465a      	mov	r2, fp
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f aefb 	beq.w	800784e <_printf_float+0xb6>
 8007a58:	f10a 0a01 	add.w	sl, sl, #1
 8007a5c:	e7ee      	b.n	8007a3c <_printf_float+0x2a4>
 8007a5e:	bf00      	nop
 8007a60:	7fefffff 	.word	0x7fefffff
 8007a64:	0800a214 	.word	0x0800a214
 8007a68:	0800a210 	.word	0x0800a210
 8007a6c:	0800a21c 	.word	0x0800a21c
 8007a70:	0800a218 	.word	0x0800a218
 8007a74:	0800a220 	.word	0x0800a220
 8007a78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a7e:	4553      	cmp	r3, sl
 8007a80:	bfa8      	it	ge
 8007a82:	4653      	movge	r3, sl
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	4699      	mov	r9, r3
 8007a88:	dc36      	bgt.n	8007af8 <_printf_float+0x360>
 8007a8a:	f04f 0b00 	mov.w	fp, #0
 8007a8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a92:	f104 021a 	add.w	r2, r4, #26
 8007a96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a98:	9306      	str	r3, [sp, #24]
 8007a9a:	eba3 0309 	sub.w	r3, r3, r9
 8007a9e:	455b      	cmp	r3, fp
 8007aa0:	dc31      	bgt.n	8007b06 <_printf_float+0x36e>
 8007aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa4:	459a      	cmp	sl, r3
 8007aa6:	dc3a      	bgt.n	8007b1e <_printf_float+0x386>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	07da      	lsls	r2, r3, #31
 8007aac:	d437      	bmi.n	8007b1e <_printf_float+0x386>
 8007aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab0:	ebaa 0903 	sub.w	r9, sl, r3
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	ebaa 0303 	sub.w	r3, sl, r3
 8007aba:	4599      	cmp	r9, r3
 8007abc:	bfa8      	it	ge
 8007abe:	4699      	movge	r9, r3
 8007ac0:	f1b9 0f00 	cmp.w	r9, #0
 8007ac4:	dc33      	bgt.n	8007b2e <_printf_float+0x396>
 8007ac6:	f04f 0800 	mov.w	r8, #0
 8007aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ace:	f104 0b1a 	add.w	fp, r4, #26
 8007ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ad8:	eba3 0309 	sub.w	r3, r3, r9
 8007adc:	4543      	cmp	r3, r8
 8007ade:	f77f af79 	ble.w	80079d4 <_printf_float+0x23c>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	465a      	mov	r2, fp
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	f43f aeae 	beq.w	800784e <_printf_float+0xb6>
 8007af2:	f108 0801 	add.w	r8, r8, #1
 8007af6:	e7ec      	b.n	8007ad2 <_printf_float+0x33a>
 8007af8:	4642      	mov	r2, r8
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	d1c2      	bne.n	8007a8a <_printf_float+0x2f2>
 8007b04:	e6a3      	b.n	800784e <_printf_float+0xb6>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	9206      	str	r2, [sp, #24]
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	f43f ae9c 	beq.w	800784e <_printf_float+0xb6>
 8007b16:	9a06      	ldr	r2, [sp, #24]
 8007b18:	f10b 0b01 	add.w	fp, fp, #1
 8007b1c:	e7bb      	b.n	8007a96 <_printf_float+0x2fe>
 8007b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1c0      	bne.n	8007aae <_printf_float+0x316>
 8007b2c:	e68f      	b.n	800784e <_printf_float+0xb6>
 8007b2e:	9a06      	ldr	r2, [sp, #24]
 8007b30:	464b      	mov	r3, r9
 8007b32:	4442      	add	r2, r8
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d1c3      	bne.n	8007ac6 <_printf_float+0x32e>
 8007b3e:	e686      	b.n	800784e <_printf_float+0xb6>
 8007b40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b44:	f1ba 0f01 	cmp.w	sl, #1
 8007b48:	dc01      	bgt.n	8007b4e <_printf_float+0x3b6>
 8007b4a:	07db      	lsls	r3, r3, #31
 8007b4c:	d536      	bpl.n	8007bbc <_printf_float+0x424>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4642      	mov	r2, r8
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f ae78 	beq.w	800784e <_printf_float+0xb6>
 8007b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f ae70 	beq.w	800784e <_printf_float+0xb6>
 8007b6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b72:	2200      	movs	r2, #0
 8007b74:	2300      	movs	r3, #0
 8007b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b7a:	f7f8 ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 8007b7e:	b9c0      	cbnz	r0, 8007bb2 <_printf_float+0x41a>
 8007b80:	4653      	mov	r3, sl
 8007b82:	f108 0201 	add.w	r2, r8, #1
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d10c      	bne.n	8007baa <_printf_float+0x412>
 8007b90:	e65d      	b.n	800784e <_printf_float+0xb6>
 8007b92:	2301      	movs	r3, #1
 8007b94:	465a      	mov	r2, fp
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f ae56 	beq.w	800784e <_printf_float+0xb6>
 8007ba2:	f108 0801 	add.w	r8, r8, #1
 8007ba6:	45d0      	cmp	r8, sl
 8007ba8:	dbf3      	blt.n	8007b92 <_printf_float+0x3fa>
 8007baa:	464b      	mov	r3, r9
 8007bac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007bb0:	e6df      	b.n	8007972 <_printf_float+0x1da>
 8007bb2:	f04f 0800 	mov.w	r8, #0
 8007bb6:	f104 0b1a 	add.w	fp, r4, #26
 8007bba:	e7f4      	b.n	8007ba6 <_printf_float+0x40e>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	e7e1      	b.n	8007b86 <_printf_float+0x3ee>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	464a      	mov	r2, r9
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f ae3e 	beq.w	800784e <_printf_float+0xb6>
 8007bd2:	f108 0801 	add.w	r8, r8, #1
 8007bd6:	68e3      	ldr	r3, [r4, #12]
 8007bd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bda:	1a5b      	subs	r3, r3, r1
 8007bdc:	4543      	cmp	r3, r8
 8007bde:	dcf0      	bgt.n	8007bc2 <_printf_float+0x42a>
 8007be0:	e6fc      	b.n	80079dc <_printf_float+0x244>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	f104 0919 	add.w	r9, r4, #25
 8007bea:	e7f4      	b.n	8007bd6 <_printf_float+0x43e>

08007bec <_printf_common>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	4698      	mov	r8, r3
 8007bf4:	688a      	ldr	r2, [r1, #8]
 8007bf6:	690b      	ldr	r3, [r1, #16]
 8007bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bfb8      	it	lt
 8007c00:	4613      	movlt	r3, r2
 8007c02:	6033      	str	r3, [r6, #0]
 8007c04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c08:	4607      	mov	r7, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	b10a      	cbz	r2, 8007c12 <_printf_common+0x26>
 8007c0e:	3301      	adds	r3, #1
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	0699      	lsls	r1, r3, #26
 8007c16:	bf42      	ittt	mi
 8007c18:	6833      	ldrmi	r3, [r6, #0]
 8007c1a:	3302      	addmi	r3, #2
 8007c1c:	6033      	strmi	r3, [r6, #0]
 8007c1e:	6825      	ldr	r5, [r4, #0]
 8007c20:	f015 0506 	ands.w	r5, r5, #6
 8007c24:	d106      	bne.n	8007c34 <_printf_common+0x48>
 8007c26:	f104 0a19 	add.w	sl, r4, #25
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	6832      	ldr	r2, [r6, #0]
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	dc26      	bgt.n	8007c82 <_printf_common+0x96>
 8007c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	3b00      	subs	r3, #0
 8007c3c:	bf18      	it	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	0692      	lsls	r2, r2, #26
 8007c42:	d42b      	bmi.n	8007c9c <_printf_common+0xb0>
 8007c44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c48:	4641      	mov	r1, r8
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	47c8      	blx	r9
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d01e      	beq.n	8007c90 <_printf_common+0xa4>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	6922      	ldr	r2, [r4, #16]
 8007c56:	f003 0306 	and.w	r3, r3, #6
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	bf02      	ittt	eq
 8007c5e:	68e5      	ldreq	r5, [r4, #12]
 8007c60:	6833      	ldreq	r3, [r6, #0]
 8007c62:	1aed      	subeq	r5, r5, r3
 8007c64:	68a3      	ldr	r3, [r4, #8]
 8007c66:	bf0c      	ite	eq
 8007c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c6c:	2500      	movne	r5, #0
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	bfc4      	itt	gt
 8007c72:	1a9b      	subgt	r3, r3, r2
 8007c74:	18ed      	addgt	r5, r5, r3
 8007c76:	2600      	movs	r6, #0
 8007c78:	341a      	adds	r4, #26
 8007c7a:	42b5      	cmp	r5, r6
 8007c7c:	d11a      	bne.n	8007cb4 <_printf_common+0xc8>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	e008      	b.n	8007c94 <_printf_common+0xa8>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4652      	mov	r2, sl
 8007c86:	4641      	mov	r1, r8
 8007c88:	4638      	mov	r0, r7
 8007c8a:	47c8      	blx	r9
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d103      	bne.n	8007c98 <_printf_common+0xac>
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c98:	3501      	adds	r5, #1
 8007c9a:	e7c6      	b.n	8007c2a <_printf_common+0x3e>
 8007c9c:	18e1      	adds	r1, r4, r3
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	2030      	movs	r0, #48	@ 0x30
 8007ca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ca6:	4422      	add	r2, r4
 8007ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	e7c7      	b.n	8007c44 <_printf_common+0x58>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	4641      	mov	r1, r8
 8007cba:	4638      	mov	r0, r7
 8007cbc:	47c8      	blx	r9
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d0e6      	beq.n	8007c90 <_printf_common+0xa4>
 8007cc2:	3601      	adds	r6, #1
 8007cc4:	e7d9      	b.n	8007c7a <_printf_common+0x8e>
	...

08007cc8 <_printf_i>:
 8007cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ccc:	7e0f      	ldrb	r7, [r1, #24]
 8007cce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cd0:	2f78      	cmp	r7, #120	@ 0x78
 8007cd2:	4691      	mov	r9, r2
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	469a      	mov	sl, r3
 8007cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cde:	d807      	bhi.n	8007cf0 <_printf_i+0x28>
 8007ce0:	2f62      	cmp	r7, #98	@ 0x62
 8007ce2:	d80a      	bhi.n	8007cfa <_printf_i+0x32>
 8007ce4:	2f00      	cmp	r7, #0
 8007ce6:	f000 80d1 	beq.w	8007e8c <_printf_i+0x1c4>
 8007cea:	2f58      	cmp	r7, #88	@ 0x58
 8007cec:	f000 80b8 	beq.w	8007e60 <_printf_i+0x198>
 8007cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cf8:	e03a      	b.n	8007d70 <_printf_i+0xa8>
 8007cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cfe:	2b15      	cmp	r3, #21
 8007d00:	d8f6      	bhi.n	8007cf0 <_printf_i+0x28>
 8007d02:	a101      	add	r1, pc, #4	@ (adr r1, 8007d08 <_printf_i+0x40>)
 8007d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d08:	08007d61 	.word	0x08007d61
 8007d0c:	08007d75 	.word	0x08007d75
 8007d10:	08007cf1 	.word	0x08007cf1
 8007d14:	08007cf1 	.word	0x08007cf1
 8007d18:	08007cf1 	.word	0x08007cf1
 8007d1c:	08007cf1 	.word	0x08007cf1
 8007d20:	08007d75 	.word	0x08007d75
 8007d24:	08007cf1 	.word	0x08007cf1
 8007d28:	08007cf1 	.word	0x08007cf1
 8007d2c:	08007cf1 	.word	0x08007cf1
 8007d30:	08007cf1 	.word	0x08007cf1
 8007d34:	08007e73 	.word	0x08007e73
 8007d38:	08007d9f 	.word	0x08007d9f
 8007d3c:	08007e2d 	.word	0x08007e2d
 8007d40:	08007cf1 	.word	0x08007cf1
 8007d44:	08007cf1 	.word	0x08007cf1
 8007d48:	08007e95 	.word	0x08007e95
 8007d4c:	08007cf1 	.word	0x08007cf1
 8007d50:	08007d9f 	.word	0x08007d9f
 8007d54:	08007cf1 	.word	0x08007cf1
 8007d58:	08007cf1 	.word	0x08007cf1
 8007d5c:	08007e35 	.word	0x08007e35
 8007d60:	6833      	ldr	r3, [r6, #0]
 8007d62:	1d1a      	adds	r2, r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6032      	str	r2, [r6, #0]
 8007d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d70:	2301      	movs	r3, #1
 8007d72:	e09c      	b.n	8007eae <_printf_i+0x1e6>
 8007d74:	6833      	ldr	r3, [r6, #0]
 8007d76:	6820      	ldr	r0, [r4, #0]
 8007d78:	1d19      	adds	r1, r3, #4
 8007d7a:	6031      	str	r1, [r6, #0]
 8007d7c:	0606      	lsls	r6, r0, #24
 8007d7e:	d501      	bpl.n	8007d84 <_printf_i+0xbc>
 8007d80:	681d      	ldr	r5, [r3, #0]
 8007d82:	e003      	b.n	8007d8c <_printf_i+0xc4>
 8007d84:	0645      	lsls	r5, r0, #25
 8007d86:	d5fb      	bpl.n	8007d80 <_printf_i+0xb8>
 8007d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d8c:	2d00      	cmp	r5, #0
 8007d8e:	da03      	bge.n	8007d98 <_printf_i+0xd0>
 8007d90:	232d      	movs	r3, #45	@ 0x2d
 8007d92:	426d      	negs	r5, r5
 8007d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d98:	4858      	ldr	r0, [pc, #352]	@ (8007efc <_printf_i+0x234>)
 8007d9a:	230a      	movs	r3, #10
 8007d9c:	e011      	b.n	8007dc2 <_printf_i+0xfa>
 8007d9e:	6821      	ldr	r1, [r4, #0]
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	0608      	lsls	r0, r1, #24
 8007da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007da8:	d402      	bmi.n	8007db0 <_printf_i+0xe8>
 8007daa:	0649      	lsls	r1, r1, #25
 8007dac:	bf48      	it	mi
 8007dae:	b2ad      	uxthmi	r5, r5
 8007db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007db2:	4852      	ldr	r0, [pc, #328]	@ (8007efc <_printf_i+0x234>)
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	bf14      	ite	ne
 8007db8:	230a      	movne	r3, #10
 8007dba:	2308      	moveq	r3, #8
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dc2:	6866      	ldr	r6, [r4, #4]
 8007dc4:	60a6      	str	r6, [r4, #8]
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	db05      	blt.n	8007dd6 <_printf_i+0x10e>
 8007dca:	6821      	ldr	r1, [r4, #0]
 8007dcc:	432e      	orrs	r6, r5
 8007dce:	f021 0104 	bic.w	r1, r1, #4
 8007dd2:	6021      	str	r1, [r4, #0]
 8007dd4:	d04b      	beq.n	8007e6e <_printf_i+0x1a6>
 8007dd6:	4616      	mov	r6, r2
 8007dd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ddc:	fb03 5711 	mls	r7, r3, r1, r5
 8007de0:	5dc7      	ldrb	r7, [r0, r7]
 8007de2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007de6:	462f      	mov	r7, r5
 8007de8:	42bb      	cmp	r3, r7
 8007dea:	460d      	mov	r5, r1
 8007dec:	d9f4      	bls.n	8007dd8 <_printf_i+0x110>
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d10b      	bne.n	8007e0a <_printf_i+0x142>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	07df      	lsls	r7, r3, #31
 8007df6:	d508      	bpl.n	8007e0a <_printf_i+0x142>
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	6861      	ldr	r1, [r4, #4]
 8007dfc:	4299      	cmp	r1, r3
 8007dfe:	bfde      	ittt	le
 8007e00:	2330      	movle	r3, #48	@ 0x30
 8007e02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e0a:	1b92      	subs	r2, r2, r6
 8007e0c:	6122      	str	r2, [r4, #16]
 8007e0e:	f8cd a000 	str.w	sl, [sp]
 8007e12:	464b      	mov	r3, r9
 8007e14:	aa03      	add	r2, sp, #12
 8007e16:	4621      	mov	r1, r4
 8007e18:	4640      	mov	r0, r8
 8007e1a:	f7ff fee7 	bl	8007bec <_printf_common>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d14a      	bne.n	8007eb8 <_printf_i+0x1f0>
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295
 8007e26:	b004      	add	sp, #16
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	f043 0320 	orr.w	r3, r3, #32
 8007e32:	6023      	str	r3, [r4, #0]
 8007e34:	4832      	ldr	r0, [pc, #200]	@ (8007f00 <_printf_i+0x238>)
 8007e36:	2778      	movs	r7, #120	@ 0x78
 8007e38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	6831      	ldr	r1, [r6, #0]
 8007e40:	061f      	lsls	r7, r3, #24
 8007e42:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e46:	d402      	bmi.n	8007e4e <_printf_i+0x186>
 8007e48:	065f      	lsls	r7, r3, #25
 8007e4a:	bf48      	it	mi
 8007e4c:	b2ad      	uxthmi	r5, r5
 8007e4e:	6031      	str	r1, [r6, #0]
 8007e50:	07d9      	lsls	r1, r3, #31
 8007e52:	bf44      	itt	mi
 8007e54:	f043 0320 	orrmi.w	r3, r3, #32
 8007e58:	6023      	strmi	r3, [r4, #0]
 8007e5a:	b11d      	cbz	r5, 8007e64 <_printf_i+0x19c>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	e7ad      	b.n	8007dbc <_printf_i+0xf4>
 8007e60:	4826      	ldr	r0, [pc, #152]	@ (8007efc <_printf_i+0x234>)
 8007e62:	e7e9      	b.n	8007e38 <_printf_i+0x170>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	f023 0320 	bic.w	r3, r3, #32
 8007e6a:	6023      	str	r3, [r4, #0]
 8007e6c:	e7f6      	b.n	8007e5c <_printf_i+0x194>
 8007e6e:	4616      	mov	r6, r2
 8007e70:	e7bd      	b.n	8007dee <_printf_i+0x126>
 8007e72:	6833      	ldr	r3, [r6, #0]
 8007e74:	6825      	ldr	r5, [r4, #0]
 8007e76:	6961      	ldr	r1, [r4, #20]
 8007e78:	1d18      	adds	r0, r3, #4
 8007e7a:	6030      	str	r0, [r6, #0]
 8007e7c:	062e      	lsls	r6, r5, #24
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	d501      	bpl.n	8007e86 <_printf_i+0x1be>
 8007e82:	6019      	str	r1, [r3, #0]
 8007e84:	e002      	b.n	8007e8c <_printf_i+0x1c4>
 8007e86:	0668      	lsls	r0, r5, #25
 8007e88:	d5fb      	bpl.n	8007e82 <_printf_i+0x1ba>
 8007e8a:	8019      	strh	r1, [r3, #0]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	4616      	mov	r6, r2
 8007e92:	e7bc      	b.n	8007e0e <_printf_i+0x146>
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	1d1a      	adds	r2, r3, #4
 8007e98:	6032      	str	r2, [r6, #0]
 8007e9a:	681e      	ldr	r6, [r3, #0]
 8007e9c:	6862      	ldr	r2, [r4, #4]
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7f8 f9b5 	bl	8000210 <memchr>
 8007ea6:	b108      	cbz	r0, 8007eac <_printf_i+0x1e4>
 8007ea8:	1b80      	subs	r0, r0, r6
 8007eaa:	6060      	str	r0, [r4, #4]
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eb6:	e7aa      	b.n	8007e0e <_printf_i+0x146>
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	4632      	mov	r2, r6
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	47d0      	blx	sl
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	d0ad      	beq.n	8007e22 <_printf_i+0x15a>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	079b      	lsls	r3, r3, #30
 8007eca:	d413      	bmi.n	8007ef4 <_printf_i+0x22c>
 8007ecc:	68e0      	ldr	r0, [r4, #12]
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	4298      	cmp	r0, r3
 8007ed2:	bfb8      	it	lt
 8007ed4:	4618      	movlt	r0, r3
 8007ed6:	e7a6      	b.n	8007e26 <_printf_i+0x15e>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4632      	mov	r2, r6
 8007edc:	4649      	mov	r1, r9
 8007ede:	4640      	mov	r0, r8
 8007ee0:	47d0      	blx	sl
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d09d      	beq.n	8007e22 <_printf_i+0x15a>
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	68e3      	ldr	r3, [r4, #12]
 8007eea:	9903      	ldr	r1, [sp, #12]
 8007eec:	1a5b      	subs	r3, r3, r1
 8007eee:	42ab      	cmp	r3, r5
 8007ef0:	dcf2      	bgt.n	8007ed8 <_printf_i+0x210>
 8007ef2:	e7eb      	b.n	8007ecc <_printf_i+0x204>
 8007ef4:	2500      	movs	r5, #0
 8007ef6:	f104 0619 	add.w	r6, r4, #25
 8007efa:	e7f5      	b.n	8007ee8 <_printf_i+0x220>
 8007efc:	0800a222 	.word	0x0800a222
 8007f00:	0800a233 	.word	0x0800a233

08007f04 <std>:
 8007f04:	2300      	movs	r3, #0
 8007f06:	b510      	push	{r4, lr}
 8007f08:	4604      	mov	r4, r0
 8007f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f12:	6083      	str	r3, [r0, #8]
 8007f14:	8181      	strh	r1, [r0, #12]
 8007f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f18:	81c2      	strh	r2, [r0, #14]
 8007f1a:	6183      	str	r3, [r0, #24]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	2208      	movs	r2, #8
 8007f20:	305c      	adds	r0, #92	@ 0x5c
 8007f22:	f000 f9f9 	bl	8008318 <memset>
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <std+0x58>)
 8007f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <std+0x5c>)
 8007f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x60>)
 8007f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <std+0x64>)
 8007f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <std+0x68>)
 8007f38:	6224      	str	r4, [r4, #32]
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d006      	beq.n	8007f4c <std+0x48>
 8007f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f42:	4294      	cmp	r4, r2
 8007f44:	d002      	beq.n	8007f4c <std+0x48>
 8007f46:	33d0      	adds	r3, #208	@ 0xd0
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	d105      	bne.n	8007f58 <std+0x54>
 8007f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f54:	f000 baba 	b.w	80084cc <__retarget_lock_init_recursive>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08008169 	.word	0x08008169
 8007f60:	0800818b 	.word	0x0800818b
 8007f64:	080081c3 	.word	0x080081c3
 8007f68:	080081e7 	.word	0x080081e7
 8007f6c:	20004d14 	.word	0x20004d14

08007f70 <stdio_exit_handler>:
 8007f70:	4a02      	ldr	r2, [pc, #8]	@ (8007f7c <stdio_exit_handler+0xc>)
 8007f72:	4903      	ldr	r1, [pc, #12]	@ (8007f80 <stdio_exit_handler+0x10>)
 8007f74:	4803      	ldr	r0, [pc, #12]	@ (8007f84 <stdio_exit_handler+0x14>)
 8007f76:	f000 b869 	b.w	800804c <_fwalk_sglue>
 8007f7a:	bf00      	nop
 8007f7c:	20000010 	.word	0x20000010
 8007f80:	08009e21 	.word	0x08009e21
 8007f84:	20000020 	.word	0x20000020

08007f88 <cleanup_stdio>:
 8007f88:	6841      	ldr	r1, [r0, #4]
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fbc <cleanup_stdio+0x34>)
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	d001      	beq.n	8007f98 <cleanup_stdio+0x10>
 8007f94:	f001 ff44 	bl	8009e20 <_fflush_r>
 8007f98:	68a1      	ldr	r1, [r4, #8]
 8007f9a:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <cleanup_stdio+0x38>)
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d002      	beq.n	8007fa6 <cleanup_stdio+0x1e>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f001 ff3d 	bl	8009e20 <_fflush_r>
 8007fa6:	68e1      	ldr	r1, [r4, #12]
 8007fa8:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <cleanup_stdio+0x3c>)
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d004      	beq.n	8007fb8 <cleanup_stdio+0x30>
 8007fae:	4620      	mov	r0, r4
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f001 bf34 	b.w	8009e20 <_fflush_r>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	20004d14 	.word	0x20004d14
 8007fc0:	20004d7c 	.word	0x20004d7c
 8007fc4:	20004de4 	.word	0x20004de4

08007fc8 <global_stdio_init.part.0>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff8 <global_stdio_init.part.0+0x30>)
 8007fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8007ffc <global_stdio_init.part.0+0x34>)
 8007fce:	4a0c      	ldr	r2, [pc, #48]	@ (8008000 <global_stdio_init.part.0+0x38>)
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2104      	movs	r1, #4
 8007fd8:	f7ff ff94 	bl	8007f04 <std>
 8007fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	2109      	movs	r1, #9
 8007fe4:	f7ff ff8e 	bl	8007f04 <std>
 8007fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fec:	2202      	movs	r2, #2
 8007fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff2:	2112      	movs	r1, #18
 8007ff4:	f7ff bf86 	b.w	8007f04 <std>
 8007ff8:	20004e4c 	.word	0x20004e4c
 8007ffc:	20004d14 	.word	0x20004d14
 8008000:	08007f71 	.word	0x08007f71

08008004 <__sfp_lock_acquire>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__sfp_lock_acquire+0x8>)
 8008006:	f000 ba62 	b.w	80084ce <__retarget_lock_acquire_recursive>
 800800a:	bf00      	nop
 800800c:	20004e55 	.word	0x20004e55

08008010 <__sfp_lock_release>:
 8008010:	4801      	ldr	r0, [pc, #4]	@ (8008018 <__sfp_lock_release+0x8>)
 8008012:	f000 ba5d 	b.w	80084d0 <__retarget_lock_release_recursive>
 8008016:	bf00      	nop
 8008018:	20004e55 	.word	0x20004e55

0800801c <__sinit>:
 800801c:	b510      	push	{r4, lr}
 800801e:	4604      	mov	r4, r0
 8008020:	f7ff fff0 	bl	8008004 <__sfp_lock_acquire>
 8008024:	6a23      	ldr	r3, [r4, #32]
 8008026:	b11b      	cbz	r3, 8008030 <__sinit+0x14>
 8008028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800802c:	f7ff bff0 	b.w	8008010 <__sfp_lock_release>
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <__sinit+0x28>)
 8008032:	6223      	str	r3, [r4, #32]
 8008034:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <__sinit+0x2c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f5      	bne.n	8008028 <__sinit+0xc>
 800803c:	f7ff ffc4 	bl	8007fc8 <global_stdio_init.part.0>
 8008040:	e7f2      	b.n	8008028 <__sinit+0xc>
 8008042:	bf00      	nop
 8008044:	08007f89 	.word	0x08007f89
 8008048:	20004e4c 	.word	0x20004e4c

0800804c <_fwalk_sglue>:
 800804c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008050:	4607      	mov	r7, r0
 8008052:	4688      	mov	r8, r1
 8008054:	4614      	mov	r4, r2
 8008056:	2600      	movs	r6, #0
 8008058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800805c:	f1b9 0901 	subs.w	r9, r9, #1
 8008060:	d505      	bpl.n	800806e <_fwalk_sglue+0x22>
 8008062:	6824      	ldr	r4, [r4, #0]
 8008064:	2c00      	cmp	r4, #0
 8008066:	d1f7      	bne.n	8008058 <_fwalk_sglue+0xc>
 8008068:	4630      	mov	r0, r6
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d907      	bls.n	8008084 <_fwalk_sglue+0x38>
 8008074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008078:	3301      	adds	r3, #1
 800807a:	d003      	beq.n	8008084 <_fwalk_sglue+0x38>
 800807c:	4629      	mov	r1, r5
 800807e:	4638      	mov	r0, r7
 8008080:	47c0      	blx	r8
 8008082:	4306      	orrs	r6, r0
 8008084:	3568      	adds	r5, #104	@ 0x68
 8008086:	e7e9      	b.n	800805c <_fwalk_sglue+0x10>

08008088 <iprintf>:
 8008088:	b40f      	push	{r0, r1, r2, r3}
 800808a:	b507      	push	{r0, r1, r2, lr}
 800808c:	4906      	ldr	r1, [pc, #24]	@ (80080a8 <iprintf+0x20>)
 800808e:	ab04      	add	r3, sp, #16
 8008090:	6808      	ldr	r0, [r1, #0]
 8008092:	f853 2b04 	ldr.w	r2, [r3], #4
 8008096:	6881      	ldr	r1, [r0, #8]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	f001 fd25 	bl	8009ae8 <_vfiprintf_r>
 800809e:	b003      	add	sp, #12
 80080a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a4:	b004      	add	sp, #16
 80080a6:	4770      	bx	lr
 80080a8:	2000001c 	.word	0x2000001c

080080ac <_puts_r>:
 80080ac:	6a03      	ldr	r3, [r0, #32]
 80080ae:	b570      	push	{r4, r5, r6, lr}
 80080b0:	6884      	ldr	r4, [r0, #8]
 80080b2:	4605      	mov	r5, r0
 80080b4:	460e      	mov	r6, r1
 80080b6:	b90b      	cbnz	r3, 80080bc <_puts_r+0x10>
 80080b8:	f7ff ffb0 	bl	800801c <__sinit>
 80080bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_puts_r+0x22>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	0598      	lsls	r0, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_puts_r+0x22>
 80080c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ca:	f000 fa00 	bl	80084ce <__retarget_lock_acquire_recursive>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	0719      	lsls	r1, r3, #28
 80080d2:	d502      	bpl.n	80080da <_puts_r+0x2e>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d135      	bne.n	8008146 <_puts_r+0x9a>
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f8c5 	bl	800826c <__swsetup_r>
 80080e2:	b380      	cbz	r0, 8008146 <_puts_r+0x9a>
 80080e4:	f04f 35ff 	mov.w	r5, #4294967295
 80080e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ea:	07da      	lsls	r2, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_puts_r+0x4e>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	059b      	lsls	r3, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_puts_r+0x4e>
 80080f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f6:	f000 f9eb 	bl	80084d0 <__retarget_lock_release_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da04      	bge.n	800810c <_puts_r+0x60>
 8008102:	69a2      	ldr	r2, [r4, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	dc17      	bgt.n	8008138 <_puts_r+0x8c>
 8008108:	290a      	cmp	r1, #10
 800810a:	d015      	beq.n	8008138 <_puts_r+0x8c>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	7019      	strb	r1, [r3, #0]
 8008114:	68a3      	ldr	r3, [r4, #8]
 8008116:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800811a:	3b01      	subs	r3, #1
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	2900      	cmp	r1, #0
 8008120:	d1ed      	bne.n	80080fe <_puts_r+0x52>
 8008122:	2b00      	cmp	r3, #0
 8008124:	da11      	bge.n	800814a <_puts_r+0x9e>
 8008126:	4622      	mov	r2, r4
 8008128:	210a      	movs	r1, #10
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f85f 	bl	80081ee <__swbuf_r>
 8008130:	3001      	adds	r0, #1
 8008132:	d0d7      	beq.n	80080e4 <_puts_r+0x38>
 8008134:	250a      	movs	r5, #10
 8008136:	e7d7      	b.n	80080e8 <_puts_r+0x3c>
 8008138:	4622      	mov	r2, r4
 800813a:	4628      	mov	r0, r5
 800813c:	f000 f857 	bl	80081ee <__swbuf_r>
 8008140:	3001      	adds	r0, #1
 8008142:	d1e7      	bne.n	8008114 <_puts_r+0x68>
 8008144:	e7ce      	b.n	80080e4 <_puts_r+0x38>
 8008146:	3e01      	subs	r6, #1
 8008148:	e7e4      	b.n	8008114 <_puts_r+0x68>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	220a      	movs	r2, #10
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e7ee      	b.n	8008134 <_puts_r+0x88>
	...

08008158 <puts>:
 8008158:	4b02      	ldr	r3, [pc, #8]	@ (8008164 <puts+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f7ff bfa5 	b.w	80080ac <_puts_r>
 8008162:	bf00      	nop
 8008164:	2000001c 	.word	0x2000001c

08008168 <__sread>:
 8008168:	b510      	push	{r4, lr}
 800816a:	460c      	mov	r4, r1
 800816c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008170:	f000 f95e 	bl	8008430 <_read_r>
 8008174:	2800      	cmp	r0, #0
 8008176:	bfab      	itete	ge
 8008178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800817a:	89a3      	ldrhlt	r3, [r4, #12]
 800817c:	181b      	addge	r3, r3, r0
 800817e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008182:	bfac      	ite	ge
 8008184:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008186:	81a3      	strhlt	r3, [r4, #12]
 8008188:	bd10      	pop	{r4, pc}

0800818a <__swrite>:
 800818a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	461f      	mov	r7, r3
 8008190:	898b      	ldrh	r3, [r1, #12]
 8008192:	05db      	lsls	r3, r3, #23
 8008194:	4605      	mov	r5, r0
 8008196:	460c      	mov	r4, r1
 8008198:	4616      	mov	r6, r2
 800819a:	d505      	bpl.n	80081a8 <__swrite+0x1e>
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2200      	movs	r2, #0
 80081a4:	f000 f932 	bl	800840c <_lseek_r>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081be:	f000 b949 	b.w	8008454 <_write_r>

080081c2 <__sseek>:
 80081c2:	b510      	push	{r4, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ca:	f000 f91f 	bl	800840c <_lseek_r>
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	bf15      	itete	ne
 80081d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081de:	81a3      	strheq	r3, [r4, #12]
 80081e0:	bf18      	it	ne
 80081e2:	81a3      	strhne	r3, [r4, #12]
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <__sclose>:
 80081e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ea:	f000 b8a1 	b.w	8008330 <_close_r>

080081ee <__swbuf_r>:
 80081ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f0:	460e      	mov	r6, r1
 80081f2:	4614      	mov	r4, r2
 80081f4:	4605      	mov	r5, r0
 80081f6:	b118      	cbz	r0, 8008200 <__swbuf_r+0x12>
 80081f8:	6a03      	ldr	r3, [r0, #32]
 80081fa:	b90b      	cbnz	r3, 8008200 <__swbuf_r+0x12>
 80081fc:	f7ff ff0e 	bl	800801c <__sinit>
 8008200:	69a3      	ldr	r3, [r4, #24]
 8008202:	60a3      	str	r3, [r4, #8]
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	071a      	lsls	r2, r3, #28
 8008208:	d501      	bpl.n	800820e <__swbuf_r+0x20>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	b943      	cbnz	r3, 8008220 <__swbuf_r+0x32>
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f000 f82b 	bl	800826c <__swsetup_r>
 8008216:	b118      	cbz	r0, 8008220 <__swbuf_r+0x32>
 8008218:	f04f 37ff 	mov.w	r7, #4294967295
 800821c:	4638      	mov	r0, r7
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	6922      	ldr	r2, [r4, #16]
 8008224:	1a98      	subs	r0, r3, r2
 8008226:	6963      	ldr	r3, [r4, #20]
 8008228:	b2f6      	uxtb	r6, r6
 800822a:	4283      	cmp	r3, r0
 800822c:	4637      	mov	r7, r6
 800822e:	dc05      	bgt.n	800823c <__swbuf_r+0x4e>
 8008230:	4621      	mov	r1, r4
 8008232:	4628      	mov	r0, r5
 8008234:	f001 fdf4 	bl	8009e20 <_fflush_r>
 8008238:	2800      	cmp	r0, #0
 800823a:	d1ed      	bne.n	8008218 <__swbuf_r+0x2a>
 800823c:	68a3      	ldr	r3, [r4, #8]
 800823e:	3b01      	subs	r3, #1
 8008240:	60a3      	str	r3, [r4, #8]
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	6022      	str	r2, [r4, #0]
 8008248:	701e      	strb	r6, [r3, #0]
 800824a:	6962      	ldr	r2, [r4, #20]
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	429a      	cmp	r2, r3
 8008250:	d004      	beq.n	800825c <__swbuf_r+0x6e>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	07db      	lsls	r3, r3, #31
 8008256:	d5e1      	bpl.n	800821c <__swbuf_r+0x2e>
 8008258:	2e0a      	cmp	r6, #10
 800825a:	d1df      	bne.n	800821c <__swbuf_r+0x2e>
 800825c:	4621      	mov	r1, r4
 800825e:	4628      	mov	r0, r5
 8008260:	f001 fdde 	bl	8009e20 <_fflush_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	d0d9      	beq.n	800821c <__swbuf_r+0x2e>
 8008268:	e7d6      	b.n	8008218 <__swbuf_r+0x2a>
	...

0800826c <__swsetup_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4b29      	ldr	r3, [pc, #164]	@ (8008314 <__swsetup_r+0xa8>)
 8008270:	4605      	mov	r5, r0
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	460c      	mov	r4, r1
 8008276:	b118      	cbz	r0, 8008280 <__swsetup_r+0x14>
 8008278:	6a03      	ldr	r3, [r0, #32]
 800827a:	b90b      	cbnz	r3, 8008280 <__swsetup_r+0x14>
 800827c:	f7ff fece 	bl	800801c <__sinit>
 8008280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008284:	0719      	lsls	r1, r3, #28
 8008286:	d422      	bmi.n	80082ce <__swsetup_r+0x62>
 8008288:	06da      	lsls	r2, r3, #27
 800828a:	d407      	bmi.n	800829c <__swsetup_r+0x30>
 800828c:	2209      	movs	r2, #9
 800828e:	602a      	str	r2, [r5, #0]
 8008290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	e033      	b.n	8008304 <__swsetup_r+0x98>
 800829c:	0758      	lsls	r0, r3, #29
 800829e:	d512      	bpl.n	80082c6 <__swsetup_r+0x5a>
 80082a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a2:	b141      	cbz	r1, 80082b6 <__swsetup_r+0x4a>
 80082a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082a8:	4299      	cmp	r1, r3
 80082aa:	d002      	beq.n	80082b2 <__swsetup_r+0x46>
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 ff77 	bl	80091a0 <_free_r>
 80082b2:	2300      	movs	r3, #0
 80082b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	2300      	movs	r3, #0
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f043 0308 	orr.w	r3, r3, #8
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	b94b      	cbnz	r3, 80082e6 <__swsetup_r+0x7a>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082dc:	d003      	beq.n	80082e6 <__swsetup_r+0x7a>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f001 fdeb 	bl	8009ebc <__smakebuf_r>
 80082e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ea:	f013 0201 	ands.w	r2, r3, #1
 80082ee:	d00a      	beq.n	8008306 <__swsetup_r+0x9a>
 80082f0:	2200      	movs	r2, #0
 80082f2:	60a2      	str	r2, [r4, #8]
 80082f4:	6962      	ldr	r2, [r4, #20]
 80082f6:	4252      	negs	r2, r2
 80082f8:	61a2      	str	r2, [r4, #24]
 80082fa:	6922      	ldr	r2, [r4, #16]
 80082fc:	b942      	cbnz	r2, 8008310 <__swsetup_r+0xa4>
 80082fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008302:	d1c5      	bne.n	8008290 <__swsetup_r+0x24>
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	0799      	lsls	r1, r3, #30
 8008308:	bf58      	it	pl
 800830a:	6962      	ldrpl	r2, [r4, #20]
 800830c:	60a2      	str	r2, [r4, #8]
 800830e:	e7f4      	b.n	80082fa <__swsetup_r+0x8e>
 8008310:	2000      	movs	r0, #0
 8008312:	e7f7      	b.n	8008304 <__swsetup_r+0x98>
 8008314:	2000001c 	.word	0x2000001c

08008318 <memset>:
 8008318:	4402      	add	r2, r0
 800831a:	4603      	mov	r3, r0
 800831c:	4293      	cmp	r3, r2
 800831e:	d100      	bne.n	8008322 <memset+0xa>
 8008320:	4770      	bx	lr
 8008322:	f803 1b01 	strb.w	r1, [r3], #1
 8008326:	e7f9      	b.n	800831c <memset+0x4>

08008328 <_localeconv_r>:
 8008328:	4800      	ldr	r0, [pc, #0]	@ (800832c <_localeconv_r+0x4>)
 800832a:	4770      	bx	lr
 800832c:	2000015c 	.word	0x2000015c

08008330 <_close_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d06      	ldr	r5, [pc, #24]	@ (800834c <_close_r+0x1c>)
 8008334:	2300      	movs	r3, #0
 8008336:	4604      	mov	r4, r0
 8008338:	4608      	mov	r0, r1
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7f9 fb46 	bl	80019cc <_close>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_close_r+0x1a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_close_r+0x1a>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20004e50 	.word	0x20004e50

08008350 <_reclaim_reent>:
 8008350:	4b2d      	ldr	r3, [pc, #180]	@ (8008408 <_reclaim_reent+0xb8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4283      	cmp	r3, r0
 8008356:	b570      	push	{r4, r5, r6, lr}
 8008358:	4604      	mov	r4, r0
 800835a:	d053      	beq.n	8008404 <_reclaim_reent+0xb4>
 800835c:	69c3      	ldr	r3, [r0, #28]
 800835e:	b31b      	cbz	r3, 80083a8 <_reclaim_reent+0x58>
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	b163      	cbz	r3, 800837e <_reclaim_reent+0x2e>
 8008364:	2500      	movs	r5, #0
 8008366:	69e3      	ldr	r3, [r4, #28]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	5959      	ldr	r1, [r3, r5]
 800836c:	b9b1      	cbnz	r1, 800839c <_reclaim_reent+0x4c>
 800836e:	3504      	adds	r5, #4
 8008370:	2d80      	cmp	r5, #128	@ 0x80
 8008372:	d1f8      	bne.n	8008366 <_reclaim_reent+0x16>
 8008374:	69e3      	ldr	r3, [r4, #28]
 8008376:	4620      	mov	r0, r4
 8008378:	68d9      	ldr	r1, [r3, #12]
 800837a:	f000 ff11 	bl	80091a0 <_free_r>
 800837e:	69e3      	ldr	r3, [r4, #28]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	b111      	cbz	r1, 800838a <_reclaim_reent+0x3a>
 8008384:	4620      	mov	r0, r4
 8008386:	f000 ff0b 	bl	80091a0 <_free_r>
 800838a:	69e3      	ldr	r3, [r4, #28]
 800838c:	689d      	ldr	r5, [r3, #8]
 800838e:	b15d      	cbz	r5, 80083a8 <_reclaim_reent+0x58>
 8008390:	4629      	mov	r1, r5
 8008392:	4620      	mov	r0, r4
 8008394:	682d      	ldr	r5, [r5, #0]
 8008396:	f000 ff03 	bl	80091a0 <_free_r>
 800839a:	e7f8      	b.n	800838e <_reclaim_reent+0x3e>
 800839c:	680e      	ldr	r6, [r1, #0]
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 fefe 	bl	80091a0 <_free_r>
 80083a4:	4631      	mov	r1, r6
 80083a6:	e7e1      	b.n	800836c <_reclaim_reent+0x1c>
 80083a8:	6961      	ldr	r1, [r4, #20]
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x62>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 fef7 	bl	80091a0 <_free_r>
 80083b2:	69e1      	ldr	r1, [r4, #28]
 80083b4:	b111      	cbz	r1, 80083bc <_reclaim_reent+0x6c>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 fef2 	bl	80091a0 <_free_r>
 80083bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083be:	b111      	cbz	r1, 80083c6 <_reclaim_reent+0x76>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 feed 	bl	80091a0 <_free_r>
 80083c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083c8:	b111      	cbz	r1, 80083d0 <_reclaim_reent+0x80>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fee8 	bl	80091a0 <_free_r>
 80083d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083d2:	b111      	cbz	r1, 80083da <_reclaim_reent+0x8a>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fee3 	bl	80091a0 <_free_r>
 80083da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083dc:	b111      	cbz	r1, 80083e4 <_reclaim_reent+0x94>
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fede 	bl	80091a0 <_free_r>
 80083e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083e6:	b111      	cbz	r1, 80083ee <_reclaim_reent+0x9e>
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 fed9 	bl	80091a0 <_free_r>
 80083ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083f0:	b111      	cbz	r1, 80083f8 <_reclaim_reent+0xa8>
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 fed4 	bl	80091a0 <_free_r>
 80083f8:	6a23      	ldr	r3, [r4, #32]
 80083fa:	b11b      	cbz	r3, 8008404 <_reclaim_reent+0xb4>
 80083fc:	4620      	mov	r0, r4
 80083fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008402:	4718      	bx	r3
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	bf00      	nop
 8008408:	2000001c 	.word	0x2000001c

0800840c <_lseek_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	@ (800842c <_lseek_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f9 fafd 	bl	8001a1a <_lseek>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_lseek_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_lseek_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20004e50 	.word	0x20004e50

08008430 <_read_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d07      	ldr	r5, [pc, #28]	@ (8008450 <_read_r+0x20>)
 8008434:	4604      	mov	r4, r0
 8008436:	4608      	mov	r0, r1
 8008438:	4611      	mov	r1, r2
 800843a:	2200      	movs	r2, #0
 800843c:	602a      	str	r2, [r5, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f7f9 faa7 	bl	8001992 <_read>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_read_r+0x1e>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_read_r+0x1e>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20004e50 	.word	0x20004e50

08008454 <_write_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4d07      	ldr	r5, [pc, #28]	@ (8008474 <_write_r+0x20>)
 8008458:	4604      	mov	r4, r0
 800845a:	4608      	mov	r0, r1
 800845c:	4611      	mov	r1, r2
 800845e:	2200      	movs	r2, #0
 8008460:	602a      	str	r2, [r5, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f7f9 f8ac 	bl	80015c0 <_write>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_write_r+0x1e>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_write_r+0x1e>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	20004e50 	.word	0x20004e50

08008478 <__errno>:
 8008478:	4b01      	ldr	r3, [pc, #4]	@ (8008480 <__errno+0x8>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	2000001c 	.word	0x2000001c

08008484 <__libc_init_array>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4d0d      	ldr	r5, [pc, #52]	@ (80084bc <__libc_init_array+0x38>)
 8008488:	4c0d      	ldr	r4, [pc, #52]	@ (80084c0 <__libc_init_array+0x3c>)
 800848a:	1b64      	subs	r4, r4, r5
 800848c:	10a4      	asrs	r4, r4, #2
 800848e:	2600      	movs	r6, #0
 8008490:	42a6      	cmp	r6, r4
 8008492:	d109      	bne.n	80084a8 <__libc_init_array+0x24>
 8008494:	4d0b      	ldr	r5, [pc, #44]	@ (80084c4 <__libc_init_array+0x40>)
 8008496:	4c0c      	ldr	r4, [pc, #48]	@ (80084c8 <__libc_init_array+0x44>)
 8008498:	f001 fe2e 	bl	800a0f8 <_init>
 800849c:	1b64      	subs	r4, r4, r5
 800849e:	10a4      	asrs	r4, r4, #2
 80084a0:	2600      	movs	r6, #0
 80084a2:	42a6      	cmp	r6, r4
 80084a4:	d105      	bne.n	80084b2 <__libc_init_array+0x2e>
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ac:	4798      	blx	r3
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7ee      	b.n	8008490 <__libc_init_array+0xc>
 80084b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b6:	4798      	blx	r3
 80084b8:	3601      	adds	r6, #1
 80084ba:	e7f2      	b.n	80084a2 <__libc_init_array+0x1e>
 80084bc:	0800a58c 	.word	0x0800a58c
 80084c0:	0800a58c 	.word	0x0800a58c
 80084c4:	0800a58c 	.word	0x0800a58c
 80084c8:	0800a590 	.word	0x0800a590

080084cc <__retarget_lock_init_recursive>:
 80084cc:	4770      	bx	lr

080084ce <__retarget_lock_acquire_recursive>:
 80084ce:	4770      	bx	lr

080084d0 <__retarget_lock_release_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <memcpy>:
 80084d2:	440a      	add	r2, r1
 80084d4:	4291      	cmp	r1, r2
 80084d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80084da:	d100      	bne.n	80084de <memcpy+0xc>
 80084dc:	4770      	bx	lr
 80084de:	b510      	push	{r4, lr}
 80084e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e8:	4291      	cmp	r1, r2
 80084ea:	d1f9      	bne.n	80084e0 <memcpy+0xe>
 80084ec:	bd10      	pop	{r4, pc}

080084ee <quorem>:
 80084ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f2:	6903      	ldr	r3, [r0, #16]
 80084f4:	690c      	ldr	r4, [r1, #16]
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	4607      	mov	r7, r0
 80084fa:	db7e      	blt.n	80085fa <quorem+0x10c>
 80084fc:	3c01      	subs	r4, #1
 80084fe:	f101 0814 	add.w	r8, r1, #20
 8008502:	00a3      	lsls	r3, r4, #2
 8008504:	f100 0514 	add.w	r5, r0, #20
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008518:	3301      	adds	r3, #1
 800851a:	429a      	cmp	r2, r3
 800851c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008520:	fbb2 f6f3 	udiv	r6, r2, r3
 8008524:	d32e      	bcc.n	8008584 <quorem+0x96>
 8008526:	f04f 0a00 	mov.w	sl, #0
 800852a:	46c4      	mov	ip, r8
 800852c:	46ae      	mov	lr, r5
 800852e:	46d3      	mov	fp, sl
 8008530:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008534:	b298      	uxth	r0, r3
 8008536:	fb06 a000 	mla	r0, r6, r0, sl
 800853a:	0c02      	lsrs	r2, r0, #16
 800853c:	0c1b      	lsrs	r3, r3, #16
 800853e:	fb06 2303 	mla	r3, r6, r3, r2
 8008542:	f8de 2000 	ldr.w	r2, [lr]
 8008546:	b280      	uxth	r0, r0
 8008548:	b292      	uxth	r2, r2
 800854a:	1a12      	subs	r2, r2, r0
 800854c:	445a      	add	r2, fp
 800854e:	f8de 0000 	ldr.w	r0, [lr]
 8008552:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008556:	b29b      	uxth	r3, r3
 8008558:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800855c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008560:	b292      	uxth	r2, r2
 8008562:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008566:	45e1      	cmp	r9, ip
 8008568:	f84e 2b04 	str.w	r2, [lr], #4
 800856c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008570:	d2de      	bcs.n	8008530 <quorem+0x42>
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	58eb      	ldr	r3, [r5, r3]
 8008576:	b92b      	cbnz	r3, 8008584 <quorem+0x96>
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	3b04      	subs	r3, #4
 800857c:	429d      	cmp	r5, r3
 800857e:	461a      	mov	r2, r3
 8008580:	d32f      	bcc.n	80085e2 <quorem+0xf4>
 8008582:	613c      	str	r4, [r7, #16]
 8008584:	4638      	mov	r0, r7
 8008586:	f001 f97d 	bl	8009884 <__mcmp>
 800858a:	2800      	cmp	r0, #0
 800858c:	db25      	blt.n	80085da <quorem+0xec>
 800858e:	4629      	mov	r1, r5
 8008590:	2000      	movs	r0, #0
 8008592:	f858 2b04 	ldr.w	r2, [r8], #4
 8008596:	f8d1 c000 	ldr.w	ip, [r1]
 800859a:	fa1f fe82 	uxth.w	lr, r2
 800859e:	fa1f f38c 	uxth.w	r3, ip
 80085a2:	eba3 030e 	sub.w	r3, r3, lr
 80085a6:	4403      	add	r3, r0
 80085a8:	0c12      	lsrs	r2, r2, #16
 80085aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085b8:	45c1      	cmp	r9, r8
 80085ba:	f841 3b04 	str.w	r3, [r1], #4
 80085be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085c2:	d2e6      	bcs.n	8008592 <quorem+0xa4>
 80085c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085cc:	b922      	cbnz	r2, 80085d8 <quorem+0xea>
 80085ce:	3b04      	subs	r3, #4
 80085d0:	429d      	cmp	r5, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	d30b      	bcc.n	80085ee <quorem+0x100>
 80085d6:	613c      	str	r4, [r7, #16]
 80085d8:	3601      	adds	r6, #1
 80085da:	4630      	mov	r0, r6
 80085dc:	b003      	add	sp, #12
 80085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e2:	6812      	ldr	r2, [r2, #0]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d1cb      	bne.n	8008582 <quorem+0x94>
 80085ea:	3c01      	subs	r4, #1
 80085ec:	e7c6      	b.n	800857c <quorem+0x8e>
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	3b04      	subs	r3, #4
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	d1ef      	bne.n	80085d6 <quorem+0xe8>
 80085f6:	3c01      	subs	r4, #1
 80085f8:	e7ea      	b.n	80085d0 <quorem+0xe2>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e7ee      	b.n	80085dc <quorem+0xee>
	...

08008600 <_dtoa_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	69c7      	ldr	r7, [r0, #28]
 8008606:	b097      	sub	sp, #92	@ 0x5c
 8008608:	ed8d 0b04 	vstr	d0, [sp, #16]
 800860c:	ec55 4b10 	vmov	r4, r5, d0
 8008610:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008612:	9107      	str	r1, [sp, #28]
 8008614:	4681      	mov	r9, r0
 8008616:	920c      	str	r2, [sp, #48]	@ 0x30
 8008618:	9311      	str	r3, [sp, #68]	@ 0x44
 800861a:	b97f      	cbnz	r7, 800863c <_dtoa_r+0x3c>
 800861c:	2010      	movs	r0, #16
 800861e:	f000 fe09 	bl	8009234 <malloc>
 8008622:	4602      	mov	r2, r0
 8008624:	f8c9 001c 	str.w	r0, [r9, #28]
 8008628:	b920      	cbnz	r0, 8008634 <_dtoa_r+0x34>
 800862a:	4ba9      	ldr	r3, [pc, #676]	@ (80088d0 <_dtoa_r+0x2d0>)
 800862c:	21ef      	movs	r1, #239	@ 0xef
 800862e:	48a9      	ldr	r0, [pc, #676]	@ (80088d4 <_dtoa_r+0x2d4>)
 8008630:	f001 fcb2 	bl	8009f98 <__assert_func>
 8008634:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008638:	6007      	str	r7, [r0, #0]
 800863a:	60c7      	str	r7, [r0, #12]
 800863c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008640:	6819      	ldr	r1, [r3, #0]
 8008642:	b159      	cbz	r1, 800865c <_dtoa_r+0x5c>
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	604a      	str	r2, [r1, #4]
 8008648:	2301      	movs	r3, #1
 800864a:	4093      	lsls	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
 800864e:	4648      	mov	r0, r9
 8008650:	f000 fee6 	bl	8009420 <_Bfree>
 8008654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	1e2b      	subs	r3, r5, #0
 800865e:	bfb9      	ittee	lt
 8008660:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008664:	9305      	strlt	r3, [sp, #20]
 8008666:	2300      	movge	r3, #0
 8008668:	6033      	strge	r3, [r6, #0]
 800866a:	9f05      	ldr	r7, [sp, #20]
 800866c:	4b9a      	ldr	r3, [pc, #616]	@ (80088d8 <_dtoa_r+0x2d8>)
 800866e:	bfbc      	itt	lt
 8008670:	2201      	movlt	r2, #1
 8008672:	6032      	strlt	r2, [r6, #0]
 8008674:	43bb      	bics	r3, r7
 8008676:	d112      	bne.n	800869e <_dtoa_r+0x9e>
 8008678:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800867a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008684:	4323      	orrs	r3, r4
 8008686:	f000 855a 	beq.w	800913e <_dtoa_r+0xb3e>
 800868a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800868c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80088ec <_dtoa_r+0x2ec>
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 855c 	beq.w	800914e <_dtoa_r+0xb4e>
 8008696:	f10a 0303 	add.w	r3, sl, #3
 800869a:	f000 bd56 	b.w	800914a <_dtoa_r+0xb4a>
 800869e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80086a2:	2200      	movs	r2, #0
 80086a4:	ec51 0b17 	vmov	r0, r1, d7
 80086a8:	2300      	movs	r3, #0
 80086aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80086ae:	f7f8 fa2b 	bl	8000b08 <__aeabi_dcmpeq>
 80086b2:	4680      	mov	r8, r0
 80086b4:	b158      	cbz	r0, 80086ce <_dtoa_r+0xce>
 80086b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80086b8:	2301      	movs	r3, #1
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086be:	b113      	cbz	r3, 80086c6 <_dtoa_r+0xc6>
 80086c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086c2:	4b86      	ldr	r3, [pc, #536]	@ (80088dc <_dtoa_r+0x2dc>)
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80088f0 <_dtoa_r+0x2f0>
 80086ca:	f000 bd40 	b.w	800914e <_dtoa_r+0xb4e>
 80086ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80086d2:	aa14      	add	r2, sp, #80	@ 0x50
 80086d4:	a915      	add	r1, sp, #84	@ 0x54
 80086d6:	4648      	mov	r0, r9
 80086d8:	f001 f984 	bl	80099e4 <__d2b>
 80086dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086e0:	9002      	str	r0, [sp, #8]
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	d078      	beq.n	80087d8 <_dtoa_r+0x1d8>
 80086e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80086ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008700:	4619      	mov	r1, r3
 8008702:	2200      	movs	r2, #0
 8008704:	4b76      	ldr	r3, [pc, #472]	@ (80088e0 <_dtoa_r+0x2e0>)
 8008706:	f7f7 fddf 	bl	80002c8 <__aeabi_dsub>
 800870a:	a36b      	add	r3, pc, #428	@ (adr r3, 80088b8 <_dtoa_r+0x2b8>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 ff92 	bl	8000638 <__aeabi_dmul>
 8008714:	a36a      	add	r3, pc, #424	@ (adr r3, 80088c0 <_dtoa_r+0x2c0>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 fdd7 	bl	80002cc <__adddf3>
 800871e:	4604      	mov	r4, r0
 8008720:	4630      	mov	r0, r6
 8008722:	460d      	mov	r5, r1
 8008724:	f7f7 ff1e 	bl	8000564 <__aeabi_i2d>
 8008728:	a367      	add	r3, pc, #412	@ (adr r3, 80088c8 <_dtoa_r+0x2c8>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f7 fdc7 	bl	80002cc <__adddf3>
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	f7f8 fa29 	bl	8000b98 <__aeabi_d2iz>
 8008746:	2200      	movs	r2, #0
 8008748:	4607      	mov	r7, r0
 800874a:	2300      	movs	r3, #0
 800874c:	4620      	mov	r0, r4
 800874e:	4629      	mov	r1, r5
 8008750:	f7f8 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 8008754:	b140      	cbz	r0, 8008768 <_dtoa_r+0x168>
 8008756:	4638      	mov	r0, r7
 8008758:	f7f7 ff04 	bl	8000564 <__aeabi_i2d>
 800875c:	4622      	mov	r2, r4
 800875e:	462b      	mov	r3, r5
 8008760:	f7f8 f9d2 	bl	8000b08 <__aeabi_dcmpeq>
 8008764:	b900      	cbnz	r0, 8008768 <_dtoa_r+0x168>
 8008766:	3f01      	subs	r7, #1
 8008768:	2f16      	cmp	r7, #22
 800876a:	d852      	bhi.n	8008812 <_dtoa_r+0x212>
 800876c:	4b5d      	ldr	r3, [pc, #372]	@ (80088e4 <_dtoa_r+0x2e4>)
 800876e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800877a:	f7f8 f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	d049      	beq.n	8008816 <_dtoa_r+0x216>
 8008782:	3f01      	subs	r7, #1
 8008784:	2300      	movs	r3, #0
 8008786:	9310      	str	r3, [sp, #64]	@ 0x40
 8008788:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800878a:	1b9b      	subs	r3, r3, r6
 800878c:	1e5a      	subs	r2, r3, #1
 800878e:	bf45      	ittet	mi
 8008790:	f1c3 0301 	rsbmi	r3, r3, #1
 8008794:	9300      	strmi	r3, [sp, #0]
 8008796:	2300      	movpl	r3, #0
 8008798:	2300      	movmi	r3, #0
 800879a:	9206      	str	r2, [sp, #24]
 800879c:	bf54      	ite	pl
 800879e:	9300      	strpl	r3, [sp, #0]
 80087a0:	9306      	strmi	r3, [sp, #24]
 80087a2:	2f00      	cmp	r7, #0
 80087a4:	db39      	blt.n	800881a <_dtoa_r+0x21a>
 80087a6:	9b06      	ldr	r3, [sp, #24]
 80087a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80087aa:	443b      	add	r3, r7
 80087ac:	9306      	str	r3, [sp, #24]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9308      	str	r3, [sp, #32]
 80087b2:	9b07      	ldr	r3, [sp, #28]
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d863      	bhi.n	8008880 <_dtoa_r+0x280>
 80087b8:	2b05      	cmp	r3, #5
 80087ba:	bfc4      	itt	gt
 80087bc:	3b04      	subgt	r3, #4
 80087be:	9307      	strgt	r3, [sp, #28]
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	f1a3 0302 	sub.w	r3, r3, #2
 80087c6:	bfcc      	ite	gt
 80087c8:	2400      	movgt	r4, #0
 80087ca:	2401      	movle	r4, #1
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d863      	bhi.n	8008898 <_dtoa_r+0x298>
 80087d0:	e8df f003 	tbb	[pc, r3]
 80087d4:	2b375452 	.word	0x2b375452
 80087d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80087dc:	441e      	add	r6, r3
 80087de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	bfc1      	itttt	gt
 80087e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087ea:	409f      	lslgt	r7, r3
 80087ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087f4:	bfd6      	itet	le
 80087f6:	f1c3 0320 	rsble	r3, r3, #32
 80087fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80087fe:	fa04 f003 	lslle.w	r0, r4, r3
 8008802:	f7f7 fe9f 	bl	8000544 <__aeabi_ui2d>
 8008806:	2201      	movs	r2, #1
 8008808:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800880c:	3e01      	subs	r6, #1
 800880e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008810:	e776      	b.n	8008700 <_dtoa_r+0x100>
 8008812:	2301      	movs	r3, #1
 8008814:	e7b7      	b.n	8008786 <_dtoa_r+0x186>
 8008816:	9010      	str	r0, [sp, #64]	@ 0x40
 8008818:	e7b6      	b.n	8008788 <_dtoa_r+0x188>
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	1bdb      	subs	r3, r3, r7
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	427b      	negs	r3, r7
 8008822:	9308      	str	r3, [sp, #32]
 8008824:	2300      	movs	r3, #0
 8008826:	930d      	str	r3, [sp, #52]	@ 0x34
 8008828:	e7c3      	b.n	80087b2 <_dtoa_r+0x1b2>
 800882a:	2301      	movs	r3, #1
 800882c:	9309      	str	r3, [sp, #36]	@ 0x24
 800882e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008830:	eb07 0b03 	add.w	fp, r7, r3
 8008834:	f10b 0301 	add.w	r3, fp, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	9303      	str	r3, [sp, #12]
 800883c:	bfb8      	it	lt
 800883e:	2301      	movlt	r3, #1
 8008840:	e006      	b.n	8008850 <_dtoa_r+0x250>
 8008842:	2301      	movs	r3, #1
 8008844:	9309      	str	r3, [sp, #36]	@ 0x24
 8008846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	dd28      	ble.n	800889e <_dtoa_r+0x29e>
 800884c:	469b      	mov	fp, r3
 800884e:	9303      	str	r3, [sp, #12]
 8008850:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008854:	2100      	movs	r1, #0
 8008856:	2204      	movs	r2, #4
 8008858:	f102 0514 	add.w	r5, r2, #20
 800885c:	429d      	cmp	r5, r3
 800885e:	d926      	bls.n	80088ae <_dtoa_r+0x2ae>
 8008860:	6041      	str	r1, [r0, #4]
 8008862:	4648      	mov	r0, r9
 8008864:	f000 fd9c 	bl	80093a0 <_Balloc>
 8008868:	4682      	mov	sl, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d142      	bne.n	80088f4 <_dtoa_r+0x2f4>
 800886e:	4b1e      	ldr	r3, [pc, #120]	@ (80088e8 <_dtoa_r+0x2e8>)
 8008870:	4602      	mov	r2, r0
 8008872:	f240 11af 	movw	r1, #431	@ 0x1af
 8008876:	e6da      	b.n	800862e <_dtoa_r+0x2e>
 8008878:	2300      	movs	r3, #0
 800887a:	e7e3      	b.n	8008844 <_dtoa_r+0x244>
 800887c:	2300      	movs	r3, #0
 800887e:	e7d5      	b.n	800882c <_dtoa_r+0x22c>
 8008880:	2401      	movs	r4, #1
 8008882:	2300      	movs	r3, #0
 8008884:	9307      	str	r3, [sp, #28]
 8008886:	9409      	str	r4, [sp, #36]	@ 0x24
 8008888:	f04f 3bff 	mov.w	fp, #4294967295
 800888c:	2200      	movs	r2, #0
 800888e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008892:	2312      	movs	r3, #18
 8008894:	920c      	str	r2, [sp, #48]	@ 0x30
 8008896:	e7db      	b.n	8008850 <_dtoa_r+0x250>
 8008898:	2301      	movs	r3, #1
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	e7f4      	b.n	8008888 <_dtoa_r+0x288>
 800889e:	f04f 0b01 	mov.w	fp, #1
 80088a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80088a6:	465b      	mov	r3, fp
 80088a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80088ac:	e7d0      	b.n	8008850 <_dtoa_r+0x250>
 80088ae:	3101      	adds	r1, #1
 80088b0:	0052      	lsls	r2, r2, #1
 80088b2:	e7d1      	b.n	8008858 <_dtoa_r+0x258>
 80088b4:	f3af 8000 	nop.w
 80088b8:	636f4361 	.word	0x636f4361
 80088bc:	3fd287a7 	.word	0x3fd287a7
 80088c0:	8b60c8b3 	.word	0x8b60c8b3
 80088c4:	3fc68a28 	.word	0x3fc68a28
 80088c8:	509f79fb 	.word	0x509f79fb
 80088cc:	3fd34413 	.word	0x3fd34413
 80088d0:	0800a251 	.word	0x0800a251
 80088d4:	0800a268 	.word	0x0800a268
 80088d8:	7ff00000 	.word	0x7ff00000
 80088dc:	0800a221 	.word	0x0800a221
 80088e0:	3ff80000 	.word	0x3ff80000
 80088e4:	0800a3b8 	.word	0x0800a3b8
 80088e8:	0800a2c0 	.word	0x0800a2c0
 80088ec:	0800a24d 	.word	0x0800a24d
 80088f0:	0800a220 	.word	0x0800a220
 80088f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80088f8:	6018      	str	r0, [r3, #0]
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	2b0e      	cmp	r3, #14
 80088fe:	f200 80a1 	bhi.w	8008a44 <_dtoa_r+0x444>
 8008902:	2c00      	cmp	r4, #0
 8008904:	f000 809e 	beq.w	8008a44 <_dtoa_r+0x444>
 8008908:	2f00      	cmp	r7, #0
 800890a:	dd33      	ble.n	8008974 <_dtoa_r+0x374>
 800890c:	4b9c      	ldr	r3, [pc, #624]	@ (8008b80 <_dtoa_r+0x580>)
 800890e:	f007 020f 	and.w	r2, r7, #15
 8008912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008916:	ed93 7b00 	vldr	d7, [r3]
 800891a:	05f8      	lsls	r0, r7, #23
 800891c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008924:	d516      	bpl.n	8008954 <_dtoa_r+0x354>
 8008926:	4b97      	ldr	r3, [pc, #604]	@ (8008b84 <_dtoa_r+0x584>)
 8008928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800892c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008930:	f7f7 ffac 	bl	800088c <__aeabi_ddiv>
 8008934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008938:	f004 040f 	and.w	r4, r4, #15
 800893c:	2603      	movs	r6, #3
 800893e:	4d91      	ldr	r5, [pc, #580]	@ (8008b84 <_dtoa_r+0x584>)
 8008940:	b954      	cbnz	r4, 8008958 <_dtoa_r+0x358>
 8008942:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800894a:	f7f7 ff9f 	bl	800088c <__aeabi_ddiv>
 800894e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008952:	e028      	b.n	80089a6 <_dtoa_r+0x3a6>
 8008954:	2602      	movs	r6, #2
 8008956:	e7f2      	b.n	800893e <_dtoa_r+0x33e>
 8008958:	07e1      	lsls	r1, r4, #31
 800895a:	d508      	bpl.n	800896e <_dtoa_r+0x36e>
 800895c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008964:	f7f7 fe68 	bl	8000638 <__aeabi_dmul>
 8008968:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800896c:	3601      	adds	r6, #1
 800896e:	1064      	asrs	r4, r4, #1
 8008970:	3508      	adds	r5, #8
 8008972:	e7e5      	b.n	8008940 <_dtoa_r+0x340>
 8008974:	f000 80af 	beq.w	8008ad6 <_dtoa_r+0x4d6>
 8008978:	427c      	negs	r4, r7
 800897a:	4b81      	ldr	r3, [pc, #516]	@ (8008b80 <_dtoa_r+0x580>)
 800897c:	4d81      	ldr	r5, [pc, #516]	@ (8008b84 <_dtoa_r+0x584>)
 800897e:	f004 020f 	and.w	r2, r4, #15
 8008982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800898e:	f7f7 fe53 	bl	8000638 <__aeabi_dmul>
 8008992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008996:	1124      	asrs	r4, r4, #4
 8008998:	2300      	movs	r3, #0
 800899a:	2602      	movs	r6, #2
 800899c:	2c00      	cmp	r4, #0
 800899e:	f040 808f 	bne.w	8008ac0 <_dtoa_r+0x4c0>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1d3      	bne.n	800894e <_dtoa_r+0x34e>
 80089a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8094 	beq.w	8008ada <_dtoa_r+0x4da>
 80089b2:	4b75      	ldr	r3, [pc, #468]	@ (8008b88 <_dtoa_r+0x588>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f8 f8af 	bl	8000b1c <__aeabi_dcmplt>
 80089be:	2800      	cmp	r0, #0
 80089c0:	f000 808b 	beq.w	8008ada <_dtoa_r+0x4da>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 8087 	beq.w	8008ada <_dtoa_r+0x4da>
 80089cc:	f1bb 0f00 	cmp.w	fp, #0
 80089d0:	dd34      	ble.n	8008a3c <_dtoa_r+0x43c>
 80089d2:	4620      	mov	r0, r4
 80089d4:	4b6d      	ldr	r3, [pc, #436]	@ (8008b8c <_dtoa_r+0x58c>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f7 fe2d 	bl	8000638 <__aeabi_dmul>
 80089de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80089e6:	3601      	adds	r6, #1
 80089e8:	465c      	mov	r4, fp
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7f7 fdba 	bl	8000564 <__aeabi_i2d>
 80089f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f4:	f7f7 fe20 	bl	8000638 <__aeabi_dmul>
 80089f8:	4b65      	ldr	r3, [pc, #404]	@ (8008b90 <_dtoa_r+0x590>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7f7 fc66 	bl	80002cc <__adddf3>
 8008a00:	4605      	mov	r5, r0
 8008a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d16a      	bne.n	8008ae0 <_dtoa_r+0x4e0>
 8008a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a0e:	4b61      	ldr	r3, [pc, #388]	@ (8008b94 <_dtoa_r+0x594>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	f7f7 fc59 	bl	80002c8 <__aeabi_dsub>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4633      	mov	r3, r6
 8008a22:	f7f8 f899 	bl	8000b58 <__aeabi_dcmpgt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f040 8298 	bne.w	8008f5c <_dtoa_r+0x95c>
 8008a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a30:	462a      	mov	r2, r5
 8008a32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a36:	f7f8 f871 	bl	8000b1c <__aeabi_dcmplt>
 8008a3a:	bb38      	cbnz	r0, 8008a8c <_dtoa_r+0x48c>
 8008a3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008a40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f2c0 8157 	blt.w	8008cfa <_dtoa_r+0x6fa>
 8008a4c:	2f0e      	cmp	r7, #14
 8008a4e:	f300 8154 	bgt.w	8008cfa <_dtoa_r+0x6fa>
 8008a52:	4b4b      	ldr	r3, [pc, #300]	@ (8008b80 <_dtoa_r+0x580>)
 8008a54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a58:	ed93 7b00 	vldr	d7, [r3]
 8008a5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	ed8d 7b00 	vstr	d7, [sp]
 8008a64:	f280 80e5 	bge.w	8008c32 <_dtoa_r+0x632>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f300 80e1 	bgt.w	8008c32 <_dtoa_r+0x632>
 8008a70:	d10c      	bne.n	8008a8c <_dtoa_r+0x48c>
 8008a72:	4b48      	ldr	r3, [pc, #288]	@ (8008b94 <_dtoa_r+0x594>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	ec51 0b17 	vmov	r0, r1, d7
 8008a7a:	f7f7 fddd 	bl	8000638 <__aeabi_dmul>
 8008a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a82:	f7f8 f85f 	bl	8000b44 <__aeabi_dcmpge>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f000 8266 	beq.w	8008f58 <_dtoa_r+0x958>
 8008a8c:	2400      	movs	r4, #0
 8008a8e:	4625      	mov	r5, r4
 8008a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a92:	4656      	mov	r6, sl
 8008a94:	ea6f 0803 	mvn.w	r8, r3
 8008a98:	2700      	movs	r7, #0
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4648      	mov	r0, r9
 8008a9e:	f000 fcbf 	bl	8009420 <_Bfree>
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	f000 80bd 	beq.w	8008c22 <_dtoa_r+0x622>
 8008aa8:	b12f      	cbz	r7, 8008ab6 <_dtoa_r+0x4b6>
 8008aaa:	42af      	cmp	r7, r5
 8008aac:	d003      	beq.n	8008ab6 <_dtoa_r+0x4b6>
 8008aae:	4639      	mov	r1, r7
 8008ab0:	4648      	mov	r0, r9
 8008ab2:	f000 fcb5 	bl	8009420 <_Bfree>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4648      	mov	r0, r9
 8008aba:	f000 fcb1 	bl	8009420 <_Bfree>
 8008abe:	e0b0      	b.n	8008c22 <_dtoa_r+0x622>
 8008ac0:	07e2      	lsls	r2, r4, #31
 8008ac2:	d505      	bpl.n	8008ad0 <_dtoa_r+0x4d0>
 8008ac4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ac8:	f7f7 fdb6 	bl	8000638 <__aeabi_dmul>
 8008acc:	3601      	adds	r6, #1
 8008ace:	2301      	movs	r3, #1
 8008ad0:	1064      	asrs	r4, r4, #1
 8008ad2:	3508      	adds	r5, #8
 8008ad4:	e762      	b.n	800899c <_dtoa_r+0x39c>
 8008ad6:	2602      	movs	r6, #2
 8008ad8:	e765      	b.n	80089a6 <_dtoa_r+0x3a6>
 8008ada:	9c03      	ldr	r4, [sp, #12]
 8008adc:	46b8      	mov	r8, r7
 8008ade:	e784      	b.n	80089ea <_dtoa_r+0x3ea>
 8008ae0:	4b27      	ldr	r3, [pc, #156]	@ (8008b80 <_dtoa_r+0x580>)
 8008ae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aec:	4454      	add	r4, sl
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d054      	beq.n	8008b9c <_dtoa_r+0x59c>
 8008af2:	4929      	ldr	r1, [pc, #164]	@ (8008b98 <_dtoa_r+0x598>)
 8008af4:	2000      	movs	r0, #0
 8008af6:	f7f7 fec9 	bl	800088c <__aeabi_ddiv>
 8008afa:	4633      	mov	r3, r6
 8008afc:	462a      	mov	r2, r5
 8008afe:	f7f7 fbe3 	bl	80002c8 <__aeabi_dsub>
 8008b02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b06:	4656      	mov	r6, sl
 8008b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b0c:	f7f8 f844 	bl	8000b98 <__aeabi_d2iz>
 8008b10:	4605      	mov	r5, r0
 8008b12:	f7f7 fd27 	bl	8000564 <__aeabi_i2d>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b1e:	f7f7 fbd3 	bl	80002c8 <__aeabi_dsub>
 8008b22:	3530      	adds	r5, #48	@ 0x30
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8008b30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b34:	f7f7 fff2 	bl	8000b1c <__aeabi_dcmplt>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d172      	bne.n	8008c22 <_dtoa_r+0x622>
 8008b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b40:	4911      	ldr	r1, [pc, #68]	@ (8008b88 <_dtoa_r+0x588>)
 8008b42:	2000      	movs	r0, #0
 8008b44:	f7f7 fbc0 	bl	80002c8 <__aeabi_dsub>
 8008b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b4c:	f7f7 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f040 80b4 	bne.w	8008cbe <_dtoa_r+0x6be>
 8008b56:	42a6      	cmp	r6, r4
 8008b58:	f43f af70 	beq.w	8008a3c <_dtoa_r+0x43c>
 8008b5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b60:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <_dtoa_r+0x58c>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	f7f7 fd68 	bl	8000638 <__aeabi_dmul>
 8008b68:	4b08      	ldr	r3, [pc, #32]	@ (8008b8c <_dtoa_r+0x58c>)
 8008b6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b6e:	2200      	movs	r2, #0
 8008b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b74:	f7f7 fd60 	bl	8000638 <__aeabi_dmul>
 8008b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b7c:	e7c4      	b.n	8008b08 <_dtoa_r+0x508>
 8008b7e:	bf00      	nop
 8008b80:	0800a3b8 	.word	0x0800a3b8
 8008b84:	0800a390 	.word	0x0800a390
 8008b88:	3ff00000 	.word	0x3ff00000
 8008b8c:	40240000 	.word	0x40240000
 8008b90:	401c0000 	.word	0x401c0000
 8008b94:	40140000 	.word	0x40140000
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f7f7 fd4a 	bl	8000638 <__aeabi_dmul>
 8008ba4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ba8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008baa:	4656      	mov	r6, sl
 8008bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bb0:	f7f7 fff2 	bl	8000b98 <__aeabi_d2iz>
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	f7f7 fcd5 	bl	8000564 <__aeabi_i2d>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bc2:	f7f7 fb81 	bl	80002c8 <__aeabi_dsub>
 8008bc6:	3530      	adds	r5, #48	@ 0x30
 8008bc8:	f806 5b01 	strb.w	r5, [r6], #1
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	42a6      	cmp	r6, r4
 8008bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bd6:	f04f 0200 	mov.w	r2, #0
 8008bda:	d124      	bne.n	8008c26 <_dtoa_r+0x626>
 8008bdc:	4baf      	ldr	r3, [pc, #700]	@ (8008e9c <_dtoa_r+0x89c>)
 8008bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008be2:	f7f7 fb73 	bl	80002cc <__adddf3>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bee:	f7f7 ffb3 	bl	8000b58 <__aeabi_dcmpgt>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d163      	bne.n	8008cbe <_dtoa_r+0x6be>
 8008bf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008bfa:	49a8      	ldr	r1, [pc, #672]	@ (8008e9c <_dtoa_r+0x89c>)
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f7f7 fb63 	bl	80002c8 <__aeabi_dsub>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c0a:	f7f7 ff87 	bl	8000b1c <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f af14 	beq.w	8008a3c <_dtoa_r+0x43c>
 8008c14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008c16:	1e73      	subs	r3, r6, #1
 8008c18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c1e:	2b30      	cmp	r3, #48	@ 0x30
 8008c20:	d0f8      	beq.n	8008c14 <_dtoa_r+0x614>
 8008c22:	4647      	mov	r7, r8
 8008c24:	e03b      	b.n	8008c9e <_dtoa_r+0x69e>
 8008c26:	4b9e      	ldr	r3, [pc, #632]	@ (8008ea0 <_dtoa_r+0x8a0>)
 8008c28:	f7f7 fd06 	bl	8000638 <__aeabi_dmul>
 8008c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c30:	e7bc      	b.n	8008bac <_dtoa_r+0x5ac>
 8008c32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008c36:	4656      	mov	r6, sl
 8008c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 fe24 	bl	800088c <__aeabi_ddiv>
 8008c44:	f7f7 ffa8 	bl	8000b98 <__aeabi_d2iz>
 8008c48:	4680      	mov	r8, r0
 8008c4a:	f7f7 fc8b 	bl	8000564 <__aeabi_i2d>
 8008c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c52:	f7f7 fcf1 	bl	8000638 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c62:	f7f7 fb31 	bl	80002c8 <__aeabi_dsub>
 8008c66:	f806 4b01 	strb.w	r4, [r6], #1
 8008c6a:	9d03      	ldr	r5, [sp, #12]
 8008c6c:	eba6 040a 	sub.w	r4, r6, sl
 8008c70:	42a5      	cmp	r5, r4
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	d133      	bne.n	8008ce0 <_dtoa_r+0x6e0>
 8008c78:	f7f7 fb28 	bl	80002cc <__adddf3>
 8008c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c80:	4604      	mov	r4, r0
 8008c82:	460d      	mov	r5, r1
 8008c84:	f7f7 ff68 	bl	8000b58 <__aeabi_dcmpgt>
 8008c88:	b9c0      	cbnz	r0, 8008cbc <_dtoa_r+0x6bc>
 8008c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f7 ff39 	bl	8000b08 <__aeabi_dcmpeq>
 8008c96:	b110      	cbz	r0, 8008c9e <_dtoa_r+0x69e>
 8008c98:	f018 0f01 	tst.w	r8, #1
 8008c9c:	d10e      	bne.n	8008cbc <_dtoa_r+0x6bc>
 8008c9e:	9902      	ldr	r1, [sp, #8]
 8008ca0:	4648      	mov	r0, r9
 8008ca2:	f000 fbbd 	bl	8009420 <_Bfree>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	7033      	strb	r3, [r6, #0]
 8008caa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cac:	3701      	adds	r7, #1
 8008cae:	601f      	str	r7, [r3, #0]
 8008cb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 824b 	beq.w	800914e <_dtoa_r+0xb4e>
 8008cb8:	601e      	str	r6, [r3, #0]
 8008cba:	e248      	b.n	800914e <_dtoa_r+0xb4e>
 8008cbc:	46b8      	mov	r8, r7
 8008cbe:	4633      	mov	r3, r6
 8008cc0:	461e      	mov	r6, r3
 8008cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cc6:	2a39      	cmp	r2, #57	@ 0x39
 8008cc8:	d106      	bne.n	8008cd8 <_dtoa_r+0x6d8>
 8008cca:	459a      	cmp	sl, r3
 8008ccc:	d1f8      	bne.n	8008cc0 <_dtoa_r+0x6c0>
 8008cce:	2230      	movs	r2, #48	@ 0x30
 8008cd0:	f108 0801 	add.w	r8, r8, #1
 8008cd4:	f88a 2000 	strb.w	r2, [sl]
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	e7a0      	b.n	8008c22 <_dtoa_r+0x622>
 8008ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8008ea0 <_dtoa_r+0x8a0>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f7f7 fca8 	bl	8000638 <__aeabi_dmul>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	f7f7 ff0a 	bl	8000b08 <__aeabi_dcmpeq>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d09f      	beq.n	8008c38 <_dtoa_r+0x638>
 8008cf8:	e7d1      	b.n	8008c9e <_dtoa_r+0x69e>
 8008cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	f000 80ea 	beq.w	8008ed6 <_dtoa_r+0x8d6>
 8008d02:	9a07      	ldr	r2, [sp, #28]
 8008d04:	2a01      	cmp	r2, #1
 8008d06:	f300 80cd 	bgt.w	8008ea4 <_dtoa_r+0x8a4>
 8008d0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	f000 80c1 	beq.w	8008e94 <_dtoa_r+0x894>
 8008d12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d16:	9c08      	ldr	r4, [sp, #32]
 8008d18:	9e00      	ldr	r6, [sp, #0]
 8008d1a:	9a00      	ldr	r2, [sp, #0]
 8008d1c:	441a      	add	r2, r3
 8008d1e:	9200      	str	r2, [sp, #0]
 8008d20:	9a06      	ldr	r2, [sp, #24]
 8008d22:	2101      	movs	r1, #1
 8008d24:	441a      	add	r2, r3
 8008d26:	4648      	mov	r0, r9
 8008d28:	9206      	str	r2, [sp, #24]
 8008d2a:	f000 fc2d 	bl	8009588 <__i2b>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b166      	cbz	r6, 8008d4c <_dtoa_r+0x74c>
 8008d32:	9b06      	ldr	r3, [sp, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dd09      	ble.n	8008d4c <_dtoa_r+0x74c>
 8008d38:	42b3      	cmp	r3, r6
 8008d3a:	9a00      	ldr	r2, [sp, #0]
 8008d3c:	bfa8      	it	ge
 8008d3e:	4633      	movge	r3, r6
 8008d40:	1ad2      	subs	r2, r2, r3
 8008d42:	9200      	str	r2, [sp, #0]
 8008d44:	9a06      	ldr	r2, [sp, #24]
 8008d46:	1af6      	subs	r6, r6, r3
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	9306      	str	r3, [sp, #24]
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	b30b      	cbz	r3, 8008d94 <_dtoa_r+0x794>
 8008d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 80c6 	beq.w	8008ee4 <_dtoa_r+0x8e4>
 8008d58:	2c00      	cmp	r4, #0
 8008d5a:	f000 80c0 	beq.w	8008ede <_dtoa_r+0x8de>
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4622      	mov	r2, r4
 8008d62:	4648      	mov	r0, r9
 8008d64:	f000 fcc8 	bl	80096f8 <__pow5mult>
 8008d68:	9a02      	ldr	r2, [sp, #8]
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	4648      	mov	r0, r9
 8008d70:	f000 fc20 	bl	80095b4 <__multiply>
 8008d74:	9902      	ldr	r1, [sp, #8]
 8008d76:	4680      	mov	r8, r0
 8008d78:	4648      	mov	r0, r9
 8008d7a:	f000 fb51 	bl	8009420 <_Bfree>
 8008d7e:	9b08      	ldr	r3, [sp, #32]
 8008d80:	1b1b      	subs	r3, r3, r4
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	f000 80b1 	beq.w	8008eea <_dtoa_r+0x8ea>
 8008d88:	9a08      	ldr	r2, [sp, #32]
 8008d8a:	4641      	mov	r1, r8
 8008d8c:	4648      	mov	r0, r9
 8008d8e:	f000 fcb3 	bl	80096f8 <__pow5mult>
 8008d92:	9002      	str	r0, [sp, #8]
 8008d94:	2101      	movs	r1, #1
 8008d96:	4648      	mov	r0, r9
 8008d98:	f000 fbf6 	bl	8009588 <__i2b>
 8008d9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d9e:	4604      	mov	r4, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 81d8 	beq.w	8009156 <_dtoa_r+0xb56>
 8008da6:	461a      	mov	r2, r3
 8008da8:	4601      	mov	r1, r0
 8008daa:	4648      	mov	r0, r9
 8008dac:	f000 fca4 	bl	80096f8 <__pow5mult>
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	4604      	mov	r4, r0
 8008db6:	f300 809f 	bgt.w	8008ef8 <_dtoa_r+0x8f8>
 8008dba:	9b04      	ldr	r3, [sp, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f040 8097 	bne.w	8008ef0 <_dtoa_r+0x8f0>
 8008dc2:	9b05      	ldr	r3, [sp, #20]
 8008dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f040 8093 	bne.w	8008ef4 <_dtoa_r+0x8f4>
 8008dce:	9b05      	ldr	r3, [sp, #20]
 8008dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dd4:	0d1b      	lsrs	r3, r3, #20
 8008dd6:	051b      	lsls	r3, r3, #20
 8008dd8:	b133      	cbz	r3, 8008de8 <_dtoa_r+0x7e8>
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	9b06      	ldr	r3, [sp, #24]
 8008de2:	3301      	adds	r3, #1
 8008de4:	9306      	str	r3, [sp, #24]
 8008de6:	2301      	movs	r3, #1
 8008de8:	9308      	str	r3, [sp, #32]
 8008dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 81b8 	beq.w	8009162 <_dtoa_r+0xb62>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008df8:	6918      	ldr	r0, [r3, #16]
 8008dfa:	f000 fb79 	bl	80094f0 <__hi0bits>
 8008dfe:	f1c0 0020 	rsb	r0, r0, #32
 8008e02:	9b06      	ldr	r3, [sp, #24]
 8008e04:	4418      	add	r0, r3
 8008e06:	f010 001f 	ands.w	r0, r0, #31
 8008e0a:	f000 8082 	beq.w	8008f12 <_dtoa_r+0x912>
 8008e0e:	f1c0 0320 	rsb	r3, r0, #32
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	dd73      	ble.n	8008efe <_dtoa_r+0x8fe>
 8008e16:	9b00      	ldr	r3, [sp, #0]
 8008e18:	f1c0 001c 	rsb	r0, r0, #28
 8008e1c:	4403      	add	r3, r0
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	9b06      	ldr	r3, [sp, #24]
 8008e22:	4403      	add	r3, r0
 8008e24:	4406      	add	r6, r0
 8008e26:	9306      	str	r3, [sp, #24]
 8008e28:	9b00      	ldr	r3, [sp, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dd05      	ble.n	8008e3a <_dtoa_r+0x83a>
 8008e2e:	9902      	ldr	r1, [sp, #8]
 8008e30:	461a      	mov	r2, r3
 8008e32:	4648      	mov	r0, r9
 8008e34:	f000 fcba 	bl	80097ac <__lshift>
 8008e38:	9002      	str	r0, [sp, #8]
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dd05      	ble.n	8008e4c <_dtoa_r+0x84c>
 8008e40:	4621      	mov	r1, r4
 8008e42:	461a      	mov	r2, r3
 8008e44:	4648      	mov	r0, r9
 8008e46:	f000 fcb1 	bl	80097ac <__lshift>
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d061      	beq.n	8008f16 <_dtoa_r+0x916>
 8008e52:	9802      	ldr	r0, [sp, #8]
 8008e54:	4621      	mov	r1, r4
 8008e56:	f000 fd15 	bl	8009884 <__mcmp>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	da5b      	bge.n	8008f16 <_dtoa_r+0x916>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9902      	ldr	r1, [sp, #8]
 8008e62:	220a      	movs	r2, #10
 8008e64:	4648      	mov	r0, r9
 8008e66:	f000 fafd 	bl	8009464 <__multadd>
 8008e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 8177 	beq.w	8009166 <_dtoa_r+0xb66>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	4648      	mov	r0, r9
 8008e80:	f000 faf0 	bl	8009464 <__multadd>
 8008e84:	f1bb 0f00 	cmp.w	fp, #0
 8008e88:	4605      	mov	r5, r0
 8008e8a:	dc6f      	bgt.n	8008f6c <_dtoa_r+0x96c>
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	dc49      	bgt.n	8008f26 <_dtoa_r+0x926>
 8008e92:	e06b      	b.n	8008f6c <_dtoa_r+0x96c>
 8008e94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e9a:	e73c      	b.n	8008d16 <_dtoa_r+0x716>
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	40240000 	.word	0x40240000
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	1e5c      	subs	r4, r3, #1
 8008ea8:	9b08      	ldr	r3, [sp, #32]
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	db09      	blt.n	8008ec2 <_dtoa_r+0x8c2>
 8008eae:	1b1c      	subs	r4, r3, r4
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f6bf af30 	bge.w	8008d18 <_dtoa_r+0x718>
 8008eb8:	9b00      	ldr	r3, [sp, #0]
 8008eba:	9a03      	ldr	r2, [sp, #12]
 8008ebc:	1a9e      	subs	r6, r3, r2
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e72b      	b.n	8008d1a <_dtoa_r+0x71a>
 8008ec2:	9b08      	ldr	r3, [sp, #32]
 8008ec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ec6:	9408      	str	r4, [sp, #32]
 8008ec8:	1ae3      	subs	r3, r4, r3
 8008eca:	441a      	add	r2, r3
 8008ecc:	9e00      	ldr	r6, [sp, #0]
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008ed2:	2400      	movs	r4, #0
 8008ed4:	e721      	b.n	8008d1a <_dtoa_r+0x71a>
 8008ed6:	9c08      	ldr	r4, [sp, #32]
 8008ed8:	9e00      	ldr	r6, [sp, #0]
 8008eda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008edc:	e728      	b.n	8008d30 <_dtoa_r+0x730>
 8008ede:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008ee2:	e751      	b.n	8008d88 <_dtoa_r+0x788>
 8008ee4:	9a08      	ldr	r2, [sp, #32]
 8008ee6:	9902      	ldr	r1, [sp, #8]
 8008ee8:	e750      	b.n	8008d8c <_dtoa_r+0x78c>
 8008eea:	f8cd 8008 	str.w	r8, [sp, #8]
 8008eee:	e751      	b.n	8008d94 <_dtoa_r+0x794>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e779      	b.n	8008de8 <_dtoa_r+0x7e8>
 8008ef4:	9b04      	ldr	r3, [sp, #16]
 8008ef6:	e777      	b.n	8008de8 <_dtoa_r+0x7e8>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9308      	str	r3, [sp, #32]
 8008efc:	e779      	b.n	8008df2 <_dtoa_r+0x7f2>
 8008efe:	d093      	beq.n	8008e28 <_dtoa_r+0x828>
 8008f00:	9a00      	ldr	r2, [sp, #0]
 8008f02:	331c      	adds	r3, #28
 8008f04:	441a      	add	r2, r3
 8008f06:	9200      	str	r2, [sp, #0]
 8008f08:	9a06      	ldr	r2, [sp, #24]
 8008f0a:	441a      	add	r2, r3
 8008f0c:	441e      	add	r6, r3
 8008f0e:	9206      	str	r2, [sp, #24]
 8008f10:	e78a      	b.n	8008e28 <_dtoa_r+0x828>
 8008f12:	4603      	mov	r3, r0
 8008f14:	e7f4      	b.n	8008f00 <_dtoa_r+0x900>
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	46b8      	mov	r8, r7
 8008f1c:	dc20      	bgt.n	8008f60 <_dtoa_r+0x960>
 8008f1e:	469b      	mov	fp, r3
 8008f20:	9b07      	ldr	r3, [sp, #28]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	dd1e      	ble.n	8008f64 <_dtoa_r+0x964>
 8008f26:	f1bb 0f00 	cmp.w	fp, #0
 8008f2a:	f47f adb1 	bne.w	8008a90 <_dtoa_r+0x490>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	465b      	mov	r3, fp
 8008f32:	2205      	movs	r2, #5
 8008f34:	4648      	mov	r0, r9
 8008f36:	f000 fa95 	bl	8009464 <__multadd>
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	9802      	ldr	r0, [sp, #8]
 8008f40:	f000 fca0 	bl	8009884 <__mcmp>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f77f ada3 	ble.w	8008a90 <_dtoa_r+0x490>
 8008f4a:	4656      	mov	r6, sl
 8008f4c:	2331      	movs	r3, #49	@ 0x31
 8008f4e:	f806 3b01 	strb.w	r3, [r6], #1
 8008f52:	f108 0801 	add.w	r8, r8, #1
 8008f56:	e59f      	b.n	8008a98 <_dtoa_r+0x498>
 8008f58:	9c03      	ldr	r4, [sp, #12]
 8008f5a:	46b8      	mov	r8, r7
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	e7f4      	b.n	8008f4a <_dtoa_r+0x94a>
 8008f60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8101 	beq.w	800916e <_dtoa_r+0xb6e>
 8008f6c:	2e00      	cmp	r6, #0
 8008f6e:	dd05      	ble.n	8008f7c <_dtoa_r+0x97c>
 8008f70:	4629      	mov	r1, r5
 8008f72:	4632      	mov	r2, r6
 8008f74:	4648      	mov	r0, r9
 8008f76:	f000 fc19 	bl	80097ac <__lshift>
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d05c      	beq.n	800903c <_dtoa_r+0xa3c>
 8008f82:	6869      	ldr	r1, [r5, #4]
 8008f84:	4648      	mov	r0, r9
 8008f86:	f000 fa0b 	bl	80093a0 <_Balloc>
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	b928      	cbnz	r0, 8008f9a <_dtoa_r+0x99a>
 8008f8e:	4b82      	ldr	r3, [pc, #520]	@ (8009198 <_dtoa_r+0xb98>)
 8008f90:	4602      	mov	r2, r0
 8008f92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f96:	f7ff bb4a 	b.w	800862e <_dtoa_r+0x2e>
 8008f9a:	692a      	ldr	r2, [r5, #16]
 8008f9c:	3202      	adds	r2, #2
 8008f9e:	0092      	lsls	r2, r2, #2
 8008fa0:	f105 010c 	add.w	r1, r5, #12
 8008fa4:	300c      	adds	r0, #12
 8008fa6:	f7ff fa94 	bl	80084d2 <memcpy>
 8008faa:	2201      	movs	r2, #1
 8008fac:	4631      	mov	r1, r6
 8008fae:	4648      	mov	r0, r9
 8008fb0:	f000 fbfc 	bl	80097ac <__lshift>
 8008fb4:	f10a 0301 	add.w	r3, sl, #1
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	eb0a 030b 	add.w	r3, sl, fp
 8008fbe:	9308      	str	r3, [sp, #32]
 8008fc0:	9b04      	ldr	r3, [sp, #16]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	9306      	str	r3, [sp, #24]
 8008fca:	4605      	mov	r5, r0
 8008fcc:	9b00      	ldr	r3, [sp, #0]
 8008fce:	9802      	ldr	r0, [sp, #8]
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008fd6:	f7ff fa8a 	bl	80084ee <quorem>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	3330      	adds	r3, #48	@ 0x30
 8008fde:	9003      	str	r0, [sp, #12]
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	9802      	ldr	r0, [sp, #8]
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	f000 fc4d 	bl	8009884 <__mcmp>
 8008fea:	462a      	mov	r2, r5
 8008fec:	9004      	str	r0, [sp, #16]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4648      	mov	r0, r9
 8008ff2:	f000 fc63 	bl	80098bc <__mdiff>
 8008ff6:	68c2      	ldr	r2, [r0, #12]
 8008ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	bb02      	cbnz	r2, 8009040 <_dtoa_r+0xa40>
 8008ffe:	4601      	mov	r1, r0
 8009000:	9802      	ldr	r0, [sp, #8]
 8009002:	f000 fc3f 	bl	8009884 <__mcmp>
 8009006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009008:	4602      	mov	r2, r0
 800900a:	4631      	mov	r1, r6
 800900c:	4648      	mov	r0, r9
 800900e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009010:	9309      	str	r3, [sp, #36]	@ 0x24
 8009012:	f000 fa05 	bl	8009420 <_Bfree>
 8009016:	9b07      	ldr	r3, [sp, #28]
 8009018:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800901a:	9e00      	ldr	r6, [sp, #0]
 800901c:	ea42 0103 	orr.w	r1, r2, r3
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	4319      	orrs	r1, r3
 8009024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009026:	d10d      	bne.n	8009044 <_dtoa_r+0xa44>
 8009028:	2b39      	cmp	r3, #57	@ 0x39
 800902a:	d027      	beq.n	800907c <_dtoa_r+0xa7c>
 800902c:	9a04      	ldr	r2, [sp, #16]
 800902e:	2a00      	cmp	r2, #0
 8009030:	dd01      	ble.n	8009036 <_dtoa_r+0xa36>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	3331      	adds	r3, #49	@ 0x31
 8009036:	f88b 3000 	strb.w	r3, [fp]
 800903a:	e52e      	b.n	8008a9a <_dtoa_r+0x49a>
 800903c:	4628      	mov	r0, r5
 800903e:	e7b9      	b.n	8008fb4 <_dtoa_r+0x9b4>
 8009040:	2201      	movs	r2, #1
 8009042:	e7e2      	b.n	800900a <_dtoa_r+0xa0a>
 8009044:	9904      	ldr	r1, [sp, #16]
 8009046:	2900      	cmp	r1, #0
 8009048:	db04      	blt.n	8009054 <_dtoa_r+0xa54>
 800904a:	9807      	ldr	r0, [sp, #28]
 800904c:	4301      	orrs	r1, r0
 800904e:	9806      	ldr	r0, [sp, #24]
 8009050:	4301      	orrs	r1, r0
 8009052:	d120      	bne.n	8009096 <_dtoa_r+0xa96>
 8009054:	2a00      	cmp	r2, #0
 8009056:	ddee      	ble.n	8009036 <_dtoa_r+0xa36>
 8009058:	9902      	ldr	r1, [sp, #8]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	2201      	movs	r2, #1
 800905e:	4648      	mov	r0, r9
 8009060:	f000 fba4 	bl	80097ac <__lshift>
 8009064:	4621      	mov	r1, r4
 8009066:	9002      	str	r0, [sp, #8]
 8009068:	f000 fc0c 	bl	8009884 <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	9b00      	ldr	r3, [sp, #0]
 8009070:	dc02      	bgt.n	8009078 <_dtoa_r+0xa78>
 8009072:	d1e0      	bne.n	8009036 <_dtoa_r+0xa36>
 8009074:	07da      	lsls	r2, r3, #31
 8009076:	d5de      	bpl.n	8009036 <_dtoa_r+0xa36>
 8009078:	2b39      	cmp	r3, #57	@ 0x39
 800907a:	d1da      	bne.n	8009032 <_dtoa_r+0xa32>
 800907c:	2339      	movs	r3, #57	@ 0x39
 800907e:	f88b 3000 	strb.w	r3, [fp]
 8009082:	4633      	mov	r3, r6
 8009084:	461e      	mov	r6, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800908c:	2a39      	cmp	r2, #57	@ 0x39
 800908e:	d04e      	beq.n	800912e <_dtoa_r+0xb2e>
 8009090:	3201      	adds	r2, #1
 8009092:	701a      	strb	r2, [r3, #0]
 8009094:	e501      	b.n	8008a9a <_dtoa_r+0x49a>
 8009096:	2a00      	cmp	r2, #0
 8009098:	dd03      	ble.n	80090a2 <_dtoa_r+0xaa2>
 800909a:	2b39      	cmp	r3, #57	@ 0x39
 800909c:	d0ee      	beq.n	800907c <_dtoa_r+0xa7c>
 800909e:	3301      	adds	r3, #1
 80090a0:	e7c9      	b.n	8009036 <_dtoa_r+0xa36>
 80090a2:	9a00      	ldr	r2, [sp, #0]
 80090a4:	9908      	ldr	r1, [sp, #32]
 80090a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090aa:	428a      	cmp	r2, r1
 80090ac:	d028      	beq.n	8009100 <_dtoa_r+0xb00>
 80090ae:	9902      	ldr	r1, [sp, #8]
 80090b0:	2300      	movs	r3, #0
 80090b2:	220a      	movs	r2, #10
 80090b4:	4648      	mov	r0, r9
 80090b6:	f000 f9d5 	bl	8009464 <__multadd>
 80090ba:	42af      	cmp	r7, r5
 80090bc:	9002      	str	r0, [sp, #8]
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	f04f 020a 	mov.w	r2, #10
 80090c6:	4639      	mov	r1, r7
 80090c8:	4648      	mov	r0, r9
 80090ca:	d107      	bne.n	80090dc <_dtoa_r+0xadc>
 80090cc:	f000 f9ca 	bl	8009464 <__multadd>
 80090d0:	4607      	mov	r7, r0
 80090d2:	4605      	mov	r5, r0
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	e777      	b.n	8008fcc <_dtoa_r+0x9cc>
 80090dc:	f000 f9c2 	bl	8009464 <__multadd>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4607      	mov	r7, r0
 80090e4:	2300      	movs	r3, #0
 80090e6:	220a      	movs	r2, #10
 80090e8:	4648      	mov	r0, r9
 80090ea:	f000 f9bb 	bl	8009464 <__multadd>
 80090ee:	4605      	mov	r5, r0
 80090f0:	e7f0      	b.n	80090d4 <_dtoa_r+0xad4>
 80090f2:	f1bb 0f00 	cmp.w	fp, #0
 80090f6:	bfcc      	ite	gt
 80090f8:	465e      	movgt	r6, fp
 80090fa:	2601      	movle	r6, #1
 80090fc:	4456      	add	r6, sl
 80090fe:	2700      	movs	r7, #0
 8009100:	9902      	ldr	r1, [sp, #8]
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	2201      	movs	r2, #1
 8009106:	4648      	mov	r0, r9
 8009108:	f000 fb50 	bl	80097ac <__lshift>
 800910c:	4621      	mov	r1, r4
 800910e:	9002      	str	r0, [sp, #8]
 8009110:	f000 fbb8 	bl	8009884 <__mcmp>
 8009114:	2800      	cmp	r0, #0
 8009116:	dcb4      	bgt.n	8009082 <_dtoa_r+0xa82>
 8009118:	d102      	bne.n	8009120 <_dtoa_r+0xb20>
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	07db      	lsls	r3, r3, #31
 800911e:	d4b0      	bmi.n	8009082 <_dtoa_r+0xa82>
 8009120:	4633      	mov	r3, r6
 8009122:	461e      	mov	r6, r3
 8009124:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009128:	2a30      	cmp	r2, #48	@ 0x30
 800912a:	d0fa      	beq.n	8009122 <_dtoa_r+0xb22>
 800912c:	e4b5      	b.n	8008a9a <_dtoa_r+0x49a>
 800912e:	459a      	cmp	sl, r3
 8009130:	d1a8      	bne.n	8009084 <_dtoa_r+0xa84>
 8009132:	2331      	movs	r3, #49	@ 0x31
 8009134:	f108 0801 	add.w	r8, r8, #1
 8009138:	f88a 3000 	strb.w	r3, [sl]
 800913c:	e4ad      	b.n	8008a9a <_dtoa_r+0x49a>
 800913e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009140:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800919c <_dtoa_r+0xb9c>
 8009144:	b11b      	cbz	r3, 800914e <_dtoa_r+0xb4e>
 8009146:	f10a 0308 	add.w	r3, sl, #8
 800914a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	4650      	mov	r0, sl
 8009150:	b017      	add	sp, #92	@ 0x5c
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	9b07      	ldr	r3, [sp, #28]
 8009158:	2b01      	cmp	r3, #1
 800915a:	f77f ae2e 	ble.w	8008dba <_dtoa_r+0x7ba>
 800915e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009160:	9308      	str	r3, [sp, #32]
 8009162:	2001      	movs	r0, #1
 8009164:	e64d      	b.n	8008e02 <_dtoa_r+0x802>
 8009166:	f1bb 0f00 	cmp.w	fp, #0
 800916a:	f77f aed9 	ble.w	8008f20 <_dtoa_r+0x920>
 800916e:	4656      	mov	r6, sl
 8009170:	9802      	ldr	r0, [sp, #8]
 8009172:	4621      	mov	r1, r4
 8009174:	f7ff f9bb 	bl	80084ee <quorem>
 8009178:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800917c:	f806 3b01 	strb.w	r3, [r6], #1
 8009180:	eba6 020a 	sub.w	r2, r6, sl
 8009184:	4593      	cmp	fp, r2
 8009186:	ddb4      	ble.n	80090f2 <_dtoa_r+0xaf2>
 8009188:	9902      	ldr	r1, [sp, #8]
 800918a:	2300      	movs	r3, #0
 800918c:	220a      	movs	r2, #10
 800918e:	4648      	mov	r0, r9
 8009190:	f000 f968 	bl	8009464 <__multadd>
 8009194:	9002      	str	r0, [sp, #8]
 8009196:	e7eb      	b.n	8009170 <_dtoa_r+0xb70>
 8009198:	0800a2c0 	.word	0x0800a2c0
 800919c:	0800a244 	.word	0x0800a244

080091a0 <_free_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4605      	mov	r5, r0
 80091a4:	2900      	cmp	r1, #0
 80091a6:	d041      	beq.n	800922c <_free_r+0x8c>
 80091a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ac:	1f0c      	subs	r4, r1, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bfb8      	it	lt
 80091b2:	18e4      	addlt	r4, r4, r3
 80091b4:	f000 f8e8 	bl	8009388 <__malloc_lock>
 80091b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009230 <_free_r+0x90>)
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	b933      	cbnz	r3, 80091cc <_free_r+0x2c>
 80091be:	6063      	str	r3, [r4, #4]
 80091c0:	6014      	str	r4, [r2, #0]
 80091c2:	4628      	mov	r0, r5
 80091c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c8:	f000 b8e4 	b.w	8009394 <__malloc_unlock>
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d908      	bls.n	80091e2 <_free_r+0x42>
 80091d0:	6820      	ldr	r0, [r4, #0]
 80091d2:	1821      	adds	r1, r4, r0
 80091d4:	428b      	cmp	r3, r1
 80091d6:	bf01      	itttt	eq
 80091d8:	6819      	ldreq	r1, [r3, #0]
 80091da:	685b      	ldreq	r3, [r3, #4]
 80091dc:	1809      	addeq	r1, r1, r0
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	e7ed      	b.n	80091be <_free_r+0x1e>
 80091e2:	461a      	mov	r2, r3
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	b10b      	cbz	r3, 80091ec <_free_r+0x4c>
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d9fa      	bls.n	80091e2 <_free_r+0x42>
 80091ec:	6811      	ldr	r1, [r2, #0]
 80091ee:	1850      	adds	r0, r2, r1
 80091f0:	42a0      	cmp	r0, r4
 80091f2:	d10b      	bne.n	800920c <_free_r+0x6c>
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	4401      	add	r1, r0
 80091f8:	1850      	adds	r0, r2, r1
 80091fa:	4283      	cmp	r3, r0
 80091fc:	6011      	str	r1, [r2, #0]
 80091fe:	d1e0      	bne.n	80091c2 <_free_r+0x22>
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	6053      	str	r3, [r2, #4]
 8009206:	4408      	add	r0, r1
 8009208:	6010      	str	r0, [r2, #0]
 800920a:	e7da      	b.n	80091c2 <_free_r+0x22>
 800920c:	d902      	bls.n	8009214 <_free_r+0x74>
 800920e:	230c      	movs	r3, #12
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	e7d6      	b.n	80091c2 <_free_r+0x22>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	1821      	adds	r1, r4, r0
 8009218:	428b      	cmp	r3, r1
 800921a:	bf04      	itt	eq
 800921c:	6819      	ldreq	r1, [r3, #0]
 800921e:	685b      	ldreq	r3, [r3, #4]
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	bf04      	itt	eq
 8009224:	1809      	addeq	r1, r1, r0
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	6054      	str	r4, [r2, #4]
 800922a:	e7ca      	b.n	80091c2 <_free_r+0x22>
 800922c:	bd38      	pop	{r3, r4, r5, pc}
 800922e:	bf00      	nop
 8009230:	20004e5c 	.word	0x20004e5c

08009234 <malloc>:
 8009234:	4b02      	ldr	r3, [pc, #8]	@ (8009240 <malloc+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f000 b825 	b.w	8009288 <_malloc_r>
 800923e:	bf00      	nop
 8009240:	2000001c 	.word	0x2000001c

08009244 <sbrk_aligned>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4e0f      	ldr	r6, [pc, #60]	@ (8009284 <sbrk_aligned+0x40>)
 8009248:	460c      	mov	r4, r1
 800924a:	6831      	ldr	r1, [r6, #0]
 800924c:	4605      	mov	r5, r0
 800924e:	b911      	cbnz	r1, 8009256 <sbrk_aligned+0x12>
 8009250:	f000 fe92 	bl	8009f78 <_sbrk_r>
 8009254:	6030      	str	r0, [r6, #0]
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f000 fe8d 	bl	8009f78 <_sbrk_r>
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	d103      	bne.n	800926a <sbrk_aligned+0x26>
 8009262:	f04f 34ff 	mov.w	r4, #4294967295
 8009266:	4620      	mov	r0, r4
 8009268:	bd70      	pop	{r4, r5, r6, pc}
 800926a:	1cc4      	adds	r4, r0, #3
 800926c:	f024 0403 	bic.w	r4, r4, #3
 8009270:	42a0      	cmp	r0, r4
 8009272:	d0f8      	beq.n	8009266 <sbrk_aligned+0x22>
 8009274:	1a21      	subs	r1, r4, r0
 8009276:	4628      	mov	r0, r5
 8009278:	f000 fe7e 	bl	8009f78 <_sbrk_r>
 800927c:	3001      	adds	r0, #1
 800927e:	d1f2      	bne.n	8009266 <sbrk_aligned+0x22>
 8009280:	e7ef      	b.n	8009262 <sbrk_aligned+0x1e>
 8009282:	bf00      	nop
 8009284:	20004e58 	.word	0x20004e58

08009288 <_malloc_r>:
 8009288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800928c:	1ccd      	adds	r5, r1, #3
 800928e:	f025 0503 	bic.w	r5, r5, #3
 8009292:	3508      	adds	r5, #8
 8009294:	2d0c      	cmp	r5, #12
 8009296:	bf38      	it	cc
 8009298:	250c      	movcc	r5, #12
 800929a:	2d00      	cmp	r5, #0
 800929c:	4606      	mov	r6, r0
 800929e:	db01      	blt.n	80092a4 <_malloc_r+0x1c>
 80092a0:	42a9      	cmp	r1, r5
 80092a2:	d904      	bls.n	80092ae <_malloc_r+0x26>
 80092a4:	230c      	movs	r3, #12
 80092a6:	6033      	str	r3, [r6, #0]
 80092a8:	2000      	movs	r0, #0
 80092aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009384 <_malloc_r+0xfc>
 80092b2:	f000 f869 	bl	8009388 <__malloc_lock>
 80092b6:	f8d8 3000 	ldr.w	r3, [r8]
 80092ba:	461c      	mov	r4, r3
 80092bc:	bb44      	cbnz	r4, 8009310 <_malloc_r+0x88>
 80092be:	4629      	mov	r1, r5
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7ff ffbf 	bl	8009244 <sbrk_aligned>
 80092c6:	1c43      	adds	r3, r0, #1
 80092c8:	4604      	mov	r4, r0
 80092ca:	d158      	bne.n	800937e <_malloc_r+0xf6>
 80092cc:	f8d8 4000 	ldr.w	r4, [r8]
 80092d0:	4627      	mov	r7, r4
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	d143      	bne.n	800935e <_malloc_r+0xd6>
 80092d6:	2c00      	cmp	r4, #0
 80092d8:	d04b      	beq.n	8009372 <_malloc_r+0xea>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	4639      	mov	r1, r7
 80092de:	4630      	mov	r0, r6
 80092e0:	eb04 0903 	add.w	r9, r4, r3
 80092e4:	f000 fe48 	bl	8009f78 <_sbrk_r>
 80092e8:	4581      	cmp	r9, r0
 80092ea:	d142      	bne.n	8009372 <_malloc_r+0xea>
 80092ec:	6821      	ldr	r1, [r4, #0]
 80092ee:	1a6d      	subs	r5, r5, r1
 80092f0:	4629      	mov	r1, r5
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff ffa6 	bl	8009244 <sbrk_aligned>
 80092f8:	3001      	adds	r0, #1
 80092fa:	d03a      	beq.n	8009372 <_malloc_r+0xea>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	442b      	add	r3, r5
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	f8d8 3000 	ldr.w	r3, [r8]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	bb62      	cbnz	r2, 8009364 <_malloc_r+0xdc>
 800930a:	f8c8 7000 	str.w	r7, [r8]
 800930e:	e00f      	b.n	8009330 <_malloc_r+0xa8>
 8009310:	6822      	ldr	r2, [r4, #0]
 8009312:	1b52      	subs	r2, r2, r5
 8009314:	d420      	bmi.n	8009358 <_malloc_r+0xd0>
 8009316:	2a0b      	cmp	r2, #11
 8009318:	d917      	bls.n	800934a <_malloc_r+0xc2>
 800931a:	1961      	adds	r1, r4, r5
 800931c:	42a3      	cmp	r3, r4
 800931e:	6025      	str	r5, [r4, #0]
 8009320:	bf18      	it	ne
 8009322:	6059      	strne	r1, [r3, #4]
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	bf08      	it	eq
 8009328:	f8c8 1000 	streq.w	r1, [r8]
 800932c:	5162      	str	r2, [r4, r5]
 800932e:	604b      	str	r3, [r1, #4]
 8009330:	4630      	mov	r0, r6
 8009332:	f000 f82f 	bl	8009394 <__malloc_unlock>
 8009336:	f104 000b 	add.w	r0, r4, #11
 800933a:	1d23      	adds	r3, r4, #4
 800933c:	f020 0007 	bic.w	r0, r0, #7
 8009340:	1ac2      	subs	r2, r0, r3
 8009342:	bf1c      	itt	ne
 8009344:	1a1b      	subne	r3, r3, r0
 8009346:	50a3      	strne	r3, [r4, r2]
 8009348:	e7af      	b.n	80092aa <_malloc_r+0x22>
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	42a3      	cmp	r3, r4
 800934e:	bf0c      	ite	eq
 8009350:	f8c8 2000 	streq.w	r2, [r8]
 8009354:	605a      	strne	r2, [r3, #4]
 8009356:	e7eb      	b.n	8009330 <_malloc_r+0xa8>
 8009358:	4623      	mov	r3, r4
 800935a:	6864      	ldr	r4, [r4, #4]
 800935c:	e7ae      	b.n	80092bc <_malloc_r+0x34>
 800935e:	463c      	mov	r4, r7
 8009360:	687f      	ldr	r7, [r7, #4]
 8009362:	e7b6      	b.n	80092d2 <_malloc_r+0x4a>
 8009364:	461a      	mov	r2, r3
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	42a3      	cmp	r3, r4
 800936a:	d1fb      	bne.n	8009364 <_malloc_r+0xdc>
 800936c:	2300      	movs	r3, #0
 800936e:	6053      	str	r3, [r2, #4]
 8009370:	e7de      	b.n	8009330 <_malloc_r+0xa8>
 8009372:	230c      	movs	r3, #12
 8009374:	6033      	str	r3, [r6, #0]
 8009376:	4630      	mov	r0, r6
 8009378:	f000 f80c 	bl	8009394 <__malloc_unlock>
 800937c:	e794      	b.n	80092a8 <_malloc_r+0x20>
 800937e:	6005      	str	r5, [r0, #0]
 8009380:	e7d6      	b.n	8009330 <_malloc_r+0xa8>
 8009382:	bf00      	nop
 8009384:	20004e5c 	.word	0x20004e5c

08009388 <__malloc_lock>:
 8009388:	4801      	ldr	r0, [pc, #4]	@ (8009390 <__malloc_lock+0x8>)
 800938a:	f7ff b8a0 	b.w	80084ce <__retarget_lock_acquire_recursive>
 800938e:	bf00      	nop
 8009390:	20004e54 	.word	0x20004e54

08009394 <__malloc_unlock>:
 8009394:	4801      	ldr	r0, [pc, #4]	@ (800939c <__malloc_unlock+0x8>)
 8009396:	f7ff b89b 	b.w	80084d0 <__retarget_lock_release_recursive>
 800939a:	bf00      	nop
 800939c:	20004e54 	.word	0x20004e54

080093a0 <_Balloc>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	69c6      	ldr	r6, [r0, #28]
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	b976      	cbnz	r6, 80093c8 <_Balloc+0x28>
 80093aa:	2010      	movs	r0, #16
 80093ac:	f7ff ff42 	bl	8009234 <malloc>
 80093b0:	4602      	mov	r2, r0
 80093b2:	61e0      	str	r0, [r4, #28]
 80093b4:	b920      	cbnz	r0, 80093c0 <_Balloc+0x20>
 80093b6:	4b18      	ldr	r3, [pc, #96]	@ (8009418 <_Balloc+0x78>)
 80093b8:	4818      	ldr	r0, [pc, #96]	@ (800941c <_Balloc+0x7c>)
 80093ba:	216b      	movs	r1, #107	@ 0x6b
 80093bc:	f000 fdec 	bl	8009f98 <__assert_func>
 80093c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093c4:	6006      	str	r6, [r0, #0]
 80093c6:	60c6      	str	r6, [r0, #12]
 80093c8:	69e6      	ldr	r6, [r4, #28]
 80093ca:	68f3      	ldr	r3, [r6, #12]
 80093cc:	b183      	cbz	r3, 80093f0 <_Balloc+0x50>
 80093ce:	69e3      	ldr	r3, [r4, #28]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093d6:	b9b8      	cbnz	r0, 8009408 <_Balloc+0x68>
 80093d8:	2101      	movs	r1, #1
 80093da:	fa01 f605 	lsl.w	r6, r1, r5
 80093de:	1d72      	adds	r2, r6, #5
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fdf6 	bl	8009fd4 <_calloc_r>
 80093e8:	b160      	cbz	r0, 8009404 <_Balloc+0x64>
 80093ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093ee:	e00e      	b.n	800940e <_Balloc+0x6e>
 80093f0:	2221      	movs	r2, #33	@ 0x21
 80093f2:	2104      	movs	r1, #4
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 fded 	bl	8009fd4 <_calloc_r>
 80093fa:	69e3      	ldr	r3, [r4, #28]
 80093fc:	60f0      	str	r0, [r6, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e4      	bne.n	80093ce <_Balloc+0x2e>
 8009404:	2000      	movs	r0, #0
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	6802      	ldr	r2, [r0, #0]
 800940a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800940e:	2300      	movs	r3, #0
 8009410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009414:	e7f7      	b.n	8009406 <_Balloc+0x66>
 8009416:	bf00      	nop
 8009418:	0800a251 	.word	0x0800a251
 800941c:	0800a2d1 	.word	0x0800a2d1

08009420 <_Bfree>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	69c6      	ldr	r6, [r0, #28]
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
 8009428:	b976      	cbnz	r6, 8009448 <_Bfree+0x28>
 800942a:	2010      	movs	r0, #16
 800942c:	f7ff ff02 	bl	8009234 <malloc>
 8009430:	4602      	mov	r2, r0
 8009432:	61e8      	str	r0, [r5, #28]
 8009434:	b920      	cbnz	r0, 8009440 <_Bfree+0x20>
 8009436:	4b09      	ldr	r3, [pc, #36]	@ (800945c <_Bfree+0x3c>)
 8009438:	4809      	ldr	r0, [pc, #36]	@ (8009460 <_Bfree+0x40>)
 800943a:	218f      	movs	r1, #143	@ 0x8f
 800943c:	f000 fdac 	bl	8009f98 <__assert_func>
 8009440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009444:	6006      	str	r6, [r0, #0]
 8009446:	60c6      	str	r6, [r0, #12]
 8009448:	b13c      	cbz	r4, 800945a <_Bfree+0x3a>
 800944a:	69eb      	ldr	r3, [r5, #28]
 800944c:	6862      	ldr	r2, [r4, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009454:	6021      	str	r1, [r4, #0]
 8009456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	0800a251 	.word	0x0800a251
 8009460:	0800a2d1 	.word	0x0800a2d1

08009464 <__multadd>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	690d      	ldr	r5, [r1, #16]
 800946a:	4607      	mov	r7, r0
 800946c:	460c      	mov	r4, r1
 800946e:	461e      	mov	r6, r3
 8009470:	f101 0c14 	add.w	ip, r1, #20
 8009474:	2000      	movs	r0, #0
 8009476:	f8dc 3000 	ldr.w	r3, [ip]
 800947a:	b299      	uxth	r1, r3
 800947c:	fb02 6101 	mla	r1, r2, r1, r6
 8009480:	0c1e      	lsrs	r6, r3, #16
 8009482:	0c0b      	lsrs	r3, r1, #16
 8009484:	fb02 3306 	mla	r3, r2, r6, r3
 8009488:	b289      	uxth	r1, r1
 800948a:	3001      	adds	r0, #1
 800948c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009490:	4285      	cmp	r5, r0
 8009492:	f84c 1b04 	str.w	r1, [ip], #4
 8009496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800949a:	dcec      	bgt.n	8009476 <__multadd+0x12>
 800949c:	b30e      	cbz	r6, 80094e2 <__multadd+0x7e>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	42ab      	cmp	r3, r5
 80094a2:	dc19      	bgt.n	80094d8 <__multadd+0x74>
 80094a4:	6861      	ldr	r1, [r4, #4]
 80094a6:	4638      	mov	r0, r7
 80094a8:	3101      	adds	r1, #1
 80094aa:	f7ff ff79 	bl	80093a0 <_Balloc>
 80094ae:	4680      	mov	r8, r0
 80094b0:	b928      	cbnz	r0, 80094be <__multadd+0x5a>
 80094b2:	4602      	mov	r2, r0
 80094b4:	4b0c      	ldr	r3, [pc, #48]	@ (80094e8 <__multadd+0x84>)
 80094b6:	480d      	ldr	r0, [pc, #52]	@ (80094ec <__multadd+0x88>)
 80094b8:	21ba      	movs	r1, #186	@ 0xba
 80094ba:	f000 fd6d 	bl	8009f98 <__assert_func>
 80094be:	6922      	ldr	r2, [r4, #16]
 80094c0:	3202      	adds	r2, #2
 80094c2:	f104 010c 	add.w	r1, r4, #12
 80094c6:	0092      	lsls	r2, r2, #2
 80094c8:	300c      	adds	r0, #12
 80094ca:	f7ff f802 	bl	80084d2 <memcpy>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4638      	mov	r0, r7
 80094d2:	f7ff ffa5 	bl	8009420 <_Bfree>
 80094d6:	4644      	mov	r4, r8
 80094d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094dc:	3501      	adds	r5, #1
 80094de:	615e      	str	r6, [r3, #20]
 80094e0:	6125      	str	r5, [r4, #16]
 80094e2:	4620      	mov	r0, r4
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	0800a2c0 	.word	0x0800a2c0
 80094ec:	0800a2d1 	.word	0x0800a2d1

080094f0 <__hi0bits>:
 80094f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094f4:	4603      	mov	r3, r0
 80094f6:	bf36      	itet	cc
 80094f8:	0403      	lslcc	r3, r0, #16
 80094fa:	2000      	movcs	r0, #0
 80094fc:	2010      	movcc	r0, #16
 80094fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009502:	bf3c      	itt	cc
 8009504:	021b      	lslcc	r3, r3, #8
 8009506:	3008      	addcc	r0, #8
 8009508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800950c:	bf3c      	itt	cc
 800950e:	011b      	lslcc	r3, r3, #4
 8009510:	3004      	addcc	r0, #4
 8009512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009516:	bf3c      	itt	cc
 8009518:	009b      	lslcc	r3, r3, #2
 800951a:	3002      	addcc	r0, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	db05      	blt.n	800952c <__hi0bits+0x3c>
 8009520:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009524:	f100 0001 	add.w	r0, r0, #1
 8009528:	bf08      	it	eq
 800952a:	2020      	moveq	r0, #32
 800952c:	4770      	bx	lr

0800952e <__lo0bits>:
 800952e:	6803      	ldr	r3, [r0, #0]
 8009530:	4602      	mov	r2, r0
 8009532:	f013 0007 	ands.w	r0, r3, #7
 8009536:	d00b      	beq.n	8009550 <__lo0bits+0x22>
 8009538:	07d9      	lsls	r1, r3, #31
 800953a:	d421      	bmi.n	8009580 <__lo0bits+0x52>
 800953c:	0798      	lsls	r0, r3, #30
 800953e:	bf49      	itett	mi
 8009540:	085b      	lsrmi	r3, r3, #1
 8009542:	089b      	lsrpl	r3, r3, #2
 8009544:	2001      	movmi	r0, #1
 8009546:	6013      	strmi	r3, [r2, #0]
 8009548:	bf5c      	itt	pl
 800954a:	6013      	strpl	r3, [r2, #0]
 800954c:	2002      	movpl	r0, #2
 800954e:	4770      	bx	lr
 8009550:	b299      	uxth	r1, r3
 8009552:	b909      	cbnz	r1, 8009558 <__lo0bits+0x2a>
 8009554:	0c1b      	lsrs	r3, r3, #16
 8009556:	2010      	movs	r0, #16
 8009558:	b2d9      	uxtb	r1, r3
 800955a:	b909      	cbnz	r1, 8009560 <__lo0bits+0x32>
 800955c:	3008      	adds	r0, #8
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	0719      	lsls	r1, r3, #28
 8009562:	bf04      	itt	eq
 8009564:	091b      	lsreq	r3, r3, #4
 8009566:	3004      	addeq	r0, #4
 8009568:	0799      	lsls	r1, r3, #30
 800956a:	bf04      	itt	eq
 800956c:	089b      	lsreq	r3, r3, #2
 800956e:	3002      	addeq	r0, #2
 8009570:	07d9      	lsls	r1, r3, #31
 8009572:	d403      	bmi.n	800957c <__lo0bits+0x4e>
 8009574:	085b      	lsrs	r3, r3, #1
 8009576:	f100 0001 	add.w	r0, r0, #1
 800957a:	d003      	beq.n	8009584 <__lo0bits+0x56>
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	4770      	bx	lr
 8009580:	2000      	movs	r0, #0
 8009582:	4770      	bx	lr
 8009584:	2020      	movs	r0, #32
 8009586:	4770      	bx	lr

08009588 <__i2b>:
 8009588:	b510      	push	{r4, lr}
 800958a:	460c      	mov	r4, r1
 800958c:	2101      	movs	r1, #1
 800958e:	f7ff ff07 	bl	80093a0 <_Balloc>
 8009592:	4602      	mov	r2, r0
 8009594:	b928      	cbnz	r0, 80095a2 <__i2b+0x1a>
 8009596:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <__i2b+0x24>)
 8009598:	4805      	ldr	r0, [pc, #20]	@ (80095b0 <__i2b+0x28>)
 800959a:	f240 1145 	movw	r1, #325	@ 0x145
 800959e:	f000 fcfb 	bl	8009f98 <__assert_func>
 80095a2:	2301      	movs	r3, #1
 80095a4:	6144      	str	r4, [r0, #20]
 80095a6:	6103      	str	r3, [r0, #16]
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	bf00      	nop
 80095ac:	0800a2c0 	.word	0x0800a2c0
 80095b0:	0800a2d1 	.word	0x0800a2d1

080095b4 <__multiply>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	4617      	mov	r7, r2
 80095ba:	690a      	ldr	r2, [r1, #16]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	429a      	cmp	r2, r3
 80095c0:	bfa8      	it	ge
 80095c2:	463b      	movge	r3, r7
 80095c4:	4689      	mov	r9, r1
 80095c6:	bfa4      	itt	ge
 80095c8:	460f      	movge	r7, r1
 80095ca:	4699      	movge	r9, r3
 80095cc:	693d      	ldr	r5, [r7, #16]
 80095ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	eb05 060a 	add.w	r6, r5, sl
 80095da:	42b3      	cmp	r3, r6
 80095dc:	b085      	sub	sp, #20
 80095de:	bfb8      	it	lt
 80095e0:	3101      	addlt	r1, #1
 80095e2:	f7ff fedd 	bl	80093a0 <_Balloc>
 80095e6:	b930      	cbnz	r0, 80095f6 <__multiply+0x42>
 80095e8:	4602      	mov	r2, r0
 80095ea:	4b41      	ldr	r3, [pc, #260]	@ (80096f0 <__multiply+0x13c>)
 80095ec:	4841      	ldr	r0, [pc, #260]	@ (80096f4 <__multiply+0x140>)
 80095ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095f2:	f000 fcd1 	bl	8009f98 <__assert_func>
 80095f6:	f100 0414 	add.w	r4, r0, #20
 80095fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80095fe:	4623      	mov	r3, r4
 8009600:	2200      	movs	r2, #0
 8009602:	4573      	cmp	r3, lr
 8009604:	d320      	bcc.n	8009648 <__multiply+0x94>
 8009606:	f107 0814 	add.w	r8, r7, #20
 800960a:	f109 0114 	add.w	r1, r9, #20
 800960e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009612:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009616:	9302      	str	r3, [sp, #8]
 8009618:	1beb      	subs	r3, r5, r7
 800961a:	3b15      	subs	r3, #21
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	3304      	adds	r3, #4
 8009622:	3715      	adds	r7, #21
 8009624:	42bd      	cmp	r5, r7
 8009626:	bf38      	it	cc
 8009628:	2304      	movcc	r3, #4
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	9103      	str	r1, [sp, #12]
 8009630:	428b      	cmp	r3, r1
 8009632:	d80c      	bhi.n	800964e <__multiply+0x9a>
 8009634:	2e00      	cmp	r6, #0
 8009636:	dd03      	ble.n	8009640 <__multiply+0x8c>
 8009638:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800963c:	2b00      	cmp	r3, #0
 800963e:	d055      	beq.n	80096ec <__multiply+0x138>
 8009640:	6106      	str	r6, [r0, #16]
 8009642:	b005      	add	sp, #20
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	f843 2b04 	str.w	r2, [r3], #4
 800964c:	e7d9      	b.n	8009602 <__multiply+0x4e>
 800964e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009652:	f1ba 0f00 	cmp.w	sl, #0
 8009656:	d01f      	beq.n	8009698 <__multiply+0xe4>
 8009658:	46c4      	mov	ip, r8
 800965a:	46a1      	mov	r9, r4
 800965c:	2700      	movs	r7, #0
 800965e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009662:	f8d9 3000 	ldr.w	r3, [r9]
 8009666:	fa1f fb82 	uxth.w	fp, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009670:	443b      	add	r3, r7
 8009672:	f8d9 7000 	ldr.w	r7, [r9]
 8009676:	0c12      	lsrs	r2, r2, #16
 8009678:	0c3f      	lsrs	r7, r7, #16
 800967a:	fb0a 7202 	mla	r2, sl, r2, r7
 800967e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009682:	b29b      	uxth	r3, r3
 8009684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009688:	4565      	cmp	r5, ip
 800968a:	f849 3b04 	str.w	r3, [r9], #4
 800968e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009692:	d8e4      	bhi.n	800965e <__multiply+0xaa>
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	50e7      	str	r7, [r4, r3]
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800969e:	3104      	adds	r1, #4
 80096a0:	f1b9 0f00 	cmp.w	r9, #0
 80096a4:	d020      	beq.n	80096e8 <__multiply+0x134>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	4647      	mov	r7, r8
 80096aa:	46a4      	mov	ip, r4
 80096ac:	f04f 0a00 	mov.w	sl, #0
 80096b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80096b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80096b8:	fb09 220b 	mla	r2, r9, fp, r2
 80096bc:	4452      	add	r2, sl
 80096be:	b29b      	uxth	r3, r3
 80096c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096c4:	f84c 3b04 	str.w	r3, [ip], #4
 80096c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80096cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80096d4:	fb09 330a 	mla	r3, r9, sl, r3
 80096d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80096dc:	42bd      	cmp	r5, r7
 80096de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096e2:	d8e5      	bhi.n	80096b0 <__multiply+0xfc>
 80096e4:	9a01      	ldr	r2, [sp, #4]
 80096e6:	50a3      	str	r3, [r4, r2]
 80096e8:	3404      	adds	r4, #4
 80096ea:	e79f      	b.n	800962c <__multiply+0x78>
 80096ec:	3e01      	subs	r6, #1
 80096ee:	e7a1      	b.n	8009634 <__multiply+0x80>
 80096f0:	0800a2c0 	.word	0x0800a2c0
 80096f4:	0800a2d1 	.word	0x0800a2d1

080096f8 <__pow5mult>:
 80096f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096fc:	4615      	mov	r5, r2
 80096fe:	f012 0203 	ands.w	r2, r2, #3
 8009702:	4607      	mov	r7, r0
 8009704:	460e      	mov	r6, r1
 8009706:	d007      	beq.n	8009718 <__pow5mult+0x20>
 8009708:	4c25      	ldr	r4, [pc, #148]	@ (80097a0 <__pow5mult+0xa8>)
 800970a:	3a01      	subs	r2, #1
 800970c:	2300      	movs	r3, #0
 800970e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009712:	f7ff fea7 	bl	8009464 <__multadd>
 8009716:	4606      	mov	r6, r0
 8009718:	10ad      	asrs	r5, r5, #2
 800971a:	d03d      	beq.n	8009798 <__pow5mult+0xa0>
 800971c:	69fc      	ldr	r4, [r7, #28]
 800971e:	b97c      	cbnz	r4, 8009740 <__pow5mult+0x48>
 8009720:	2010      	movs	r0, #16
 8009722:	f7ff fd87 	bl	8009234 <malloc>
 8009726:	4602      	mov	r2, r0
 8009728:	61f8      	str	r0, [r7, #28]
 800972a:	b928      	cbnz	r0, 8009738 <__pow5mult+0x40>
 800972c:	4b1d      	ldr	r3, [pc, #116]	@ (80097a4 <__pow5mult+0xac>)
 800972e:	481e      	ldr	r0, [pc, #120]	@ (80097a8 <__pow5mult+0xb0>)
 8009730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009734:	f000 fc30 	bl	8009f98 <__assert_func>
 8009738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800973c:	6004      	str	r4, [r0, #0]
 800973e:	60c4      	str	r4, [r0, #12]
 8009740:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009748:	b94c      	cbnz	r4, 800975e <__pow5mult+0x66>
 800974a:	f240 2171 	movw	r1, #625	@ 0x271
 800974e:	4638      	mov	r0, r7
 8009750:	f7ff ff1a 	bl	8009588 <__i2b>
 8009754:	2300      	movs	r3, #0
 8009756:	f8c8 0008 	str.w	r0, [r8, #8]
 800975a:	4604      	mov	r4, r0
 800975c:	6003      	str	r3, [r0, #0]
 800975e:	f04f 0900 	mov.w	r9, #0
 8009762:	07eb      	lsls	r3, r5, #31
 8009764:	d50a      	bpl.n	800977c <__pow5mult+0x84>
 8009766:	4631      	mov	r1, r6
 8009768:	4622      	mov	r2, r4
 800976a:	4638      	mov	r0, r7
 800976c:	f7ff ff22 	bl	80095b4 <__multiply>
 8009770:	4631      	mov	r1, r6
 8009772:	4680      	mov	r8, r0
 8009774:	4638      	mov	r0, r7
 8009776:	f7ff fe53 	bl	8009420 <_Bfree>
 800977a:	4646      	mov	r6, r8
 800977c:	106d      	asrs	r5, r5, #1
 800977e:	d00b      	beq.n	8009798 <__pow5mult+0xa0>
 8009780:	6820      	ldr	r0, [r4, #0]
 8009782:	b938      	cbnz	r0, 8009794 <__pow5mult+0x9c>
 8009784:	4622      	mov	r2, r4
 8009786:	4621      	mov	r1, r4
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ff13 	bl	80095b4 <__multiply>
 800978e:	6020      	str	r0, [r4, #0]
 8009790:	f8c0 9000 	str.w	r9, [r0]
 8009794:	4604      	mov	r4, r0
 8009796:	e7e4      	b.n	8009762 <__pow5mult+0x6a>
 8009798:	4630      	mov	r0, r6
 800979a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800979e:	bf00      	nop
 80097a0:	0800a384 	.word	0x0800a384
 80097a4:	0800a251 	.word	0x0800a251
 80097a8:	0800a2d1 	.word	0x0800a2d1

080097ac <__lshift>:
 80097ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b0:	460c      	mov	r4, r1
 80097b2:	6849      	ldr	r1, [r1, #4]
 80097b4:	6923      	ldr	r3, [r4, #16]
 80097b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	4607      	mov	r7, r0
 80097be:	4691      	mov	r9, r2
 80097c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097c4:	f108 0601 	add.w	r6, r8, #1
 80097c8:	42b3      	cmp	r3, r6
 80097ca:	db0b      	blt.n	80097e4 <__lshift+0x38>
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff fde7 	bl	80093a0 <_Balloc>
 80097d2:	4605      	mov	r5, r0
 80097d4:	b948      	cbnz	r0, 80097ea <__lshift+0x3e>
 80097d6:	4602      	mov	r2, r0
 80097d8:	4b28      	ldr	r3, [pc, #160]	@ (800987c <__lshift+0xd0>)
 80097da:	4829      	ldr	r0, [pc, #164]	@ (8009880 <__lshift+0xd4>)
 80097dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097e0:	f000 fbda 	bl	8009f98 <__assert_func>
 80097e4:	3101      	adds	r1, #1
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	e7ee      	b.n	80097c8 <__lshift+0x1c>
 80097ea:	2300      	movs	r3, #0
 80097ec:	f100 0114 	add.w	r1, r0, #20
 80097f0:	f100 0210 	add.w	r2, r0, #16
 80097f4:	4618      	mov	r0, r3
 80097f6:	4553      	cmp	r3, sl
 80097f8:	db33      	blt.n	8009862 <__lshift+0xb6>
 80097fa:	6920      	ldr	r0, [r4, #16]
 80097fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009800:	f104 0314 	add.w	r3, r4, #20
 8009804:	f019 091f 	ands.w	r9, r9, #31
 8009808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800980c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009810:	d02b      	beq.n	800986a <__lshift+0xbe>
 8009812:	f1c9 0e20 	rsb	lr, r9, #32
 8009816:	468a      	mov	sl, r1
 8009818:	2200      	movs	r2, #0
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	fa00 f009 	lsl.w	r0, r0, r9
 8009820:	4310      	orrs	r0, r2
 8009822:	f84a 0b04 	str.w	r0, [sl], #4
 8009826:	f853 2b04 	ldr.w	r2, [r3], #4
 800982a:	459c      	cmp	ip, r3
 800982c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009830:	d8f3      	bhi.n	800981a <__lshift+0x6e>
 8009832:	ebac 0304 	sub.w	r3, ip, r4
 8009836:	3b15      	subs	r3, #21
 8009838:	f023 0303 	bic.w	r3, r3, #3
 800983c:	3304      	adds	r3, #4
 800983e:	f104 0015 	add.w	r0, r4, #21
 8009842:	4560      	cmp	r0, ip
 8009844:	bf88      	it	hi
 8009846:	2304      	movhi	r3, #4
 8009848:	50ca      	str	r2, [r1, r3]
 800984a:	b10a      	cbz	r2, 8009850 <__lshift+0xa4>
 800984c:	f108 0602 	add.w	r6, r8, #2
 8009850:	3e01      	subs	r6, #1
 8009852:	4638      	mov	r0, r7
 8009854:	612e      	str	r6, [r5, #16]
 8009856:	4621      	mov	r1, r4
 8009858:	f7ff fde2 	bl	8009420 <_Bfree>
 800985c:	4628      	mov	r0, r5
 800985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009862:	f842 0f04 	str.w	r0, [r2, #4]!
 8009866:	3301      	adds	r3, #1
 8009868:	e7c5      	b.n	80097f6 <__lshift+0x4a>
 800986a:	3904      	subs	r1, #4
 800986c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009870:	f841 2f04 	str.w	r2, [r1, #4]!
 8009874:	459c      	cmp	ip, r3
 8009876:	d8f9      	bhi.n	800986c <__lshift+0xc0>
 8009878:	e7ea      	b.n	8009850 <__lshift+0xa4>
 800987a:	bf00      	nop
 800987c:	0800a2c0 	.word	0x0800a2c0
 8009880:	0800a2d1 	.word	0x0800a2d1

08009884 <__mcmp>:
 8009884:	690a      	ldr	r2, [r1, #16]
 8009886:	4603      	mov	r3, r0
 8009888:	6900      	ldr	r0, [r0, #16]
 800988a:	1a80      	subs	r0, r0, r2
 800988c:	b530      	push	{r4, r5, lr}
 800988e:	d10e      	bne.n	80098ae <__mcmp+0x2a>
 8009890:	3314      	adds	r3, #20
 8009892:	3114      	adds	r1, #20
 8009894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800989c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098a4:	4295      	cmp	r5, r2
 80098a6:	d003      	beq.n	80098b0 <__mcmp+0x2c>
 80098a8:	d205      	bcs.n	80098b6 <__mcmp+0x32>
 80098aa:	f04f 30ff 	mov.w	r0, #4294967295
 80098ae:	bd30      	pop	{r4, r5, pc}
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d3f3      	bcc.n	800989c <__mcmp+0x18>
 80098b4:	e7fb      	b.n	80098ae <__mcmp+0x2a>
 80098b6:	2001      	movs	r0, #1
 80098b8:	e7f9      	b.n	80098ae <__mcmp+0x2a>
	...

080098bc <__mdiff>:
 80098bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	4689      	mov	r9, r1
 80098c2:	4606      	mov	r6, r0
 80098c4:	4611      	mov	r1, r2
 80098c6:	4648      	mov	r0, r9
 80098c8:	4614      	mov	r4, r2
 80098ca:	f7ff ffdb 	bl	8009884 <__mcmp>
 80098ce:	1e05      	subs	r5, r0, #0
 80098d0:	d112      	bne.n	80098f8 <__mdiff+0x3c>
 80098d2:	4629      	mov	r1, r5
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff fd63 	bl	80093a0 <_Balloc>
 80098da:	4602      	mov	r2, r0
 80098dc:	b928      	cbnz	r0, 80098ea <__mdiff+0x2e>
 80098de:	4b3f      	ldr	r3, [pc, #252]	@ (80099dc <__mdiff+0x120>)
 80098e0:	f240 2137 	movw	r1, #567	@ 0x237
 80098e4:	483e      	ldr	r0, [pc, #248]	@ (80099e0 <__mdiff+0x124>)
 80098e6:	f000 fb57 	bl	8009f98 <__assert_func>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098f0:	4610      	mov	r0, r2
 80098f2:	b003      	add	sp, #12
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	bfbc      	itt	lt
 80098fa:	464b      	movlt	r3, r9
 80098fc:	46a1      	movlt	r9, r4
 80098fe:	4630      	mov	r0, r6
 8009900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009904:	bfba      	itte	lt
 8009906:	461c      	movlt	r4, r3
 8009908:	2501      	movlt	r5, #1
 800990a:	2500      	movge	r5, #0
 800990c:	f7ff fd48 	bl	80093a0 <_Balloc>
 8009910:	4602      	mov	r2, r0
 8009912:	b918      	cbnz	r0, 800991c <__mdiff+0x60>
 8009914:	4b31      	ldr	r3, [pc, #196]	@ (80099dc <__mdiff+0x120>)
 8009916:	f240 2145 	movw	r1, #581	@ 0x245
 800991a:	e7e3      	b.n	80098e4 <__mdiff+0x28>
 800991c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009920:	6926      	ldr	r6, [r4, #16]
 8009922:	60c5      	str	r5, [r0, #12]
 8009924:	f109 0310 	add.w	r3, r9, #16
 8009928:	f109 0514 	add.w	r5, r9, #20
 800992c:	f104 0e14 	add.w	lr, r4, #20
 8009930:	f100 0b14 	add.w	fp, r0, #20
 8009934:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009938:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	46d9      	mov	r9, fp
 8009940:	f04f 0c00 	mov.w	ip, #0
 8009944:	9b01      	ldr	r3, [sp, #4]
 8009946:	f85e 0b04 	ldr.w	r0, [lr], #4
 800994a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	fa1f f38a 	uxth.w	r3, sl
 8009954:	4619      	mov	r1, r3
 8009956:	b283      	uxth	r3, r0
 8009958:	1acb      	subs	r3, r1, r3
 800995a:	0c00      	lsrs	r0, r0, #16
 800995c:	4463      	add	r3, ip
 800995e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009962:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009966:	b29b      	uxth	r3, r3
 8009968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800996c:	4576      	cmp	r6, lr
 800996e:	f849 3b04 	str.w	r3, [r9], #4
 8009972:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009976:	d8e5      	bhi.n	8009944 <__mdiff+0x88>
 8009978:	1b33      	subs	r3, r6, r4
 800997a:	3b15      	subs	r3, #21
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	3415      	adds	r4, #21
 8009982:	3304      	adds	r3, #4
 8009984:	42a6      	cmp	r6, r4
 8009986:	bf38      	it	cc
 8009988:	2304      	movcc	r3, #4
 800998a:	441d      	add	r5, r3
 800998c:	445b      	add	r3, fp
 800998e:	461e      	mov	r6, r3
 8009990:	462c      	mov	r4, r5
 8009992:	4544      	cmp	r4, r8
 8009994:	d30e      	bcc.n	80099b4 <__mdiff+0xf8>
 8009996:	f108 0103 	add.w	r1, r8, #3
 800999a:	1b49      	subs	r1, r1, r5
 800999c:	f021 0103 	bic.w	r1, r1, #3
 80099a0:	3d03      	subs	r5, #3
 80099a2:	45a8      	cmp	r8, r5
 80099a4:	bf38      	it	cc
 80099a6:	2100      	movcc	r1, #0
 80099a8:	440b      	add	r3, r1
 80099aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099ae:	b191      	cbz	r1, 80099d6 <__mdiff+0x11a>
 80099b0:	6117      	str	r7, [r2, #16]
 80099b2:	e79d      	b.n	80098f0 <__mdiff+0x34>
 80099b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80099b8:	46e6      	mov	lr, ip
 80099ba:	0c08      	lsrs	r0, r1, #16
 80099bc:	fa1c fc81 	uxtah	ip, ip, r1
 80099c0:	4471      	add	r1, lr
 80099c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099c6:	b289      	uxth	r1, r1
 80099c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099cc:	f846 1b04 	str.w	r1, [r6], #4
 80099d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099d4:	e7dd      	b.n	8009992 <__mdiff+0xd6>
 80099d6:	3f01      	subs	r7, #1
 80099d8:	e7e7      	b.n	80099aa <__mdiff+0xee>
 80099da:	bf00      	nop
 80099dc:	0800a2c0 	.word	0x0800a2c0
 80099e0:	0800a2d1 	.word	0x0800a2d1

080099e4 <__d2b>:
 80099e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	460f      	mov	r7, r1
 80099ea:	2101      	movs	r1, #1
 80099ec:	ec59 8b10 	vmov	r8, r9, d0
 80099f0:	4616      	mov	r6, r2
 80099f2:	f7ff fcd5 	bl	80093a0 <_Balloc>
 80099f6:	4604      	mov	r4, r0
 80099f8:	b930      	cbnz	r0, 8009a08 <__d2b+0x24>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b23      	ldr	r3, [pc, #140]	@ (8009a8c <__d2b+0xa8>)
 80099fe:	4824      	ldr	r0, [pc, #144]	@ (8009a90 <__d2b+0xac>)
 8009a00:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a04:	f000 fac8 	bl	8009f98 <__assert_func>
 8009a08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a10:	b10d      	cbz	r5, 8009a16 <__d2b+0x32>
 8009a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	f1b8 0300 	subs.w	r3, r8, #0
 8009a1c:	d023      	beq.n	8009a66 <__d2b+0x82>
 8009a1e:	4668      	mov	r0, sp
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	f7ff fd84 	bl	800952e <__lo0bits>
 8009a26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a2a:	b1d0      	cbz	r0, 8009a62 <__d2b+0x7e>
 8009a2c:	f1c0 0320 	rsb	r3, r0, #32
 8009a30:	fa02 f303 	lsl.w	r3, r2, r3
 8009a34:	430b      	orrs	r3, r1
 8009a36:	40c2      	lsrs	r2, r0
 8009a38:	6163      	str	r3, [r4, #20]
 8009a3a:	9201      	str	r2, [sp, #4]
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	61a3      	str	r3, [r4, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	bf0c      	ite	eq
 8009a44:	2201      	moveq	r2, #1
 8009a46:	2202      	movne	r2, #2
 8009a48:	6122      	str	r2, [r4, #16]
 8009a4a:	b1a5      	cbz	r5, 8009a76 <__d2b+0x92>
 8009a4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a50:	4405      	add	r5, r0
 8009a52:	603d      	str	r5, [r7, #0]
 8009a54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a58:	6030      	str	r0, [r6, #0]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	b003      	add	sp, #12
 8009a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a62:	6161      	str	r1, [r4, #20]
 8009a64:	e7ea      	b.n	8009a3c <__d2b+0x58>
 8009a66:	a801      	add	r0, sp, #4
 8009a68:	f7ff fd61 	bl	800952e <__lo0bits>
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	6163      	str	r3, [r4, #20]
 8009a70:	3020      	adds	r0, #32
 8009a72:	2201      	movs	r2, #1
 8009a74:	e7e8      	b.n	8009a48 <__d2b+0x64>
 8009a76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a7e:	6038      	str	r0, [r7, #0]
 8009a80:	6918      	ldr	r0, [r3, #16]
 8009a82:	f7ff fd35 	bl	80094f0 <__hi0bits>
 8009a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a8a:	e7e5      	b.n	8009a58 <__d2b+0x74>
 8009a8c:	0800a2c0 	.word	0x0800a2c0
 8009a90:	0800a2d1 	.word	0x0800a2d1

08009a94 <__sfputc_r>:
 8009a94:	6893      	ldr	r3, [r2, #8]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	b410      	push	{r4}
 8009a9c:	6093      	str	r3, [r2, #8]
 8009a9e:	da08      	bge.n	8009ab2 <__sfputc_r+0x1e>
 8009aa0:	6994      	ldr	r4, [r2, #24]
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	db01      	blt.n	8009aaa <__sfputc_r+0x16>
 8009aa6:	290a      	cmp	r1, #10
 8009aa8:	d103      	bne.n	8009ab2 <__sfputc_r+0x1e>
 8009aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aae:	f7fe bb9e 	b.w	80081ee <__swbuf_r>
 8009ab2:	6813      	ldr	r3, [r2, #0]
 8009ab4:	1c58      	adds	r0, r3, #1
 8009ab6:	6010      	str	r0, [r2, #0]
 8009ab8:	7019      	strb	r1, [r3, #0]
 8009aba:	4608      	mov	r0, r1
 8009abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <__sfputs_r>:
 8009ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	460f      	mov	r7, r1
 8009ac8:	4614      	mov	r4, r2
 8009aca:	18d5      	adds	r5, r2, r3
 8009acc:	42ac      	cmp	r4, r5
 8009ace:	d101      	bne.n	8009ad4 <__sfputs_r+0x12>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e007      	b.n	8009ae4 <__sfputs_r+0x22>
 8009ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad8:	463a      	mov	r2, r7
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7ff ffda 	bl	8009a94 <__sfputc_r>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d1f3      	bne.n	8009acc <__sfputs_r+0xa>
 8009ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ae8 <_vfiprintf_r>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	460d      	mov	r5, r1
 8009aee:	b09d      	sub	sp, #116	@ 0x74
 8009af0:	4614      	mov	r4, r2
 8009af2:	4698      	mov	r8, r3
 8009af4:	4606      	mov	r6, r0
 8009af6:	b118      	cbz	r0, 8009b00 <_vfiprintf_r+0x18>
 8009af8:	6a03      	ldr	r3, [r0, #32]
 8009afa:	b90b      	cbnz	r3, 8009b00 <_vfiprintf_r+0x18>
 8009afc:	f7fe fa8e 	bl	800801c <__sinit>
 8009b00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b0e:	f7fe fcde 	bl	80084ce <__retarget_lock_acquire_recursive>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	071b      	lsls	r3, r3, #28
 8009b16:	d501      	bpl.n	8009b1c <_vfiprintf_r+0x34>
 8009b18:	692b      	ldr	r3, [r5, #16]
 8009b1a:	b99b      	cbnz	r3, 8009b44 <_vfiprintf_r+0x5c>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f7fe fba4 	bl	800826c <__swsetup_r>
 8009b24:	b170      	cbz	r0, 8009b44 <_vfiprintf_r+0x5c>
 8009b26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b28:	07dc      	lsls	r4, r3, #31
 8009b2a:	d504      	bpl.n	8009b36 <_vfiprintf_r+0x4e>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	b01d      	add	sp, #116	@ 0x74
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	0598      	lsls	r0, r3, #22
 8009b3a:	d4f7      	bmi.n	8009b2c <_vfiprintf_r+0x44>
 8009b3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b3e:	f7fe fcc7 	bl	80084d0 <__retarget_lock_release_recursive>
 8009b42:	e7f3      	b.n	8009b2c <_vfiprintf_r+0x44>
 8009b44:	2300      	movs	r3, #0
 8009b46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b52:	2330      	movs	r3, #48	@ 0x30
 8009b54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d04 <_vfiprintf_r+0x21c>
 8009b58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b5c:	f04f 0901 	mov.w	r9, #1
 8009b60:	4623      	mov	r3, r4
 8009b62:	469a      	mov	sl, r3
 8009b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b68:	b10a      	cbz	r2, 8009b6e <_vfiprintf_r+0x86>
 8009b6a:	2a25      	cmp	r2, #37	@ 0x25
 8009b6c:	d1f9      	bne.n	8009b62 <_vfiprintf_r+0x7a>
 8009b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b72:	d00b      	beq.n	8009b8c <_vfiprintf_r+0xa4>
 8009b74:	465b      	mov	r3, fp
 8009b76:	4622      	mov	r2, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ffa1 	bl	8009ac2 <__sfputs_r>
 8009b80:	3001      	adds	r0, #1
 8009b82:	f000 80a7 	beq.w	8009cd4 <_vfiprintf_r+0x1ec>
 8009b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b88:	445a      	add	r2, fp
 8009b8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 809f 	beq.w	8009cd4 <_vfiprintf_r+0x1ec>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bac:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bae:	4654      	mov	r4, sl
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb6:	4853      	ldr	r0, [pc, #332]	@ (8009d04 <_vfiprintf_r+0x21c>)
 8009bb8:	f7f6 fb2a 	bl	8000210 <memchr>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	b9d8      	cbnz	r0, 8009bf8 <_vfiprintf_r+0x110>
 8009bc0:	06d1      	lsls	r1, r2, #27
 8009bc2:	bf44      	itt	mi
 8009bc4:	2320      	movmi	r3, #32
 8009bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bca:	0713      	lsls	r3, r2, #28
 8009bcc:	bf44      	itt	mi
 8009bce:	232b      	movmi	r3, #43	@ 0x2b
 8009bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bda:	d015      	beq.n	8009c08 <_vfiprintf_r+0x120>
 8009bdc:	9a07      	ldr	r2, [sp, #28]
 8009bde:	4654      	mov	r4, sl
 8009be0:	2000      	movs	r0, #0
 8009be2:	f04f 0c0a 	mov.w	ip, #10
 8009be6:	4621      	mov	r1, r4
 8009be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bec:	3b30      	subs	r3, #48	@ 0x30
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d94b      	bls.n	8009c8a <_vfiprintf_r+0x1a2>
 8009bf2:	b1b0      	cbz	r0, 8009c22 <_vfiprintf_r+0x13a>
 8009bf4:	9207      	str	r2, [sp, #28]
 8009bf6:	e014      	b.n	8009c22 <_vfiprintf_r+0x13a>
 8009bf8:	eba0 0308 	sub.w	r3, r0, r8
 8009bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009c00:	4313      	orrs	r3, r2
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	46a2      	mov	sl, r4
 8009c06:	e7d2      	b.n	8009bae <_vfiprintf_r+0xc6>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	1d19      	adds	r1, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	9103      	str	r1, [sp, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfbb      	ittet	lt
 8009c14:	425b      	neglt	r3, r3
 8009c16:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1a:	9307      	strge	r3, [sp, #28]
 8009c1c:	9307      	strlt	r3, [sp, #28]
 8009c1e:	bfb8      	it	lt
 8009c20:	9204      	strlt	r2, [sp, #16]
 8009c22:	7823      	ldrb	r3, [r4, #0]
 8009c24:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c26:	d10a      	bne.n	8009c3e <_vfiprintf_r+0x156>
 8009c28:	7863      	ldrb	r3, [r4, #1]
 8009c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2c:	d132      	bne.n	8009c94 <_vfiprintf_r+0x1ac>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	1d1a      	adds	r2, r3, #4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	9203      	str	r2, [sp, #12]
 8009c36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c3a:	3402      	adds	r4, #2
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d14 <_vfiprintf_r+0x22c>
 8009c42:	7821      	ldrb	r1, [r4, #0]
 8009c44:	2203      	movs	r2, #3
 8009c46:	4650      	mov	r0, sl
 8009c48:	f7f6 fae2 	bl	8000210 <memchr>
 8009c4c:	b138      	cbz	r0, 8009c5e <_vfiprintf_r+0x176>
 8009c4e:	9b04      	ldr	r3, [sp, #16]
 8009c50:	eba0 000a 	sub.w	r0, r0, sl
 8009c54:	2240      	movs	r2, #64	@ 0x40
 8009c56:	4082      	lsls	r2, r0
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	3401      	adds	r4, #1
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c62:	4829      	ldr	r0, [pc, #164]	@ (8009d08 <_vfiprintf_r+0x220>)
 8009c64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c68:	2206      	movs	r2, #6
 8009c6a:	f7f6 fad1 	bl	8000210 <memchr>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d03f      	beq.n	8009cf2 <_vfiprintf_r+0x20a>
 8009c72:	4b26      	ldr	r3, [pc, #152]	@ (8009d0c <_vfiprintf_r+0x224>)
 8009c74:	bb1b      	cbnz	r3, 8009cbe <_vfiprintf_r+0x1d6>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	3307      	adds	r3, #7
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	3308      	adds	r3, #8
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c84:	443b      	add	r3, r7
 8009c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c88:	e76a      	b.n	8009b60 <_vfiprintf_r+0x78>
 8009c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8e:	460c      	mov	r4, r1
 8009c90:	2001      	movs	r0, #1
 8009c92:	e7a8      	b.n	8009be6 <_vfiprintf_r+0xfe>
 8009c94:	2300      	movs	r3, #0
 8009c96:	3401      	adds	r4, #1
 8009c98:	9305      	str	r3, [sp, #20]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f04f 0c0a 	mov.w	ip, #10
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca6:	3a30      	subs	r2, #48	@ 0x30
 8009ca8:	2a09      	cmp	r2, #9
 8009caa:	d903      	bls.n	8009cb4 <_vfiprintf_r+0x1cc>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0c6      	beq.n	8009c3e <_vfiprintf_r+0x156>
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	e7c4      	b.n	8009c3e <_vfiprintf_r+0x156>
 8009cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb8:	4604      	mov	r4, r0
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7f0      	b.n	8009ca0 <_vfiprintf_r+0x1b8>
 8009cbe:	ab03      	add	r3, sp, #12
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4b12      	ldr	r3, [pc, #72]	@ (8009d10 <_vfiprintf_r+0x228>)
 8009cc6:	a904      	add	r1, sp, #16
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7fd fd65 	bl	8007798 <_printf_float>
 8009cce:	4607      	mov	r7, r0
 8009cd0:	1c78      	adds	r0, r7, #1
 8009cd2:	d1d6      	bne.n	8009c82 <_vfiprintf_r+0x19a>
 8009cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cd6:	07d9      	lsls	r1, r3, #31
 8009cd8:	d405      	bmi.n	8009ce6 <_vfiprintf_r+0x1fe>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	059a      	lsls	r2, r3, #22
 8009cde:	d402      	bmi.n	8009ce6 <_vfiprintf_r+0x1fe>
 8009ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce2:	f7fe fbf5 	bl	80084d0 <__retarget_lock_release_recursive>
 8009ce6:	89ab      	ldrh	r3, [r5, #12]
 8009ce8:	065b      	lsls	r3, r3, #25
 8009cea:	f53f af1f 	bmi.w	8009b2c <_vfiprintf_r+0x44>
 8009cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cf0:	e71e      	b.n	8009b30 <_vfiprintf_r+0x48>
 8009cf2:	ab03      	add	r3, sp, #12
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	462a      	mov	r2, r5
 8009cf8:	4b05      	ldr	r3, [pc, #20]	@ (8009d10 <_vfiprintf_r+0x228>)
 8009cfa:	a904      	add	r1, sp, #16
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7fd ffe3 	bl	8007cc8 <_printf_i>
 8009d02:	e7e4      	b.n	8009cce <_vfiprintf_r+0x1e6>
 8009d04:	0800a32a 	.word	0x0800a32a
 8009d08:	0800a334 	.word	0x0800a334
 8009d0c:	08007799 	.word	0x08007799
 8009d10:	08009ac3 	.word	0x08009ac3
 8009d14:	0800a330 	.word	0x0800a330

08009d18 <__sflush_r>:
 8009d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d20:	0716      	lsls	r6, r2, #28
 8009d22:	4605      	mov	r5, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	d454      	bmi.n	8009dd2 <__sflush_r+0xba>
 8009d28:	684b      	ldr	r3, [r1, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc02      	bgt.n	8009d34 <__sflush_r+0x1c>
 8009d2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dd48      	ble.n	8009dc6 <__sflush_r+0xae>
 8009d34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	d045      	beq.n	8009dc6 <__sflush_r+0xae>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d40:	682f      	ldr	r7, [r5, #0]
 8009d42:	6a21      	ldr	r1, [r4, #32]
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	d030      	beq.n	8009daa <__sflush_r+0x92>
 8009d48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	0759      	lsls	r1, r3, #29
 8009d4e:	d505      	bpl.n	8009d5c <__sflush_r+0x44>
 8009d50:	6863      	ldr	r3, [r4, #4]
 8009d52:	1ad2      	subs	r2, r2, r3
 8009d54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d56:	b10b      	cbz	r3, 8009d5c <__sflush_r+0x44>
 8009d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b0      	blx	r6
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	d106      	bne.n	8009d7a <__sflush_r+0x62>
 8009d6c:	6829      	ldr	r1, [r5, #0]
 8009d6e:	291d      	cmp	r1, #29
 8009d70:	d82b      	bhi.n	8009dca <__sflush_r+0xb2>
 8009d72:	4a2a      	ldr	r2, [pc, #168]	@ (8009e1c <__sflush_r+0x104>)
 8009d74:	40ca      	lsrs	r2, r1
 8009d76:	07d6      	lsls	r6, r2, #31
 8009d78:	d527      	bpl.n	8009dca <__sflush_r+0xb2>
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	6062      	str	r2, [r4, #4]
 8009d7e:	04d9      	lsls	r1, r3, #19
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	6022      	str	r2, [r4, #0]
 8009d84:	d504      	bpl.n	8009d90 <__sflush_r+0x78>
 8009d86:	1c42      	adds	r2, r0, #1
 8009d88:	d101      	bne.n	8009d8e <__sflush_r+0x76>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	b903      	cbnz	r3, 8009d90 <__sflush_r+0x78>
 8009d8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d92:	602f      	str	r7, [r5, #0]
 8009d94:	b1b9      	cbz	r1, 8009dc6 <__sflush_r+0xae>
 8009d96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d9a:	4299      	cmp	r1, r3
 8009d9c:	d002      	beq.n	8009da4 <__sflush_r+0x8c>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f7ff f9fe 	bl	80091a0 <_free_r>
 8009da4:	2300      	movs	r3, #0
 8009da6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009da8:	e00d      	b.n	8009dc6 <__sflush_r+0xae>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b0      	blx	r6
 8009db0:	4602      	mov	r2, r0
 8009db2:	1c50      	adds	r0, r2, #1
 8009db4:	d1c9      	bne.n	8009d4a <__sflush_r+0x32>
 8009db6:	682b      	ldr	r3, [r5, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0c6      	beq.n	8009d4a <__sflush_r+0x32>
 8009dbc:	2b1d      	cmp	r3, #29
 8009dbe:	d001      	beq.n	8009dc4 <__sflush_r+0xac>
 8009dc0:	2b16      	cmp	r3, #22
 8009dc2:	d11e      	bne.n	8009e02 <__sflush_r+0xea>
 8009dc4:	602f      	str	r7, [r5, #0]
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e022      	b.n	8009e10 <__sflush_r+0xf8>
 8009dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dce:	b21b      	sxth	r3, r3
 8009dd0:	e01b      	b.n	8009e0a <__sflush_r+0xf2>
 8009dd2:	690f      	ldr	r7, [r1, #16]
 8009dd4:	2f00      	cmp	r7, #0
 8009dd6:	d0f6      	beq.n	8009dc6 <__sflush_r+0xae>
 8009dd8:	0793      	lsls	r3, r2, #30
 8009dda:	680e      	ldr	r6, [r1, #0]
 8009ddc:	bf08      	it	eq
 8009dde:	694b      	ldreq	r3, [r1, #20]
 8009de0:	600f      	str	r7, [r1, #0]
 8009de2:	bf18      	it	ne
 8009de4:	2300      	movne	r3, #0
 8009de6:	eba6 0807 	sub.w	r8, r6, r7
 8009dea:	608b      	str	r3, [r1, #8]
 8009dec:	f1b8 0f00 	cmp.w	r8, #0
 8009df0:	dde9      	ble.n	8009dc6 <__sflush_r+0xae>
 8009df2:	6a21      	ldr	r1, [r4, #32]
 8009df4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009df6:	4643      	mov	r3, r8
 8009df8:	463a      	mov	r2, r7
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b0      	blx	r6
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	dc08      	bgt.n	8009e14 <__sflush_r+0xfc>
 8009e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	4407      	add	r7, r0
 8009e16:	eba8 0800 	sub.w	r8, r8, r0
 8009e1a:	e7e7      	b.n	8009dec <__sflush_r+0xd4>
 8009e1c:	20400001 	.word	0x20400001

08009e20 <_fflush_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	4605      	mov	r5, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	b913      	cbnz	r3, 8009e30 <_fflush_r+0x10>
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	b118      	cbz	r0, 8009e3a <_fflush_r+0x1a>
 8009e32:	6a03      	ldr	r3, [r0, #32]
 8009e34:	b90b      	cbnz	r3, 8009e3a <_fflush_r+0x1a>
 8009e36:	f7fe f8f1 	bl	800801c <__sinit>
 8009e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0f3      	beq.n	8009e2a <_fflush_r+0xa>
 8009e42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e44:	07d0      	lsls	r0, r2, #31
 8009e46:	d404      	bmi.n	8009e52 <_fflush_r+0x32>
 8009e48:	0599      	lsls	r1, r3, #22
 8009e4a:	d402      	bmi.n	8009e52 <_fflush_r+0x32>
 8009e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e4e:	f7fe fb3e 	bl	80084ce <__retarget_lock_acquire_recursive>
 8009e52:	4628      	mov	r0, r5
 8009e54:	4621      	mov	r1, r4
 8009e56:	f7ff ff5f 	bl	8009d18 <__sflush_r>
 8009e5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e5c:	07da      	lsls	r2, r3, #31
 8009e5e:	4605      	mov	r5, r0
 8009e60:	d4e4      	bmi.n	8009e2c <_fflush_r+0xc>
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	059b      	lsls	r3, r3, #22
 8009e66:	d4e1      	bmi.n	8009e2c <_fflush_r+0xc>
 8009e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e6a:	f7fe fb31 	bl	80084d0 <__retarget_lock_release_recursive>
 8009e6e:	e7dd      	b.n	8009e2c <_fflush_r+0xc>

08009e70 <__swhatbuf_r>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	460c      	mov	r4, r1
 8009e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	b096      	sub	sp, #88	@ 0x58
 8009e7c:	4615      	mov	r5, r2
 8009e7e:	461e      	mov	r6, r3
 8009e80:	da0d      	bge.n	8009e9e <__swhatbuf_r+0x2e>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e88:	f04f 0100 	mov.w	r1, #0
 8009e8c:	bf14      	ite	ne
 8009e8e:	2340      	movne	r3, #64	@ 0x40
 8009e90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e94:	2000      	movs	r0, #0
 8009e96:	6031      	str	r1, [r6, #0]
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	b016      	add	sp, #88	@ 0x58
 8009e9c:	bd70      	pop	{r4, r5, r6, pc}
 8009e9e:	466a      	mov	r2, sp
 8009ea0:	f000 f848 	bl	8009f34 <_fstat_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	dbec      	blt.n	8009e82 <__swhatbuf_r+0x12>
 8009ea8:	9901      	ldr	r1, [sp, #4]
 8009eaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009eae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009eb2:	4259      	negs	r1, r3
 8009eb4:	4159      	adcs	r1, r3
 8009eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eba:	e7eb      	b.n	8009e94 <__swhatbuf_r+0x24>

08009ebc <__smakebuf_r>:
 8009ebc:	898b      	ldrh	r3, [r1, #12]
 8009ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ec0:	079d      	lsls	r5, r3, #30
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	d507      	bpl.n	8009ed8 <__smakebuf_r+0x1c>
 8009ec8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	6123      	str	r3, [r4, #16]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	6163      	str	r3, [r4, #20]
 8009ed4:	b003      	add	sp, #12
 8009ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed8:	ab01      	add	r3, sp, #4
 8009eda:	466a      	mov	r2, sp
 8009edc:	f7ff ffc8 	bl	8009e70 <__swhatbuf_r>
 8009ee0:	9f00      	ldr	r7, [sp, #0]
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff f9ce 	bl	8009288 <_malloc_r>
 8009eec:	b948      	cbnz	r0, 8009f02 <__smakebuf_r+0x46>
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	059a      	lsls	r2, r3, #22
 8009ef4:	d4ee      	bmi.n	8009ed4 <__smakebuf_r+0x18>
 8009ef6:	f023 0303 	bic.w	r3, r3, #3
 8009efa:	f043 0302 	orr.w	r3, r3, #2
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	e7e2      	b.n	8009ec8 <__smakebuf_r+0xc>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	6020      	str	r0, [r4, #0]
 8009f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f12:	b15b      	cbz	r3, 8009f2c <__smakebuf_r+0x70>
 8009f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f000 f81d 	bl	8009f58 <_isatty_r>
 8009f1e:	b128      	cbz	r0, 8009f2c <__smakebuf_r+0x70>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	f043 0301 	orr.w	r3, r3, #1
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	431d      	orrs	r5, r3
 8009f30:	81a5      	strh	r5, [r4, #12]
 8009f32:	e7cf      	b.n	8009ed4 <__smakebuf_r+0x18>

08009f34 <_fstat_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	@ (8009f54 <_fstat_r+0x20>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f7f7 fd4f 	bl	80019e4 <_fstat>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_fstat_r+0x1c>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_fstat_r+0x1c>
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20004e50 	.word	0x20004e50

08009f58 <_isatty_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	@ (8009f74 <_isatty_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f7 fd4e 	bl	8001a04 <_isatty>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_isatty_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_isatty_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20004e50 	.word	0x20004e50

08009f78 <_sbrk_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	@ (8009f94 <_sbrk_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f7 fd56 	bl	8001a34 <_sbrk>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_sbrk_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_sbrk_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20004e50 	.word	0x20004e50

08009f98 <__assert_func>:
 8009f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f9a:	4614      	mov	r4, r2
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4b09      	ldr	r3, [pc, #36]	@ (8009fc4 <__assert_func+0x2c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	68d8      	ldr	r0, [r3, #12]
 8009fa6:	b14c      	cbz	r4, 8009fbc <__assert_func+0x24>
 8009fa8:	4b07      	ldr	r3, [pc, #28]	@ (8009fc8 <__assert_func+0x30>)
 8009faa:	9100      	str	r1, [sp, #0]
 8009fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fb0:	4906      	ldr	r1, [pc, #24]	@ (8009fcc <__assert_func+0x34>)
 8009fb2:	462b      	mov	r3, r5
 8009fb4:	f000 f842 	bl	800a03c <fiprintf>
 8009fb8:	f000 f852 	bl	800a060 <abort>
 8009fbc:	4b04      	ldr	r3, [pc, #16]	@ (8009fd0 <__assert_func+0x38>)
 8009fbe:	461c      	mov	r4, r3
 8009fc0:	e7f3      	b.n	8009faa <__assert_func+0x12>
 8009fc2:	bf00      	nop
 8009fc4:	2000001c 	.word	0x2000001c
 8009fc8:	0800a345 	.word	0x0800a345
 8009fcc:	0800a352 	.word	0x0800a352
 8009fd0:	0800a380 	.word	0x0800a380

08009fd4 <_calloc_r>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	fba1 5402 	umull	r5, r4, r1, r2
 8009fda:	b934      	cbnz	r4, 8009fea <_calloc_r+0x16>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7ff f953 	bl	8009288 <_malloc_r>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	b928      	cbnz	r0, 8009ff2 <_calloc_r+0x1e>
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	bd70      	pop	{r4, r5, r6, pc}
 8009fea:	220c      	movs	r2, #12
 8009fec:	6002      	str	r2, [r0, #0]
 8009fee:	2600      	movs	r6, #0
 8009ff0:	e7f9      	b.n	8009fe6 <_calloc_r+0x12>
 8009ff2:	462a      	mov	r2, r5
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	f7fe f98f 	bl	8008318 <memset>
 8009ffa:	e7f4      	b.n	8009fe6 <_calloc_r+0x12>

08009ffc <__ascii_mbtowc>:
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	b901      	cbnz	r1, 800a002 <__ascii_mbtowc+0x6>
 800a000:	a901      	add	r1, sp, #4
 800a002:	b142      	cbz	r2, 800a016 <__ascii_mbtowc+0x1a>
 800a004:	b14b      	cbz	r3, 800a01a <__ascii_mbtowc+0x1e>
 800a006:	7813      	ldrb	r3, [r2, #0]
 800a008:	600b      	str	r3, [r1, #0]
 800a00a:	7812      	ldrb	r2, [r2, #0]
 800a00c:	1e10      	subs	r0, r2, #0
 800a00e:	bf18      	it	ne
 800a010:	2001      	movne	r0, #1
 800a012:	b002      	add	sp, #8
 800a014:	4770      	bx	lr
 800a016:	4610      	mov	r0, r2
 800a018:	e7fb      	b.n	800a012 <__ascii_mbtowc+0x16>
 800a01a:	f06f 0001 	mvn.w	r0, #1
 800a01e:	e7f8      	b.n	800a012 <__ascii_mbtowc+0x16>

0800a020 <__ascii_wctomb>:
 800a020:	4603      	mov	r3, r0
 800a022:	4608      	mov	r0, r1
 800a024:	b141      	cbz	r1, 800a038 <__ascii_wctomb+0x18>
 800a026:	2aff      	cmp	r2, #255	@ 0xff
 800a028:	d904      	bls.n	800a034 <__ascii_wctomb+0x14>
 800a02a:	228a      	movs	r2, #138	@ 0x8a
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	f04f 30ff 	mov.w	r0, #4294967295
 800a032:	4770      	bx	lr
 800a034:	700a      	strb	r2, [r1, #0]
 800a036:	2001      	movs	r0, #1
 800a038:	4770      	bx	lr
	...

0800a03c <fiprintf>:
 800a03c:	b40e      	push	{r1, r2, r3}
 800a03e:	b503      	push	{r0, r1, lr}
 800a040:	4601      	mov	r1, r0
 800a042:	ab03      	add	r3, sp, #12
 800a044:	4805      	ldr	r0, [pc, #20]	@ (800a05c <fiprintf+0x20>)
 800a046:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	f7ff fd4b 	bl	8009ae8 <_vfiprintf_r>
 800a052:	b002      	add	sp, #8
 800a054:	f85d eb04 	ldr.w	lr, [sp], #4
 800a058:	b003      	add	sp, #12
 800a05a:	4770      	bx	lr
 800a05c:	2000001c 	.word	0x2000001c

0800a060 <abort>:
 800a060:	b508      	push	{r3, lr}
 800a062:	2006      	movs	r0, #6
 800a064:	f000 f82c 	bl	800a0c0 <raise>
 800a068:	2001      	movs	r0, #1
 800a06a:	f7f7 fc87 	bl	800197c <_exit>

0800a06e <_raise_r>:
 800a06e:	291f      	cmp	r1, #31
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4605      	mov	r5, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d904      	bls.n	800a082 <_raise_r+0x14>
 800a078:	2316      	movs	r3, #22
 800a07a:	6003      	str	r3, [r0, #0]
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a084:	b112      	cbz	r2, 800a08c <_raise_r+0x1e>
 800a086:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a08a:	b94b      	cbnz	r3, 800a0a0 <_raise_r+0x32>
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 f831 	bl	800a0f4 <_getpid_r>
 800a092:	4622      	mov	r2, r4
 800a094:	4601      	mov	r1, r0
 800a096:	4628      	mov	r0, r5
 800a098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a09c:	f000 b818 	b.w	800a0d0 <_kill_r>
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d00a      	beq.n	800a0ba <_raise_r+0x4c>
 800a0a4:	1c59      	adds	r1, r3, #1
 800a0a6:	d103      	bne.n	800a0b0 <_raise_r+0x42>
 800a0a8:	2316      	movs	r3, #22
 800a0aa:	6003      	str	r3, [r0, #0]
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	e7e7      	b.n	800a080 <_raise_r+0x12>
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4798      	blx	r3
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	e7e0      	b.n	800a080 <_raise_r+0x12>
	...

0800a0c0 <raise>:
 800a0c0:	4b02      	ldr	r3, [pc, #8]	@ (800a0cc <raise+0xc>)
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f7ff bfd2 	b.w	800a06e <_raise_r>
 800a0ca:	bf00      	nop
 800a0cc:	2000001c 	.word	0x2000001c

0800a0d0 <_kill_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	@ (800a0f0 <_kill_r+0x20>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	f7f7 fc3d 	bl	800195c <_kill>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	d102      	bne.n	800a0ec <_kill_r+0x1c>
 800a0e6:	682b      	ldr	r3, [r5, #0]
 800a0e8:	b103      	cbz	r3, 800a0ec <_kill_r+0x1c>
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20004e50 	.word	0x20004e50

0800a0f4 <_getpid_r>:
 800a0f4:	f7f7 bc2a 	b.w	800194c <_getpid>

0800a0f8 <_init>:
 800a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fa:	bf00      	nop
 800a0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fe:	bc08      	pop	{r3}
 800a100:	469e      	mov	lr, r3
 800a102:	4770      	bx	lr

0800a104 <_fini>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	bf00      	nop
 800a108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10a:	bc08      	pop	{r3}
 800a10c:	469e      	mov	lr, r3
 800a10e:	4770      	bx	lr
