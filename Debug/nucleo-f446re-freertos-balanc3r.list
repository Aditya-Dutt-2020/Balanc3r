
nucleo-f446re-freertos-balanc3r.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800e878  0800e878  0000f878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f288  0800f288  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f288  0800f288  00010288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f290  0800f290  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f290  0800f290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f294  0800f294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f298  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb4  200001d8  0800f470  000111d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000508c  0800f470  0001208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f261  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ad  00000000  00000000  00030469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00034718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000140f  00000000  00000000  000360c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026837  00000000  00000000  000374cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1cc  00000000  00000000  0005dd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0f04  00000000  00000000  0007ced2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ddd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e58  00000000  00000000  0015de1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00165c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e860 	.word	0x0800e860

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800e860 	.word	0x0800e860

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <ControlDebugTaskStart>:
 *      Author: Aditya
 */
#include "Control.h"


void ControlDebugTaskStart(void *argument) {
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
	if(CONTROL_DEBUG) {
		 osEventFlagsSet(controlDebugFlagHandle, 0x01);
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <ControlDebugTaskStart+0xc4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 fdb4 	bl	8007a90 <osEventFlagsSet>
	}
	osEventFlagsWait(controlDebugFlagHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <ControlDebugTaskStart+0xc4>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
 8000f34:	f006 fdee 	bl	8007b14 <osEventFlagsWait>
	osStatus_t status;
	double receivedAngle;
	int speed;
	vec2 receivedEnc;
	for(;;) {
		status = osMessageQueueGet(gyroQueueHandle, &receivedAngle, NULL, osWaitForever);
 8000f38:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <ControlDebugTaskStart+0xc8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	f107 0120 	add.w	r1, r7, #32
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2200      	movs	r2, #0
 8000f46:	f007 f82b 	bl	8007fa0 <osMessageQueueGet>
 8000f4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		status = osMessageQueueGet(encoderQueueHandle, &receivedEnc, NULL, osWaitForever);
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <ControlDebugTaskStart+0xcc>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	f107 0108 	add.w	r1, r7, #8
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f007 f821 	bl	8007fa0 <osMessageQueueGet>
 8000f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (status == osOK) {
 8000f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d130      	bne.n	8000fc8 <ControlDebugTaskStart+0xb4>
			printf("Angle: %.4f\tEncL: %.2f\tEncR: %.2f\n", receivedAngle, receivedEnc.x, receivedEnc.y);
 8000f66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f76:	e9cd 2300 	strd	r2, r3, [sp]
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	462b      	mov	r3, r5
 8000f7e:	4819      	ldr	r0, [pc, #100]	@ (8000fe4 <ControlDebugTaskStart+0xd0>)
 8000f80:	f00b f8ca 	bl	800c118 <iprintf>
			if (abs(receivedAngle) < 40) {
 8000f84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fe04 	bl	8000b98 <__aeabi_d2iz>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f113 0f27 	cmn.w	r3, #39	@ 0x27
 8000f96:	db0c      	blt.n	8000fb2 <ControlDebugTaskStart+0x9e>
 8000f98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fdfa 	bl	8000b98 <__aeabi_d2iz>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b27      	cmp	r3, #39	@ 0x27
 8000fa8:	dc03      	bgt.n	8000fb2 <ControlDebugTaskStart+0x9e>
				speed = 800;
 8000faa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	e001      	b.n	8000fb6 <ControlDebugTaskStart+0xa2>
			} else {
				speed = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
			}
			osMessageQueuePut(motorSpeedQueueHandle, &speed, 0, 0);
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <ControlDebugTaskStart+0xd4>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f107 011c 	add.w	r1, r7, #28
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f006 ff8d 	bl	8007ee0 <osMessageQueuePut>
 8000fc6:	e003      	b.n	8000fd0 <ControlDebugTaskStart+0xbc>
		} else {
			printf("Reading Queue Error: %d\n", status);
 8000fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000fca:	4808      	ldr	r0, [pc, #32]	@ (8000fec <ControlDebugTaskStart+0xd8>)
 8000fcc:	f00b f8a4 	bl	800c118 <iprintf>
		}
		osDelay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f006 fd03 	bl	80079dc <osDelay>
		status = osMessageQueueGet(gyroQueueHandle, &receivedAngle, NULL, osWaitForever);
 8000fd6:	e7af      	b.n	8000f38 <ControlDebugTaskStart+0x24>
 8000fd8:	200004fc 	.word	0x200004fc
 8000fdc:	200004e0 	.word	0x200004e0
 8000fe0:	200004e8 	.word	0x200004e8
 8000fe4:	0800e878 	.word	0x0800e878
 8000fe8:	200004ec 	.word	0x200004ec
 8000fec:	0800e89c 	.word	0x0800e89c

08000ff0 <StartIMUTask>:
#include "IMU.h"

void StartIMUTask(void *argument) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b096      	sub	sp, #88	@ 0x58
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if(!IMU_DEBUG) {
		osEventFlagsSet(IMUDebugFlagHandle, 0x01);
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80010ec <StartIMUTask+0xfc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 fd46 	bl	8007a90 <osEventFlagsSet>
	}
	osEventFlagsWait(IMUDebugFlagHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8001004:	4b39      	ldr	r3, [pc, #228]	@ (80010ec <StartIMUTask+0xfc>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	f006 fd80 	bl	8007b14 <osEventFlagsWait>
	printf("Running main imu\n");
 8001014:	4836      	ldr	r0, [pc, #216]	@ (80010f0 <StartIMUTask+0x100>)
 8001016:	f00b f8e7 	bl	800c1e8 <puts>
	uint8_t buf[14];
	configIMU(buf);
 800101a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fb22 	bl	8001668 <configIMU>
	double angle = getInitAngle(buf);
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f865 	bl	80010f8 <getInitAngle>
 800102e:	eeb0 7a40 	vmov.f32	s14, s0
 8001032:	eef0 7a60 	vmov.f32	s15, s1
 8001036:	ed87 7b08 	vstr	d7, [r7, #32]

	uint32_t tickFreq = osKernelGetTickFreq();
 800103a:	f006 fc34 	bl	80078a6 <osKernelGetTickFreq>
 800103e:	6538      	str	r0, [r7, #80]	@ 0x50
	uint32_t lastTick = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t currentTick;
	double deltaT;
	osStatus_t status;
	lastTick = osKernelGetTickCount();
 8001044:	f006 fc1a 	bl	800787c <osKernelGetTickCount>
 8001048:	6578      	str	r0, [r7, #84]	@ 0x54

	for (;;) {
		currentTick = osKernelGetTickCount();
 800104a:	f006 fc17 	bl	800787c <osKernelGetTickCount>
 800104e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		deltaT = (double)(currentTick - lastTick) / tickFreq;
 8001050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa74 	bl	8000544 <__aeabi_ui2d>
 800105c:	4604      	mov	r4, r0
 800105e:	460d      	mov	r5, r1
 8001060:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001062:	f7ff fa6f 	bl	8000544 <__aeabi_ui2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4620      	mov	r0, r4
 800106c:	4629      	mov	r1, r5
 800106e:	f7ff fc0d 	bl	800088c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

		vec3 angularVel = getGyroVals(buf);
 800107a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f8ce 	bl	8001220 <getGyroVals>
 8001084:	eeb0 5a40 	vmov.f32	s10, s0
 8001088:	eef0 5a60 	vmov.f32	s11, s1
 800108c:	eeb0 6a41 	vmov.f32	s12, s2
 8001090:	eef0 6a61 	vmov.f32	s13, s3
 8001094:	eeb0 7a42 	vmov.f32	s14, s4
 8001098:	eef0 7a62 	vmov.f32	s15, s5
 800109c:	ed87 5b02 	vstr	d5, [r7, #8]
 80010a0:	ed87 6b04 	vstr	d6, [r7, #16]
 80010a4:	ed87 7b06 	vstr	d7, [r7, #24]
		lastTick = currentTick;
 80010a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010aa:	657b      	str	r3, [r7, #84]	@ 0x54
		angle += angularVel.y * deltaT;
 80010ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80010b4:	f7ff fac0 	bl	8000638 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010c4:	f7ff f902 	bl	80002cc <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		status = osMessageQueuePut(gyroQueueHandle, &angle, 0, 0);
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <StartIMUTask+0x104>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f107 0120 	add.w	r1, r7, #32
 80010d8:	2300      	movs	r3, #0
 80010da:	2200      	movs	r2, #0
 80010dc:	f006 ff00 	bl	8007ee0 <osMessageQueuePut>
 80010e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
//		if (status != osOK) {
//			printf("ERROR IN MESSAGE gyro PUT: %d\n", status);
//		}

		osDelay(5);
 80010e2:	2005      	movs	r0, #5
 80010e4:	f006 fc7a 	bl	80079dc <osDelay>
	for (;;) {
 80010e8:	bf00      	nop
 80010ea:	e7ae      	b.n	800104a <StartIMUTask+0x5a>
 80010ec:	200004f8 	.word	0x200004f8
 80010f0:	0800e8b8 	.word	0x0800e8b8
 80010f4:	200004e0 	.word	0x200004e0

080010f8 <getInitAngle>:
	}
}

double getInitAngle(uint8_t* buf) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	ed2d 8b02 	vpush	{d8}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	vec3 accelVals = getAccelVals(buf);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f96b 	bl	80013e0 <getAccelVals>
 800110a:	eeb0 5a40 	vmov.f32	s10, s0
 800110e:	eef0 5a60 	vmov.f32	s11, s1
 8001112:	eeb0 6a41 	vmov.f32	s12, s2
 8001116:	eef0 6a61 	vmov.f32	s13, s3
 800111a:	eeb0 7a42 	vmov.f32	s14, s4
 800111e:	eef0 7a62 	vmov.f32	s15, s5
 8001122:	ed87 5b02 	vstr	d5, [r7, #8]
 8001126:	ed87 6b04 	vstr	d6, [r7, #16]
 800112a:	ed87 7b06 	vstr	d7, [r7, #24]
	return (atan2(accelVals.x, sqrt(accelVals.y*accelVals.y + accelVals.z*accelVals.z)) * (180.0 / M_PI)) - 90;
 800112e:	ed97 8b02 	vldr	d8, [r7, #8]
 8001132:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113a:	f7ff fa7d 	bl	8000638 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4614      	mov	r4, r2
 8001144:	461d      	mov	r5, r3
 8001146:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800114a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff f8b7 	bl	80002cc <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	ec43 2b17 	vmov	d7, r2, r3
 8001166:	eeb0 0a47 	vmov.f32	s0, s14
 800116a:	eef0 0a67 	vmov.f32	s1, s15
 800116e:	f00d f80d 	bl	800e18c <sqrt>
 8001172:	eeb0 7a40 	vmov.f32	s14, s0
 8001176:	eef0 7a60 	vmov.f32	s15, s1
 800117a:	eeb0 1a47 	vmov.f32	s2, s14
 800117e:	eef0 1a67 	vmov.f32	s3, s15
 8001182:	eeb0 0a48 	vmov.f32	s0, s16
 8001186:	eef0 0a68 	vmov.f32	s1, s17
 800118a:	f00c fffd 	bl	800e188 <atan2>
 800118e:	ec51 0b10 	vmov	r0, r1, d0
 8001192:	a30e      	add	r3, pc, #56	@ (adr r3, 80011cc <getInitAngle+0xd4>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fa4e 	bl	8000638 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <getInitAngle+0xd0>)
 80011aa:	f7ff f88d 	bl	80002c8 <__aeabi_dsub>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ba:	eef0 0a67 	vmov.f32	s1, s15
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	ecbd 8b02 	vpop	{d8}
 80011c6:	bdb0      	pop	{r4, r5, r7, pc}
 80011c8:	40568000 	.word	0x40568000
 80011cc:	1a63c1f8 	.word	0x1a63c1f8
 80011d0:	404ca5dc 	.word	0x404ca5dc

080011d4 <StartIMUDebugTask>:


void StartIMUDebugTask(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if(IMU_DEBUG) {
		osEventFlagsSet(IMUDebugFlagHandle, 0x02);
	}
	osEventFlagsWait(IMUDebugFlagHandle, 0x02, osFlagsWaitAny, osWaitForever);
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <StartIMUDebugTask+0x44>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	f006 fc94 	bl	8007b14 <osEventFlagsWait>
	printf("RUnning Debug imu\n");
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <StartIMUDebugTask+0x48>)
 80011ee:	f00a fffb 	bl	800c1e8 <puts>
	uint8_t buf[14];
	configIMU(buf);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fa36 	bl	8001668 <configIMU>
	if (GCALIBRATE) {
		calibrateGyro(buf);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fae1 	bl	80017c8 <calibrateGyro>
		osDelay(10000);
 8001206:	f242 7010 	movw	r0, #10000	@ 0x2710
 800120a:	f006 fbe7 	bl	80079dc <osDelay>
	for(;;)
	{
//		vec3 vals = getAccelVals(buf);
//		printf("x:%.5f\ty:%.5f\tz:%.5f\n", vals.x, vals.y, vals.z);

		osDelay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f006 fbe4 	bl	80079dc <osDelay>
 8001214:	e7fb      	b.n	800120e <StartIMUDebugTask+0x3a>
 8001216:	bf00      	nop
 8001218:	200004f8 	.word	0x200004f8
 800121c:	0800e8cc 	.word	0x0800e8cc

08001220 <getGyroVals>:
	}
	printf("Error?\n");
	osThreadTerminate(NULL);

}
vec3 getGyroVals(uint8_t* buf) {
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b09a      	sub	sp, #104	@ 0x68
 8001224:	af04      	add	r7, sp, #16
 8001226:	61f8      	str	r0, [r7, #28]
	vec3 vals = {0.0, 0.0, 0.0};
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	HAL_StatusTypeDef ret;
	osMutexAcquire(i2cMutexHandle, osWaitForever);
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <getGyroVals+0x1b0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fd48 	bl	8007cea <osMutexAcquire>
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, buf, 6, 1000);
 800125a:	23d0      	movs	r3, #208	@ 0xd0
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2306      	movs	r3, #6
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2243      	movs	r2, #67	@ 0x43
 8001270:	4858      	ldr	r0, [pc, #352]	@ (80013d4 <getGyroVals+0x1b4>)
 8001272:	f003 f85d 	bl	8004330 <HAL_I2C_Mem_Read>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	osMutexRelease(i2cMutexHandle);
 800127c:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <getGyroVals+0x1b0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fd7d 	bl	8007d80 <osMutexRelease>
	if (ret != HAL_OK) {
 8001286:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <getGyroVals+0x76>
		printf("Error RX\n");
 800128e:	4852      	ldr	r0, [pc, #328]	@ (80013d8 <getGyroVals+0x1b8>)
 8001290:	f00a ffaa 	bl	800c1e8 <puts>
 8001294:	e067      	b.n	8001366 <getGyroVals+0x146>
	} else {

		int rawGyro = (int16_t)((buf[0] << 8) | buf[1]);
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b21b      	sxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3301      	adds	r3, #1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	653b      	str	r3, [r7, #80]	@ 0x50
		vals.x = (rawGyro /  GYRO_LSB_SENS) - GX_CALIB_OFFSET;
 80012ae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012b0:	f7ff f958 	bl	8000564 <__aeabi_i2d>
 80012b4:	a33e      	add	r3, pc, #248	@ (adr r3, 80013b0 <getGyroVals+0x190>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff fae7 	bl	800088c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	a33c      	add	r3, pc, #240	@ (adr r3, 80013b8 <getGyroVals+0x198>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe fffe 	bl	80002cc <__adddf3>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		rawGyro = (int16_t)((buf[2] << 8) | buf[3]);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3302      	adds	r3, #2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	3303      	adds	r3, #3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	653b      	str	r3, [r7, #80]	@ 0x50
		vals.y = -1*((rawGyro /  GYRO_LSB_SENS) - GY_CALIB_OFFSET);
 80012f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012f4:	f7ff f936 	bl	8000564 <__aeabi_i2d>
 80012f8:	a32d      	add	r3, pc, #180	@ (adr r3, 80013b0 <getGyroVals+0x190>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff fac5 	bl	800088c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	a32d      	add	r3, pc, #180	@ (adr r3, 80013c0 <getGyroVals+0x1a0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ffda 	bl	80002c8 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800131e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
		rawGyro = (int16_t)((buf[4] << 8) | buf[5]);
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b21b      	sxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3305      	adds	r3, #5
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	653b      	str	r3, [r7, #80]	@ 0x50
		vals.z = (rawGyro /  GYRO_LSB_SENS) - GZ_CALIB_OFFSET;
 800133c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800133e:	f7ff f911 	bl	8000564 <__aeabi_i2d>
 8001342:	a31b      	add	r3, pc, #108	@ (adr r3, 80013b0 <getGyroVals+0x190>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff faa0 	bl	800088c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	a31c      	add	r3, pc, #112	@ (adr r3, 80013c8 <getGyroVals+0x1a8>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7fe ffb7 	bl	80002cc <__adddf3>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	}

	return vals;
 8001366:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800136a:	f107 0520 	add.w	r5, r7, #32
 800136e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001372:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001376:	e884 0003 	stmia.w	r4, {r0, r1}
 800137a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800137e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001382:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001386:	ec45 4b15 	vmov	d5, r4, r5
 800138a:	ec41 0b16 	vmov	d6, r0, r1
 800138e:	ec43 2b17 	vmov	d7, r2, r3
//			vals.z = (rawGyro /  GYRO_LSB_SENS) - GZ_CALIB_OFFSET;
//		}
//	}
//
//	return vals;
}
 8001392:	eeb0 0a45 	vmov.f32	s0, s10
 8001396:	eef0 0a65 	vmov.f32	s1, s11
 800139a:	eeb0 1a46 	vmov.f32	s2, s12
 800139e:	eef0 1a66 	vmov.f32	s3, s13
 80013a2:	eeb0 2a47 	vmov.f32	s4, s14
 80013a6:	eef0 2a67 	vmov.f32	s5, s15
 80013aa:	3758      	adds	r7, #88	@ 0x58
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bdb0      	pop	{r4, r5, r7, pc}
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40506000 	.word	0x40506000
 80013b8:	367282d4 	.word	0x367282d4
 80013bc:	40133a78 	.word	0x40133a78
 80013c0:	4c2c287d 	.word	0x4c2c287d
 80013c4:	3feb653a 	.word	0x3feb653a
 80013c8:	02d3efd7 	.word	0x02d3efd7
 80013cc:	3faad9c5 	.word	0x3faad9c5
 80013d0:	200004f0 	.word	0x200004f0
 80013d4:	20000278 	.word	0x20000278
 80013d8:	0800e8e0 	.word	0x0800e8e0
 80013dc:	00000000 	.word	0x00000000

080013e0 <getAccelVals>:

vec3 getAccelVals(uint8_t* buf) {
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b09a      	sub	sp, #104	@ 0x68
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	61f8      	str	r0, [r7, #28]
	vec3 vals = {0.0, 0.0, 0.0};
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	HAL_StatusTypeDef ret;
	osMutexAcquire(i2cMutexHandle, osWaitForever);
 800140c:	4b92      	ldr	r3, [pc, #584]	@ (8001658 <getAccelVals+0x278>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	4618      	mov	r0, r3
 8001416:	f006 fc68 	bl	8007cea <osMutexAcquire>
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, buf, 6, 1000);
 800141a:	23d0      	movs	r3, #208	@ 0xd0
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2306      	movs	r3, #6
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	223b      	movs	r2, #59	@ 0x3b
 8001430:	488a      	ldr	r0, [pc, #552]	@ (800165c <getAccelVals+0x27c>)
 8001432:	f002 ff7d 	bl	8004330 <HAL_I2C_Mem_Read>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	osMutexRelease(i2cMutexHandle);
 800143c:	4b86      	ldr	r3, [pc, #536]	@ (8001658 <getAccelVals+0x278>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f006 fc9d 	bl	8007d80 <osMutexRelease>
	if (ret != HAL_OK) {
 8001446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <getAccelVals+0x76>
		printf("Error RX\n");
 800144e:	4884      	ldr	r0, [pc, #528]	@ (8001660 <getAccelVals+0x280>)
 8001450:	f00a feca 	bl	800c1e8 <puts>
 8001454:	e0c1      	b.n	80015da <getAccelVals+0x1fa>
	} else {
		int rawAccel = (int16_t)((buf[0] << 8) | buf[1]);
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b21b      	sxth	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	3301      	adds	r3, #1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	653b      	str	r3, [r7, #80]	@ 0x50
		vals.x = (rawAccel /  ACCEL_LSB_SENS) - AX_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
 800146e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001664 <getAccelVals+0x284>
 800147c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001480:	ee16 0a90 	vmov	r0, s13
 8001484:	f7ff f880 	bl	8000588 <__aeabi_f2d>
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
 800148c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001664 <getAccelVals+0x284>
 800149a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800149e:	ee16 0a90 	vmov	r0, s13
 80014a2:	f7ff f871 	bl	8000588 <__aeabi_f2d>
 80014a6:	a360      	add	r3, pc, #384	@ (adr r3, 8001628 <getAccelVals+0x248>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8c4 	bl	8000638 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	a35d      	add	r3, pc, #372	@ (adr r3, 8001630 <getAccelVals+0x250>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7fe ff05 	bl	80002cc <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe fefd 	bl	80002c8 <__aeabi_dsub>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		rawAccel = (int16_t)((buf[2] << 8) | buf[3]);
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3302      	adds	r3, #2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3303      	adds	r3, #3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	653b      	str	r3, [r7, #80]	@ 0x50
		vals.y = (rawAccel /  ACCEL_LSB_SENS) - AY_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
 80014f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fa:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001664 <getAccelVals+0x284>
 80014fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001502:	ee16 0a90 	vmov	r0, s13
 8001506:	f7ff f83f 	bl	8000588 <__aeabi_f2d>
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
 800150e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001518:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001664 <getAccelVals+0x284>
 800151c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001520:	ee16 0a90 	vmov	r0, s13
 8001524:	f7ff f830 	bl	8000588 <__aeabi_f2d>
 8001528:	a343      	add	r3, pc, #268	@ (adr r3, 8001638 <getAccelVals+0x258>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f883 	bl	8000638 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a341      	add	r3, pc, #260	@ (adr r3, 8001640 <getAccelVals+0x260>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7fe fec4 	bl	80002cc <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe febc 	bl	80002c8 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		rawAccel = (int16_t)((buf[4] << 8) | buf[5]);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3304      	adds	r3, #4
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b21b      	sxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3305      	adds	r3, #5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	653b      	str	r3, [r7, #80]	@ 0x50
		vals.z = (rawAccel /  ACCEL_LSB_SENS) - AZ_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
 8001572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001664 <getAccelVals+0x284>
 8001580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001584:	ee16 0a90 	vmov	r0, s13
 8001588:	f7fe fffe 	bl	8000588 <__aeabi_f2d>
 800158c:	4604      	mov	r4, r0
 800158e:	460d      	mov	r5, r1
 8001590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001664 <getAccelVals+0x284>
 800159e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015a2:	ee16 0a90 	vmov	r0, s13
 80015a6:	f7fe ffef 	bl	8000588 <__aeabi_f2d>
 80015aa:	a327      	add	r3, pc, #156	@ (adr r3, 8001648 <getAccelVals+0x268>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f842 	bl	8000638 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a324      	add	r3, pc, #144	@ (adr r3, 8001650 <getAccelVals+0x270>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7fe fe81 	bl	80002c8 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe7b 	bl	80002c8 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	}

	return vals;
 80015da:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80015de:	f107 0520 	add.w	r5, r7, #32
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80015ee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80015f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80015f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015fa:	ec45 4b15 	vmov	d5, r4, r5
 80015fe:	ec41 0b16 	vmov	d6, r0, r1
 8001602:	ec43 2b17 	vmov	d7, r2, r3
//			vals.z = (rawAccel /  ACCEL_LSB_SENS) - AZ_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
//		}
//	}
//
//	return vals;
}
 8001606:	eeb0 0a45 	vmov.f32	s0, s10
 800160a:	eef0 0a65 	vmov.f32	s1, s11
 800160e:	eeb0 1a46 	vmov.f32	s2, s12
 8001612:	eef0 1a66 	vmov.f32	s3, s13
 8001616:	eeb0 2a47 	vmov.f32	s4, s14
 800161a:	eef0 2a67 	vmov.f32	s5, s15
 800161e:	3758      	adds	r7, #88	@ 0x58
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	613d31ba 	.word	0x613d31ba
 800162c:	bf740789 	.word	0xbf740789
 8001630:	50092ccf 	.word	0x50092ccf
 8001634:	3fa6cb53 	.word	0x3fa6cb53
 8001638:	1ea35936 	.word	0x1ea35936
 800163c:	bf4dd1a2 	.word	0xbf4dd1a2
 8001640:	4eb9a177 	.word	0x4eb9a177
 8001644:	3f852d23 	.word	0x3f852d23
 8001648:	b242070c 	.word	0xb242070c
 800164c:	3f9c0980 	.word	0x3f9c0980
 8001650:	b8e4b87c 	.word	0xb8e4b87c
 8001654:	3fb83a53 	.word	0x3fb83a53
 8001658:	200004f0 	.word	0x200004f0
 800165c:	20000278 	.word	0x20000278
 8001660:	0800e8e0 	.word	0x0800e8e0
 8001664:	46000000 	.word	0x46000000

08001668 <configIMU>:
void configIMU(uint8_t* buf) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af04      	add	r7, sp, #16
 800166e:	6078      	str	r0, [r7, #4]
	osDelay(150);
 8001670:	2096      	movs	r0, #150	@ 0x96
 8001672:	f006 f9b3 	bl	80079dc <osDelay>
	uint8_t check;
	uint8_t Data;
	HAL_StatusTypeDef ret;
	osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001676:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <configIMU+0x144>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f04f 31ff 	mov.w	r1, #4294967295
 800167e:	4618      	mov	r0, r3
 8001680:	f006 fb33 	bl	8007cea <osMutexAcquire>
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001684:	23d0      	movs	r3, #208	@ 0xd0
 8001686:	4619      	mov	r1, r3
 8001688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	2301      	movs	r3, #1
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	f107 030e 	add.w	r3, r7, #14
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2301      	movs	r3, #1
 800169a:	2275      	movs	r2, #117	@ 0x75
 800169c:	4844      	ldr	r0, [pc, #272]	@ (80017b0 <configIMU+0x148>)
 800169e:	f002 fe47 	bl	8004330 <HAL_I2C_Mem_Read>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK && check == 0x68) {
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d174      	bne.n	8001796 <configIMU+0x12e>
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	2b68      	cmp	r3, #104	@ 0x68
 80016b0:	d171      	bne.n	8001796 <configIMU+0x12e>
		Data = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	737b      	strb	r3, [r7, #13]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 80016b6:	23d0      	movs	r3, #208	@ 0xd0
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2301      	movs	r3, #1
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	f107 030d 	add.w	r3, r7, #13
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	226b      	movs	r2, #107	@ 0x6b
 80016ce:	4838      	ldr	r0, [pc, #224]	@ (80017b0 <configIMU+0x148>)
 80016d0:	f002 fd34 	bl	800413c <HAL_I2C_Mem_Write>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) {
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <configIMU+0x80>
			printf("Wakeup Failed, ret=%d\n", ret);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4834      	ldr	r0, [pc, #208]	@ (80017b4 <configIMU+0x14c>)
 80016e4:	f00a fd18 	bl	800c118 <iprintf>
		}
		Data = 0x07;
 80016e8:	2307      	movs	r3, #7
 80016ea:	737b      	strb	r3, [r7, #13]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 80016ec:	23d0      	movs	r3, #208	@ 0xd0
 80016ee:	4619      	mov	r1, r3
 80016f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2301      	movs	r3, #1
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	f107 030d 	add.w	r3, r7, #13
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2219      	movs	r2, #25
 8001704:	482a      	ldr	r0, [pc, #168]	@ (80017b0 <configIMU+0x148>)
 8001706:	f002 fd19 	bl	800413c <HAL_I2C_Mem_Write>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) {
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <configIMU+0xb6>
			printf("data rate set Failed, ret=%d\n", ret);
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4619      	mov	r1, r3
 8001718:	4827      	ldr	r0, [pc, #156]	@ (80017b8 <configIMU+0x150>)
 800171a:	f00a fcfd 	bl	800c118 <iprintf>
		}
		Data = 1 << 3;
 800171e:	2308      	movs	r3, #8
 8001720:	737b      	strb	r3, [r7, #13]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8001722:	23d0      	movs	r3, #208	@ 0xd0
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	2301      	movs	r3, #1
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	f107 030d 	add.w	r3, r7, #13
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	221b      	movs	r2, #27
 800173a:	481d      	ldr	r0, [pc, #116]	@ (80017b0 <configIMU+0x148>)
 800173c:	f002 fcfe 	bl	800413c <HAL_I2C_Mem_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) {
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <configIMU+0xec>
			printf("gyro config set Failed, ret=%d\n", ret);
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	4619      	mov	r1, r3
 800174e:	481b      	ldr	r0, [pc, #108]	@ (80017bc <configIMU+0x154>)
 8001750:	f00a fce2 	bl	800c118 <iprintf>
		}
		Data = 1 << 3;
 8001754:	2308      	movs	r3, #8
 8001756:	737b      	strb	r3, [r7, #13]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8001758:	23d0      	movs	r3, #208	@ 0xd0
 800175a:	4619      	mov	r1, r3
 800175c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 030d 	add.w	r3, r7, #13
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	221c      	movs	r2, #28
 8001770:	480f      	ldr	r0, [pc, #60]	@ (80017b0 <configIMU+0x148>)
 8001772:	f002 fce3 	bl	800413c <HAL_I2C_Mem_Write>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) {
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <configIMU+0x122>
			printf("accel config set Failed, ret=%d\n", ret);
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	4619      	mov	r1, r3
 8001784:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <configIMU+0x158>)
 8001786:	f00a fcc7 	bl	800c118 <iprintf>
		}
		osMutexRelease(i2cMutexHandle);
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <configIMU+0x144>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f006 faf6 	bl	8007d80 <osMutexRelease>
 8001794:	e006      	b.n	80017a4 <configIMU+0x13c>
	}else {
		printf("Config failed, ret=%d, check=%d\n", ret, check);
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	7bba      	ldrb	r2, [r7, #14]
 800179a:	4619      	mov	r1, r3
 800179c:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <configIMU+0x15c>)
 800179e:	f00a fcbb 	bl	800c118 <iprintf>
//		printf("Error TX Config: %d\n", ret);
//		osThreadTerminate(NULL);
//	}
//
//	printf("Config Wrote Successfully!\n");
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200004f0 	.word	0x200004f0
 80017b0:	20000278 	.word	0x20000278
 80017b4:	0800e8ec 	.word	0x0800e8ec
 80017b8:	0800e904 	.word	0x0800e904
 80017bc:	0800e924 	.word	0x0800e924
 80017c0:	0800e944 	.word	0x0800e944
 80017c4:	0800e968 	.word	0x0800e968

080017c8 <calibrateGyro>:
void calibrateGyro(uint8_t* buf) {
 80017c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017cc:	b09a      	sub	sp, #104	@ 0x68
 80017ce:	af04      	add	r7, sp, #16
 80017d0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	double xTot = 0;
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double yTot = 0;
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double zTot = 0;
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	for (int ct = 1; ct <= 1000; ct++) {
 80017f6:	2301      	movs	r3, #1
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017fa:	e0a9      	b.n	8001950 <calibrateGyro+0x188>
		buf[0] = REG_VALS_START;
 80017fc:	223b      	movs	r2, #59	@ 0x3b
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
		osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <calibrateGyro+0x1f8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	4618      	mov	r0, r3
 800180c:	f006 fa6d 	bl	8007cea <osMutexAcquire>
		ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 1, customTimeout);
 8001810:	23d0      	movs	r3, #208	@ 0xd0
 8001812:	4619      	mov	r1, r3
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4869      	ldr	r0, [pc, #420]	@ (80019c4 <calibrateGyro+0x1fc>)
 800181e:	f002 f95d 	bl	8003adc <HAL_I2C_Master_Transmit>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		if (ret != HAL_OK) {
 8001828:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <calibrateGyro+0x70>
			printf("Error TX\n");
 8001830:	4865      	ldr	r0, [pc, #404]	@ (80019c8 <calibrateGyro+0x200>)
 8001832:	f00a fcd9 	bl	800c1e8 <puts>
 8001836:	e085      	b.n	8001944 <calibrateGyro+0x17c>
		} else {
			ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buf, 14, customTimeout);
 8001838:	23d0      	movs	r3, #208	@ 0xd0
 800183a:	4619      	mov	r1, r3
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	230e      	movs	r3, #14
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	485f      	ldr	r0, [pc, #380]	@ (80019c4 <calibrateGyro+0x1fc>)
 8001846:	f002 fa47 	bl	8003cd8 <HAL_I2C_Master_Receive>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			osMutexRelease(i2cMutexHandle);
 8001850:	4b5b      	ldr	r3, [pc, #364]	@ (80019c0 <calibrateGyro+0x1f8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fa93 	bl	8007d80 <osMutexRelease>
			if (ret != HAL_OK) {
 800185a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <calibrateGyro+0xa2>
				printf("Error RX\n");
 8001862:	485a      	ldr	r0, [pc, #360]	@ (80019cc <calibrateGyro+0x204>)
 8001864:	f00a fcc0 	bl	800c1e8 <puts>
 8001868:	e06c      	b.n	8001944 <calibrateGyro+0x17c>
			} else {
				int rawGyroX = (int16_t)((buf[8] << 8) | buf[9]);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3308      	adds	r3, #8
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b21b      	sxth	r3, r3
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3309      	adds	r3, #9
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
				double gyroX = rawGyroX /  65.5;
 8001884:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001886:	f7fe fe6d 	bl	8000564 <__aeabi_i2d>
 800188a:	a34b      	add	r3, pc, #300	@ (adr r3, 80019b8 <calibrateGyro+0x1f0>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fffc 	bl	800088c <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				int rawGyroY = (int16_t)((buf[10] << 8) | buf[11]);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	330a      	adds	r3, #10
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	330b      	adds	r3, #11
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
				double gyroY = rawGyroY /  65.5;
 80018b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018b8:	f7fe fe54 	bl	8000564 <__aeabi_i2d>
 80018bc:	a33e      	add	r3, pc, #248	@ (adr r3, 80019b8 <calibrateGyro+0x1f0>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe ffe3 	bl	800088c <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
				int rawGyroZ = (int16_t)((buf[12] << 8) | buf[13]);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	330c      	adds	r3, #12
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	330d      	adds	r3, #13
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	617b      	str	r3, [r7, #20]
				double gyroZ = rawGyroZ /  65.5;
 80018e8:	6978      	ldr	r0, [r7, #20]
 80018ea:	f7fe fe3b 	bl	8000564 <__aeabi_i2d>
 80018ee:	a332      	add	r3, pc, #200	@ (adr r3, 80019b8 <calibrateGyro+0x1f0>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe ffca 	bl	800088c <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
				xTot += gyroX;
 8001900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001904:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001908:	f7fe fce0 	bl	80002cc <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				yTot += gyroY;
 8001914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001918:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800191c:	f7fe fcd6 	bl	80002cc <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				zTot += gyroZ;
 8001928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800192c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001930:	f7fe fccc 	bl	80002cc <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				printf("cnt = %d\n", ct);
 800193c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800193e:	4824      	ldr	r0, [pc, #144]	@ (80019d0 <calibrateGyro+0x208>)
 8001940:	f00a fbea 	bl	800c118 <iprintf>
			}
		}
		osDelay(50);
 8001944:	2032      	movs	r0, #50	@ 0x32
 8001946:	f006 f849 	bl	80079dc <osDelay>
	for (int ct = 1; ct <= 1000; ct++) {
 800194a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800194c:	3301      	adds	r3, #1
 800194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001956:	f77f af51 	ble.w	80017fc <calibrateGyro+0x34>
	}
	printf("\n\n\n\naverages: x:%.7f\ty:%.7f\tz:%.7f\n\n\n\n\n", xTot/1000, yTot/1000, zTot/1000);
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <calibrateGyro+0x20c>)
 8001960:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001964:	f7fe ff92 	bl	800088c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4690      	mov	r8, r2
 800196e:	4699      	mov	r9, r3
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <calibrateGyro+0x20c>)
 8001976:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800197a:	f7fe ff87 	bl	800088c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <calibrateGyro+0x20c>)
 800198c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001990:	f7fe ff7c 	bl	800088c <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800199c:	e9cd 4500 	strd	r4, r5, [sp]
 80019a0:	4642      	mov	r2, r8
 80019a2:	464b      	mov	r3, r9
 80019a4:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <calibrateGyro+0x210>)
 80019a6:	f00a fbb7 	bl	800c118 <iprintf>
}
 80019aa:	bf00      	nop
 80019ac:	3758      	adds	r7, #88	@ 0x58
 80019ae:	46bd      	mov	sp, r7
 80019b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b4:	f3af 8000 	nop.w
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40506000 	.word	0x40506000
 80019c0:	200004f0 	.word	0x200004f0
 80019c4:	20000278 	.word	0x20000278
 80019c8:	0800e98c 	.word	0x0800e98c
 80019cc:	0800e8e0 	.word	0x0800e8e0
 80019d0:	0800e998 	.word	0x0800e998
 80019d4:	408f4000 	.word	0x408f4000
 80019d8:	0800e9a4 	.word	0x0800e9a4

080019dc <StartMotorTask>:
#include "Motor.h"

void StartMotorTask(void *argument) {
 80019dc:	b5b0      	push	{r4, r5, r7, lr}
 80019de:	b0a6      	sub	sp, #152	@ 0x98
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	osEventFlagsWait(motorDebugFlagHandle, 0x04, osFlagsWaitAny, osWaitForever);
 80019e4:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <StartMotorTask+0xb0>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	2200      	movs	r2, #0
 80019ee:	2104      	movs	r1, #4
 80019f0:	f006 f890 	bl	8007b14 <osEventFlagsWait>
	printf("Started startMotorTask\n");
 80019f4:	4826      	ldr	r0, [pc, #152]	@ (8001a90 <StartMotorTask+0xb4>)
 80019f6:	f00a fbf7 	bl	800c1e8 <puts>
	Motor leftMotor = motors.left;
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <StartMotorTask+0xb8>)
 80019fc:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001a00:	461d      	mov	r5, r3
 8001a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Motor rightMotor = motors.right;
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <StartMotorTask+0xb8>)
 8001a18:	f107 0410 	add.w	r4, r7, #16
 8001a1c:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	osStatus_t status;
	int receivedSpeed;

	for(;;) {
		status = osMessageQueueGet(motorSpeedQueueHandle, &receivedSpeed, NULL, osWaitForever);
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <StartMotorTask+0xbc>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	f107 010c 	add.w	r1, r7, #12
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	2200      	movs	r2, #0
 8001a42:	f006 faad 	bl	8007fa0 <osMessageQueueGet>
 8001a46:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		if (status == osOK) {
 8001a4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d112      	bne.n	8001a78 <StartMotorTask+0x9c>
			printf("setSpeed to %d\n", receivedSpeed);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <StartMotorTask+0xc0>)
 8001a58:	f00a fb5e 	bl	800c118 <iprintf>
			leftMotor.setSpeed(&leftMotor, receivedSpeed);
 8001a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001a66:	4610      	mov	r0, r2
 8001a68:	4798      	blx	r3
			rightMotor.setSpeed(&rightMotor, receivedSpeed);
 8001a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	f107 0210 	add.w	r2, r7, #16
 8001a72:	4610      	mov	r0, r2
 8001a74:	4798      	blx	r3
 8001a76:	e004      	b.n	8001a82 <StartMotorTask+0xa6>
		} else {
			printf("Reading speed Queue Error: %d\n", status);
 8001a78:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <StartMotorTask+0xc4>)
 8001a7e:	f00a fb4b 	bl	800c118 <iprintf>
		}
		osDelay(10);
 8001a82:	200a      	movs	r0, #10
 8001a84:	f005 ffaa 	bl	80079dc <osDelay>
		status = osMessageQueueGet(motorSpeedQueueHandle, &receivedSpeed, NULL, osWaitForever);
 8001a88:	e7d4      	b.n	8001a34 <StartMotorTask+0x58>
 8001a8a:	bf00      	nop
 8001a8c:	200004f4 	.word	0x200004f4
 8001a90:	0800eb90 	.word	0x0800eb90
 8001a94:	200001f8 	.word	0x200001f8
 8001a98:	200004ec 	.word	0x200004ec
 8001a9c:	0800eba8 	.word	0x0800eba8
 8001aa0:	0800ebb8 	.word	0x0800ebb8

08001aa4 <StartMotorDebugTask>:
	}

}
void StartMotorDebugTask(void *argument)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b0c2      	sub	sp, #264	@ 0x108
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	if(MOTOR_DEBUG) {
		 osEventFlagsSet(motorDebugFlagHandle, 0x01);
	}
	osEventFlagsWait(motorDebugFlagHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <StartMotorDebugTask+0x8c>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	f006 f82b 	bl	8007b14 <osEventFlagsWait>
	motors = initMotors();
 8001abe:	4c1d      	ldr	r4, [pc, #116]	@ (8001b34 <StartMotorDebugTask+0x90>)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f8ae 	bl	8001c24 <initMotors>
 8001ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f00a fd43 	bl	800c562 <memcpy>
	Motor leftMotor = motors.left;
 8001adc:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <StartMotorDebugTask+0x90>)
 8001ade:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Motor rightMotor = motors.right;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <StartMotorDebugTask+0x90>)
 8001afa:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001afe:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 8001b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rightMotor.setSpeed(&rightMotor, 500);
 8001b16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b1a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001b1e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001b22:	4610      	mov	r0, r2
 8001b24:	4798      	blx	r3
	for (;;) {
		osDelay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f005 ff58 	bl	80079dc <osDelay>
 8001b2c:	e7fb      	b.n	8001b26 <StartMotorDebugTask+0x82>
 8001b2e:	bf00      	nop
 8001b30:	200004f4 	.word	0x200004f4
 8001b34:	200001f8 	.word	0x200001f8

08001b38 <StartEncoderTask>:
	}

}
void StartEncoderTask(void *argument) {
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b0c8      	sub	sp, #288	@ 0x120
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	if(!MOTOR_DEBUG) {
		 osEventFlagsSet(motorDebugFlagHandle, 0x02);
 8001b42:	4b34      	ldr	r3, [pc, #208]	@ (8001c14 <StartEncoderTask+0xdc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2102      	movs	r1, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f005 ffa1 	bl	8007a90 <osEventFlagsSet>
	}
	osEventFlagsWait(motorDebugFlagHandle, 0x02, osFlagsWaitAny, osWaitForever);
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <StartEncoderTask+0xdc>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	2200      	movs	r2, #0
 8001b58:	2102      	movs	r1, #2
 8001b5a:	f005 ffdb 	bl	8007b14 <osEventFlagsWait>
	motors = initMotors();
 8001b5e:	4c2e      	ldr	r4, [pc, #184]	@ (8001c18 <StartEncoderTask+0xe0>)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f85e 	bl	8001c24 <initMotors>
 8001b68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b70:	4620      	mov	r0, r4
 8001b72:	4619      	mov	r1, r3
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	461a      	mov	r2, r3
 8001b78:	f00a fcf3 	bl	800c562 <memcpy>
	osEventFlagsSet(motorDebugFlagHandle, 0x04);
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <StartEncoderTask+0xdc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2104      	movs	r1, #4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 ff84 	bl	8007a90 <osEventFlagsSet>
	printf("SetFlags\n");
 8001b88:	4824      	ldr	r0, [pc, #144]	@ (8001c1c <StartEncoderTask+0xe4>)
 8001b8a:	f00a fb2d 	bl	800c1e8 <puts>
	Motor leftMotor = motors.left;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <StartEncoderTask+0xe0>)
 8001b90:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8001b94:	461d      	mov	r5, r3
 8001b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Motor rightMotor = motors.right;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <StartEncoderTask+0xe0>)
 8001bac:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8001bb0:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 8001bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	osStatus_t status;
	vec2 ret;
	for (;;) {
		ret.x = getDist(&leftMotor);
 8001bc8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f93b 	bl	8001e48 <getDist>
 8001bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd6:	eef0 7a60 	vmov.f32	s15, s1
 8001bda:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
		ret.y = getDist(&rightMotor);
 8001bde:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f930 	bl	8001e48 <getDist>
 8001be8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bec:	eef0 7a60 	vmov.f32	s15, s1
 8001bf0:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
		status = osMessageQueuePut(encoderQueueHandle, &ret, 0, 0);
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <StartEncoderTask+0xe8>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f006 f96e 	bl	8007ee0 <osMessageQueuePut>
 8001c04:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
//		if (status != osOK) {
//			printf("ERROR IN MESSAGE encoder PUT: %d\n", status);
//		}
		osDelay(10);
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f005 fee7 	bl	80079dc <osDelay>
		ret.x = getDist(&leftMotor);
 8001c0e:	bf00      	nop
 8001c10:	e7da      	b.n	8001bc8 <StartEncoderTask+0x90>
 8001c12:	bf00      	nop
 8001c14:	200004f4 	.word	0x200004f4
 8001c18:	200001f8 	.word	0x200001f8
 8001c1c:	0800ebd8 	.word	0x0800ebd8
 8001c20:	200004e8 	.word	0x200004e8

08001c24 <initMotors>:
	}

}
MotorSet initMotors() {
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b0ca      	sub	sp, #296	@ 0x128
 8001c28:	af08      	add	r7, sp, #32
 8001c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c32:	6018      	str	r0, [r3, #0]
	MotorSet ret;
	Motor left;
	Motor right;
	initMotorStruct(&left, GPIOA, GPIO_PIN_11, GPIOA, GPIO_PIN_12, &htim2, TIM_CHANNEL_4, true, &htim1, &(TIM2->CCR4), &(TIM1->CNT));
 8001c34:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <initMotors+0xd0>)
 8001c3a:	9306      	str	r3, [sp, #24]
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf8 <initMotors+0xd4>)
 8001c3e:	9305      	str	r3, [sp, #20]
 8001c40:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <initMotors+0xd8>)
 8001c42:	9304      	str	r3, [sp, #16]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9303      	str	r3, [sp, #12]
 8001c48:	230c      	movs	r3, #12
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <initMotors+0xdc>)
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <initMotors+0xe0>)
 8001c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c5c:	4929      	ldr	r1, [pc, #164]	@ (8001d04 <initMotors+0xe0>)
 8001c5e:	f000 f85d 	bl	8001d1c <initMotorStruct>
	initMotorStruct(&right, GPIOC, GPIO_PIN_6, GPIOC, GPIO_PIN_5, &htim8, TIM_CHANNEL_3, false, &htim3, &(TIM8->CCR3), &(TIM3->CNT));
 8001c62:	f107 0008 	add.w	r0, r7, #8
 8001c66:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <initMotors+0xe4>)
 8001c68:	9306      	str	r3, [sp, #24]
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <initMotors+0xe8>)
 8001c6c:	9305      	str	r3, [sp, #20]
 8001c6e:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <initMotors+0xec>)
 8001c70:	9304      	str	r3, [sp, #16]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9303      	str	r3, [sp, #12]
 8001c76:	2308      	movs	r3, #8
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <initMotors+0xf0>)
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2320      	movs	r3, #32
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <initMotors+0xf4>)
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	4924      	ldr	r1, [pc, #144]	@ (8001d18 <initMotors+0xf4>)
 8001c88:	f000 f848 	bl	8001d1c <initMotorStruct>
	ret.left = left;
 8001c8c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001c90:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ret.right = right;
 8001ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cb0:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8001cb4:	461d      	mov	r5, r3
 8001cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return ret;
 8001cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f00a fc40 	bl	800c562 <memcpy>
}
 8001ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	40010024 	.word	0x40010024
 8001cf8:	40000040 	.word	0x40000040
 8001cfc:	200002cc 	.word	0x200002cc
 8001d00:	20000314 	.word	0x20000314
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40000424 	.word	0x40000424
 8001d0c:	4001043c 	.word	0x4001043c
 8001d10:	2000035c 	.word	0x2000035c
 8001d14:	200003a4 	.word	0x200003a4
 8001d18:	40020800 	.word	0x40020800

08001d1c <initMotorStruct>:
void initMotorStruct(Motor* m, GPIO_TypeDef *inGpio1,uint16_t inPin1,GPIO_TypeDef *inGpio2,uint16_t inPin2,
		TIM_HandleTypeDef *pwmHtim,int pwmChan, bool isReversed, TIM_HandleTypeDef *encHtim, __IO uint32_t *speedVal, __IO uint32_t *encoderLoc) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
	m->inGpio1 = inGpio1;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	601a      	str	r2, [r3, #0]
	m->inPin1 = inPin1;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	809a      	strh	r2, [r3, #4]
	m->inGpio2 = inGpio2;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	609a      	str	r2, [r3, #8]
	m->inPin2 = inPin2;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8b3a      	ldrh	r2, [r7, #24]
 8001d42:	819a      	strh	r2, [r3, #12]
	m->pwmHtim = pwmHtim;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	611a      	str	r2, [r3, #16]
	m->pwmChan = pwmChan;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	615a      	str	r2, [r3, #20]
	m->isReversed = isReversed;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001d56:	761a      	strb	r2, [r3, #24]
	m->encHtim = encHtim;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d5c:	61da      	str	r2, [r3, #28]
	m->speedVal = speedVal;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d62:	621a      	str	r2, [r3, #32]
	m->encoderLoc = encoderLoc;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
	m->setSpeed = &setSpeed;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <initMotorStruct+0x94>)
 8001d6e:	635a      	str	r2, [r3, #52]	@ 0x34
	m->getDist = &getDist;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <initMotorStruct+0x98>)
 8001d74:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos = 0;
 8001d76:	68f9      	ldr	r1, [r7, #12]
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	m->lastEnc = 0;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	861a      	strh	r2, [r3, #48]	@ 0x30
	HAL_TIM_PWM_Start(pwmHtim, pwmChan);
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	69f8      	ldr	r0, [r7, #28]
 8001d90:	f004 f92e 	bl	8005ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(encHtim, TIM_CHANNEL_ALL);
 8001d94:	213c      	movs	r1, #60	@ 0x3c
 8001d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d98:	f004 fa98 	bl	80062cc <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(encHtim, 0x8000);
 8001d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	08001db9 	.word	0x08001db9
 8001db4:	08001e49 	.word	0x08001e49

08001db8 <setSpeed>:

void setSpeed(Motor *m, int speed) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	if (m->isReversed) speed = -speed;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7e1b      	ldrb	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <setSpeed+0x18>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	425b      	negs	r3, r3
 8001dce:	603b      	str	r3, [r7, #0]
	if(speed < 0) {
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da10      	bge.n	8001df8 <setSpeed+0x40>
		HAL_GPIO_WritePin(m->inGpio1, m->inPin1, GPIO_PIN_SET);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	889b      	ldrh	r3, [r3, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4619      	mov	r1, r3
 8001de2:	f001 fd1d 	bl	8003820 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m->inGpio2, m->inPin2, GPIO_PIN_RESET);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6898      	ldr	r0, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	899b      	ldrh	r3, [r3, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	4619      	mov	r1, r3
 8001df2:	f001 fd15 	bl	8003820 <HAL_GPIO_WritePin>
 8001df6:	e00f      	b.n	8001e18 <setSpeed+0x60>
	} else {
		HAL_GPIO_WritePin(m->inGpio1, m->inPin1, GPIO_PIN_RESET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	f001 fd0c 	bl	8003820 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m->inGpio2, m->inPin2, GPIO_PIN_SET);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6898      	ldr	r0, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	899b      	ldrh	r3, [r3, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4619      	mov	r1, r3
 8001e14:	f001 fd04 	bl	8003820 <HAL_GPIO_WritePin>
	}
	*(m->speedVal) = mapRange(0,1023,0,ARR,abs(speed));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e1e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e22:	4613      	mov	r3, r2
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <setSpeed+0x8c>)
 8001e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2e:	441a      	add	r2, r3
 8001e30:	1252      	asrs	r2, r2, #9
 8001e32:	17db      	asrs	r3, r3, #31
 8001e34:	1ad2      	subs	r2, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	80200803 	.word	0x80200803

08001e48 <getDist>:
double getDist(Motor *m) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	int16_t rawEnc = (int)((*(m->encoderLoc))>>2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	827b      	strh	r3, [r7, #18]
	int delta = rawEnc - m->lastEnc;
 8001e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	f9b2 2030 	ldrsh.w	r2, [r2, #48]	@ 0x30
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
	if (abs(delta) > 4000) delta = 0;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfb8      	it	lt
 8001e6e:	425b      	neglt	r3, r3
 8001e70:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001e74:	dd01      	ble.n	8001e7a <getDist+0x32>
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]

	double deltaMM = ((WHEEL_DIA*M_PI)/COUNTS_PER_REV)*delta;
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7fe fb72 	bl	8000564 <__aeabi_i2d>
 8001e80:	a311      	add	r3, pc, #68	@ (adr r3, 8001ec8 <getDist+0x80>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fbd7 	bl	8000638 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	m->pos += deltaMM;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e9c:	f7fe fa16 	bl	80002cc <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	m->lastEnc = rawEnc;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8a7a      	ldrh	r2, [r7, #18]
 8001eae:	861a      	strh	r2, [r3, #48]	@ 0x30
	return m->pos;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001eb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001eba:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebe:	eef0 0a67 	vmov.f32	s1, s15
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	eaaa8f67 	.word	0xeaaa8f67
 8001ecc:	3fdd9163 	.word	0x3fdd9163

08001ed0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ed8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001edc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ee8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001eec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001ef0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00b      	beq.n	8001f10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ef8:	e000      	b.n	8001efc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001efa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001efc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f9      	beq.n	8001efa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f06:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f24:	f001 f894 	bl	8003050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f28:	f000 f8d2 	bl	80020d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f2c:	f000 fc02 	bl	8002734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f30:	f000 fbd6 	bl	80026e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f34:	f000 f93a 	bl	80021ac <MX_I2C1_Init>
  MX_UART4_Init();
 8001f38:	f000 fb7e 	bl	8002638 <MX_UART4_Init>
  MX_TIM1_Init();
 8001f3c:	f000 f9d6 	bl	80022ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f40:	f000 faa2 	bl	8002488 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f44:	f000 fa2a 	bl	800239c <MX_TIM2_Init>
  MX_TIM8_Init();
 8001f48:	f000 faf2 	bl	8002530 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001f4c:	f000 fb9e 	bl	800268c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f50:	f005 fc4a 	bl	80077e8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2cMutex */
  i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 8001f54:	4839      	ldr	r0, [pc, #228]	@ (800203c <main+0x11c>)
 8001f56:	f005 fe42 	bl	8007bde <osMutexNew>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a38      	ldr	r2, [pc, #224]	@ (8002040 <main+0x120>)
 8001f5e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gyroQueue */
  gyroQueueHandle = osMessageQueueNew (8, sizeof(vec3), &gyroQueue_attributes);
 8001f60:	4a38      	ldr	r2, [pc, #224]	@ (8002044 <main+0x124>)
 8001f62:	2118      	movs	r1, #24
 8001f64:	2008      	movs	r0, #8
 8001f66:	f005 ff48 	bl	8007dfa <osMessageQueueNew>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a36      	ldr	r2, [pc, #216]	@ (8002048 <main+0x128>)
 8001f6e:	6013      	str	r3, [r2, #0]

  /* creation of accelQueue */
  accelQueueHandle = osMessageQueueNew (8, sizeof(vec3), &accelQueue_attributes);
 8001f70:	4a36      	ldr	r2, [pc, #216]	@ (800204c <main+0x12c>)
 8001f72:	2118      	movs	r1, #24
 8001f74:	2008      	movs	r0, #8
 8001f76:	f005 ff40 	bl	8007dfa <osMessageQueueNew>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a34      	ldr	r2, [pc, #208]	@ (8002050 <main+0x130>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* creation of encoderQueue */
  encoderQueueHandle = osMessageQueueNew (8, sizeof(vec2), &encoderQueue_attributes);
 8001f80:	4a34      	ldr	r2, [pc, #208]	@ (8002054 <main+0x134>)
 8001f82:	2110      	movs	r1, #16
 8001f84:	2008      	movs	r0, #8
 8001f86:	f005 ff38 	bl	8007dfa <osMessageQueueNew>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a32      	ldr	r2, [pc, #200]	@ (8002058 <main+0x138>)
 8001f8e:	6013      	str	r3, [r2, #0]

  /* creation of motorSpeedQueue */
  motorSpeedQueueHandle = osMessageQueueNew (8, sizeof(int), &motorSpeedQueue_attributes);
 8001f90:	4a32      	ldr	r2, [pc, #200]	@ (800205c <main+0x13c>)
 8001f92:	2104      	movs	r1, #4
 8001f94:	2008      	movs	r0, #8
 8001f96:	f005 ff30 	bl	8007dfa <osMessageQueueNew>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a30      	ldr	r2, [pc, #192]	@ (8002060 <main+0x140>)
 8001f9e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IMUDebugTask */
  IMUDebugTaskHandle = osThreadNew(StartIMUDebugTask, NULL, &IMUDebugTask_attributes);
 8001fa0:	4a30      	ldr	r2, [pc, #192]	@ (8002064 <main+0x144>)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4830      	ldr	r0, [pc, #192]	@ (8002068 <main+0x148>)
 8001fa6:	f005 fc87 	bl	80078b8 <osThreadNew>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a2f      	ldr	r2, [pc, #188]	@ (800206c <main+0x14c>)
 8001fae:	6013      	str	r3, [r2, #0]

  /* creation of MotorDebugTask */
  MotorDebugTaskHandle = osThreadNew(StartMotorDebugTask, NULL, &MotorDebugTask_attributes);
 8001fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002070 <main+0x150>)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	482f      	ldr	r0, [pc, #188]	@ (8002074 <main+0x154>)
 8001fb6:	f005 fc7f 	bl	80078b8 <osThreadNew>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002078 <main+0x158>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(StartIMUTask, NULL, &IMUTask_attributes);
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800207c <main+0x15c>)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	482e      	ldr	r0, [pc, #184]	@ (8002080 <main+0x160>)
 8001fc6:	f005 fc77 	bl	80078b8 <osThreadNew>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <main+0x164>)
 8001fce:	6013      	str	r3, [r2, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <main+0x168>)
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	482d      	ldr	r0, [pc, #180]	@ (800208c <main+0x16c>)
 8001fd6:	f005 fc6f 	bl	80078b8 <osThreadNew>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002090 <main+0x170>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8002094 <main+0x174>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	482c      	ldr	r0, [pc, #176]	@ (8002098 <main+0x178>)
 8001fe6:	f005 fc67 	bl	80078b8 <osThreadNew>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <main+0x17c>)
 8001fee:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80020a0 <main+0x180>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	482b      	ldr	r0, [pc, #172]	@ (80020a4 <main+0x184>)
 8001ff6:	f005 fc5f 	bl	80078b8 <osThreadNew>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80020a8 <main+0x188>)
 8001ffe:	6013      	str	r3, [r2, #0]

  /* creation of ControlDebugTas */
  ControlDebugTasHandle = osThreadNew(ControlDebugTaskStart, NULL, &ControlDebugTas_attributes);
 8002000:	4a2a      	ldr	r2, [pc, #168]	@ (80020ac <main+0x18c>)
 8002002:	2100      	movs	r1, #0
 8002004:	482a      	ldr	r0, [pc, #168]	@ (80020b0 <main+0x190>)
 8002006:	f005 fc57 	bl	80078b8 <osThreadNew>
 800200a:	4603      	mov	r3, r0
 800200c:	4a29      	ldr	r2, [pc, #164]	@ (80020b4 <main+0x194>)
 800200e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of motorDebugFlag */
  motorDebugFlagHandle = osEventFlagsNew(&motorDebugFlag_attributes);
 8002010:	4829      	ldr	r0, [pc, #164]	@ (80020b8 <main+0x198>)
 8002012:	f005 fcfe 	bl	8007a12 <osEventFlagsNew>
 8002016:	4603      	mov	r3, r0
 8002018:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <main+0x19c>)
 800201a:	6013      	str	r3, [r2, #0]

  /* creation of IMUDebugFlag */
  IMUDebugFlagHandle = osEventFlagsNew(&IMUDebugFlag_attributes);
 800201c:	4828      	ldr	r0, [pc, #160]	@ (80020c0 <main+0x1a0>)
 800201e:	f005 fcf8 	bl	8007a12 <osEventFlagsNew>
 8002022:	4603      	mov	r3, r0
 8002024:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <main+0x1a4>)
 8002026:	6013      	str	r3, [r2, #0]

  /* creation of controlDebugFlag */
  controlDebugFlagHandle = osEventFlagsNew(&controlDebugFlag_attributes);
 8002028:	4827      	ldr	r0, [pc, #156]	@ (80020c8 <main+0x1a8>)
 800202a:	f005 fcf2 	bl	8007a12 <osEventFlagsNew>
 800202e:	4603      	mov	r3, r0
 8002030:	4a26      	ldr	r2, [pc, #152]	@ (80020cc <main+0x1ac>)
 8002032:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002034:	f005 fbfc 	bl	8007830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <main+0x118>
 800203c:	0800ee38 	.word	0x0800ee38
 8002040:	200004f0 	.word	0x200004f0
 8002044:	0800edd8 	.word	0x0800edd8
 8002048:	200004e0 	.word	0x200004e0
 800204c:	0800edf0 	.word	0x0800edf0
 8002050:	200004e4 	.word	0x200004e4
 8002054:	0800ee08 	.word	0x0800ee08
 8002058:	200004e8 	.word	0x200004e8
 800205c:	0800ee20 	.word	0x0800ee20
 8002060:	200004ec 	.word	0x200004ec
 8002064:	0800ecdc 	.word	0x0800ecdc
 8002068:	080011d5 	.word	0x080011d5
 800206c:	200004c4 	.word	0x200004c4
 8002070:	0800ed00 	.word	0x0800ed00
 8002074:	08001aa5 	.word	0x08001aa5
 8002078:	200004c8 	.word	0x200004c8
 800207c:	0800ed24 	.word	0x0800ed24
 8002080:	08000ff1 	.word	0x08000ff1
 8002084:	200004cc 	.word	0x200004cc
 8002088:	0800ed48 	.word	0x0800ed48
 800208c:	08002875 	.word	0x08002875
 8002090:	200004d0 	.word	0x200004d0
 8002094:	0800ed6c 	.word	0x0800ed6c
 8002098:	08001b39 	.word	0x08001b39
 800209c:	200004d4 	.word	0x200004d4
 80020a0:	0800ed90 	.word	0x0800ed90
 80020a4:	080019dd 	.word	0x080019dd
 80020a8:	200004d8 	.word	0x200004d8
 80020ac:	0800edb4 	.word	0x0800edb4
 80020b0:	08000f15 	.word	0x08000f15
 80020b4:	200004dc 	.word	0x200004dc
 80020b8:	0800ee48 	.word	0x0800ee48
 80020bc:	200004f4 	.word	0x200004f4
 80020c0:	0800ee58 	.word	0x0800ee58
 80020c4:	200004f8 	.word	0x200004f8
 80020c8:	0800ee68 	.word	0x0800ee68
 80020cc:	200004fc 	.word	0x200004fc

080020d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b094      	sub	sp, #80	@ 0x50
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2234      	movs	r2, #52	@ 0x34
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f00a f962 	bl	800c3a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <SystemClock_Config+0xd4>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a29      	ldr	r2, [pc, #164]	@ (80021a4 <SystemClock_Config+0xd4>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <SystemClock_Config+0xd4>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <SystemClock_Config+0xd8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800211c:	4a22      	ldr	r2, [pc, #136]	@ (80021a8 <SystemClock_Config+0xd8>)
 800211e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <SystemClock_Config+0xd8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002130:	2302      	movs	r3, #2
 8002132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002138:	2310      	movs	r3, #16
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213c:	2302      	movs	r3, #2
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002140:	2300      	movs	r3, #0
 8002142:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002144:	2310      	movs	r3, #16
 8002146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002148:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800214c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800214e:	2304      	movs	r3, #4
 8002150:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002152:	2302      	movs	r3, #2
 8002154:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002156:	2302      	movs	r3, #2
 8002158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fb98 	bl	8005894 <HAL_RCC_OscConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800216a:	f000 fb9d 	bl	80028a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216e:	230f      	movs	r3, #15
 8002170:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002172:	2302      	movs	r3, #2
 8002174:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800217a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800217e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f003 f806 	bl	800519c <HAL_RCC_ClockConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002196:	f000 fb87 	bl	80028a8 <Error_Handler>
  }
}
 800219a:	bf00      	nop
 800219c:	3750      	adds	r7, #80	@ 0x50
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40007000 	.word	0x40007000

080021ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <MX_I2C1_Init+0x128>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a42      	ldr	r2, [pc, #264]	@ (80022d4 <MX_I2C1_Init+0x128>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <MX_I2C1_Init+0x128>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80021de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021e4:	2311      	movs	r3, #17
 80021e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	4619      	mov	r1, r3
 80021f6:	4838      	ldr	r0, [pc, #224]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 80021f8:	f001 f872 	bl	80032e0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002202:	4835      	ldr	r0, [pc, #212]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 8002204:	f001 fb0c 	bl	8003820 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002208:	2001      	movs	r0, #1
 800220a:	f000 ff63 	bl	80030d4 <HAL_Delay>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 800220e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002212:	4831      	ldr	r0, [pc, #196]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 8002214:	f001 faec 	bl	80037f0 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11a      	bne.n	8002254 <MX_I2C1_Init+0xa8>
		for (int i = 0; i < 9; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e014      	b.n	800224e <MX_I2C1_Init+0xa2>
			// Clock SCL to release SDA
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800222a:	482b      	ldr	r0, [pc, #172]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 800222c:	f001 faf8 	bl	8003820 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f000 ff4f 	bl	80030d4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002236:	2201      	movs	r2, #1
 8002238:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800223c:	4826      	ldr	r0, [pc, #152]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 800223e:	f001 faef 	bl	8003820 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8002242:	2001      	movs	r0, #1
 8002244:	f000 ff46 	bl	80030d4 <HAL_Delay>
		for (int i = 0; i < 9; i++) {
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3301      	adds	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b08      	cmp	r3, #8
 8002252:	dde7      	ble.n	8002224 <MX_I2C1_Init+0x78>
		}
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // SCL high
 8002254:	2201      	movs	r2, #1
 8002256:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800225a:	481f      	ldr	r0, [pc, #124]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 800225c:	f001 fae0 	bl	8003820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // SDA high
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002266:	481c      	ldr	r0, [pc, #112]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 8002268:	f001 fada 	bl	8003820 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800226c:	2001      	movs	r0, #1
 800226e:	f000 ff31 	bl	80030d4 <HAL_Delay>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 8002272:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002276:	4818      	ldr	r0, [pc, #96]	@ (80022d8 <MX_I2C1_Init+0x12c>)
 8002278:	f001 f9c6 	bl	8003608 <HAL_GPIO_DeInit>
	printf("Bit banged\n");
 800227c:	4817      	ldr	r0, [pc, #92]	@ (80022dc <MX_I2C1_Init+0x130>)
 800227e:	f009 ffb3 	bl	800c1e8 <puts>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <MX_I2C1_Init+0x134>)
 8002284:	4a17      	ldr	r2, [pc, #92]	@ (80022e4 <MX_I2C1_Init+0x138>)
 8002286:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002288:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <MX_I2C1_Init+0x134>)
 800228a:	4a17      	ldr	r2, [pc, #92]	@ (80022e8 <MX_I2C1_Init+0x13c>)
 800228c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <MX_I2C1_Init+0x134>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <MX_I2C1_Init+0x134>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <MX_I2C1_Init+0x134>)
 800229c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <MX_I2C1_Init+0x134>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <MX_I2C1_Init+0x134>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <MX_I2C1_Init+0x134>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <MX_I2C1_Init+0x134>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022ba:	4809      	ldr	r0, [pc, #36]	@ (80022e0 <MX_I2C1_Init+0x134>)
 80022bc:	f001 faca 	bl	8003854 <HAL_I2C_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_I2C1_Init+0x11e>
  {
    Error_Handler();
 80022c6:	f000 faef 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	0800ecb8 	.word	0x0800ecb8
 80022e0:	20000278 	.word	0x20000278
 80022e4:	40005400 	.word	0x40005400
 80022e8:	000186a0 	.word	0x000186a0

080022ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	@ 0x30
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	2224      	movs	r2, #36	@ 0x24
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f00a f854 	bl	800c3a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002308:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <MX_TIM1_Init+0xa8>)
 800230a:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <MX_TIM1_Init+0xac>)
 800230c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800230e:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <MX_TIM1_Init+0xa8>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b1f      	ldr	r3, [pc, #124]	@ (8002394 <MX_TIM1_Init+0xa8>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <MX_TIM1_Init+0xa8>)
 800231c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b1c      	ldr	r3, [pc, #112]	@ (8002394 <MX_TIM1_Init+0xa8>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002328:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_TIM1_Init+0xa8>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <MX_TIM1_Init+0xa8>)
 8002330:	2280      	movs	r2, #128	@ 0x80
 8002332:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002334:	2303      	movs	r3, #3
 8002336:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002338:	2302      	movs	r3, #2
 800233a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800234c:	2301      	movs	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	@ (8002394 <MX_TIM1_Init+0xa8>)
 8002360:	f003 ff0e 	bl	8006180 <HAL_TIM_Encoder_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800236a:	f000 fa9d 	bl	80028a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	@ (8002394 <MX_TIM1_Init+0xa8>)
 800237c:	f004 fdf2 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002386:	f000 fa8f 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	@ 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200002cc 	.word	0x200002cc
 8002398:	40010000 	.word	0x40010000

0800239c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08e      	sub	sp, #56	@ 0x38
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ee:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023f0:	2280      	movs	r2, #128	@ 0x80
 80023f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023f4:	4823      	ldr	r0, [pc, #140]	@ (8002484 <MX_TIM2_Init+0xe8>)
 80023f6:	f003 fceb 	bl	8005dd0 <HAL_TIM_Base_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002400:	f000 fa52 	bl	80028a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800240a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800240e:	4619      	mov	r1, r3
 8002410:	481c      	ldr	r0, [pc, #112]	@ (8002484 <MX_TIM2_Init+0xe8>)
 8002412:	f004 f99b 	bl	800674c <HAL_TIM_ConfigClockSource>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800241c:	f000 fa44 	bl	80028a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002420:	4818      	ldr	r0, [pc, #96]	@ (8002484 <MX_TIM2_Init+0xe8>)
 8002422:	f003 fd95 	bl	8005f50 <HAL_TIM_PWM_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800242c:	f000 fa3c 	bl	80028a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	4619      	mov	r1, r3
 800243e:	4811      	ldr	r0, [pc, #68]	@ (8002484 <MX_TIM2_Init+0xe8>)
 8002440:	f004 fd90 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800244a:	f000 fa2d 	bl	80028a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244e:	2360      	movs	r3, #96	@ 0x60
 8002450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	220c      	movs	r2, #12
 8002462:	4619      	mov	r1, r3
 8002464:	4807      	ldr	r0, [pc, #28]	@ (8002484 <MX_TIM2_Init+0xe8>)
 8002466:	f004 f8af 	bl	80065c8 <HAL_TIM_PWM_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002470:	f000 fa1a 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002474:	4803      	ldr	r0, [pc, #12]	@ (8002484 <MX_TIM2_Init+0xe8>)
 8002476:	f000 fb51 	bl	8002b1c <HAL_TIM_MspPostInit>

}
 800247a:	bf00      	nop
 800247c:	3738      	adds	r7, #56	@ 0x38
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000314 	.word	0x20000314

08002488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f009 ff86 	bl	800c3a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a4:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <MX_TIM3_Init+0xa4>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ca:	2303      	movs	r3, #3
 80024cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80024ce:	2302      	movs	r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d2:	2301      	movs	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e2:	2301      	movs	r3, #1
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024f6:	f003 fe43 	bl	8006180 <HAL_TIM_Encoder_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002500:	f000 f9d2 	bl	80028a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <MX_TIM3_Init+0xa0>)
 8002512:	f004 fd27 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800251c:	f000 f9c4 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	@ 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000035c 	.word	0x2000035c
 800252c:	40000400 	.word	0x40000400

08002530 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b092      	sub	sp, #72	@ 0x48
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002536:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2220      	movs	r2, #32
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f009 ff24 	bl	800c3a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002562:	4a34      	ldr	r2, [pc, #208]	@ (8002634 <MX_TIM8_Init+0x104>)
 8002564:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002566:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b30      	ldr	r3, [pc, #192]	@ (8002630 <MX_TIM8_Init+0x100>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002574:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002578:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <MX_TIM8_Init+0x100>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002580:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800258c:	4828      	ldr	r0, [pc, #160]	@ (8002630 <MX_TIM8_Init+0x100>)
 800258e:	f003 fcdf 	bl	8005f50 <HAL_TIM_PWM_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002598:	f000 f986 	bl	80028a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025a8:	4619      	mov	r1, r3
 80025aa:	4821      	ldr	r0, [pc, #132]	@ (8002630 <MX_TIM8_Init+0x100>)
 80025ac:	f004 fcda 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80025b6:	f000 f977 	bl	80028a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ba:	2360      	movs	r3, #96	@ 0x60
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025c6:	2300      	movs	r3, #0
 80025c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025da:	2208      	movs	r2, #8
 80025dc:	4619      	mov	r1, r3
 80025de:	4814      	ldr	r0, [pc, #80]	@ (8002630 <MX_TIM8_Init+0x100>)
 80025e0:	f003 fff2 	bl	80065c8 <HAL_TIM_PWM_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80025ea:	f000 f95d 	bl	80028a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002612:	f004 fd23 	bl	800705c <HAL_TIMEx_ConfigBreakDeadTime>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800261c:	f000 f944 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002620:	4803      	ldr	r0, [pc, #12]	@ (8002630 <MX_TIM8_Init+0x100>)
 8002622:	f000 fa7b 	bl	8002b1c <HAL_TIM_MspPostInit>

}
 8002626:	bf00      	nop
 8002628:	3748      	adds	r7, #72	@ 0x48
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003a4 	.word	0x200003a4
 8002634:	40010400 	.word	0x40010400

08002638 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_UART4_Init+0x4c>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <MX_UART4_Init+0x50>)
 8002640:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002648:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_UART4_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <MX_UART4_Init+0x4c>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_UART4_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800266e:	4805      	ldr	r0, [pc, #20]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002670:	f004 fdaa 	bl	80071c8 <HAL_HalfDuplex_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800267a:	f000 f915 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200003ec 	.word	0x200003ec
 8002688:	40004c00 	.word	0x40004c00

0800268c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <MX_USART1_UART_Init+0x50>)
 8002694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 8002698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800269c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026c4:	f004 fd30 	bl	8007128 <HAL_UART_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ce:	f000 f8eb 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000434 	.word	0x20000434
 80026dc:	40011000 	.word	0x40011000

080026e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <MX_USART2_UART_Init+0x50>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002718:	f004 fd06 	bl	8007128 <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002722:	f000 f8c1 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000047c 	.word	0x2000047c
 8002730:	40004400 	.word	0x40004400

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <MX_GPIO_Init+0xfc>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a37      	ldr	r2, [pc, #220]	@ (8002830 <MX_GPIO_Init+0xfc>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b35      	ldr	r3, [pc, #212]	@ (8002830 <MX_GPIO_Init+0xfc>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <MX_GPIO_Init+0xfc>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a30      	ldr	r2, [pc, #192]	@ (8002830 <MX_GPIO_Init+0xfc>)
 8002770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <MX_GPIO_Init+0xfc>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <MX_GPIO_Init+0xfc>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a29      	ldr	r2, [pc, #164]	@ (8002830 <MX_GPIO_Init+0xfc>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <MX_GPIO_Init+0xfc>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <MX_GPIO_Init+0xfc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4a22      	ldr	r2, [pc, #136]	@ (8002830 <MX_GPIO_Init+0xfc>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <MX_GPIO_Init+0xfc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80027ba:	2200      	movs	r2, #0
 80027bc:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80027c0:	481c      	ldr	r0, [pc, #112]	@ (8002834 <MX_GPIO_Init+0x100>)
 80027c2:	f001 f82d 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2160      	movs	r1, #96	@ 0x60
 80027ca:	481b      	ldr	r0, [pc, #108]	@ (8002838 <MX_GPIO_Init+0x104>)
 80027cc:	f001 f828 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	4814      	ldr	r0, [pc, #80]	@ (8002838 <MX_GPIO_Init+0x104>)
 80027e8:	f000 fd7a 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 80027ec:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80027f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	480b      	ldr	r0, [pc, #44]	@ (8002834 <MX_GPIO_Init+0x100>)
 8002806:	f000 fd6b 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800280a:	2360      	movs	r3, #96	@ 0x60
 800280c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_GPIO_Init+0x104>)
 8002822:	f000 fd5d 	bl	80032e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002826:	bf00      	nop
 8002828:	3728      	adds	r7, #40	@ 0x28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020800 	.word	0x40020800

0800283c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e009      	b.n	8002862 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	60ba      	str	r2, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fb3a 	bl	8001ed0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf1      	blt.n	800284e <_write+0x12>
  }
  return len;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <StartControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlTask */
__weak void StartControlTask(void *argument)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800287c:	2001      	movs	r0, #1
 800287e:	f005 f8ad 	bl	80079dc <osDelay>
 8002882:	e7fb      	b.n	800287c <StartControlTask+0x8>

08002884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002896:	f000 fbfd 	bl	8003094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40001000 	.word	0x40001000

080028a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ac:	b672      	cpsid	i
}
 80028ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <Error_Handler+0x8>

080028b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_MspInit+0x54>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_MspInit+0x54>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <HAL_MspInit+0x54>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_MspInit+0x54>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <HAL_MspInit+0x54>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_MspInit+0x54>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	210f      	movs	r1, #15
 80028f6:	f06f 0001 	mvn.w	r0, #1
 80028fa:	f000 fcc7 	bl	800328c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	@ 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <HAL_I2C_MspInit+0x84>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12c      	bne.n	8002988 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800294a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002950:	2312      	movs	r3, #18
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800295c:	2304      	movs	r3, #4
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	480c      	ldr	r0, [pc, #48]	@ (8002998 <HAL_I2C_MspInit+0x8c>)
 8002968:	f000 fcba 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	4a07      	ldr	r2, [pc, #28]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002976:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800297a:	6413      	str	r3, [r2, #64]	@ 0x40
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002988:	bf00      	nop
 800298a:	3728      	adds	r7, #40	@ 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40005400 	.word	0x40005400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020400 	.word	0x40020400

0800299c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	@ 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a32      	ldr	r2, [pc, #200]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0xe8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12d      	bne.n	8002a1a <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a30      	ldr	r2, [pc, #192]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	4b2a      	ldr	r3, [pc, #168]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a29      	ldr	r2, [pc, #164]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	4619      	mov	r1, r3
 8002a12:	481e      	ldr	r0, [pc, #120]	@ (8002a8c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a14:	f000 fc64 	bl	80032e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a18:	e030      	b.n	8002a7c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d12b      	bne.n	8002a7c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	4a16      	ldr	r2, [pc, #88]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a34:	4b14      	ldr	r3, [pc, #80]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	4a0f      	ldr	r2, [pc, #60]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a5c:	2330      	movs	r3, #48	@ 0x30
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4807      	ldr	r0, [pc, #28]	@ (8002a94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002a78:	f000 fc32 	bl	80032e0 <HAL_GPIO_Init>
}
 8002a7c:	bf00      	nop
 8002a7e:	3730      	adds	r7, #48	@ 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40020400 	.word	0x40020400

08002a98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10d      	bne.n	8002b06 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x40>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x40>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x40>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40010400 	.word	0x40010400
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d11e      	bne.n	8002b7c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <HAL_TIM_MspPostInit+0xb0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a21      	ldr	r2, [pc, #132]	@ (8002bcc <HAL_TIM_MspPostInit+0xb0>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <HAL_TIM_MspPostInit+0xb0>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4816      	ldr	r0, [pc, #88]	@ (8002bd0 <HAL_TIM_MspPostInit+0xb4>)
 8002b76:	f000 fbb3 	bl	80032e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b7a:	e023      	b.n	8002bc4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <HAL_TIM_MspPostInit+0xb8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d11e      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <HAL_TIM_MspPostInit+0xb0>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <HAL_TIM_MspPostInit+0xb0>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <HAL_TIM_MspPostInit+0xb0>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4806      	ldr	r0, [pc, #24]	@ (8002bd8 <HAL_TIM_MspPostInit+0xbc>)
 8002bc0:	f000 fb8e 	bl	80032e0 <HAL_GPIO_Init>
}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	@ 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40010400 	.word	0x40010400
 8002bd8:	40020800 	.word	0x40020800

08002bdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	@ 0x38
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d28 <HAL_UART_MspInit+0x14c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d12c      	bne.n	8002c58 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	4b4a      	ldr	r3, [pc, #296]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4a49      	ldr	r2, [pc, #292]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0e:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4b43      	ldr	r3, [pc, #268]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	4a42      	ldr	r2, [pc, #264]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2a:	4b40      	ldr	r3, [pc, #256]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3a:	2312      	movs	r3, #18
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c46:	2308      	movs	r3, #8
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4837      	ldr	r0, [pc, #220]	@ (8002d30 <HAL_UART_MspInit+0x154>)
 8002c52:	f000 fb45 	bl	80032e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c56:	e062      	b.n	8002d1e <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a35      	ldr	r2, [pc, #212]	@ (8002d34 <HAL_UART_MspInit+0x158>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12c      	bne.n	8002cbc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	4a30      	ldr	r2, [pc, #192]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c72:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4a29      	ldr	r2, [pc, #164]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8e:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c9a:	23c0      	movs	r3, #192	@ 0xc0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002caa:	2307      	movs	r3, #7
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4820      	ldr	r0, [pc, #128]	@ (8002d38 <HAL_UART_MspInit+0x15c>)
 8002cb6:	f000 fb13 	bl	80032e0 <HAL_GPIO_Init>
}
 8002cba:	e030      	b.n	8002d1e <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_UART_MspInit+0x160>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12b      	bne.n	8002d1e <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_UART_MspInit+0x150>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cfe:	230c      	movs	r3, #12
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d0e:	2307      	movs	r3, #7
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d16:	4619      	mov	r1, r3
 8002d18:	4805      	ldr	r0, [pc, #20]	@ (8002d30 <HAL_UART_MspInit+0x154>)
 8002d1a:	f000 fae1 	bl	80032e0 <HAL_GPIO_Init>
}
 8002d1e:	bf00      	nop
 8002d20:	3738      	adds	r7, #56	@ 0x38
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40004c00 	.word	0x40004c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40004400 	.word	0x40004400

08002d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	@ 0x38
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	4b33      	ldr	r3, [pc, #204]	@ (8002e24 <HAL_InitTick+0xe4>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	4a32      	ldr	r2, [pc, #200]	@ (8002e24 <HAL_InitTick+0xe4>)
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d60:	4b30      	ldr	r3, [pc, #192]	@ (8002e24 <HAL_InitTick+0xe4>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d6c:	f107 0210 	add.w	r2, r7, #16
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fb2a 	bl	80053d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d86:	f002 fafb 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8002d8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002d8c:	e004      	b.n	8002d98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d8e:	f002 faf7 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8002d92:	4603      	mov	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <HAL_InitTick+0xe8>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	0c9b      	lsrs	r3, r3, #18
 8002da2:	3b01      	subs	r3, #1
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002da6:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <HAL_InitTick+0xec>)
 8002da8:	4a21      	ldr	r2, [pc, #132]	@ (8002e30 <HAL_InitTick+0xf0>)
 8002daa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dac:	4b1f      	ldr	r3, [pc, #124]	@ (8002e2c <HAL_InitTick+0xec>)
 8002dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002db2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <HAL_InitTick+0xec>)
 8002db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dba:	4b1c      	ldr	r3, [pc, #112]	@ (8002e2c <HAL_InitTick+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <HAL_InitTick+0xec>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_InitTick+0xec>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002dcc:	4817      	ldr	r0, [pc, #92]	@ (8002e2c <HAL_InitTick+0xec>)
 8002dce:	f002 ffff 	bl	8005dd0 <HAL_TIM_Base_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d11b      	bne.n	8002e18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002de0:	4812      	ldr	r0, [pc, #72]	@ (8002e2c <HAL_InitTick+0xec>)
 8002de2:	f003 f845 	bl	8005e70 <HAL_TIM_Base_Start_IT>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002df4:	2036      	movs	r0, #54	@ 0x36
 8002df6:	f000 fa65 	bl	80032c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d808      	bhi.n	8002e12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	2036      	movs	r0, #54	@ 0x36
 8002e06:	f000 fa41 	bl	800328c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <HAL_InitTick+0xf4>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	e002      	b.n	8002e18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3738      	adds	r7, #56	@ 0x38
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	431bde83 	.word	0x431bde83
 8002e2c:	20000500 	.word	0x20000500
 8002e30:	40001000 	.word	0x40001000
 8002e34:	20000004 	.word	0x20000004

08002e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <NMI_Handler+0x4>

08002e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <HardFault_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <MemManage_Handler+0x4>

08002e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <BusFault_Handler+0x4>

08002e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <UsageFault_Handler+0x4>

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e74:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <TIM6_DAC_IRQHandler+0x10>)
 8002e76:	f003 fab7 	bl	80063e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000500 	.word	0x20000500

08002e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return 1;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_kill>:

int _kill(int pid, int sig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9e:	f009 fb33 	bl	800c508 <__errno>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2216      	movs	r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_exit>:

void _exit (int status)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ffe7 	bl	8002e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <_exit+0x12>

08002eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e00a      	b.n	8002ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002edc:	f3af 8000 	nop.w
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	60ba      	str	r2, [r7, #8]
 8002ee8:	b2ca      	uxtb	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	dbf0      	blt.n	8002edc <_read+0x12>
  }

  return len;
 8002efa:	687b      	ldr	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f2c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <_isatty>:

int _isatty(int file)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f74:	4a14      	ldr	r2, [pc, #80]	@ (8002fc8 <_sbrk+0x5c>)
 8002f76:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <_sbrk+0x60>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <_sbrk+0x64>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <_sbrk+0x68>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f9c:	f009 fab4 	bl	800c508 <__errno>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e009      	b.n	8002fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <_sbrk+0x64>)
 8002fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20020000 	.word	0x20020000
 8002fcc:	00000400 	.word	0x00000400
 8002fd0:	20000548 	.word	0x20000548
 8002fd4:	20005090 	.word	0x20005090

08002fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	@ (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003034 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003000:	f7ff ffea 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003004:	480c      	ldr	r0, [pc, #48]	@ (8003038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003006:	490d      	ldr	r1, [pc, #52]	@ (800303c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003008:	4a0d      	ldr	r2, [pc, #52]	@ (8003040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800301c:	4c0a      	ldr	r4, [pc, #40]	@ (8003048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800302a:	f009 fa73 	bl	800c514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800302e:	f7fe ff77 	bl	8001f20 <main>
  bx  lr    
 8003032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003040:	0800f298 	.word	0x0800f298
  ldr r2, =_sbss
 8003044:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003048:	2000508c 	.word	0x2000508c

0800304c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC_IRQHandler>
	...

08003050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003054:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <HAL_Init+0x40>)
 800305a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	@ (8003090 <HAL_Init+0x40>)
 8003066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800306a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a07      	ldr	r2, [pc, #28]	@ (8003090 <HAL_Init+0x40>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003078:	2003      	movs	r0, #3
 800307a:	f000 f8fc 	bl	8003276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307e:	200f      	movs	r0, #15
 8003080:	f7ff fe5e 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003084:	f7ff fc16 	bl	80028b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000008 	.word	0x20000008
 80030b8:	2000054c 	.word	0x2000054c

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000054c 	.word	0x2000054c

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffde 	bl	80030bc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000008 	.word	0x20000008

0800311c <__NVIC_SetPriorityGrouping>:
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_EnableIRQ>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	@ (80031b8 <__NVIC_EnableIRQ+0x38>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	@ (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	@ 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff4c 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329e:	f7ff ff61 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	6978      	ldr	r0, [r7, #20]
 80032aa:	f7ff ffb1 	bl	8003210 <NVIC_EncodePriority>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff80 	bl	80031bc <__NVIC_SetPriority>
}
 80032bc:	bf00      	nop
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff54 	bl	8003180 <__NVIC_EnableIRQ>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	@ 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e165      	b.n	80035c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 8154 	bne.w	80035c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d005      	beq.n	8003332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332e:	2b02      	cmp	r3, #2
 8003330:	d130      	bne.n	8003394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 0201 	and.w	r2, r3, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d017      	beq.n	80033d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80ae 	beq.w	80035c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b5d      	ldr	r3, [pc, #372]	@ (80035e0 <HAL_GPIO_Init+0x300>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	4a5c      	ldr	r2, [pc, #368]	@ (80035e0 <HAL_GPIO_Init+0x300>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003474:	6453      	str	r3, [r2, #68]	@ 0x44
 8003476:	4b5a      	ldr	r3, [pc, #360]	@ (80035e0 <HAL_GPIO_Init+0x300>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003482:	4a58      	ldr	r2, [pc, #352]	@ (80035e4 <HAL_GPIO_Init+0x304>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	@ (80035e8 <HAL_GPIO_Init+0x308>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x21a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4e      	ldr	r2, [pc, #312]	@ (80035ec <HAL_GPIO_Init+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x216>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4d      	ldr	r2, [pc, #308]	@ (80035f0 <HAL_GPIO_Init+0x310>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x212>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	@ (80035f4 <HAL_GPIO_Init+0x314>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	@ (80035f8 <HAL_GPIO_Init+0x318>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x20a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	@ (80035fc <HAL_GPIO_Init+0x31c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x206>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a49      	ldr	r2, [pc, #292]	@ (8003600 <HAL_GPIO_Init+0x320>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x202>
 80034de:	2306      	movs	r3, #6
 80034e0:	e00c      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e00a      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034e6:	2305      	movs	r3, #5
 80034e8:	e008      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034ea:	2304      	movs	r3, #4
 80034ec:	e006      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034ee:	2303      	movs	r3, #3
 80034f0:	e004      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034fa:	2300      	movs	r3, #0
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f002 0203 	and.w	r2, r2, #3
 8003502:	0092      	lsls	r2, r2, #2
 8003504:	4093      	lsls	r3, r2
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800350c:	4935      	ldr	r1, [pc, #212]	@ (80035e4 <HAL_GPIO_Init+0x304>)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800351a:	4b3a      	ldr	r3, [pc, #232]	@ (8003604 <HAL_GPIO_Init+0x324>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800353e:	4a31      	ldr	r2, [pc, #196]	@ (8003604 <HAL_GPIO_Init+0x324>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003544:	4b2f      	ldr	r3, [pc, #188]	@ (8003604 <HAL_GPIO_Init+0x324>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003568:	4a26      	ldr	r2, [pc, #152]	@ (8003604 <HAL_GPIO_Init+0x324>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800356e:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <HAL_GPIO_Init+0x324>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003592:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_GPIO_Init+0x324>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003598:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <HAL_GPIO_Init+0x324>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035bc:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <HAL_GPIO_Init+0x324>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	f67f ae96 	bls.w	80032fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40021400 	.word	0x40021400
 8003600:	40021800 	.word	0x40021800
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e0c7      	b.n	80037b4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003624:	2201      	movs	r2, #1
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	429a      	cmp	r2, r3
 800363c:	f040 80b7 	bne.w	80037ae <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003640:	4a62      	ldr	r2, [pc, #392]	@ (80037cc <HAL_GPIO_DeInit+0x1c4>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a5a      	ldr	r2, [pc, #360]	@ (80037d0 <HAL_GPIO_DeInit+0x1c8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d025      	beq.n	80036b6 <HAL_GPIO_DeInit+0xae>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a59      	ldr	r2, [pc, #356]	@ (80037d4 <HAL_GPIO_DeInit+0x1cc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01f      	beq.n	80036b2 <HAL_GPIO_DeInit+0xaa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a58      	ldr	r2, [pc, #352]	@ (80037d8 <HAL_GPIO_DeInit+0x1d0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d019      	beq.n	80036ae <HAL_GPIO_DeInit+0xa6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_GPIO_DeInit+0x1d4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_DeInit+0xa2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_GPIO_DeInit+0x1d8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a55      	ldr	r2, [pc, #340]	@ (80037e4 <HAL_GPIO_DeInit+0x1dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_DeInit+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a54      	ldr	r2, [pc, #336]	@ (80037e8 <HAL_GPIO_DeInit+0x1e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_DeInit+0x96>
 800369a:	2306      	movs	r3, #6
 800369c:	e00c      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 800369e:	2307      	movs	r3, #7
 80036a0:	e00a      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e008      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 80036a6:	2304      	movs	r3, #4
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e004      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e002      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_DeInit+0xb0>
 80036b6:	2300      	movs	r3, #0
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	f002 0203 	and.w	r2, r2, #3
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	4093      	lsls	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d132      	bne.n	800372e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036c8:	4b48      	ldr	r3, [pc, #288]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	4946      	ldr	r1, [pc, #280]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036d6:	4b45      	ldr	r3, [pc, #276]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	43db      	mvns	r3, r3
 80036de:	4943      	ldr	r1, [pc, #268]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036e4:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	493f      	ldr	r1, [pc, #252]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80036f2:	4b3e      	ldr	r3, [pc, #248]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	493c      	ldr	r1, [pc, #240]	@ (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	220f      	movs	r2, #15
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003710:	4a2e      	ldr	r2, [pc, #184]	@ (80037cc <HAL_GPIO_DeInit+0x1c4>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	43da      	mvns	r2, r3
 8003720:	482a      	ldr	r0, [pc, #168]	@ (80037cc <HAL_GPIO_DeInit+0x1c4>)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	400a      	ands	r2, r1
 8003728:	3302      	adds	r3, #2
 800372a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2103      	movs	r1, #3
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	08d2      	lsrs	r2, r2, #3
 8003764:	4019      	ands	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2103      	movs	r1, #3
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	2101      	movs	r1, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2103      	movs	r1, #3
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	f67f af34 	bls.w	8003624 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40013800 	.word	0x40013800
 80037d0:	40020000 	.word	0x40020000
 80037d4:	40020400 	.word	0x40020400
 80037d8:	40020800 	.word	0x40020800
 80037dc:	40020c00 	.word	0x40020c00
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40021400 	.word	0x40021400
 80037e8:	40021800 	.word	0x40021800
 80037ec:	40013c00 	.word	0x40013c00

080037f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e001      	b.n	8003812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
 800382c:	4613      	mov	r3, r2
 800382e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800383c:	e003      	b.n	8003846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	041a      	lsls	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	619a      	str	r2, [r3, #24]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e12b      	b.n	8003abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff f846 	bl	800290c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	@ 0x24
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b8:	f001 fd62 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 80038bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a81      	ldr	r2, [pc, #516]	@ (8003ac8 <HAL_I2C_Init+0x274>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d807      	bhi.n	80038d8 <HAL_I2C_Init+0x84>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a80      	ldr	r2, [pc, #512]	@ (8003acc <HAL_I2C_Init+0x278>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bf94      	ite	ls
 80038d0:	2301      	movls	r3, #1
 80038d2:	2300      	movhi	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e006      	b.n	80038e6 <HAL_I2C_Init+0x92>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a7d      	ldr	r2, [pc, #500]	@ (8003ad0 <HAL_I2C_Init+0x27c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	bf94      	ite	ls
 80038e0:	2301      	movls	r3, #1
 80038e2:	2300      	movhi	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0e7      	b.n	8003abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a78      	ldr	r2, [pc, #480]	@ (8003ad4 <HAL_I2C_Init+0x280>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac8 <HAL_I2C_Init+0x274>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d802      	bhi.n	8003928 <HAL_I2C_Init+0xd4>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3301      	adds	r3, #1
 8003926:	e009      	b.n	800393c <HAL_I2C_Init+0xe8>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	4a69      	ldr	r2, [pc, #420]	@ (8003ad8 <HAL_I2C_Init+0x284>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	3301      	adds	r3, #1
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	430b      	orrs	r3, r1
 8003942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800394e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	495c      	ldr	r1, [pc, #368]	@ (8003ac8 <HAL_I2C_Init+0x274>)
 8003958:	428b      	cmp	r3, r1
 800395a:	d819      	bhi.n	8003990 <HAL_I2C_Init+0x13c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e59      	subs	r1, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fbb1 f3f3 	udiv	r3, r1, r3
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003970:	400b      	ands	r3, r1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_I2C_Init+0x138>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1e59      	subs	r1, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fbb1 f3f3 	udiv	r3, r1, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398a:	e051      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 800398c:	2304      	movs	r3, #4
 800398e:	e04f      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d111      	bne.n	80039bc <HAL_I2C_Init+0x168>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e58      	subs	r0, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e012      	b.n	80039e2 <HAL_I2C_Init+0x18e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e58      	subs	r0, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	0099      	lsls	r1, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Init+0x196>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e022      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10e      	bne.n	8003a10 <HAL_I2C_Init+0x1bc>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1e58      	subs	r0, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	440b      	add	r3, r1
 8003a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a0e:	e00f      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	0099      	lsls	r1, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	6809      	ldr	r1, [r1, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6911      	ldr	r1, [r2, #16]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68d2      	ldr	r2, [r2, #12]
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	000186a0 	.word	0x000186a0
 8003acc:	001e847f 	.word	0x001e847f
 8003ad0:	003d08ff 	.word	0x003d08ff
 8003ad4:	431bde83 	.word	0x431bde83
 8003ad8:	10624dd3 	.word	0x10624dd3

08003adc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	817b      	strh	r3, [r7, #10]
 8003aec:	4613      	mov	r3, r2
 8003aee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff fae4 	bl	80030bc <HAL_GetTick>
 8003af4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	f040 80e0 	bne.w	8003cc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4970      	ldr	r1, [pc, #448]	@ (8003cd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 f90e 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0d3      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2C_Master_Transmit+0x50>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0cc      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d007      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2221      	movs	r2, #33	@ 0x21
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a50      	ldr	r2, [pc, #320]	@ (8003cd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b94:	8979      	ldrh	r1, [r7, #10]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fdfa 	bl	8004794 <I2C_MasterRequestWrite>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e08d      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bc0:	e066      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6a39      	ldr	r1, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f001 f9cc 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d107      	bne.n	8003bea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06b      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11b      	bne.n	8003c64 <HAL_I2C_Master_Transmit+0x188>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d017      	beq.n	8003c64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f001 f9c3 	bl	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d107      	bne.n	8003c8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e01a      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d194      	bne.n	8003bc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	00100002 	.word	0x00100002
 8003cd4:	ffff0000 	.word	0xffff0000

08003cd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	@ 0x30
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	817b      	strh	r3, [r7, #10]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff f9e6 	bl	80030bc <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	f040 8217 	bne.w	800412e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2319      	movs	r3, #25
 8003d06:	2201      	movs	r2, #1
 8003d08:	497c      	ldr	r1, [pc, #496]	@ (8003efc <HAL_I2C_Master_Receive+0x224>)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f001 f810 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
 8003d18:	e20a      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2C_Master_Receive+0x50>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e203      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d007      	beq.n	8003d4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2222      	movs	r2, #34	@ 0x22
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	893a      	ldrh	r2, [r7, #8]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8003f00 <HAL_I2C_Master_Receive+0x228>)
 8003d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fd7e 	bl	8004898 <I2C_MasterRequestRead>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c4      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d113      	bne.n	8003dd6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e198      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d11b      	bne.n	8003e16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e178      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d11b      	bne.n	8003e56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	e158      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e7c:	e144      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	f200 80f1 	bhi.w	800406a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d123      	bne.n	8003ed8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f001 f8f5 	bl	8005084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e145      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ed6:	e117      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d14e      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4906      	ldr	r1, [pc, #24]	@ (8003f04 <HAL_I2C_Master_Receive+0x22c>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 ff20 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e11a      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
 8003efa:	bf00      	nop
 8003efc:	00100002 	.word	0x00100002
 8003f00:	ffff0000 	.word	0xffff0000
 8003f04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f7c:	e0c4      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	496c      	ldr	r1, [pc, #432]	@ (8004138 <HAL_I2C_Master_Receive+0x460>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fed1 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cb      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4955      	ldr	r1, [pc, #340]	@ (8004138 <HAL_I2C_Master_Receive+0x460>)
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fea3 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e09d      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004068:	e04e      	b.n	8004108 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f001 f808 	bl	8005084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e058      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d124      	bne.n	8004108 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f aeb6 	bne.w	8003e7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3728      	adds	r7, #40	@ 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	00010004 	.word	0x00010004

0800413c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004156:	f7fe ffb1 	bl	80030bc <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	f040 80d9 	bne.w	800431c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2319      	movs	r3, #25
 8004170:	2201      	movs	r2, #1
 8004172:	496d      	ldr	r1, [pc, #436]	@ (8004328 <HAL_I2C_Mem_Write+0x1ec>)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fddb 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	e0cc      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Mem_Write+0x56>
 800418e:	2302      	movs	r3, #2
 8004190:	e0c5      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d007      	beq.n	80041b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2221      	movs	r2, #33	@ 0x21
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2240      	movs	r2, #64	@ 0x40
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a4d      	ldr	r2, [pc, #308]	@ (800432c <HAL_I2C_Mem_Write+0x1f0>)
 80041f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041fa:	88f8      	ldrh	r0, [r7, #6]
 80041fc:	893a      	ldrh	r2, [r7, #8]
 80041fe:	8979      	ldrh	r1, [r7, #10]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4603      	mov	r3, r0
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fc12 	bl	8004a34 <I2C_RequestMemoryWrite>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d052      	beq.n	80042bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e081      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fea0 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2b04      	cmp	r3, #4
 8004230:	d107      	bne.n	8004242 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06b      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11b      	bne.n	80042bc <HAL_I2C_Mem_Write+0x180>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d017      	beq.n	80042bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1aa      	bne.n	800421a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fe93 	bl	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d107      	bne.n	80042ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e016      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	00100002 	.word	0x00100002
 800432c:	ffff0000 	.word	0xffff0000

08004330 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800434a:	f7fe feb7 	bl	80030bc <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	f040 8214 	bne.w	8004786 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2319      	movs	r3, #25
 8004364:	2201      	movs	r2, #1
 8004366:	497b      	ldr	r1, [pc, #492]	@ (8004554 <HAL_I2C_Mem_Read+0x224>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fce1 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
 8004376:	e207      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2C_Mem_Read+0x56>
 8004382:	2302      	movs	r3, #2
 8004384:	e200      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d007      	beq.n	80043ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2222      	movs	r2, #34	@ 0x22
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004558 <HAL_I2C_Mem_Read+0x228>)
 80043ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ee:	88f8      	ldrh	r0, [r7, #6]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4603      	mov	r3, r0
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fbae 	bl	8004b60 <I2C_RequestMemoryRead>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1bc      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d113      	bne.n	800443e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	623b      	str	r3, [r7, #32]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e190      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	2b01      	cmp	r3, #1
 8004444:	d11b      	bne.n	800447e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e170      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	2b02      	cmp	r3, #2
 8004484:	d11b      	bne.n	80044be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	e150      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044d4:	e144      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044da:	2b03      	cmp	r3, #3
 80044dc:	f200 80f1 	bhi.w	80046c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d123      	bne.n	8004530 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fdc9 	bl	8005084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e145      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800452e:	e117      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004534:	2b02      	cmp	r3, #2
 8004536:	d14e      	bne.n	80045d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	2200      	movs	r2, #0
 8004540:	4906      	ldr	r1, [pc, #24]	@ (800455c <HAL_I2C_Mem_Read+0x22c>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fbf4 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e11a      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
 8004552:	bf00      	nop
 8004554:	00100002 	.word	0x00100002
 8004558:	ffff0000 	.word	0xffff0000
 800455c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045d4:	e0c4      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	2200      	movs	r2, #0
 80045de:	496c      	ldr	r1, [pc, #432]	@ (8004790 <HAL_I2C_Mem_Read+0x460>)
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fba5 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0cb      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	2200      	movs	r2, #0
 800463a:	4955      	ldr	r1, [pc, #340]	@ (8004790 <HAL_I2C_Mem_Read+0x460>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fb77 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e09d      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046c0:	e04e      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fcdc 	bl	8005084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e058      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b04      	cmp	r3, #4
 8004714:	d124      	bne.n	8004760 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471a:	2b03      	cmp	r3, #3
 800471c:	d107      	bne.n	800472e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f aeb6 	bne.w	80044d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3728      	adds	r7, #40	@ 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	00010004 	.word	0x00010004

08004794 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	460b      	mov	r3, r1
 80047a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d006      	beq.n	80047be <I2C_MasterRequestWrite+0x2a>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d003      	beq.n	80047be <I2C_MasterRequestWrite+0x2a>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047bc:	d108      	bne.n	80047d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e00b      	b.n	80047e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	2b12      	cmp	r3, #18
 80047d6:	d107      	bne.n	80047e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa9b 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480e:	d103      	bne.n	8004818 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e035      	b.n	8004888 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004824:	d108      	bne.n	8004838 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004834:	611a      	str	r2, [r3, #16]
 8004836:	e01b      	b.n	8004870 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004838:	897b      	ldrh	r3, [r7, #10]
 800483a:	11db      	asrs	r3, r3, #7
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 0306 	and.w	r3, r3, #6
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f063 030f 	orn	r3, r3, #15
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <I2C_MasterRequestWrite+0xfc>)
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fae4 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e010      	b.n	8004888 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4907      	ldr	r1, [pc, #28]	@ (8004894 <I2C_MasterRequestWrite+0x100>)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fad4 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	00010008 	.word	0x00010008
 8004894:	00010002 	.word	0x00010002

08004898 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	460b      	mov	r3, r1
 80048a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d006      	beq.n	80048d2 <I2C_MasterRequestRead+0x3a>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d003      	beq.n	80048d2 <I2C_MasterRequestRead+0x3a>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d0:	d108      	bne.n	80048e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e00b      	b.n	80048fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	2b11      	cmp	r3, #17
 80048ea:	d107      	bne.n	80048fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fa11 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004922:	d103      	bne.n	800492c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800492a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e079      	b.n	8004a24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004938:	d108      	bne.n	800494c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	e05f      	b.n	8004a0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800494c:	897b      	ldrh	r3, [r7, #10]
 800494e:	11db      	asrs	r3, r3, #7
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f063 030f 	orn	r3, r3, #15
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4930      	ldr	r1, [pc, #192]	@ (8004a2c <I2C_MasterRequestRead+0x194>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fa5a 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e054      	b.n	8004a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4929      	ldr	r1, [pc, #164]	@ (8004a30 <I2C_MasterRequestRead+0x198>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa4a 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e044      	b.n	8004a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f9af 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e6:	d103      	bne.n	80049f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e017      	b.n	8004a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	11db      	asrs	r3, r3, #7
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0306 	and.w	r3, r3, #6
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f063 030e 	orn	r3, r3, #14
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4907      	ldr	r1, [pc, #28]	@ (8004a30 <I2C_MasterRequestRead+0x198>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fa06 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	00010008 	.word	0x00010008
 8004a30:	00010002 	.word	0x00010002

08004a34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f960 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a84:	d103      	bne.n	8004a8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e05f      	b.n	8004b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	492d      	ldr	r1, [pc, #180]	@ (8004b5c <I2C_RequestMemoryWrite+0x128>)
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f9bb 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e04c      	b.n	8004b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad0:	6a39      	ldr	r1, [r7, #32]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fa46 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d107      	bne.n	8004af6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e02b      	b.n	8004b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b00:	893b      	ldrh	r3, [r7, #8]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	611a      	str	r2, [r3, #16]
 8004b0a:	e021      	b.n	8004b50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b0c:	893b      	ldrh	r3, [r7, #8]
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	6a39      	ldr	r1, [r7, #32]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fa20 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d107      	bne.n	8004b42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e005      	b.n	8004b52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	00010002 	.word	0x00010002

08004b60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	460b      	mov	r3, r1
 8004b74:	813b      	strh	r3, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f8c2 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc0:	d103      	bne.n	8004bca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0aa      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bce:	897b      	ldrh	r3, [r7, #10]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	4952      	ldr	r1, [pc, #328]	@ (8004d2c <I2C_RequestMemoryRead+0x1cc>)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f91d 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e097      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0c:	6a39      	ldr	r1, [r7, #32]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f9a8 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00d      	beq.n	8004c36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d107      	bne.n	8004c32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e076      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3c:	893b      	ldrh	r3, [r7, #8]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]
 8004c46:	e021      	b.n	8004c8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	6a39      	ldr	r1, [r7, #32]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f982 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d107      	bne.n	8004c7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e050      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c82:	893b      	ldrh	r3, [r7, #8]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	6a39      	ldr	r1, [r7, #32]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f967 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00d      	beq.n	8004cb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d107      	bne.n	8004cb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e035      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f82b 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cee:	d103      	bne.n	8004cf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e013      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cfc:	897b      	ldrh	r3, [r7, #10]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	4906      	ldr	r1, [pc, #24]	@ (8004d2c <I2C_RequestMemoryRead+0x1cc>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f886 	bl	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	00010002 	.word	0x00010002

08004d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d40:	e048      	b.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d044      	beq.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fe f9b7 	bl	80030bc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d139      	bne.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10d      	bne.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	43da      	mvns	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	e00c      	b.n	8004da0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	43da      	mvns	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d116      	bne.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e023      	b.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	0c1b      	lsrs	r3, r3, #16
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	43da      	mvns	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	e00c      	b.n	8004e14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	43da      	mvns	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d093      	beq.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e32:	e071      	b.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e42:	d123      	bne.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f043 0204 	orr.w	r2, r3, #4
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e067      	b.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d041      	beq.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fe f912 	bl	80030bc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d136      	bne.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10c      	bne.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e00b      	b.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	43da      	mvns	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e021      	b.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	0c1b      	lsrs	r3, r3, #16
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10c      	bne.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e00b      	b.n	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	43da      	mvns	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f af6d 	bne.w	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f70:	e034      	b.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f8e3 	bl	800513e <I2C_IsAcknowledgeFailed>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e034      	b.n	8004fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d028      	beq.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8a:	f7fe f897 	bl	80030bc <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11d      	bne.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d016      	beq.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e007      	b.n	8004fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b80      	cmp	r3, #128	@ 0x80
 8004fe8:	d1c3      	bne.n	8004f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005000:	e034      	b.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f89b 	bl	800513e <I2C_IsAcknowledgeFailed>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e034      	b.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d028      	beq.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fe f84f 	bl	80030bc <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11d      	bne.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d016      	beq.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e007      	b.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b04      	cmp	r3, #4
 8005078:	d1c3      	bne.n	8005002 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005090:	e049      	b.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d119      	bne.n	80050d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0210 	mvn.w	r2, #16
 80050a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e030      	b.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fd fff2 	bl	80030bc <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11d      	bne.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	d016      	beq.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e007      	b.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d1ae      	bne.n	8005092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005154:	d11b      	bne.n	800518e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800515e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f043 0204 	orr.w	r2, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0cc      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b68      	ldr	r3, [pc, #416]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d90c      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b63      	ldr	r3, [pc, #396]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0b8      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f0:	4b59      	ldr	r3, [pc, #356]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a58      	ldr	r2, [pc, #352]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005208:	4b53      	ldr	r3, [pc, #332]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a52      	ldr	r2, [pc, #328]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	4b50      	ldr	r3, [pc, #320]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	494d      	ldr	r1, [pc, #308]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d044      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523a:	4b47      	ldr	r3, [pc, #284]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d119      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d003      	beq.n	800525a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005256:	2b03      	cmp	r3, #3
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b3f      	ldr	r3, [pc, #252]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3b      	ldr	r3, [pc, #236]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e067      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b37      	ldr	r3, [pc, #220]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4934      	ldr	r1, [pc, #208]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fd ff16 	bl	80030bc <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fd ff12 	bl	80030bc <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d20c      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b22      	ldr	r3, [pc, #136]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b20      	ldr	r3, [pc, #128]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e032      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4916      	ldr	r1, [pc, #88]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530e:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	490e      	ldr	r1, [pc, #56]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005322:	f000 f887 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 8005326:	4602      	mov	r2, r0
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	490a      	ldr	r1, [pc, #40]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	5ccb      	ldrb	r3, [r1, r3]
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800533e:	4b09      	ldr	r3, [pc, #36]	@ (8005364 <HAL_RCC_ClockConfig+0x1c8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd fcfc 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023c00 	.word	0x40023c00
 8005358:	40023800 	.word	0x40023800
 800535c:	0800ee78 	.word	0x0800ee78
 8005360:	20000000 	.word	0x20000000
 8005364:	20000004 	.word	0x20000004

08005368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <HAL_RCC_GetHCLKFreq+0x14>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000000 	.word	0x20000000

08005380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005384:	f7ff fff0 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	0a9b      	lsrs	r3, r3, #10
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	4903      	ldr	r1, [pc, #12]	@ (80053a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40023800 	.word	0x40023800
 80053a4:	0800ee88 	.word	0x0800ee88

080053a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053ac:	f7ff ffdc 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0b5b      	lsrs	r3, r3, #13
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	4903      	ldr	r1, [pc, #12]	@ (80053cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053be:	5ccb      	ldrb	r3, [r1, r3]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	0800ee88 	.word	0x0800ee88

080053d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	220f      	movs	r2, #15
 80053de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053e0:	4b12      	ldr	r3, [pc, #72]	@ (800542c <HAL_RCC_GetClockConfig+0x5c>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0203 	and.w	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053ec:	4b0f      	ldr	r3, [pc, #60]	@ (800542c <HAL_RCC_GetClockConfig+0x5c>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053f8:	4b0c      	ldr	r3, [pc, #48]	@ (800542c <HAL_RCC_GetClockConfig+0x5c>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005404:	4b09      	ldr	r3, [pc, #36]	@ (800542c <HAL_RCC_GetClockConfig+0x5c>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	08db      	lsrs	r3, r3, #3
 800540a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005412:	4b07      	ldr	r3, [pc, #28]	@ (8005430 <HAL_RCC_GetClockConfig+0x60>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	601a      	str	r2, [r3, #0]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800
 8005430:	40023c00 	.word	0x40023c00

08005434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005438:	b0ae      	sub	sp, #184	@ 0xb8
 800543a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800545a:	4bcb      	ldr	r3, [pc, #812]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b0c      	cmp	r3, #12
 8005464:	f200 8206 	bhi.w	8005874 <HAL_RCC_GetSysClockFreq+0x440>
 8005468:	a201      	add	r2, pc, #4	@ (adr r2, 8005470 <HAL_RCC_GetSysClockFreq+0x3c>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	080054a5 	.word	0x080054a5
 8005474:	08005875 	.word	0x08005875
 8005478:	08005875 	.word	0x08005875
 800547c:	08005875 	.word	0x08005875
 8005480:	080054ad 	.word	0x080054ad
 8005484:	08005875 	.word	0x08005875
 8005488:	08005875 	.word	0x08005875
 800548c:	08005875 	.word	0x08005875
 8005490:	080054b5 	.word	0x080054b5
 8005494:	08005875 	.word	0x08005875
 8005498:	08005875 	.word	0x08005875
 800549c:	08005875 	.word	0x08005875
 80054a0:	080056a5 	.word	0x080056a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054a4:	4bb9      	ldr	r3, [pc, #740]	@ (800578c <HAL_RCC_GetSysClockFreq+0x358>)
 80054a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054aa:	e1e7      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ac:	4bb8      	ldr	r3, [pc, #736]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054b2:	e1e3      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b4:	4bb4      	ldr	r3, [pc, #720]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054c0:	4bb1      	ldr	r3, [pc, #708]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d071      	beq.n	80055b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054cc:	4bae      	ldr	r3, [pc, #696]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80054dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054f2:	4622      	mov	r2, r4
 80054f4:	462b      	mov	r3, r5
 80054f6:	f04f 0000 	mov.w	r0, #0
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	0159      	lsls	r1, r3, #5
 8005500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005504:	0150      	lsls	r0, r2, #5
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4621      	mov	r1, r4
 800550c:	1a51      	subs	r1, r2, r1
 800550e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005510:	4629      	mov	r1, r5
 8005512:	eb63 0301 	sbc.w	r3, r3, r1
 8005516:	647b      	str	r3, [r7, #68]	@ 0x44
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005524:	4649      	mov	r1, r9
 8005526:	018b      	lsls	r3, r1, #6
 8005528:	4641      	mov	r1, r8
 800552a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800552e:	4641      	mov	r1, r8
 8005530:	018a      	lsls	r2, r1, #6
 8005532:	4641      	mov	r1, r8
 8005534:	1a51      	subs	r1, r2, r1
 8005536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005538:	4649      	mov	r1, r9
 800553a:	eb63 0301 	sbc.w	r3, r3, r1
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800554c:	4649      	mov	r1, r9
 800554e:	00cb      	lsls	r3, r1, #3
 8005550:	4641      	mov	r1, r8
 8005552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005556:	4641      	mov	r1, r8
 8005558:	00ca      	lsls	r2, r1, #3
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	4603      	mov	r3, r0
 8005560:	4622      	mov	r2, r4
 8005562:	189b      	adds	r3, r3, r2
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
 8005566:	462b      	mov	r3, r5
 8005568:	460a      	mov	r2, r1
 800556a:	eb42 0303 	adc.w	r3, r2, r3
 800556e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800557c:	4629      	mov	r1, r5
 800557e:	024b      	lsls	r3, r1, #9
 8005580:	4621      	mov	r1, r4
 8005582:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005586:	4621      	mov	r1, r4
 8005588:	024a      	lsls	r2, r1, #9
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005598:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800559c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80055a0:	f7fb fb22 	bl	8000be8 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ae:	e067      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b0:	4b75      	ldr	r3, [pc, #468]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	099b      	lsrs	r3, r3, #6
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80055c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ca:	2300      	movs	r3, #0
 80055cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	0159      	lsls	r1, r3, #5
 80055e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e4:	0150      	lsls	r0, r2, #5
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4621      	mov	r1, r4
 80055ec:	1a51      	subs	r1, r2, r1
 80055ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80055f0:	4629      	mov	r1, r5
 80055f2:	eb63 0301 	sbc.w	r3, r3, r1
 80055f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005604:	4649      	mov	r1, r9
 8005606:	018b      	lsls	r3, r1, #6
 8005608:	4641      	mov	r1, r8
 800560a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800560e:	4641      	mov	r1, r8
 8005610:	018a      	lsls	r2, r1, #6
 8005612:	4641      	mov	r1, r8
 8005614:	ebb2 0a01 	subs.w	sl, r2, r1
 8005618:	4649      	mov	r1, r9
 800561a:	eb63 0b01 	sbc.w	fp, r3, r1
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800562a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800562e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005632:	4692      	mov	sl, r2
 8005634:	469b      	mov	fp, r3
 8005636:	4623      	mov	r3, r4
 8005638:	eb1a 0303 	adds.w	r3, sl, r3
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	462b      	mov	r3, r5
 8005640:	eb4b 0303 	adc.w	r3, fp, r3
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005652:	4629      	mov	r1, r5
 8005654:	028b      	lsls	r3, r1, #10
 8005656:	4621      	mov	r1, r4
 8005658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800565c:	4621      	mov	r1, r4
 800565e:	028a      	lsls	r2, r1, #10
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005668:	2200      	movs	r2, #0
 800566a:	673b      	str	r3, [r7, #112]	@ 0x70
 800566c:	677a      	str	r2, [r7, #116]	@ 0x74
 800566e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005672:	f7fb fab9 	bl	8000be8 <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4613      	mov	r3, r2
 800567c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005680:	4b41      	ldr	r3, [pc, #260]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	3301      	adds	r3, #1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056a2:	e0eb      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a4:	4b38      	ldr	r3, [pc, #224]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b0:	4b35      	ldr	r3, [pc, #212]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d06b      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056bc:	4b32      	ldr	r3, [pc, #200]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x354>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	2200      	movs	r2, #0
 80056c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80056d0:	2300      	movs	r3, #0
 80056d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80056d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80056d8:	4622      	mov	r2, r4
 80056da:	462b      	mov	r3, r5
 80056dc:	f04f 0000 	mov.w	r0, #0
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	0159      	lsls	r1, r3, #5
 80056e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ea:	0150      	lsls	r0, r2, #5
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4621      	mov	r1, r4
 80056f2:	1a51      	subs	r1, r2, r1
 80056f4:	61b9      	str	r1, [r7, #24]
 80056f6:	4629      	mov	r1, r5
 80056f8:	eb63 0301 	sbc.w	r3, r3, r1
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800570a:	4659      	mov	r1, fp
 800570c:	018b      	lsls	r3, r1, #6
 800570e:	4651      	mov	r1, sl
 8005710:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005714:	4651      	mov	r1, sl
 8005716:	018a      	lsls	r2, r1, #6
 8005718:	4651      	mov	r1, sl
 800571a:	ebb2 0801 	subs.w	r8, r2, r1
 800571e:	4659      	mov	r1, fp
 8005720:	eb63 0901 	sbc.w	r9, r3, r1
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005738:	4690      	mov	r8, r2
 800573a:	4699      	mov	r9, r3
 800573c:	4623      	mov	r3, r4
 800573e:	eb18 0303 	adds.w	r3, r8, r3
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	462b      	mov	r3, r5
 8005746:	eb49 0303 	adc.w	r3, r9, r3
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005758:	4629      	mov	r1, r5
 800575a:	024b      	lsls	r3, r1, #9
 800575c:	4621      	mov	r1, r4
 800575e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005762:	4621      	mov	r1, r4
 8005764:	024a      	lsls	r2, r1, #9
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800576e:	2200      	movs	r2, #0
 8005770:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005772:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005774:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005778:	f7fb fa36 	bl	8000be8 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4613      	mov	r3, r2
 8005782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005786:	e065      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x420>
 8005788:	40023800 	.word	0x40023800
 800578c:	00f42400 	.word	0x00f42400
 8005790:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005794:	4b3d      	ldr	r3, [pc, #244]	@ (800588c <HAL_RCC_GetSysClockFreq+0x458>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	099b      	lsrs	r3, r3, #6
 800579a:	2200      	movs	r2, #0
 800579c:	4618      	mov	r0, r3
 800579e:	4611      	mov	r1, r2
 80057a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80057a6:	2300      	movs	r3, #0
 80057a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80057aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80057ae:	4642      	mov	r2, r8
 80057b0:	464b      	mov	r3, r9
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f04f 0100 	mov.w	r1, #0
 80057ba:	0159      	lsls	r1, r3, #5
 80057bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c0:	0150      	lsls	r0, r2, #5
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4641      	mov	r1, r8
 80057c8:	1a51      	subs	r1, r2, r1
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	4649      	mov	r1, r9
 80057ce:	eb63 0301 	sbc.w	r3, r3, r1
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80057e0:	4659      	mov	r1, fp
 80057e2:	018b      	lsls	r3, r1, #6
 80057e4:	4651      	mov	r1, sl
 80057e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ea:	4651      	mov	r1, sl
 80057ec:	018a      	lsls	r2, r1, #6
 80057ee:	4651      	mov	r1, sl
 80057f0:	1a54      	subs	r4, r2, r1
 80057f2:	4659      	mov	r1, fp
 80057f4:	eb63 0501 	sbc.w	r5, r3, r1
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	00eb      	lsls	r3, r5, #3
 8005802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005806:	00e2      	lsls	r2, r4, #3
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	4643      	mov	r3, r8
 800580e:	18e3      	adds	r3, r4, r3
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	464b      	mov	r3, r9
 8005814:	eb45 0303 	adc.w	r3, r5, r3
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005826:	4629      	mov	r1, r5
 8005828:	028b      	lsls	r3, r1, #10
 800582a:	4621      	mov	r1, r4
 800582c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005830:	4621      	mov	r1, r4
 8005832:	028a      	lsls	r2, r1, #10
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800583c:	2200      	movs	r2, #0
 800583e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005840:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005842:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005846:	f7fb f9cf 	bl	8000be8 <__aeabi_uldivmod>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4613      	mov	r3, r2
 8005850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005854:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <HAL_RCC_GetSysClockFreq+0x458>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0f1b      	lsrs	r3, r3, #28
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005872:	e003      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005874:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800587a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800587c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005880:	4618      	mov	r0, r3
 8005882:	37b8      	adds	r7, #184	@ 0xb8
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800
 8005890:	00f42400 	.word	0x00f42400

08005894 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e28d      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8083 	beq.w	80059ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058b4:	4b94      	ldr	r3, [pc, #592]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d019      	beq.n	80058f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058c0:	4b91      	ldr	r3, [pc, #580]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058d8:	d00c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058da:	4b8b      	ldr	r3, [pc, #556]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d112      	bne.n	800590c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e6:	4b88      	ldr	r3, [pc, #544]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f2:	d10b      	bne.n	800590c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	4b84      	ldr	r3, [pc, #528]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05b      	beq.n	80059b8 <HAL_RCC_OscConfig+0x124>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d157      	bne.n	80059b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e25a      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005914:	d106      	bne.n	8005924 <HAL_RCC_OscConfig+0x90>
 8005916:	4b7c      	ldr	r3, [pc, #496]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e01d      	b.n	8005960 <HAL_RCC_OscConfig+0xcc>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0xb4>
 800592e:	4b76      	ldr	r3, [pc, #472]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a75      	ldr	r2, [pc, #468]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4b73      	ldr	r3, [pc, #460]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a72      	ldr	r2, [pc, #456]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0xcc>
 8005948:	4b6f      	ldr	r3, [pc, #444]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 800594e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b6c      	ldr	r3, [pc, #432]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a6b      	ldr	r2, [pc, #428]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 800595a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800595e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fd fba8 	bl	80030bc <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005970:	f7fd fba4 	bl	80030bc <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	@ 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e21f      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005982:	4b61      	ldr	r3, [pc, #388]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0xdc>
 800598e:	e014      	b.n	80059ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fb94 	bl	80030bc <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fd fb90 	bl	80030bc <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	@ 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e20b      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059aa:	4b57      	ldr	r3, [pc, #348]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x104>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d06f      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059c6:	4b50      	ldr	r3, [pc, #320]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d017      	beq.n	8005a02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059d2:	4b4d      	ldr	r3, [pc, #308]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d105      	bne.n	80059ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059de:	4b4a      	ldr	r3, [pc, #296]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ea:	4b47      	ldr	r3, [pc, #284]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d11c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f6:	4b44      	ldr	r3, [pc, #272]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d116      	bne.n	8005a30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a02:	4b41      	ldr	r3, [pc, #260]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCC_OscConfig+0x186>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e1d3      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4937      	ldr	r1, [pc, #220]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2e:	e03a      	b.n	8005aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a38:	4b34      	ldr	r3, [pc, #208]	@ (8005b0c <HAL_RCC_OscConfig+0x278>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3e:	f7fd fb3d 	bl	80030bc <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a46:	f7fd fb39 	bl	80030bc <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e1b4      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a58:	4b2b      	ldr	r3, [pc, #172]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a64:	4b28      	ldr	r3, [pc, #160]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	4925      	ldr	r1, [pc, #148]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]
 8005a78:	e015      	b.n	8005aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a7a:	4b24      	ldr	r3, [pc, #144]	@ (8005b0c <HAL_RCC_OscConfig+0x278>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fd fb1c 	bl	80030bc <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a88:	f7fd fb18 	bl	80030bc <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e193      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d036      	beq.n	8005b20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aba:	4b15      	ldr	r3, [pc, #84]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fd fafc 	bl	80030bc <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac8:	f7fd faf8 	bl	80030bc <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e173      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ada:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <HAL_RCC_OscConfig+0x274>)
 8005adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x234>
 8005ae6:	e01b      	b.n	8005b20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae8:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fd fae5 	bl	80030bc <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af4:	e00e      	b.n	8005b14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af6:	f7fd fae1 	bl	80030bc <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d907      	bls.n	8005b14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e15c      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	42470000 	.word	0x42470000
 8005b10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	4b8a      	ldr	r3, [pc, #552]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ea      	bne.n	8005af6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8097 	beq.w	8005c5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b32:	4b83      	ldr	r3, [pc, #524]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	4b7f      	ldr	r3, [pc, #508]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	4a7e      	ldr	r2, [pc, #504]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5e:	4b79      	ldr	r3, [pc, #484]	@ (8005d44 <HAL_RCC_OscConfig+0x4b0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d118      	bne.n	8005b9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b6a:	4b76      	ldr	r3, [pc, #472]	@ (8005d44 <HAL_RCC_OscConfig+0x4b0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a75      	ldr	r2, [pc, #468]	@ (8005d44 <HAL_RCC_OscConfig+0x4b0>)
 8005b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b76:	f7fd faa1 	bl	80030bc <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7e:	f7fd fa9d 	bl	80030bc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e118      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b90:	4b6c      	ldr	r3, [pc, #432]	@ (8005d44 <HAL_RCC_OscConfig+0x4b0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x31e>
 8005ba4:	4b66      	ldr	r3, [pc, #408]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba8:	4a65      	ldr	r2, [pc, #404]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb0:	e01c      	b.n	8005bec <HAL_RCC_OscConfig+0x358>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x340>
 8005bba:	4b61      	ldr	r3, [pc, #388]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbe:	4a60      	ldr	r2, [pc, #384]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005bc0:	f043 0304 	orr.w	r3, r3, #4
 8005bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bca:	4a5d      	ldr	r2, [pc, #372]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0x358>
 8005bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd8:	4a59      	ldr	r2, [pc, #356]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be0:	4b57      	ldr	r3, [pc, #348]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be4:	4a56      	ldr	r2, [pc, #344]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fd fa62 	bl	80030bc <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfc:	f7fd fa5e 	bl	80030bc <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e0d7      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	4b4b      	ldr	r3, [pc, #300]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0ee      	beq.n	8005bfc <HAL_RCC_OscConfig+0x368>
 8005c1e:	e014      	b.n	8005c4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fd fa4c 	bl	80030bc <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fd fa48 	bl	80030bc <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0c1      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3e:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ee      	bne.n	8005c28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	4a3a      	ldr	r2, [pc, #232]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80ad 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c66:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d060      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d145      	bne.n	8005d06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7a:	4b33      	ldr	r3, [pc, #204]	@ (8005d48 <HAL_RCC_OscConfig+0x4b4>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fd fa1c 	bl	80030bc <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fd fa18 	bl	80030bc <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e093      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	4b29      	ldr	r3, [pc, #164]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd0:	071b      	lsls	r3, r3, #28
 8005cd2:	491b      	ldr	r1, [pc, #108]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d48 <HAL_RCC_OscConfig+0x4b4>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fd f9ed 	bl	80030bc <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fd f9e9 	bl	80030bc <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e064      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf8:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x452>
 8005d04:	e05c      	b.n	8005dc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d06:	4b10      	ldr	r3, [pc, #64]	@ (8005d48 <HAL_RCC_OscConfig+0x4b4>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fd f9d6 	bl	80030bc <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fd f9d2 	bl	80030bc <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e04d      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d26:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_RCC_OscConfig+0x4ac>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x480>
 8005d32:	e045      	b.n	8005dc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e040      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40007000 	.word	0x40007000
 8005d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dcc <HAL_RCC_OscConfig+0x538>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d030      	beq.n	8005dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d129      	bne.n	8005dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d122      	bne.n	8005dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d119      	bne.n	8005dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	3b01      	subs	r3, #1
 8005d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d10f      	bne.n	8005dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40023800 	.word	0x40023800

08005dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e041      	b.n	8005e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc fe4e 	bl	8002a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f000 fd8c 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e04e      	b.n	8005f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a23      	ldr	r2, [pc, #140]	@ (8005f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d111      	bne.n	8005f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b06      	cmp	r3, #6
 8005f00:	d010      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	e007      	b.n	8005f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40010400 	.word	0x40010400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40001800 	.word	0x40001800

08005f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e041      	b.n	8005fe6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc fdae 	bl	8002ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	f000 fccc 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <HAL_TIM_PWM_Start+0x24>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e022      	b.n	800605a <HAL_TIM_PWM_Start+0x6a>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b04      	cmp	r3, #4
 8006018:	d109      	bne.n	800602e <HAL_TIM_PWM_Start+0x3e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	bf14      	ite	ne
 8006026:	2301      	movne	r3, #1
 8006028:	2300      	moveq	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	e015      	b.n	800605a <HAL_TIM_PWM_Start+0x6a>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d109      	bne.n	8006048 <HAL_TIM_PWM_Start+0x58>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e008      	b.n	800605a <HAL_TIM_PWM_Start+0x6a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e07c      	b.n	800615c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <HAL_TIM_PWM_Start+0x82>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006070:	e013      	b.n	800609a <HAL_TIM_PWM_Start+0xaa>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d104      	bne.n	8006082 <HAL_TIM_PWM_Start+0x92>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006080:	e00b      	b.n	800609a <HAL_TIM_PWM_Start+0xaa>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b08      	cmp	r3, #8
 8006086:	d104      	bne.n	8006092 <HAL_TIM_PWM_Start+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006090:	e003      	b.n	800609a <HAL_TIM_PWM_Start+0xaa>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 ff38 	bl	8006f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006164 <HAL_TIM_PWM_Start+0x174>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <HAL_TIM_PWM_Start+0xcc>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006168 <HAL_TIM_PWM_Start+0x178>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_TIM_PWM_Start+0xd0>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_TIM_PWM_Start+0xd2>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a22      	ldr	r2, [pc, #136]	@ (8006164 <HAL_TIM_PWM_Start+0x174>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d022      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e8:	d01d      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1f      	ldr	r2, [pc, #124]	@ (800616c <HAL_TIM_PWM_Start+0x17c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d018      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006170 <HAL_TIM_PWM_Start+0x180>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d013      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1c      	ldr	r2, [pc, #112]	@ (8006174 <HAL_TIM_PWM_Start+0x184>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00e      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a16      	ldr	r2, [pc, #88]	@ (8006168 <HAL_TIM_PWM_Start+0x178>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	@ (8006178 <HAL_TIM_PWM_Start+0x188>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_TIM_PWM_Start+0x136>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a16      	ldr	r2, [pc, #88]	@ (800617c <HAL_TIM_PWM_Start+0x18c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d111      	bne.n	800614a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b06      	cmp	r3, #6
 8006136:	d010      	beq.n	800615a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	e007      	b.n	800615a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40014000 	.word	0x40014000
 800617c:	40001800 	.word	0x40001800

08006180 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e097      	b.n	80062c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fc fbf7 	bl	800299c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061c4:	f023 0307 	bic.w	r3, r3, #7
 80061c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f000 fba9 	bl	800692c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	4313      	orrs	r3, r2
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006220:	f023 030c 	bic.w	r3, r3, #12
 8006224:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800622c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	4313      	orrs	r3, r2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	011a      	lsls	r2, r3, #4
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	031b      	lsls	r3, r3, #12
 8006250:	4313      	orrs	r3, r2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006266:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	4313      	orrs	r3, r2
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d110      	bne.n	800631e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d102      	bne.n	8006308 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006302:	7b7b      	ldrb	r3, [r7, #13]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d001      	beq.n	800630c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e069      	b.n	80063e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800631c:	e031      	b.n	8006382 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d110      	bne.n	8006346 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d102      	bne.n	8006330 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800632a:	7b3b      	ldrb	r3, [r7, #12]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d001      	beq.n	8006334 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e055      	b.n	80063e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006344:	e01d      	b.n	8006382 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d108      	bne.n	800635e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d105      	bne.n	800635e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006352:	7b7b      	ldrb	r3, [r7, #13]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d102      	bne.n	800635e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006358:	7b3b      	ldrb	r3, [r7, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d001      	beq.n	8006362 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e03e      	b.n	80063e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_TIM_Encoder_Start+0xc4>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d008      	beq.n	80063a0 <HAL_TIM_Encoder_Start+0xd4>
 800638e:	e00f      	b.n	80063b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2201      	movs	r2, #1
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fdbd 	bl	8006f18 <TIM_CCxChannelCmd>
      break;
 800639e:	e016      	b.n	80063ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	2104      	movs	r1, #4
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fdb5 	bl	8006f18 <TIM_CCxChannelCmd>
      break;
 80063ae:	e00e      	b.n	80063ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2201      	movs	r2, #1
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fdad 	bl	8006f18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2201      	movs	r2, #1
 80063c4:	2104      	movs	r1, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fda6 	bl	8006f18 <TIM_CCxChannelCmd>
      break;
 80063cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d020      	beq.n	800644c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01b      	beq.n	800644c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0202 	mvn.w	r2, #2
 800641c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa5b 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 8006438:	e005      	b.n	8006446 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa4d 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fa5e 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d020      	beq.n	8006498 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01b      	beq.n	8006498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0204 	mvn.w	r2, #4
 8006468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa35 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 8006484:	e005      	b.n	8006492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa27 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fa38 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d020      	beq.n	80064e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01b      	beq.n	80064e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0208 	mvn.w	r2, #8
 80064b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2204      	movs	r2, #4
 80064ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa0f 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa01 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa12 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d020      	beq.n	8006530 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01b      	beq.n	8006530 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0210 	mvn.w	r2, #16
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2208      	movs	r2, #8
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9e9 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9db 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f9ec 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00c      	beq.n	8006554 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0201 	mvn.w	r2, #1
 800654c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fc f998 	bl	8002884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fdce 	bl	8007114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9bd 	bl	8006916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0220 	mvn.w	r2, #32
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fda0 	bl	8007100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e0ae      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	f200 809f 	bhi.w	8006734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065f6:	a201      	add	r2, pc, #4	@ (adr r2, 80065fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006735 	.word	0x08006735
 8006604:	08006735 	.word	0x08006735
 8006608:	08006735 	.word	0x08006735
 800660c:	08006671 	.word	0x08006671
 8006610:	08006735 	.word	0x08006735
 8006614:	08006735 	.word	0x08006735
 8006618:	08006735 	.word	0x08006735
 800661c:	080066b3 	.word	0x080066b3
 8006620:	08006735 	.word	0x08006735
 8006624:	08006735 	.word	0x08006735
 8006628:	08006735 	.word	0x08006735
 800662c:	080066f3 	.word	0x080066f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fa24 	bl	8006a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6999      	ldr	r1, [r3, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	619a      	str	r2, [r3, #24]
      break;
 800666e:	e064      	b.n	800673a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fa74 	bl	8006b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	619a      	str	r2, [r3, #24]
      break;
 80066b0:	e043      	b.n	800673a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fac9 	bl	8006c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0208 	orr.w	r2, r2, #8
 80066cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0204 	bic.w	r2, r2, #4
 80066dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69d9      	ldr	r1, [r3, #28]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	61da      	str	r2, [r3, #28]
      break;
 80066f0:	e023      	b.n	800673a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fb1d 	bl	8006d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	021a      	lsls	r2, r3, #8
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	61da      	str	r2, [r3, #28]
      break;
 8006732:	e002      	b.n	800673a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIM_ConfigClockSource+0x1c>
 8006764:	2302      	movs	r3, #2
 8006766:	e0b4      	b.n	80068d2 <HAL_TIM_ConfigClockSource+0x186>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800678e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a0:	d03e      	beq.n	8006820 <HAL_TIM_ConfigClockSource+0xd4>
 80067a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a6:	f200 8087 	bhi.w	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ae:	f000 8086 	beq.w	80068be <HAL_TIM_ConfigClockSource+0x172>
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b6:	d87f      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067b8:	2b70      	cmp	r3, #112	@ 0x70
 80067ba:	d01a      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0xa6>
 80067bc:	2b70      	cmp	r3, #112	@ 0x70
 80067be:	d87b      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067c0:	2b60      	cmp	r3, #96	@ 0x60
 80067c2:	d050      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x11a>
 80067c4:	2b60      	cmp	r3, #96	@ 0x60
 80067c6:	d877      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067c8:	2b50      	cmp	r3, #80	@ 0x50
 80067ca:	d03c      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0xfa>
 80067cc:	2b50      	cmp	r3, #80	@ 0x50
 80067ce:	d873      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067d0:	2b40      	cmp	r3, #64	@ 0x40
 80067d2:	d058      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x13a>
 80067d4:	2b40      	cmp	r3, #64	@ 0x40
 80067d6:	d86f      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067d8:	2b30      	cmp	r3, #48	@ 0x30
 80067da:	d064      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x15a>
 80067dc:	2b30      	cmp	r3, #48	@ 0x30
 80067de:	d86b      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d060      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x15a>
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d867      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d05c      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x15a>
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d05a      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x15a>
 80067f0:	e062      	b.n	80068b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006802:	f000 fb69 	bl	8006ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	609a      	str	r2, [r3, #8]
      break;
 800681e:	e04f      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006830:	f000 fb52 	bl	8006ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006842:	609a      	str	r2, [r3, #8]
      break;
 8006844:	e03c      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	461a      	mov	r2, r3
 8006854:	f000 fac6 	bl	8006de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2150      	movs	r1, #80	@ 0x50
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fb1f 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006864:	e02c      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	461a      	mov	r2, r3
 8006874:	f000 fae5 	bl	8006e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2160      	movs	r1, #96	@ 0x60
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fb0f 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006884:	e01c      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	461a      	mov	r2, r3
 8006894:	f000 faa6 	bl	8006de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2140      	movs	r1, #64	@ 0x40
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 faff 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 80068a4:	e00c      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f000 faf6 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 80068b6:	e003      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
      break;
 80068bc:	e000      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a46      	ldr	r2, [pc, #280]	@ (8006a58 <TIM_Base_SetConfig+0x12c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694a:	d00f      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a43      	ldr	r2, [pc, #268]	@ (8006a5c <TIM_Base_SetConfig+0x130>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a42      	ldr	r2, [pc, #264]	@ (8006a60 <TIM_Base_SetConfig+0x134>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a41      	ldr	r2, [pc, #260]	@ (8006a64 <TIM_Base_SetConfig+0x138>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a40      	ldr	r2, [pc, #256]	@ (8006a68 <TIM_Base_SetConfig+0x13c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a35      	ldr	r2, [pc, #212]	@ (8006a58 <TIM_Base_SetConfig+0x12c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d02b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698c:	d027      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a32      	ldr	r2, [pc, #200]	@ (8006a5c <TIM_Base_SetConfig+0x130>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d023      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a31      	ldr	r2, [pc, #196]	@ (8006a60 <TIM_Base_SetConfig+0x134>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01f      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a30      	ldr	r2, [pc, #192]	@ (8006a64 <TIM_Base_SetConfig+0x138>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006a68 <TIM_Base_SetConfig+0x13c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d017      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2e      	ldr	r2, [pc, #184]	@ (8006a6c <TIM_Base_SetConfig+0x140>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006a70 <TIM_Base_SetConfig+0x144>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00f      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006a74 <TIM_Base_SetConfig+0x148>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006a78 <TIM_Base_SetConfig+0x14c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a7c <TIM_Base_SetConfig+0x150>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a29      	ldr	r2, [pc, #164]	@ (8006a80 <TIM_Base_SetConfig+0x154>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a10      	ldr	r2, [pc, #64]	@ (8006a58 <TIM_Base_SetConfig+0x12c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0xf8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a12      	ldr	r2, [pc, #72]	@ (8006a68 <TIM_Base_SetConfig+0x13c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d103      	bne.n	8006a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d105      	bne.n	8006a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	611a      	str	r2, [r3, #16]
  }
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40010400 	.word	0x40010400
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800
 8006a78:	40001800 	.word	0x40001800
 8006a7c:	40001c00 	.word	0x40001c00
 8006a80:	40002000 	.word	0x40002000

08006a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f023 0201 	bic.w	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f023 0302 	bic.w	r3, r3, #2
 8006acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a20      	ldr	r2, [pc, #128]	@ (8006b5c <TIM_OC1_SetConfig+0xd8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC1_SetConfig+0x64>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b60 <TIM_OC1_SetConfig+0xdc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10c      	bne.n	8006b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0308 	bic.w	r3, r3, #8
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a15      	ldr	r2, [pc, #84]	@ (8006b5c <TIM_OC1_SetConfig+0xd8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_OC1_SetConfig+0x8e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	@ (8006b60 <TIM_OC1_SetConfig+0xdc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d111      	bne.n	8006b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010400 	.word	0x40010400

08006b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f023 0210 	bic.w	r2, r3, #16
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0320 	bic.w	r3, r3, #32
 8006bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a22      	ldr	r2, [pc, #136]	@ (8006c48 <TIM_OC2_SetConfig+0xe4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_OC2_SetConfig+0x68>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a21      	ldr	r2, [pc, #132]	@ (8006c4c <TIM_OC2_SetConfig+0xe8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10d      	bne.n	8006be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a17      	ldr	r2, [pc, #92]	@ (8006c48 <TIM_OC2_SetConfig+0xe4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC2_SetConfig+0x94>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a16      	ldr	r2, [pc, #88]	@ (8006c4c <TIM_OC2_SetConfig+0xe8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d113      	bne.n	8006c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40010400 	.word	0x40010400

08006c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a21      	ldr	r2, [pc, #132]	@ (8006d30 <TIM_OC3_SetConfig+0xe0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x66>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a20      	ldr	r2, [pc, #128]	@ (8006d34 <TIM_OC3_SetConfig+0xe4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10d      	bne.n	8006cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a16      	ldr	r2, [pc, #88]	@ (8006d30 <TIM_OC3_SetConfig+0xe0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_OC3_SetConfig+0x92>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a15      	ldr	r2, [pc, #84]	@ (8006d34 <TIM_OC3_SetConfig+0xe4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d113      	bne.n	8006d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	621a      	str	r2, [r3, #32]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	031b      	lsls	r3, r3, #12
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a12      	ldr	r2, [pc, #72]	@ (8006ddc <TIM_OC4_SetConfig+0xa4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC4_SetConfig+0x68>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a11      	ldr	r2, [pc, #68]	@ (8006de0 <TIM_OC4_SetConfig+0xa8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d109      	bne.n	8006db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	019b      	lsls	r3, r3, #6
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40010400 	.word	0x40010400

08006de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 030a 	bic.w	r3, r3, #10
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f023 0210 	bic.w	r2, r3, #16
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	031b      	lsls	r3, r3, #12
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f043 0307 	orr.w	r3, r3, #7
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1a      	ldr	r2, [r3, #32]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e05a      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a21      	ldr	r2, [pc, #132]	@ (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d022      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc8:	d01d      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800704c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a18      	ldr	r2, [pc, #96]	@ (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	@ (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a15      	ldr	r2, [pc, #84]	@ (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10c      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40010400 	.word	0x40010400
 8007054:	40014000 	.word	0x40014000
 8007058:	40001800 	.word	0x40001800

0800705c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007074:	2302      	movs	r3, #2
 8007076:	e03d      	b.n	80070f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e042      	b.n	80071c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fb fd44 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	@ 0x24
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800716a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f883 	bl	8007278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e04a      	b.n	8007270 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fb fcf4 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800720a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f833 	bl	8007278 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695a      	ldr	r2, [r3, #20]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8007230:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0208 	orr.w	r2, r2, #8
 8007240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800727c:	b0c0      	sub	sp, #256	@ 0x100
 800727e:	af00      	add	r7, sp, #0
 8007280:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	ea40 0301 	orr.w	r3, r0, r1
 80072a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072d0:	f021 010c 	bic.w	r1, r1, #12
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072de:	430b      	orrs	r3, r1
 80072e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f2:	6999      	ldr	r1, [r3, #24]
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	ea40 0301 	orr.w	r3, r0, r1
 80072fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b8f      	ldr	r3, [pc, #572]	@ (8007544 <UART_SetConfig+0x2cc>)
 8007308:	429a      	cmp	r2, r3
 800730a:	d005      	beq.n	8007318 <UART_SetConfig+0xa0>
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b8d      	ldr	r3, [pc, #564]	@ (8007548 <UART_SetConfig+0x2d0>)
 8007314:	429a      	cmp	r2, r3
 8007316:	d104      	bne.n	8007322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007318:	f7fe f846 	bl	80053a8 <HAL_RCC_GetPCLK2Freq>
 800731c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007320:	e003      	b.n	800732a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007322:	f7fe f82d 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8007326:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007334:	f040 810c 	bne.w	8007550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800733c:	2200      	movs	r2, #0
 800733e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007342:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	1891      	adds	r1, r2, r2
 8007350:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007352:	415b      	adcs	r3, r3
 8007354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800735a:	4621      	mov	r1, r4
 800735c:	eb12 0801 	adds.w	r8, r2, r1
 8007360:	4629      	mov	r1, r5
 8007362:	eb43 0901 	adc.w	r9, r3, r1
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800737a:	4690      	mov	r8, r2
 800737c:	4699      	mov	r9, r3
 800737e:	4623      	mov	r3, r4
 8007380:	eb18 0303 	adds.w	r3, r8, r3
 8007384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007388:	462b      	mov	r3, r5
 800738a:	eb49 0303 	adc.w	r3, r9, r3
 800738e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800739e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073a6:	460b      	mov	r3, r1
 80073a8:	18db      	adds	r3, r3, r3
 80073aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80073ac:	4613      	mov	r3, r2
 80073ae:	eb42 0303 	adc.w	r3, r2, r3
 80073b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80073b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073bc:	f7f9 fc14 	bl	8000be8 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4b61      	ldr	r3, [pc, #388]	@ (800754c <UART_SetConfig+0x2d4>)
 80073c6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	011c      	lsls	r4, r3, #4
 80073ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073e8:	415b      	adcs	r3, r3
 80073ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073f0:	4641      	mov	r1, r8
 80073f2:	eb12 0a01 	adds.w	sl, r2, r1
 80073f6:	4649      	mov	r1, r9
 80073f8:	eb43 0b01 	adc.w	fp, r3, r1
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800740c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007410:	4692      	mov	sl, r2
 8007412:	469b      	mov	fp, r3
 8007414:	4643      	mov	r3, r8
 8007416:	eb1a 0303 	adds.w	r3, sl, r3
 800741a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800741e:	464b      	mov	r3, r9
 8007420:	eb4b 0303 	adc.w	r3, fp, r3
 8007424:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007434:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800743c:	460b      	mov	r3, r1
 800743e:	18db      	adds	r3, r3, r3
 8007440:	643b      	str	r3, [r7, #64]	@ 0x40
 8007442:	4613      	mov	r3, r2
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	647b      	str	r3, [r7, #68]	@ 0x44
 800744a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800744e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007452:	f7f9 fbc9 	bl	8000be8 <__aeabi_uldivmod>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4611      	mov	r1, r2
 800745c:	4b3b      	ldr	r3, [pc, #236]	@ (800754c <UART_SetConfig+0x2d4>)
 800745e:	fba3 2301 	umull	r2, r3, r3, r1
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	2264      	movs	r2, #100	@ 0x64
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	1acb      	subs	r3, r1, r3
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007472:	4b36      	ldr	r3, [pc, #216]	@ (800754c <UART_SetConfig+0x2d4>)
 8007474:	fba3 2302 	umull	r2, r3, r3, r2
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007480:	441c      	add	r4, r3
 8007482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800748c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	1891      	adds	r1, r2, r2
 800749a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800749c:	415b      	adcs	r3, r3
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074a4:	4641      	mov	r1, r8
 80074a6:	1851      	adds	r1, r2, r1
 80074a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80074aa:	4649      	mov	r1, r9
 80074ac:	414b      	adcs	r3, r1
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074bc:	4659      	mov	r1, fp
 80074be:	00cb      	lsls	r3, r1, #3
 80074c0:	4651      	mov	r1, sl
 80074c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074c6:	4651      	mov	r1, sl
 80074c8:	00ca      	lsls	r2, r1, #3
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	4642      	mov	r2, r8
 80074d2:	189b      	adds	r3, r3, r2
 80074d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074d8:	464b      	mov	r3, r9
 80074da:	460a      	mov	r2, r1
 80074dc:	eb42 0303 	adc.w	r3, r2, r3
 80074e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074f8:	460b      	mov	r3, r1
 80074fa:	18db      	adds	r3, r3, r3
 80074fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074fe:	4613      	mov	r3, r2
 8007500:	eb42 0303 	adc.w	r3, r2, r3
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800750a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800750e:	f7f9 fb6b 	bl	8000be8 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <UART_SetConfig+0x2d4>)
 8007518:	fba3 1302 	umull	r1, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	2164      	movs	r1, #100	@ 0x64
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	3332      	adds	r3, #50	@ 0x32
 800752a:	4a08      	ldr	r2, [pc, #32]	@ (800754c <UART_SetConfig+0x2d4>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f003 0207 	and.w	r2, r3, #7
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4422      	add	r2, r4
 800753e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007540:	e106      	b.n	8007750 <UART_SetConfig+0x4d8>
 8007542:	bf00      	nop
 8007544:	40011000 	.word	0x40011000
 8007548:	40011400 	.word	0x40011400
 800754c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007554:	2200      	movs	r2, #0
 8007556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800755a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800755e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007562:	4642      	mov	r2, r8
 8007564:	464b      	mov	r3, r9
 8007566:	1891      	adds	r1, r2, r2
 8007568:	6239      	str	r1, [r7, #32]
 800756a:	415b      	adcs	r3, r3
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
 800756e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007572:	4641      	mov	r1, r8
 8007574:	1854      	adds	r4, r2, r1
 8007576:	4649      	mov	r1, r9
 8007578:	eb43 0501 	adc.w	r5, r3, r1
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	00eb      	lsls	r3, r5, #3
 8007586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758a:	00e2      	lsls	r2, r4, #3
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	4643      	mov	r3, r8
 8007592:	18e3      	adds	r3, r4, r3
 8007594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007598:	464b      	mov	r3, r9
 800759a:	eb45 0303 	adc.w	r3, r5, r3
 800759e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075be:	4629      	mov	r1, r5
 80075c0:	008b      	lsls	r3, r1, #2
 80075c2:	4621      	mov	r1, r4
 80075c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c8:	4621      	mov	r1, r4
 80075ca:	008a      	lsls	r2, r1, #2
 80075cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075d0:	f7f9 fb0a 	bl	8000be8 <__aeabi_uldivmod>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4b60      	ldr	r3, [pc, #384]	@ (800775c <UART_SetConfig+0x4e4>)
 80075da:	fba3 2302 	umull	r2, r3, r3, r2
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	011c      	lsls	r4, r3, #4
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	61b9      	str	r1, [r7, #24]
 80075fc:	415b      	adcs	r3, r3
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007604:	4641      	mov	r1, r8
 8007606:	1851      	adds	r1, r2, r1
 8007608:	6139      	str	r1, [r7, #16]
 800760a:	4649      	mov	r1, r9
 800760c:	414b      	adcs	r3, r1
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800761c:	4659      	mov	r1, fp
 800761e:	00cb      	lsls	r3, r1, #3
 8007620:	4651      	mov	r1, sl
 8007622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007626:	4651      	mov	r1, sl
 8007628:	00ca      	lsls	r2, r1, #3
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	4603      	mov	r3, r0
 8007630:	4642      	mov	r2, r8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007638:	464b      	mov	r3, r9
 800763a:	460a      	mov	r2, r1
 800763c:	eb42 0303 	adc.w	r3, r2, r3
 8007640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800764e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800765c:	4649      	mov	r1, r9
 800765e:	008b      	lsls	r3, r1, #2
 8007660:	4641      	mov	r1, r8
 8007662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007666:	4641      	mov	r1, r8
 8007668:	008a      	lsls	r2, r1, #2
 800766a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800766e:	f7f9 fabb 	bl	8000be8 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4611      	mov	r1, r2
 8007678:	4b38      	ldr	r3, [pc, #224]	@ (800775c <UART_SetConfig+0x4e4>)
 800767a:	fba3 2301 	umull	r2, r3, r3, r1
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2264      	movs	r2, #100	@ 0x64
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	1acb      	subs	r3, r1, r3
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	3332      	adds	r3, #50	@ 0x32
 800768c:	4a33      	ldr	r2, [pc, #204]	@ (800775c <UART_SetConfig+0x4e4>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007698:	441c      	add	r4, r3
 800769a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769e:	2200      	movs	r2, #0
 80076a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80076a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80076a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	1891      	adds	r1, r2, r2
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	415b      	adcs	r3, r3
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076b8:	4641      	mov	r1, r8
 80076ba:	1851      	adds	r1, r2, r1
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	4649      	mov	r1, r9
 80076c0:	414b      	adcs	r3, r1
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076d0:	4659      	mov	r1, fp
 80076d2:	00cb      	lsls	r3, r1, #3
 80076d4:	4651      	mov	r1, sl
 80076d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076da:	4651      	mov	r1, sl
 80076dc:	00ca      	lsls	r2, r1, #3
 80076de:	4610      	mov	r0, r2
 80076e0:	4619      	mov	r1, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	4642      	mov	r2, r8
 80076e6:	189b      	adds	r3, r3, r2
 80076e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ea:	464b      	mov	r3, r9
 80076ec:	460a      	mov	r2, r1
 80076ee:	eb42 0303 	adc.w	r3, r2, r3
 80076f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80076fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800770c:	4649      	mov	r1, r9
 800770e:	008b      	lsls	r3, r1, #2
 8007710:	4641      	mov	r1, r8
 8007712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007716:	4641      	mov	r1, r8
 8007718:	008a      	lsls	r2, r1, #2
 800771a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800771e:	f7f9 fa63 	bl	8000be8 <__aeabi_uldivmod>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <UART_SetConfig+0x4e4>)
 8007728:	fba3 1302 	umull	r1, r3, r3, r2
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	2164      	movs	r1, #100	@ 0x64
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	3332      	adds	r3, #50	@ 0x32
 800773a:	4a08      	ldr	r2, [pc, #32]	@ (800775c <UART_SetConfig+0x4e4>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	f003 020f 	and.w	r2, r3, #15
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4422      	add	r2, r4
 800774e:	609a      	str	r2, [r3, #8]
}
 8007750:	bf00      	nop
 8007752:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007756:	46bd      	mov	sp, r7
 8007758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800775c:	51eb851f 	.word	0x51eb851f

08007760 <__NVIC_SetPriority>:
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800776c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007770:	2b00      	cmp	r3, #0
 8007772:	db0a      	blt.n	800778a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	b2da      	uxtb	r2, r3
 8007778:	490c      	ldr	r1, [pc, #48]	@ (80077ac <__NVIC_SetPriority+0x4c>)
 800777a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800777e:	0112      	lsls	r2, r2, #4
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	440b      	add	r3, r1
 8007784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007788:	e00a      	b.n	80077a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	4908      	ldr	r1, [pc, #32]	@ (80077b0 <__NVIC_SetPriority+0x50>)
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	3b04      	subs	r3, #4
 8007798:	0112      	lsls	r2, r2, #4
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	440b      	add	r3, r1
 800779e:	761a      	strb	r2, [r3, #24]
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	e000e100 	.word	0xe000e100
 80077b0:	e000ed00 	.word	0xe000ed00

080077b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80077b8:	4b05      	ldr	r3, [pc, #20]	@ (80077d0 <SysTick_Handler+0x1c>)
 80077ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80077bc:	f002 fde2 	bl	800a384 <xTaskGetSchedulerState>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d001      	beq.n	80077ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80077c6:	f003 fd0f 	bl	800b1e8 <xPortSysTickHandler>
  }
}
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000e010 	.word	0xe000e010

080077d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80077d8:	2100      	movs	r1, #0
 80077da:	f06f 0004 	mvn.w	r0, #4
 80077de:	f7ff ffbf 	bl	8007760 <__NVIC_SetPriority>
#endif
}
 80077e2:	bf00      	nop
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ee:	f3ef 8305 	mrs	r3, IPSR
 80077f2:	603b      	str	r3, [r7, #0]
  return(result);
 80077f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80077fa:	f06f 0305 	mvn.w	r3, #5
 80077fe:	607b      	str	r3, [r7, #4]
 8007800:	e00c      	b.n	800781c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007802:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <osKernelInitialize+0x44>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800780a:	4b08      	ldr	r3, [pc, #32]	@ (800782c <osKernelInitialize+0x44>)
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007810:	2300      	movs	r3, #0
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	e002      	b.n	800781c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800781c:	687b      	ldr	r3, [r7, #4]
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20000550 	.word	0x20000550

08007830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007836:	f3ef 8305 	mrs	r3, IPSR
 800783a:	603b      	str	r3, [r7, #0]
  return(result);
 800783c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007842:	f06f 0305 	mvn.w	r3, #5
 8007846:	607b      	str	r3, [r7, #4]
 8007848:	e010      	b.n	800786c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800784a:	4b0b      	ldr	r3, [pc, #44]	@ (8007878 <osKernelStart+0x48>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d109      	bne.n	8007866 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007852:	f7ff ffbf 	bl	80077d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007856:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <osKernelStart+0x48>)
 8007858:	2202      	movs	r2, #2
 800785a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800785c:	f002 f86a 	bl	8009934 <vTaskStartScheduler>
      stat = osOK;
 8007860:	2300      	movs	r3, #0
 8007862:	607b      	str	r3, [r7, #4]
 8007864:	e002      	b.n	800786c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800786c:	687b      	ldr	r3, [r7, #4]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000550 	.word	0x20000550

0800787c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007882:	f3ef 8305 	mrs	r3, IPSR
 8007886:	603b      	str	r3, [r7, #0]
  return(result);
 8007888:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800788e:	f002 f97d 	bl	8009b8c <xTaskGetTickCountFromISR>
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	e002      	b.n	800789c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007896:	f002 f969 	bl	8009b6c <xTaskGetTickCount>
 800789a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800789c:	687b      	ldr	r3, [r7, #4]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80078aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08e      	sub	sp, #56	@ 0x38
 80078bc:	af04      	add	r7, sp, #16
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c8:	f3ef 8305 	mrs	r3, IPSR
 80078cc:	617b      	str	r3, [r7, #20]
  return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d17e      	bne.n	80079d2 <osThreadNew+0x11a>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d07b      	beq.n	80079d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80078da:	2380      	movs	r3, #128	@ 0x80
 80078dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80078de:	2318      	movs	r3, #24
 80078e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d045      	beq.n	800797e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <osThreadNew+0x48>
        name = attr->name;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <osThreadNew+0x6e>
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b38      	cmp	r3, #56	@ 0x38
 8007918:	d805      	bhi.n	8007926 <osThreadNew+0x6e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <osThreadNew+0x72>
        return (NULL);
 8007926:	2300      	movs	r3, #0
 8007928:	e054      	b.n	80079d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	089b      	lsrs	r3, r3, #2
 8007938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <osThreadNew+0xa8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	2bab      	cmp	r3, #171	@ 0xab
 8007948:	d90a      	bls.n	8007960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <osThreadNew+0xa8>
        mem = 1;
 800795a:	2301      	movs	r3, #1
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e010      	b.n	8007982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <osThreadNew+0xca>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <osThreadNew+0xca>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <osThreadNew+0xca>
          mem = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	e001      	b.n	8007982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d110      	bne.n	80079aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007990:	9202      	str	r2, [sp, #8]
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f001 fdd2 	bl	8009548 <xTaskCreateStatic>
 80079a4:	4603      	mov	r3, r0
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	e013      	b.n	80079d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d110      	bne.n	80079d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	f107 0310 	add.w	r3, r7, #16
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f001 fe20 	bl	8009608 <xTaskCreate>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d001      	beq.n	80079d2 <osThreadNew+0x11a>
            hTask = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079d2:	693b      	ldr	r3, [r7, #16]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3728      	adds	r7, #40	@ 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e4:	f3ef 8305 	mrs	r3, IPSR
 80079e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80079ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <osDelay+0x1c>
    stat = osErrorISR;
 80079f0:	f06f 0305 	mvn.w	r3, #5
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e007      	b.n	8007a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 ff60 	bl	80098c8 <vTaskDelay>
    }
  }

  return (stat);
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a24:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d12d      	bne.n	8007a86 <osEventFlagsNew+0x74>
    mem = -1;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d015      	beq.n	8007a62 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d006      	beq.n	8007a4c <osEventFlagsNew+0x3a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	2b1f      	cmp	r3, #31
 8007a44:	d902      	bls.n	8007a4c <osEventFlagsNew+0x3a>
        mem = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	e00c      	b.n	8007a66 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d108      	bne.n	8007a66 <osEventFlagsNew+0x54>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <osEventFlagsNew+0x54>
          mem = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	e001      	b.n	8007a66 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d106      	bne.n	8007a7a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fb27 	bl	80080c4 <xEventGroupCreateStatic>
 8007a76:	6178      	str	r0, [r7, #20]
 8007a78:	e005      	b.n	8007a86 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007a80:	f000 fb59 	bl	8008136 <xEventGroupCreate>
 8007a84:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007a86:	697b      	ldr	r3, [r7, #20]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <osEventFlagsSet+0x1c>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aaa:	d303      	bcc.n	8007ab4 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007aac:	f06f 0303 	mvn.w	r3, #3
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e028      	b.n	8007b06 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab4:	f3ef 8305 	mrs	r3, IPSR
 8007ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007aba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01d      	beq.n	8007afc <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007ac4:	f107 0308 	add.w	r3, r7, #8
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6938      	ldr	r0, [r7, #16]
 8007ace:	f000 fcdb 	bl	8008488 <xEventGroupSetBitsFromISR>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007ad8:	f06f 0302 	mvn.w	r3, #2
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e012      	b.n	8007b06 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00d      	beq.n	8007b06 <osEventFlagsSet+0x76>
 8007aea:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <osEventFlagsSet+0x80>)
 8007aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	e004      	b.n	8007b06 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6938      	ldr	r0, [r7, #16]
 8007b00:	f000 fc06 	bl	8008310 <xEventGroupSetBits>
 8007b04:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007b06:	697b      	ldr	r3, [r7, #20]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	@ 0x30
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <osEventFlagsWait+0x20>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b32:	d303      	bcc.n	8007b3c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007b34:	f06f 0303 	mvn.w	r3, #3
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	e04b      	b.n	8007bd4 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3c:	f3ef 8305 	mrs	r3, IPSR
 8007b40:	617b      	str	r3, [r7, #20]
  return(result);
 8007b42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007b48:	f06f 0305 	mvn.w	r3, #5
 8007b4c:	61fb      	str	r3, [r7, #28]
 8007b4e:	e041      	b.n	8007bd4 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5e:	e001      	b.n	8007b64 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	623b      	str	r3, [r7, #32]
 8007b72:	e001      	b.n	8007b78 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	6a3a      	ldr	r2, [r7, #32]
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	69b8      	ldr	r0, [r7, #24]
 8007b84:	f000 faf2 	bl	800816c <xEventGroupWaitBits>
 8007b88:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d010      	beq.n	8007bb6 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d019      	beq.n	8007bd4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007ba6:	f06f 0301 	mvn.w	r3, #1
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e012      	b.n	8007bd4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007bae:	f06f 0302 	mvn.w	r3, #2
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	e00e      	b.n	8007bd4 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007bc6:	f06f 0301 	mvn.w	r3, #1
 8007bca:	61fb      	str	r3, [r7, #28]
 8007bcc:	e002      	b.n	8007bd4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007bce:	f06f 0302 	mvn.w	r3, #2
 8007bd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007bd4:	69fb      	ldr	r3, [r7, #28]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3728      	adds	r7, #40	@ 0x28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b088      	sub	sp, #32
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bea:	f3ef 8305 	mrs	r3, IPSR
 8007bee:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bf0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d174      	bne.n	8007ce0 <osMutexNew+0x102>
    if (attr != NULL) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	e001      	b.n	8007c08 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <osMutexNew+0x3a>
      rmtx = 1U;
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e001      	b.n	8007c1c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d15c      	bne.n	8007ce0 <osMutexNew+0x102>
      mem = -1;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d015      	beq.n	8007c5e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d006      	beq.n	8007c48 <osMutexNew+0x6a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b4f      	cmp	r3, #79	@ 0x4f
 8007c40:	d902      	bls.n	8007c48 <osMutexNew+0x6a>
          mem = 1;
 8007c42:	2301      	movs	r3, #1
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	e00c      	b.n	8007c62 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d108      	bne.n	8007c62 <osMutexNew+0x84>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <osMutexNew+0x84>
            mem = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	e001      	b.n	8007c62 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d112      	bne.n	8007c8e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d007      	beq.n	8007c7e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	4619      	mov	r1, r3
 8007c74:	2004      	movs	r0, #4
 8007c76:	f000 fe46 	bl	8008906 <xQueueCreateMutexStatic>
 8007c7a:	61f8      	str	r0, [r7, #28]
 8007c7c:	e016      	b.n	8007cac <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	4619      	mov	r1, r3
 8007c84:	2001      	movs	r0, #1
 8007c86:	f000 fe3e 	bl	8008906 <xQueueCreateMutexStatic>
 8007c8a:	61f8      	str	r0, [r7, #28]
 8007c8c:	e00e      	b.n	8007cac <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007c9a:	2004      	movs	r0, #4
 8007c9c:	f000 fe1b 	bl	80088d6 <xQueueCreateMutex>
 8007ca0:	61f8      	str	r0, [r7, #28]
 8007ca2:	e003      	b.n	8007cac <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f000 fe16 	bl	80088d6 <xQueueCreateMutex>
 8007caa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00c      	beq.n	8007ccc <osMutexNew+0xee>
        if (attr != NULL) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <osMutexNew+0xe2>
          name = attr->name;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e001      	b.n	8007cc4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007cc4:	68f9      	ldr	r1, [r7, #12]
 8007cc6:	69f8      	ldr	r0, [r7, #28]
 8007cc8:	f001 fbe0 	bl	800948c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <osMutexNew+0x102>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007ce0:	69fb      	ldr	r3, [r7, #28]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d08:	f3ef 8305 	mrs	r3, IPSR
 8007d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d0e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007d14:	f06f 0305 	mvn.w	r3, #5
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e02c      	b.n	8007d76 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007d22:	f06f 0303 	mvn.w	r3, #3
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e025      	b.n	8007d76 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d011      	beq.n	8007d54 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6938      	ldr	r0, [r7, #16]
 8007d34:	f000 fe37 	bl	80089a6 <xQueueTakeMutexRecursive>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d01b      	beq.n	8007d76 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007d44:	f06f 0301 	mvn.w	r3, #1
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e014      	b.n	8007d76 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d4c:	f06f 0302 	mvn.w	r3, #2
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e010      	b.n	8007d76 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6938      	ldr	r0, [r7, #16]
 8007d58:	f001 f8de 	bl	8008f18 <xQueueSemaphoreTake>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d009      	beq.n	8007d76 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007d68:	f06f 0301 	mvn.w	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	e002      	b.n	8007d76 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d70:	f06f 0302 	mvn.w	r3, #2
 8007d74:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007d76:	697b      	ldr	r3, [r7, #20]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d9c:	f3ef 8305 	mrs	r3, IPSR
 8007da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007da2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007da8:	f06f 0305 	mvn.w	r3, #5
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	e01f      	b.n	8007df0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007db6:	f06f 0303 	mvn.w	r3, #3
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e018      	b.n	8007df0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007dc4:	6938      	ldr	r0, [r7, #16]
 8007dc6:	f000 fdb9 	bl	800893c <xQueueGiveMutexRecursive>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d00f      	beq.n	8007df0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007dd0:	f06f 0302 	mvn.w	r3, #2
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	e00b      	b.n	8007df0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6938      	ldr	r0, [r7, #16]
 8007de0:	f000 fe18 	bl	8008a14 <xQueueGenericSend>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d002      	beq.n	8007df0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007dea:	f06f 0302 	mvn.w	r3, #2
 8007dee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007df0:	697b      	ldr	r3, [r7, #20]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b08a      	sub	sp, #40	@ 0x28
 8007dfe:	af02      	add	r7, sp, #8
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e0a:	f3ef 8305 	mrs	r3, IPSR
 8007e0e:	613b      	str	r3, [r7, #16]
  return(result);
 8007e10:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d15f      	bne.n	8007ed6 <osMessageQueueNew+0xdc>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d05c      	beq.n	8007ed6 <osMessageQueueNew+0xdc>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d059      	beq.n	8007ed6 <osMessageQueueNew+0xdc>
    mem = -1;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295
 8007e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d029      	beq.n	8007e82 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d012      	beq.n	8007e5c <osMessageQueueNew+0x62>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e3c:	d90e      	bls.n	8007e5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695a      	ldr	r2, [r3, #20]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d302      	bcc.n	8007e5c <osMessageQueueNew+0x62>
        mem = 1;
 8007e56:	2301      	movs	r3, #1
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	e014      	b.n	8007e86 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d110      	bne.n	8007e86 <osMessageQueueNew+0x8c>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10c      	bne.n	8007e86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d108      	bne.n	8007e86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <osMessageQueueNew+0x8c>
          mem = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e001      	b.n	8007e86 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d10b      	bne.n	8007ea4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2100      	movs	r1, #0
 8007e96:	9100      	str	r1, [sp, #0]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fc26 	bl	80086ec <xQueueGenericCreateStatic>
 8007ea0:	61f8      	str	r0, [r7, #28]
 8007ea2:	e008      	b.n	8007eb6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fc99 	bl	80087e6 <xQueueGenericCreate>
 8007eb4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00c      	beq.n	8007ed6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <osMessageQueueNew+0xd0>
        name = attr->name;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e001      	b.n	8007ece <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007ece:	6979      	ldr	r1, [r7, #20]
 8007ed0:	69f8      	ldr	r0, [r7, #28]
 8007ed2:	f001 fadb 	bl	800948c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007ed6:	69fb      	ldr	r3, [r7, #28]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef8:	f3ef 8305 	mrs	r3, IPSR
 8007efc:	617b      	str	r3, [r7, #20]
  return(result);
 8007efe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d028      	beq.n	8007f56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <osMessageQueuePut+0x36>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <osMessageQueuePut+0x36>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007f16:	f06f 0303 	mvn.w	r3, #3
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	e038      	b.n	8007f90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007f22:	f107 0210 	add.w	r2, r7, #16
 8007f26:	2300      	movs	r3, #0
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	69b8      	ldr	r0, [r7, #24]
 8007f2c:	f000 fe74 	bl	8008c18 <xQueueGenericSendFromISR>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d003      	beq.n	8007f3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007f36:	f06f 0302 	mvn.w	r3, #2
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	e028      	b.n	8007f90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d025      	beq.n	8007f90 <osMessageQueuePut+0xb0>
 8007f44:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <osMessageQueuePut+0xbc>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	e01c      	b.n	8007f90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <osMessageQueuePut+0x82>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d103      	bne.n	8007f6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007f62:	f06f 0303 	mvn.w	r3, #3
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e012      	b.n	8007f90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	69b8      	ldr	r0, [r7, #24]
 8007f72:	f000 fd4f 	bl	8008a14 <xQueueGenericSend>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d009      	beq.n	8007f90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007f82:	f06f 0301 	mvn.w	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	e002      	b.n	8007f90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007f8a:	f06f 0302 	mvn.w	r3, #2
 8007f8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f90:	69fb      	ldr	r3, [r7, #28]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb6:	f3ef 8305 	mrs	r3, IPSR
 8007fba:	617b      	str	r3, [r7, #20]
  return(result);
 8007fbc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d028      	beq.n	8008014 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <osMessageQueueGet+0x34>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <osMessageQueueGet+0x34>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007fd4:	f06f 0303 	mvn.w	r3, #3
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	e037      	b.n	800804c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007fe0:	f107 0310 	add.w	r3, r7, #16
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	69b8      	ldr	r0, [r7, #24]
 8007fea:	f001 f8a5 	bl	8009138 <xQueueReceiveFromISR>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d003      	beq.n	8007ffc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007ff4:	f06f 0302 	mvn.w	r3, #2
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	e027      	b.n	800804c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d024      	beq.n	800804c <osMessageQueueGet+0xac>
 8008002:	4b15      	ldr	r3, [pc, #84]	@ (8008058 <osMessageQueueGet+0xb8>)
 8008004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	e01b      	b.n	800804c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <osMessageQueueGet+0x80>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008020:	f06f 0303 	mvn.w	r3, #3
 8008024:	61fb      	str	r3, [r7, #28]
 8008026:	e011      	b.n	800804c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	69b8      	ldr	r0, [r7, #24]
 800802e:	f000 fe91 	bl	8008d54 <xQueueReceive>
 8008032:	4603      	mov	r3, r0
 8008034:	2b01      	cmp	r3, #1
 8008036:	d009      	beq.n	800804c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800803e:	f06f 0301 	mvn.w	r3, #1
 8008042:	61fb      	str	r3, [r7, #28]
 8008044:	e002      	b.n	800804c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008046:	f06f 0302 	mvn.w	r3, #2
 800804a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800804c:	69fb      	ldr	r3, [r7, #28]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a07      	ldr	r2, [pc, #28]	@ (8008088 <vApplicationGetIdleTaskMemory+0x2c>)
 800806c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	4a06      	ldr	r2, [pc, #24]	@ (800808c <vApplicationGetIdleTaskMemory+0x30>)
 8008072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2280      	movs	r2, #128	@ 0x80
 8008078:	601a      	str	r2, [r3, #0]
}
 800807a:	bf00      	nop
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20000554 	.word	0x20000554
 800808c:	20000600 	.word	0x20000600

08008090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a07      	ldr	r2, [pc, #28]	@ (80080bc <vApplicationGetTimerTaskMemory+0x2c>)
 80080a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4a06      	ldr	r2, [pc, #24]	@ (80080c0 <vApplicationGetTimerTaskMemory+0x30>)
 80080a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000800 	.word	0x20000800
 80080c0:	200008ac 	.word	0x200008ac

080080c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80080ea:	2320      	movs	r3, #32
 80080ec:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d00b      	beq.n	800810c <xEventGroupCreateStatic+0x48>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	60fb      	str	r3, [r7, #12]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f000 f9c5 	bl	80084b0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800812c:	697b      	ldr	r3, [r7, #20]
	}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800813c:	2020      	movs	r0, #32
 800813e:	f003 f8e5 	bl	800b30c <pvPortMalloc>
 8008142:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f9ab 	bl	80084b0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008160:	687b      	ldr	r3, [r7, #4]
	}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b090      	sub	sp, #64	@ 0x40
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <xEventGroupWaitBits+0x38>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	623b      	str	r3, [r7, #32]
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081aa:	d30b      	bcc.n	80081c4 <xEventGroupWaitBits+0x58>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	61fb      	str	r3, [r7, #28]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <xEventGroupWaitBits+0x76>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	61bb      	str	r3, [r7, #24]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081e2:	f002 f8cf 	bl	800a384 <xTaskGetSchedulerState>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <xEventGroupWaitBits+0x86>
 80081ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <xEventGroupWaitBits+0x8a>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xEventGroupWaitBits+0x8c>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	617b      	str	r3, [r7, #20]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8008214:	f001 fbfe 	bl	8009a14 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008224:	f000 f90d 	bl	8008442 <prvTestWaitCondition>
 8008228:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008234:	2300      	movs	r3, #0
 8008236:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d028      	beq.n	8008290 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800823e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	43db      	mvns	r3, r3
 8008246:	401a      	ands	r2, r3
 8008248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	e020      	b.n	8008290 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800824e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8008258:	2301      	movs	r3, #1
 800825a:	633b      	str	r3, [r7, #48]	@ 0x30
 800825c:	e018      	b.n	8008290 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800826a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008278:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800827a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827c:	1d18      	adds	r0, r3, #4
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	4313      	orrs	r3, r2
 8008284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008286:	4619      	mov	r1, r3
 8008288:	f001 fdd8 	bl	8009e3c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008290:	f001 fbce 	bl	8009a30 <xTaskResumeAll>
 8008294:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008298:	2b00      	cmp	r3, #0
 800829a:	d031      	beq.n	8008300 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80082a2:	4b1a      	ldr	r3, [pc, #104]	@ (800830c <xEventGroupWaitBits+0x1a0>)
 80082a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80082b2:	f002 f9e1 	bl	800a678 <uxTaskResetEventItemValue>
 80082b6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80082b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d11a      	bne.n	80082f8 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80082c2:	f002 ff01 	bl	800b0c8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80082c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80082d2:	f000 f8b6 	bl	8008442 <prvTestWaitCondition>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d006      	beq.n	80082f0 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80082e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	43db      	mvns	r3, r3
 80082ea:	401a      	ands	r2, r3
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80082f4:	f002 ff1a 	bl	800b12c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80082f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008302:	4618      	mov	r0, r3
 8008304:	3740      	adds	r7, #64	@ 0x40
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	e000ed04 	.word	0xe000ed04

08008310 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08e      	sub	sp, #56	@ 0x38
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800831a:	2300      	movs	r3, #0
 800831c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10b      	bne.n	8008344 <xEventGroupSetBits+0x34>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	613b      	str	r3, [r7, #16]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800834a:	d30b      	bcc.n	8008364 <xEventGroupSetBits+0x54>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60fb      	str	r3, [r7, #12]
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	3304      	adds	r3, #4
 8008368:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	3308      	adds	r3, #8
 800836e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008370:	f001 fb50 	bl	8009a14 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	431a      	orrs	r2, r3
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008386:	e03c      	b.n	8008402 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800838e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008394:	2300      	movs	r3, #0
 8008396:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800839e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80083a6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d108      	bne.n	80083c4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80083be:	2301      	movs	r3, #1
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c2:	e008      	b.n	80083d6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80083c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	4013      	ands	r3, r2
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d101      	bne.n	80083d6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80083d2:	2301      	movs	r3, #1
 80083d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d010      	beq.n	80083fe <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80083e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80083f6:	4619      	mov	r1, r3
 80083f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80083fa:	f001 fded 	bl	8009fd8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8008402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	429a      	cmp	r2, r3
 8008408:	d1be      	bne.n	8008388 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	43db      	mvns	r3, r3
 8008412:	401a      	ands	r2, r3
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008418:	f001 fb0a 	bl	8009a30 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	681b      	ldr	r3, [r3, #0]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3738      	adds	r7, #56	@ 0x38
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff ff6b 	bl	8008310 <xEventGroupSetBits>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008442:	b480      	push	{r7}
 8008444:	b087      	sub	sp, #28
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008462:	2301      	movs	r3, #1
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e007      	b.n	8008478 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4013      	ands	r3, r2
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	d101      	bne.n	8008478 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008478:	697b      	ldr	r3, [r7, #20]
}
 800847a:	4618      	mov	r0, r3
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
	...

08008488 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	68f9      	ldr	r1, [r7, #12]
 800849a:	4804      	ldr	r0, [pc, #16]	@ (80084ac <xEventGroupSetBitsFromISR+0x24>)
 800849c:	f002 fcc6 	bl	800ae2c <xTimerPendFunctionCallFromISR>
 80084a0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80084a2:	697b      	ldr	r3, [r7, #20]
	}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	08008429 	.word	0x08008429

080084b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f103 0208 	add.w	r2, r3, #8
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f04f 32ff 	mov.w	r2, #4294967295
 80084c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f103 0208 	add.w	r2, r3, #8
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f103 0208 	add.w	r2, r3, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008568:	d103      	bne.n	8008572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e00c      	b.n	800858c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3308      	adds	r3, #8
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e002      	b.n	8008580 <vListInsert+0x2e>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	429a      	cmp	r2, r3
 800858a:	d2f6      	bcs.n	800857a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]
}
 80085b8:	bf00      	nop
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6892      	ldr	r2, [r2, #8]
 80085da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6852      	ldr	r2, [r2, #4]
 80085e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d103      	bne.n	80085f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	1e5a      	subs	r2, r3, #1
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <xQueueGenericReset+0x2c>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60bb      	str	r3, [r7, #8]
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	e7fd      	b.n	8008640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008644:	f002 fd40 	bl	800b0c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008674:	3b01      	subs	r3, #1
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800867a:	fb01 f303 	mul.w	r3, r1, r3
 800867e:	441a      	add	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	22ff      	movs	r2, #255	@ 0xff
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	22ff      	movs	r2, #255	@ 0xff
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d114      	bne.n	80086c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01a      	beq.n	80086d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3310      	adds	r3, #16
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fc32 	bl	8009f10 <xTaskRemoveFromEventList>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d012      	beq.n	80086d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <xQueueGenericReset+0xd0>)
 80086b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	e009      	b.n	80086d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3310      	adds	r3, #16
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fef1 	bl	80084b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3324      	adds	r3, #36	@ 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff feec 	bl	80084b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086d8:	f002 fd28 	bl	800b12c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086dc:	2301      	movs	r3, #1
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08e      	sub	sp, #56	@ 0x38
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <xQueueGenericCreateStatic+0x56>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <xQueueGenericCreateStatic+0x5a>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericCreateStatic+0x5c>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	623b      	str	r3, [r7, #32]
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	e7fd      	b.n	8008760 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <xQueueGenericCreateStatic+0x84>
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <xQueueGenericCreateStatic+0x88>
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <xQueueGenericCreateStatic+0x8a>
 8008774:	2300      	movs	r3, #0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	61fb      	str	r3, [r7, #28]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008792:	2350      	movs	r3, #80	@ 0x50
 8008794:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b50      	cmp	r3, #80	@ 0x50
 800879a:	d00b      	beq.n	80087b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	61bb      	str	r3, [r7, #24]
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80087ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00d      	beq.n	80087dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f840 	bl	800885c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087de:	4618      	mov	r0, r3
 80087e0:	3730      	adds	r7, #48	@ 0x30
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b08a      	sub	sp, #40	@ 0x28
 80087ea:	af02      	add	r7, sp, #8
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	4613      	mov	r3, r2
 80087f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10b      	bne.n	8008812 <xQueueGenericCreate+0x2c>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	613b      	str	r3, [r7, #16]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	3350      	adds	r3, #80	@ 0x50
 8008820:	4618      	mov	r0, r3
 8008822:	f002 fd73 	bl	800b30c <pvPortMalloc>
 8008826:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d011      	beq.n	8008852 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	3350      	adds	r3, #80	@ 0x50
 8008836:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008840:	79fa      	ldrb	r2, [r7, #7]
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4613      	mov	r3, r2
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f805 	bl	800885c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008852:	69bb      	ldr	r3, [r7, #24]
	}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d103      	bne.n	8008878 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e002      	b.n	800887e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800888a:	2101      	movs	r1, #1
 800888c:	69b8      	ldr	r0, [r7, #24]
 800888e:	f7ff fec3 	bl	8008618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00e      	beq.n	80088ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088c2:	2300      	movs	r3, #0
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f8a3 	bl	8008a14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b086      	sub	sp, #24
 80088da:	af00      	add	r7, sp, #0
 80088dc:	4603      	mov	r3, r0
 80088de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088e0:	2301      	movs	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	461a      	mov	r2, r3
 80088ec:	6939      	ldr	r1, [r7, #16]
 80088ee:	6978      	ldr	r0, [r7, #20]
 80088f0:	f7ff ff79 	bl	80087e6 <xQueueGenericCreate>
 80088f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff ffd3 	bl	80088a2 <prvInitialiseMutex>

		return xNewQueue;
 80088fc:	68fb      	ldr	r3, [r7, #12]
	}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008906:	b580      	push	{r7, lr}
 8008908:	b088      	sub	sp, #32
 800890a:	af02      	add	r7, sp, #8
 800890c:	4603      	mov	r3, r0
 800890e:	6039      	str	r1, [r7, #0]
 8008910:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008912:	2301      	movs	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	2300      	movs	r3, #0
 8008918:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2200      	movs	r2, #0
 8008922:	6939      	ldr	r1, [r7, #16]
 8008924:	6978      	ldr	r0, [r7, #20]
 8008926:	f7ff fee1 	bl	80086ec <xQueueGenericCreateStatic>
 800892a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff ffb8 	bl	80088a2 <prvInitialiseMutex>

		return xNewQueue;
 8008932:	68fb      	ldr	r3, [r7, #12]
	}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800893c:	b590      	push	{r4, r7, lr}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	60fb      	str	r3, [r7, #12]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	689c      	ldr	r4, [r3, #8]
 800896a:	f001 fcfb 	bl	800a364 <xTaskGetCurrentTaskHandle>
 800896e:	4603      	mov	r3, r0
 8008970:	429c      	cmp	r4, r3
 8008972:	d111      	bne.n	8008998 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d105      	bne.n	8008992 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008986:	2300      	movs	r3, #0
 8008988:	2200      	movs	r2, #0
 800898a:	2100      	movs	r1, #0
 800898c:	6938      	ldr	r0, [r7, #16]
 800898e:	f000 f841 	bl	8008a14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008992:	2301      	movs	r3, #1
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	e001      	b.n	800899c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800899c:	697b      	ldr	r3, [r7, #20]
	}
 800899e:	4618      	mov	r0, r3
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd90      	pop	{r4, r7, pc}

080089a6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80089a6:	b590      	push	{r4, r7, lr}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10b      	bne.n	80089d2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	60fb      	str	r3, [r7, #12]
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	e7fd      	b.n	80089ce <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	689c      	ldr	r4, [r3, #8]
 80089d6:	f001 fcc5 	bl	800a364 <xTaskGetCurrentTaskHandle>
 80089da:	4603      	mov	r3, r0
 80089dc:	429c      	cmp	r4, r3
 80089de:	d107      	bne.n	80089f0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80089ea:	2301      	movs	r3, #1
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	e00c      	b.n	8008a0a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f000 fa90 	bl	8008f18 <xQueueSemaphoreTake>
 80089f8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d004      	beq.n	8008a0a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008a0a:	697b      	ldr	r3, [r7, #20]
	}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd90      	pop	{r4, r7, pc}

08008a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08e      	sub	sp, #56	@ 0x38
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a22:	2300      	movs	r3, #0
 8008a24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <xQueueGenericSend+0x34>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <xQueueGenericSend+0x42>
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <xQueueGenericSend+0x46>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <xQueueGenericSend+0x48>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10b      	bne.n	8008a78 <xQueueGenericSend+0x64>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d103      	bne.n	8008a86 <xQueueGenericSend+0x72>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <xQueueGenericSend+0x76>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <xQueueGenericSend+0x78>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10b      	bne.n	8008aa8 <xQueueGenericSend+0x94>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	623b      	str	r3, [r7, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aa8:	f001 fc6c 	bl	800a384 <xTaskGetSchedulerState>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d102      	bne.n	8008ab8 <xQueueGenericSend+0xa4>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <xQueueGenericSend+0xa8>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <xQueueGenericSend+0xaa>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <xQueueGenericSend+0xc6>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	61fb      	str	r3, [r7, #28]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ada:	f002 faf5 	bl	800b0c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <xQueueGenericSend+0xdc>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d129      	bne.n	8008b44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008af6:	f000 fbb9 	bl	800926c <prvCopyDataToQueue>
 8008afa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d010      	beq.n	8008b26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	3324      	adds	r3, #36	@ 0x24
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 fa01 	bl	8009f10 <xTaskRemoveFromEventList>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d013      	beq.n	8008b3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b3f      	ldr	r3, [pc, #252]	@ (8008c14 <xQueueGenericSend+0x200>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	e00a      	b.n	8008b3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b2c:	4b39      	ldr	r3, [pc, #228]	@ (8008c14 <xQueueGenericSend+0x200>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b3c:	f002 faf6 	bl	800b12c <vPortExitCritical>
				return pdPASS;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e063      	b.n	8008c0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b4a:	f002 faef 	bl	800b12c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e05c      	b.n	8008c0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b58:	f107 0314 	add.w	r3, r7, #20
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 fa9f 	bl	800a0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b62:	2301      	movs	r3, #1
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b66:	f002 fae1 	bl	800b12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b6a:	f000 ff53 	bl	8009a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6e:	f002 faab 	bl	800b0c8 <vPortEnterCritical>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d103      	bne.n	8008b88 <xQueueGenericSend+0x174>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b8e:	b25b      	sxtb	r3, r3
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSend+0x18a>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b9e:	f002 fac5 	bl	800b12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ba2:	1d3a      	adds	r2, r7, #4
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fa8e 	bl	800a0cc <xTaskCheckForTimeOut>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d124      	bne.n	8008c00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bb8:	f000 fc50 	bl	800945c <prvIsQueueFull>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f910 	bl	8009df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bd2:	f000 fbdb 	bl	800938c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bd6:	f000 ff2b 	bl	8009a30 <xTaskResumeAll>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f af7c 	bne.w	8008ada <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008be2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <xQueueGenericSend+0x200>)
 8008be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	e772      	b.n	8008ada <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bf6:	f000 fbc9 	bl	800938c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bfa:	f000 ff19 	bl	8009a30 <xTaskResumeAll>
 8008bfe:	e76c      	b.n	8008ada <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c02:	f000 fbc3 	bl	800938c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c06:	f000 ff13 	bl	8009a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3738      	adds	r7, #56	@ 0x38
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b090      	sub	sp, #64	@ 0x40
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10b      	bne.n	8008c48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <xQueueGenericSendFromISR+0x3e>
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <xQueueGenericSendFromISR+0x42>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <xQueueGenericSendFromISR+0x44>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	e7fd      	b.n	8008c74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d103      	bne.n	8008c86 <xQueueGenericSendFromISR+0x6e>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <xQueueGenericSendFromISR+0x72>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueGenericSendFromISR+0x74>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	623b      	str	r3, [r7, #32]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ca8:	f002 faee 	bl	800b288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008cac:	f3ef 8211 	mrs	r2, BASEPRI
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	61fa      	str	r2, [r7, #28]
 8008cc2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d302      	bcc.n	8008cda <xQueueGenericSendFromISR+0xc2>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d12f      	bne.n	8008d3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ce0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cf0:	f000 fabc 	bl	800926c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cf4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfc:	d112      	bne.n	8008d24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	3324      	adds	r3, #36	@ 0x24
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 f900 	bl	8009f10 <xTaskRemoveFromEventList>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00e      	beq.n	8008d34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	e007      	b.n	8008d34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008d28:	3301      	adds	r3, #1
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	b25a      	sxtb	r2, r3
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d34:	2301      	movs	r3, #1
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008d38:	e001      	b.n	8008d3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3740      	adds	r7, #64	@ 0x40
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08c      	sub	sp, #48	@ 0x30
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d60:	2300      	movs	r3, #0
 8008d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <xQueueReceive+0x32>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	623b      	str	r3, [r7, #32]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d103      	bne.n	8008d94 <xQueueReceive+0x40>
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <xQueueReceive+0x44>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e000      	b.n	8008d9a <xQueueReceive+0x46>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10b      	bne.n	8008db6 <xQueueReceive+0x62>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	61fb      	str	r3, [r7, #28]
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008db6:	f001 fae5 	bl	800a384 <xTaskGetSchedulerState>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <xQueueReceive+0x72>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <xQueueReceive+0x76>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <xQueueReceive+0x78>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <xQueueReceive+0x94>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	61bb      	str	r3, [r7, #24]
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	e7fd      	b.n	8008de4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008de8:	f002 f96e 	bl	800b0c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01f      	beq.n	8008e38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dfc:	f000 faa0 	bl	8009340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	1e5a      	subs	r2, r3, #1
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00f      	beq.n	8008e30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e12:	3310      	adds	r3, #16
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 f87b 	bl	8009f10 <xTaskRemoveFromEventList>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d007      	beq.n	8008e30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e20:	4b3c      	ldr	r3, [pc, #240]	@ (8008f14 <xQueueReceive+0x1c0>)
 8008e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e30:	f002 f97c 	bl	800b12c <vPortExitCritical>
				return pdPASS;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e069      	b.n	8008f0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d103      	bne.n	8008e46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e3e:	f002 f975 	bl	800b12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e062      	b.n	8008f0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 f925 	bl	800a0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e56:	2301      	movs	r3, #1
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e5a:	f002 f967 	bl	800b12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e5e:	f000 fdd9 	bl	8009a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e62:	f002 f931 	bl	800b0c8 <vPortEnterCritical>
 8008e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e6c:	b25b      	sxtb	r3, r3
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d103      	bne.n	8008e7c <xQueueReceive+0x128>
 8008e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e88:	d103      	bne.n	8008e92 <xQueueReceive+0x13e>
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e92:	f002 f94b 	bl	800b12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e96:	1d3a      	adds	r2, r7, #4
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 f914 	bl	800a0cc <xTaskCheckForTimeOut>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d123      	bne.n	8008ef2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eac:	f000 fac0 	bl	8009430 <prvIsQueueEmpty>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d017      	beq.n	8008ee6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb8:	3324      	adds	r3, #36	@ 0x24
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 ff96 	bl	8009df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec6:	f000 fa61 	bl	800938c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eca:	f000 fdb1 	bl	8009a30 <xTaskResumeAll>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d189      	bne.n	8008de8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f14 <xQueueReceive+0x1c0>)
 8008ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	e780      	b.n	8008de8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ee8:	f000 fa50 	bl	800938c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eec:	f000 fda0 	bl	8009a30 <xTaskResumeAll>
 8008ef0:	e77a      	b.n	8008de8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ef4:	f000 fa4a 	bl	800938c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ef8:	f000 fd9a 	bl	8009a30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008efe:	f000 fa97 	bl	8009430 <prvIsQueueEmpty>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f43f af6f 	beq.w	8008de8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3730      	adds	r7, #48	@ 0x30
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08e      	sub	sp, #56	@ 0x38
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	623b      	str	r3, [r7, #32]
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	e7fd      	b.n	8008f48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61fb      	str	r3, [r7, #28]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f6c:	f001 fa0a 	bl	800a384 <xTaskGetSchedulerState>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d102      	bne.n	8008f7c <xQueueSemaphoreTake+0x64>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <xQueueSemaphoreTake+0x68>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e000      	b.n	8008f82 <xQueueSemaphoreTake+0x6a>
 8008f80:	2300      	movs	r3, #0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	61bb      	str	r3, [r7, #24]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f9e:	f002 f893 	bl	800b0c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d024      	beq.n	8008ff8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb0:	1e5a      	subs	r2, r3, #1
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008fbe:	f001 fb73 	bl	800a6a8 <pvTaskIncrementMutexHeldCount>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00f      	beq.n	8008ff0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 ff9b 	bl	8009f10 <xTaskRemoveFromEventList>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d007      	beq.n	8008ff0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fe0:	4b54      	ldr	r3, [pc, #336]	@ (8009134 <xQueueSemaphoreTake+0x21c>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ff0:	f002 f89c 	bl	800b12c <vPortExitCritical>
				return pdPASS;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e098      	b.n	800912a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d112      	bne.n	8009024 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	617b      	str	r3, [r7, #20]
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800901c:	f002 f886 	bl	800b12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009020:	2300      	movs	r3, #0
 8009022:	e082      	b.n	800912a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800902a:	f107 030c 	add.w	r3, r7, #12
 800902e:	4618      	mov	r0, r3
 8009030:	f001 f836 	bl	800a0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009034:	2301      	movs	r3, #1
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009038:	f002 f878 	bl	800b12c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800903c:	f000 fcea 	bl	8009a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009040:	f002 f842 	bl	800b0c8 <vPortEnterCritical>
 8009044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800904a:	b25b      	sxtb	r3, r3
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009050:	d103      	bne.n	800905a <xQueueSemaphoreTake+0x142>
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800905a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009060:	b25b      	sxtb	r3, r3
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009066:	d103      	bne.n	8009070 <xQueueSemaphoreTake+0x158>
 8009068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009070:	f002 f85c 	bl	800b12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009074:	463a      	mov	r2, r7
 8009076:	f107 030c 	add.w	r3, r7, #12
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f001 f825 	bl	800a0cc <xTaskCheckForTimeOut>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d132      	bne.n	80090ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800908a:	f000 f9d1 	bl	8009430 <prvIsQueueEmpty>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d026      	beq.n	80090e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800909c:	f002 f814 	bl	800b0c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 f98b 	bl	800a3c0 <xTaskPriorityInherit>
 80090aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80090ac:	f002 f83e 	bl	800b12c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b2:	3324      	adds	r3, #36	@ 0x24
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fe99 	bl	8009df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090c0:	f000 f964 	bl	800938c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090c4:	f000 fcb4 	bl	8009a30 <xTaskResumeAll>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f47f af67 	bne.w	8008f9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80090d0:	4b18      	ldr	r3, [pc, #96]	@ (8009134 <xQueueSemaphoreTake+0x21c>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	e75d      	b.n	8008f9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80090e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090e4:	f000 f952 	bl	800938c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090e8:	f000 fca2 	bl	8009a30 <xTaskResumeAll>
 80090ec:	e757      	b.n	8008f9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80090ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090f0:	f000 f94c 	bl	800938c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090f4:	f000 fc9c 	bl	8009a30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090fa:	f000 f999 	bl	8009430 <prvIsQueueEmpty>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f43f af4c 	beq.w	8008f9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00d      	beq.n	8009128 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800910c:	f001 ffdc 	bl	800b0c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009112:	f000 f893 	bl	800923c <prvGetDisinheritPriorityAfterTimeout>
 8009116:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800911e:	4618      	mov	r0, r3
 8009120:	f001 fa26 	bl	800a570 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009124:	f002 f802 	bl	800b12c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009128:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800912a:	4618      	mov	r0, r3
 800912c:	3738      	adds	r7, #56	@ 0x38
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	e000ed04 	.word	0xe000ed04

08009138 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08e      	sub	sp, #56	@ 0x38
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	623b      	str	r3, [r7, #32]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <xQueueReceiveFromISR+0x3c>
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <xQueueReceiveFromISR+0x40>
 8009174:	2301      	movs	r3, #1
 8009176:	e000      	b.n	800917a <xQueueReceiveFromISR+0x42>
 8009178:	2300      	movs	r3, #0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	61fb      	str	r3, [r7, #28]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009196:	f002 f877 	bl	800b288 <vPortValidateInterruptPriority>
	__asm volatile
 800919a:	f3ef 8211 	mrs	r2, BASEPRI
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61ba      	str	r2, [r7, #24]
 80091b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d02f      	beq.n	8009222 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091d0:	f000 f8b6 	bl	8009340 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d6:	1e5a      	subs	r2, r3, #1
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80091dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e4:	d112      	bne.n	800920c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d016      	beq.n	800921c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	3310      	adds	r3, #16
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fe8c 	bl	8009f10 <xTaskRemoveFromEventList>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00e      	beq.n	800921c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e007      	b.n	800921c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800920c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009210:	3301      	adds	r3, #1
 8009212:	b2db      	uxtb	r3, r3
 8009214:	b25a      	sxtb	r2, r3
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800921c:	2301      	movs	r3, #1
 800921e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009220:	e001      	b.n	8009226 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009222:	2300      	movs	r3, #0
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	613b      	str	r3, [r7, #16]
	__asm volatile
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f383 8811 	msr	BASEPRI, r3
}
 8009230:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009234:	4618      	mov	r0, r3
 8009236:	3738      	adds	r7, #56	@ 0x38
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	d006      	beq.n	800925a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e001      	b.n	800925e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800925a:	2300      	movs	r3, #0
 800925c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800925e:	68fb      	ldr	r3, [r7, #12]
	}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10d      	bne.n	80092a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d14d      	bne.n	800932e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	4618      	mov	r0, r3
 8009298:	f001 f8fa 	bl	800a490 <xTaskPriorityDisinherit>
 800929c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	609a      	str	r2, [r3, #8]
 80092a4:	e043      	b.n	800932e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d119      	bne.n	80092e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6858      	ldr	r0, [r3, #4]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	461a      	mov	r2, r3
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	f003 f953 	bl	800c562 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	441a      	add	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d32b      	bcc.n	800932e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	605a      	str	r2, [r3, #4]
 80092de:	e026      	b.n	800932e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68d8      	ldr	r0, [r3, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e8:	461a      	mov	r2, r3
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	f003 f939 	bl	800c562 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f8:	425b      	negs	r3, r3
 80092fa:	441a      	add	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d207      	bcs.n	800931c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009314:	425b      	negs	r3, r3
 8009316:	441a      	add	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d105      	bne.n	800932e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009336:	697b      	ldr	r3, [r7, #20]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d018      	beq.n	8009384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935a:	441a      	add	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	429a      	cmp	r2, r3
 800936a:	d303      	bcc.n	8009374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68d9      	ldr	r1, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937c:	461a      	mov	r2, r3
 800937e:	6838      	ldr	r0, [r7, #0]
 8009380:	f003 f8ef 	bl	800c562 <memcpy>
	}
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009394:	f001 fe98 	bl	800b0c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800939e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093a0:	e011      	b.n	80093c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d012      	beq.n	80093d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3324      	adds	r3, #36	@ 0x24
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fdae 	bl	8009f10 <xTaskRemoveFromEventList>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093ba:	f000 feeb 	bl	800a194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dce9      	bgt.n	80093a2 <prvUnlockQueue+0x16>
 80093ce:	e000      	b.n	80093d2 <prvUnlockQueue+0x46>
					break;
 80093d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	22ff      	movs	r2, #255	@ 0xff
 80093d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80093da:	f001 fea7 	bl	800b12c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093de:	f001 fe73 	bl	800b0c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ea:	e011      	b.n	8009410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d012      	beq.n	800941a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3310      	adds	r3, #16
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fd89 	bl	8009f10 <xTaskRemoveFromEventList>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009404:	f000 fec6 	bl	800a194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	3b01      	subs	r3, #1
 800940c:	b2db      	uxtb	r3, r3
 800940e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	dce9      	bgt.n	80093ec <prvUnlockQueue+0x60>
 8009418:	e000      	b.n	800941c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800941a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	22ff      	movs	r2, #255	@ 0xff
 8009420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009424:	f001 fe82 	bl	800b12c <vPortExitCritical>
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009438:	f001 fe46 	bl	800b0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d102      	bne.n	800944a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009444:	2301      	movs	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e001      	b.n	800944e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800944e:	f001 fe6d 	bl	800b12c <vPortExitCritical>

	return xReturn;
 8009452:	68fb      	ldr	r3, [r7, #12]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009464:	f001 fe30 	bl	800b0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009470:	429a      	cmp	r2, r3
 8009472:	d102      	bne.n	800947a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	e001      	b.n	800947e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800947e:	f001 fe55 	bl	800b12c <vPortExitCritical>

	return xReturn;
 8009482:	68fb      	ldr	r3, [r7, #12]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	e014      	b.n	80094c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800949c:	4a0f      	ldr	r2, [pc, #60]	@ (80094dc <vQueueAddToRegistry+0x50>)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10b      	bne.n	80094c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094a8:	490c      	ldr	r1, [pc, #48]	@ (80094dc <vQueueAddToRegistry+0x50>)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094b2:	4a0a      	ldr	r2, [pc, #40]	@ (80094dc <vQueueAddToRegistry+0x50>)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094be:	e006      	b.n	80094ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b07      	cmp	r3, #7
 80094ca:	d9e7      	bls.n	800949c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	20000cac 	.word	0x20000cac

080094e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094f0:	f001 fdea 	bl	800b0c8 <vPortEnterCritical>
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d103      	bne.n	800950a <vQueueWaitForMessageRestricted+0x2a>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009510:	b25b      	sxtb	r3, r3
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d103      	bne.n	8009520 <vQueueWaitForMessageRestricted+0x40>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009520:	f001 fe04 	bl	800b12c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	3324      	adds	r3, #36	@ 0x24
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fcbf 	bl	8009eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800953a:	6978      	ldr	r0, [r7, #20]
 800953c:	f7ff ff26 	bl	800938c <prvUnlockQueue>
	}
 8009540:	bf00      	nop
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08e      	sub	sp, #56	@ 0x38
 800954c:	af04      	add	r7, sp, #16
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10b      	bne.n	8009574 <xTaskCreateStatic+0x2c>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	623b      	str	r3, [r7, #32]
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	e7fd      	b.n	8009570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <xTaskCreateStatic+0x4a>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	61fb      	str	r3, [r7, #28]
}
 800958c:	bf00      	nop
 800958e:	bf00      	nop
 8009590:	e7fd      	b.n	800958e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009592:	23ac      	movs	r3, #172	@ 0xac
 8009594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2bac      	cmp	r3, #172	@ 0xac
 800959a:	d00b      	beq.n	80095b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61bb      	str	r3, [r7, #24]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01e      	beq.n	80095fa <xTaskCreateStatic+0xb2>
 80095bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01b      	beq.n	80095fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095d4:	2300      	movs	r3, #0
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	9302      	str	r3, [sp, #8]
 80095dc:	f107 0314 	add.w	r3, r7, #20
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f851 	bl	8009694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095f4:	f000 f8f8 	bl	80097e8 <prvAddNewTaskToReadyList>
 80095f8:	e001      	b.n	80095fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095fe:	697b      	ldr	r3, [r7, #20]
	}
 8009600:	4618      	mov	r0, r3
 8009602:	3728      	adds	r7, #40	@ 0x28
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08c      	sub	sp, #48	@ 0x30
 800960c:	af04      	add	r7, sp, #16
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	4613      	mov	r3, r2
 8009616:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009618:	88fb      	ldrh	r3, [r7, #6]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fe75 	bl	800b30c <pvPortMalloc>
 8009622:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00e      	beq.n	8009648 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800962a:	20ac      	movs	r0, #172	@ 0xac
 800962c:	f001 fe6e 	bl	800b30c <pvPortMalloc>
 8009630:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	631a      	str	r2, [r3, #48]	@ 0x30
 800963e:	e005      	b.n	800964c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	f001 ff31 	bl	800b4a8 <vPortFree>
 8009646:	e001      	b.n	800964c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d017      	beq.n	8009682 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	2300      	movs	r3, #0
 800965e:	9303      	str	r3, [sp, #12]
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	9302      	str	r3, [sp, #8]
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 f80f 	bl	8009694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009676:	69f8      	ldr	r0, [r7, #28]
 8009678:	f000 f8b6 	bl	80097e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800967c:	2301      	movs	r3, #1
 800967e:	61bb      	str	r3, [r7, #24]
 8009680:	e002      	b.n	8009688 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009688:	69bb      	ldr	r3, [r7, #24]
	}
 800968a:	4618      	mov	r0, r3
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	461a      	mov	r2, r3
 80096ac:	21a5      	movs	r1, #165	@ 0xa5
 80096ae:	f002 fe7b 	bl	800c3a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096bc:	3b01      	subs	r3, #1
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	617b      	str	r3, [r7, #20]
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	e7fd      	b.n	80096ea <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01f      	beq.n	800973a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
 80096fe:	e012      	b.n	8009726 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	7819      	ldrb	r1, [r3, #0]
 8009708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	3334      	adds	r3, #52	@ 0x34
 8009710:	460a      	mov	r2, r1
 8009712:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d006      	beq.n	800972e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	3301      	adds	r3, #1
 8009724:	61fb      	str	r3, [r7, #28]
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	2b0f      	cmp	r3, #15
 800972a:	d9e9      	bls.n	8009700 <prvInitialiseNewTask+0x6c>
 800972c:	e000      	b.n	8009730 <prvInitialiseNewTask+0x9c>
			{
				break;
 800972e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009738:	e003      	b.n	8009742 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800973a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009744:	2b37      	cmp	r3, #55	@ 0x37
 8009746:	d901      	bls.n	800974c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009748:	2337      	movs	r3, #55	@ 0x37
 800974a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800974c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009750:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009756:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2200      	movs	r2, #0
 800975c:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fec4 	bl	80084f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	3318      	adds	r3, #24
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe febf 	bl	80084f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009786:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	2200      	movs	r2, #0
 8009794:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	3358      	adds	r3, #88	@ 0x58
 800979c:	224c      	movs	r2, #76	@ 0x4c
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f002 fe01 	bl	800c3a8 <memset>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	4a0c      	ldr	r2, [pc, #48]	@ (80097dc <prvInitialiseNewTask+0x148>)
 80097aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	4a0c      	ldr	r2, [pc, #48]	@ (80097e0 <prvInitialiseNewTask+0x14c>)
 80097b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	4a0b      	ldr	r2, [pc, #44]	@ (80097e4 <prvInitialiseNewTask+0x150>)
 80097b6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	69b8      	ldr	r0, [r7, #24]
 80097be:	f001 fb55 	bl	800ae6c <pxPortInitialiseStack>
 80097c2:	4602      	mov	r2, r0
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097d4:	bf00      	nop
 80097d6:	3720      	adds	r7, #32
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20004f40 	.word	0x20004f40
 80097e0:	20004fa8 	.word	0x20004fa8
 80097e4:	20005010 	.word	0x20005010

080097e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097f0:	f001 fc6a 	bl	800b0c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097f4:	4b2d      	ldr	r3, [pc, #180]	@ (80098ac <prvAddNewTaskToReadyList+0xc4>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	4a2c      	ldr	r2, [pc, #176]	@ (80098ac <prvAddNewTaskToReadyList+0xc4>)
 80097fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097fe:	4b2c      	ldr	r3, [pc, #176]	@ (80098b0 <prvAddNewTaskToReadyList+0xc8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009806:	4a2a      	ldr	r2, [pc, #168]	@ (80098b0 <prvAddNewTaskToReadyList+0xc8>)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800980c:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <prvAddNewTaskToReadyList+0xc4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d110      	bne.n	8009836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009814:	f000 fce2 	bl	800a1dc <prvInitialiseTaskLists>
 8009818:	e00d      	b.n	8009836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800981a:	4b26      	ldr	r3, [pc, #152]	@ (80098b4 <prvAddNewTaskToReadyList+0xcc>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009822:	4b23      	ldr	r3, [pc, #140]	@ (80098b0 <prvAddNewTaskToReadyList+0xc8>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982c:	429a      	cmp	r2, r3
 800982e:	d802      	bhi.n	8009836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009830:	4a1f      	ldr	r2, [pc, #124]	@ (80098b0 <prvAddNewTaskToReadyList+0xc8>)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009836:	4b20      	ldr	r3, [pc, #128]	@ (80098b8 <prvAddNewTaskToReadyList+0xd0>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3301      	adds	r3, #1
 800983c:	4a1e      	ldr	r2, [pc, #120]	@ (80098b8 <prvAddNewTaskToReadyList+0xd0>)
 800983e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009840:	4b1d      	ldr	r3, [pc, #116]	@ (80098b8 <prvAddNewTaskToReadyList+0xd0>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984c:	4b1b      	ldr	r3, [pc, #108]	@ (80098bc <prvAddNewTaskToReadyList+0xd4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d903      	bls.n	800985c <prvAddNewTaskToReadyList+0x74>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009858:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <prvAddNewTaskToReadyList+0xd4>)
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009860:	4613      	mov	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4a15      	ldr	r2, [pc, #84]	@ (80098c0 <prvAddNewTaskToReadyList+0xd8>)
 800986a:	441a      	add	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3304      	adds	r3, #4
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f7fe fe49 	bl	800850a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009878:	f001 fc58 	bl	800b12c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800987c:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <prvAddNewTaskToReadyList+0xcc>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00e      	beq.n	80098a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009884:	4b0a      	ldr	r3, [pc, #40]	@ (80098b0 <prvAddNewTaskToReadyList+0xc8>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988e:	429a      	cmp	r2, r3
 8009890:	d207      	bcs.n	80098a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009892:	4b0c      	ldr	r3, [pc, #48]	@ (80098c4 <prvAddNewTaskToReadyList+0xdc>)
 8009894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	200011c0 	.word	0x200011c0
 80098b0:	20000cec 	.word	0x20000cec
 80098b4:	200011cc 	.word	0x200011cc
 80098b8:	200011dc 	.word	0x200011dc
 80098bc:	200011c8 	.word	0x200011c8
 80098c0:	20000cf0 	.word	0x20000cf0
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d018      	beq.n	800990c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098da:	4b14      	ldr	r3, [pc, #80]	@ (800992c <vTaskDelay+0x64>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <vTaskDelay+0x32>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60bb      	str	r3, [r7, #8]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098fa:	f000 f88b 	bl	8009a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098fe:	2100      	movs	r1, #0
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fee5 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009906:	f000 f893 	bl	8009a30 <xTaskResumeAll>
 800990a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d107      	bne.n	8009922 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009912:	4b07      	ldr	r3, [pc, #28]	@ (8009930 <vTaskDelay+0x68>)
 8009914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	200011e8 	.word	0x200011e8
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	@ 0x28
 8009938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800993a:	2300      	movs	r3, #0
 800993c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800993e:	2300      	movs	r3, #0
 8009940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009942:	463a      	mov	r2, r7
 8009944:	1d39      	adds	r1, r7, #4
 8009946:	f107 0308 	add.w	r3, r7, #8
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe fb86 	bl	800805c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	9202      	str	r2, [sp, #8]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	2300      	movs	r3, #0
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	2300      	movs	r3, #0
 8009960:	460a      	mov	r2, r1
 8009962:	4924      	ldr	r1, [pc, #144]	@ (80099f4 <vTaskStartScheduler+0xc0>)
 8009964:	4824      	ldr	r0, [pc, #144]	@ (80099f8 <vTaskStartScheduler+0xc4>)
 8009966:	f7ff fdef 	bl	8009548 <xTaskCreateStatic>
 800996a:	4603      	mov	r3, r0
 800996c:	4a23      	ldr	r2, [pc, #140]	@ (80099fc <vTaskStartScheduler+0xc8>)
 800996e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009970:	4b22      	ldr	r3, [pc, #136]	@ (80099fc <vTaskStartScheduler+0xc8>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009978:	2301      	movs	r3, #1
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	e001      	b.n	8009982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d102      	bne.n	800998e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009988:	f000 fef6 	bl	800a778 <xTimerCreateTimerTask>
 800998c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d11b      	bne.n	80099cc <vTaskStartScheduler+0x98>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	613b      	str	r3, [r7, #16]
}
 80099a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099a8:	4b15      	ldr	r3, [pc, #84]	@ (8009a00 <vTaskStartScheduler+0xcc>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3358      	adds	r3, #88	@ 0x58
 80099ae:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <vTaskStartScheduler+0xd0>)
 80099b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099b2:	4b15      	ldr	r3, [pc, #84]	@ (8009a08 <vTaskStartScheduler+0xd4>)
 80099b4:	f04f 32ff 	mov.w	r2, #4294967295
 80099b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099ba:	4b14      	ldr	r3, [pc, #80]	@ (8009a0c <vTaskStartScheduler+0xd8>)
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099c0:	4b13      	ldr	r3, [pc, #76]	@ (8009a10 <vTaskStartScheduler+0xdc>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099c6:	f001 fadb 	bl	800af80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099ca:	e00f      	b.n	80099ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d2:	d10b      	bne.n	80099ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	e7fd      	b.n	80099e8 <vTaskStartScheduler+0xb4>
}
 80099ec:	bf00      	nop
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	0800ecc4 	.word	0x0800ecc4
 80099f8:	0800a1ad 	.word	0x0800a1ad
 80099fc:	200011e4 	.word	0x200011e4
 8009a00:	20000cec 	.word	0x20000cec
 8009a04:	2000001c 	.word	0x2000001c
 8009a08:	200011e0 	.word	0x200011e0
 8009a0c:	200011cc 	.word	0x200011cc
 8009a10:	200011c4 	.word	0x200011c4

08009a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a18:	4b04      	ldr	r3, [pc, #16]	@ (8009a2c <vTaskSuspendAll+0x18>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	4a03      	ldr	r2, [pc, #12]	@ (8009a2c <vTaskSuspendAll+0x18>)
 8009a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a22:	bf00      	nop
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	200011e8 	.word	0x200011e8

08009a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a3e:	4b42      	ldr	r3, [pc, #264]	@ (8009b48 <xTaskResumeAll+0x118>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10b      	bne.n	8009a5e <xTaskResumeAll+0x2e>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	603b      	str	r3, [r7, #0]
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	e7fd      	b.n	8009a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a5e:	f001 fb33 	bl	800b0c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a62:	4b39      	ldr	r3, [pc, #228]	@ (8009b48 <xTaskResumeAll+0x118>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	4a37      	ldr	r2, [pc, #220]	@ (8009b48 <xTaskResumeAll+0x118>)
 8009a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a6c:	4b36      	ldr	r3, [pc, #216]	@ (8009b48 <xTaskResumeAll+0x118>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d162      	bne.n	8009b3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a74:	4b35      	ldr	r3, [pc, #212]	@ (8009b4c <xTaskResumeAll+0x11c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d05e      	beq.n	8009b3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a7c:	e02f      	b.n	8009ade <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7e:	4b34      	ldr	r3, [pc, #208]	@ (8009b50 <xTaskResumeAll+0x120>)
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3318      	adds	r3, #24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fd9a 	bl	80085c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fd95 	bl	80085c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b54 <xTaskResumeAll+0x124>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d903      	bls.n	8009aae <xTaskResumeAll+0x7e>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8009b54 <xTaskResumeAll+0x124>)
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4a27      	ldr	r2, [pc, #156]	@ (8009b58 <xTaskResumeAll+0x128>)
 8009abc:	441a      	add	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f7fe fd20 	bl	800850a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ace:	4b23      	ldr	r3, [pc, #140]	@ (8009b5c <xTaskResumeAll+0x12c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d302      	bcc.n	8009ade <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009ad8:	4b21      	ldr	r3, [pc, #132]	@ (8009b60 <xTaskResumeAll+0x130>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ade:	4b1c      	ldr	r3, [pc, #112]	@ (8009b50 <xTaskResumeAll+0x120>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1cb      	bne.n	8009a7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d001      	beq.n	8009af0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009aec:	f000 fc1a 	bl	800a324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009af0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b64 <xTaskResumeAll+0x134>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d010      	beq.n	8009b1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009afc:	f000 f858 	bl	8009bb0 <xTaskIncrementTick>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b06:	4b16      	ldr	r3, [pc, #88]	@ (8009b60 <xTaskResumeAll+0x130>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f1      	bne.n	8009afc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009b18:	4b12      	ldr	r3, [pc, #72]	@ (8009b64 <xTaskResumeAll+0x134>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b1e:	4b10      	ldr	r3, [pc, #64]	@ (8009b60 <xTaskResumeAll+0x130>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d009      	beq.n	8009b3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b26:	2301      	movs	r3, #1
 8009b28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b68 <xTaskResumeAll+0x138>)
 8009b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b3a:	f001 faf7 	bl	800b12c <vPortExitCritical>

	return xAlreadyYielded;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	200011e8 	.word	0x200011e8
 8009b4c:	200011c0 	.word	0x200011c0
 8009b50:	20001180 	.word	0x20001180
 8009b54:	200011c8 	.word	0x200011c8
 8009b58:	20000cf0 	.word	0x20000cf0
 8009b5c:	20000cec 	.word	0x20000cec
 8009b60:	200011d4 	.word	0x200011d4
 8009b64:	200011d0 	.word	0x200011d0
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b72:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <xTaskGetTickCount+0x1c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b78:	687b      	ldr	r3, [r7, #4]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	200011c4 	.word	0x200011c4

08009b8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b92:	f001 fb79 	bl	800b288 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009b96:	2300      	movs	r3, #0
 8009b98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009b9a:	4b04      	ldr	r3, [pc, #16]	@ (8009bac <xTaskGetTickCountFromISR+0x20>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ba0:	683b      	ldr	r3, [r7, #0]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200011c4 	.word	0x200011c4

08009bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bba:	4b4f      	ldr	r3, [pc, #316]	@ (8009cf8 <xTaskIncrementTick+0x148>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f040 8090 	bne.w	8009ce4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8009cfc <xTaskIncrementTick+0x14c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8009cfc <xTaskIncrementTick+0x14c>)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d121      	bne.n	8009c1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bd8:	4b49      	ldr	r3, [pc, #292]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	603b      	str	r3, [r7, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	e7fd      	b.n	8009bf6 <xTaskIncrementTick+0x46>
 8009bfa:	4b41      	ldr	r3, [pc, #260]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	4b40      	ldr	r3, [pc, #256]	@ (8009d04 <xTaskIncrementTick+0x154>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a3e      	ldr	r2, [pc, #248]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	4a3e      	ldr	r2, [pc, #248]	@ (8009d04 <xTaskIncrementTick+0x154>)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d08 <xTaskIncrementTick+0x158>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	4a3c      	ldr	r2, [pc, #240]	@ (8009d08 <xTaskIncrementTick+0x158>)
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	f000 fb84 	bl	800a324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d0c <xTaskIncrementTick+0x15c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d349      	bcc.n	8009cba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c26:	4b36      	ldr	r3, [pc, #216]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d104      	bne.n	8009c3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c30:	4b36      	ldr	r3, [pc, #216]	@ (8009d0c <xTaskIncrementTick+0x15c>)
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295
 8009c36:	601a      	str	r2, [r3, #0]
					break;
 8009c38:	e03f      	b.n	8009cba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c3a:	4b31      	ldr	r3, [pc, #196]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d203      	bcs.n	8009c5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c52:	4a2e      	ldr	r2, [pc, #184]	@ (8009d0c <xTaskIncrementTick+0x15c>)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c58:	e02f      	b.n	8009cba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fcb0 	bl	80085c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d004      	beq.n	8009c76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3318      	adds	r3, #24
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fca7 	bl	80085c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7a:	4b25      	ldr	r3, [pc, #148]	@ (8009d10 <xTaskIncrementTick+0x160>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d903      	bls.n	8009c8a <xTaskIncrementTick+0xda>
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	4a22      	ldr	r2, [pc, #136]	@ (8009d10 <xTaskIncrementTick+0x160>)
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4a1f      	ldr	r2, [pc, #124]	@ (8009d14 <xTaskIncrementTick+0x164>)
 8009c98:	441a      	add	r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7fe fc32 	bl	800850a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009caa:	4b1b      	ldr	r3, [pc, #108]	@ (8009d18 <xTaskIncrementTick+0x168>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d3b8      	bcc.n	8009c26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cb8:	e7b5      	b.n	8009c26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cba:	4b17      	ldr	r3, [pc, #92]	@ (8009d18 <xTaskIncrementTick+0x168>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc0:	4914      	ldr	r1, [pc, #80]	@ (8009d14 <xTaskIncrementTick+0x164>)
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d901      	bls.n	8009cd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cd6:	4b11      	ldr	r3, [pc, #68]	@ (8009d1c <xTaskIncrementTick+0x16c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	e004      	b.n	8009cee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d20 <xTaskIncrementTick+0x170>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a0d      	ldr	r2, [pc, #52]	@ (8009d20 <xTaskIncrementTick+0x170>)
 8009cec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cee:	697b      	ldr	r3, [r7, #20]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	200011e8 	.word	0x200011e8
 8009cfc:	200011c4 	.word	0x200011c4
 8009d00:	20001178 	.word	0x20001178
 8009d04:	2000117c 	.word	0x2000117c
 8009d08:	200011d8 	.word	0x200011d8
 8009d0c:	200011e0 	.word	0x200011e0
 8009d10:	200011c8 	.word	0x200011c8
 8009d14:	20000cf0 	.word	0x20000cf0
 8009d18:	20000cec 	.word	0x20000cec
 8009d1c:	200011d4 	.word	0x200011d4
 8009d20:	200011d0 	.word	0x200011d0

08009d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8009dd8 <vTaskSwitchContext+0xb4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d32:	4b2a      	ldr	r3, [pc, #168]	@ (8009ddc <vTaskSwitchContext+0xb8>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d38:	e047      	b.n	8009dca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009d3a:	4b28      	ldr	r3, [pc, #160]	@ (8009ddc <vTaskSwitchContext+0xb8>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d40:	4b27      	ldr	r3, [pc, #156]	@ (8009de0 <vTaskSwitchContext+0xbc>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e011      	b.n	8009d6c <vTaskSwitchContext+0x48>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10b      	bne.n	8009d66 <vTaskSwitchContext+0x42>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	607b      	str	r3, [r7, #4]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <vTaskSwitchContext+0x3e>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	491d      	ldr	r1, [pc, #116]	@ (8009de4 <vTaskSwitchContext+0xc0>)
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	440b      	add	r3, r1
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0e3      	beq.n	8009d48 <vTaskSwitchContext+0x24>
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4a16      	ldr	r2, [pc, #88]	@ (8009de4 <vTaskSwitchContext+0xc0>)
 8009d8c:	4413      	add	r3, r2
 8009d8e:	60bb      	str	r3, [r7, #8]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	3308      	adds	r3, #8
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d104      	bne.n	8009db0 <vTaskSwitchContext+0x8c>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	4a0c      	ldr	r2, [pc, #48]	@ (8009de8 <vTaskSwitchContext+0xc4>)
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	4a09      	ldr	r2, [pc, #36]	@ (8009de0 <vTaskSwitchContext+0xbc>)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009dc0:	4b09      	ldr	r3, [pc, #36]	@ (8009de8 <vTaskSwitchContext+0xc4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3358      	adds	r3, #88	@ 0x58
 8009dc6:	4a09      	ldr	r2, [pc, #36]	@ (8009dec <vTaskSwitchContext+0xc8>)
 8009dc8:	6013      	str	r3, [r2, #0]
}
 8009dca:	bf00      	nop
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	200011e8 	.word	0x200011e8
 8009ddc:	200011d4 	.word	0x200011d4
 8009de0:	200011c8 	.word	0x200011c8
 8009de4:	20000cf0 	.word	0x20000cf0
 8009de8:	20000cec 	.word	0x20000cec
 8009dec:	2000001c 	.word	0x2000001c

08009df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	60fb      	str	r3, [r7, #12]
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e18:	4b07      	ldr	r3, [pc, #28]	@ (8009e38 <vTaskPlaceOnEventList+0x48>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3318      	adds	r3, #24
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7fe fb96 	bl	8008552 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e26:	2101      	movs	r1, #1
 8009e28:	6838      	ldr	r0, [r7, #0]
 8009e2a:	f000 fc51 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000cec 	.word	0x20000cec

08009e3c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	617b      	str	r3, [r7, #20]
}
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
 8009e64:	e7fd      	b.n	8009e62 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009e66:	4b12      	ldr	r3, [pc, #72]	@ (8009eb0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10b      	bne.n	8009e86 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	613b      	str	r3, [r7, #16]
}
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	e7fd      	b.n	8009e82 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009e86:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009e90:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e92:	4b08      	ldr	r3, [pc, #32]	@ (8009eb4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3318      	adds	r3, #24
 8009e98:	4619      	mov	r1, r3
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f7fe fb35 	bl	800850a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fc14 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
}
 8009ea8:	bf00      	nop
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200011e8 	.word	0x200011e8
 8009eb4:	20000cec 	.word	0x20000cec

08009eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	617b      	str	r3, [r7, #20]
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	e7fd      	b.n	8009ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8009f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3318      	adds	r3, #24
 8009ee8:	4619      	mov	r1, r3
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7fe fb0d 	bl	800850a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8009efa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	68b8      	ldr	r0, [r7, #8]
 8009f00:	f000 fbe6 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
	}
 8009f04:	bf00      	nop
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	20000cec 	.word	0x20000cec

08009f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10b      	bne.n	8009f3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60fb      	str	r3, [r7, #12]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3318      	adds	r3, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fb3e 	bl	80085c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f48:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc0 <xTaskRemoveFromEventList+0xb0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d11d      	bne.n	8009f8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fb35 	bl	80085c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5e:	4b19      	ldr	r3, [pc, #100]	@ (8009fc4 <xTaskRemoveFromEventList+0xb4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d903      	bls.n	8009f6e <xTaskRemoveFromEventList+0x5e>
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6a:	4a16      	ldr	r2, [pc, #88]	@ (8009fc4 <xTaskRemoveFromEventList+0xb4>)
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4a13      	ldr	r2, [pc, #76]	@ (8009fc8 <xTaskRemoveFromEventList+0xb8>)
 8009f7c:	441a      	add	r2, r3
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f7fe fac0 	bl	800850a <vListInsertEnd>
 8009f8a:	e005      	b.n	8009f98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	3318      	adds	r3, #24
 8009f90:	4619      	mov	r1, r3
 8009f92:	480e      	ldr	r0, [pc, #56]	@ (8009fcc <xTaskRemoveFromEventList+0xbc>)
 8009f94:	f7fe fab9 	bl	800850a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd0 <xTaskRemoveFromEventList+0xc0>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d905      	bls.n	8009fb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009faa:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd4 <xTaskRemoveFromEventList+0xc4>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	e001      	b.n	8009fb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fb6:	697b      	ldr	r3, [r7, #20]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200011e8 	.word	0x200011e8
 8009fc4:	200011c8 	.word	0x200011c8
 8009fc8:	20000cf0 	.word	0x20000cf0
 8009fcc:	20001180 	.word	0x20001180
 8009fd0:	20000cec 	.word	0x20000cec
 8009fd4:	200011d4 	.word	0x200011d4

08009fd8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800a08c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	613b      	str	r3, [r7, #16]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10b      	bne.n	800a030 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	60fb      	str	r3, [r7, #12]
}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	e7fd      	b.n	800a02c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7fe fac7 	bl	80085c4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	3304      	adds	r3, #4
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fac2 	bl	80085c4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a044:	4b12      	ldr	r3, [pc, #72]	@ (800a090 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d903      	bls.n	800a054 <vTaskRemoveFromUnorderedEventList+0x7c>
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4a0f      	ldr	r2, [pc, #60]	@ (800a090 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4a0c      	ldr	r2, [pc, #48]	@ (800a094 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a062:	441a      	add	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7fe fa4d 	bl	800850a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a074:	4b08      	ldr	r3, [pc, #32]	@ (800a098 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d902      	bls.n	800a084 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a07e:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a080:	2201      	movs	r2, #1
 800a082:	601a      	str	r2, [r3, #0]
	}
}
 800a084:	bf00      	nop
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200011e8 	.word	0x200011e8
 800a090:	200011c8 	.word	0x200011c8
 800a094:	20000cf0 	.word	0x20000cf0
 800a098:	20000cec 	.word	0x20000cec
 800a09c:	200011d4 	.word	0x200011d4

0800a0a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0a8:	4b06      	ldr	r3, [pc, #24]	@ (800a0c4 <vTaskInternalSetTimeOutState+0x24>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0b0:	4b05      	ldr	r3, [pc, #20]	@ (800a0c8 <vTaskInternalSetTimeOutState+0x28>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	605a      	str	r2, [r3, #4]
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	200011d8 	.word	0x200011d8
 800a0c8:	200011c4 	.word	0x200011c4

0800a0cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	613b      	str	r3, [r7, #16]
}
 800a0ee:	bf00      	nop
 800a0f0:	bf00      	nop
 800a0f2:	e7fd      	b.n	800a0f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	60fb      	str	r3, [r7, #12]
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	e7fd      	b.n	800a10e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a112:	f000 ffd9 	bl	800b0c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a116:	4b1d      	ldr	r3, [pc, #116]	@ (800a18c <xTaskCheckForTimeOut+0xc0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12e:	d102      	bne.n	800a136 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a130:	2300      	movs	r3, #0
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	e023      	b.n	800a17e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <xTaskCheckForTimeOut+0xc4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d007      	beq.n	800a152 <xTaskCheckForTimeOut+0x86>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d302      	bcc.n	800a152 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a14c:	2301      	movs	r3, #1
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	e015      	b.n	800a17e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d20b      	bcs.n	800a174 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	1ad2      	subs	r2, r2, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff ff99 	bl	800a0a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a16e:	2300      	movs	r3, #0
 800a170:	61fb      	str	r3, [r7, #28]
 800a172:	e004      	b.n	800a17e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2200      	movs	r2, #0
 800a178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a17a:	2301      	movs	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a17e:	f000 ffd5 	bl	800b12c <vPortExitCritical>

	return xReturn;
 800a182:	69fb      	ldr	r3, [r7, #28]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	200011c4 	.word	0x200011c4
 800a190:	200011d8 	.word	0x200011d8

0800a194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a198:	4b03      	ldr	r3, [pc, #12]	@ (800a1a8 <vTaskMissedYield+0x14>)
 800a19a:	2201      	movs	r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
}
 800a19e:	bf00      	nop
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	200011d4 	.word	0x200011d4

0800a1ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1b4:	f000 f852 	bl	800a25c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1b8:	4b06      	ldr	r3, [pc, #24]	@ (800a1d4 <prvIdleTask+0x28>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d9f9      	bls.n	800a1b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1c0:	4b05      	ldr	r3, [pc, #20]	@ (800a1d8 <prvIdleTask+0x2c>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1d0:	e7f0      	b.n	800a1b4 <prvIdleTask+0x8>
 800a1d2:	bf00      	nop
 800a1d4:	20000cf0 	.word	0x20000cf0
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	607b      	str	r3, [r7, #4]
 800a1e6:	e00c      	b.n	800a202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4a12      	ldr	r2, [pc, #72]	@ (800a23c <prvInitialiseTaskLists+0x60>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe f95a 	bl	80084b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3301      	adds	r3, #1
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b37      	cmp	r3, #55	@ 0x37
 800a206:	d9ef      	bls.n	800a1e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a208:	480d      	ldr	r0, [pc, #52]	@ (800a240 <prvInitialiseTaskLists+0x64>)
 800a20a:	f7fe f951 	bl	80084b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a20e:	480d      	ldr	r0, [pc, #52]	@ (800a244 <prvInitialiseTaskLists+0x68>)
 800a210:	f7fe f94e 	bl	80084b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a214:	480c      	ldr	r0, [pc, #48]	@ (800a248 <prvInitialiseTaskLists+0x6c>)
 800a216:	f7fe f94b 	bl	80084b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a21a:	480c      	ldr	r0, [pc, #48]	@ (800a24c <prvInitialiseTaskLists+0x70>)
 800a21c:	f7fe f948 	bl	80084b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a220:	480b      	ldr	r0, [pc, #44]	@ (800a250 <prvInitialiseTaskLists+0x74>)
 800a222:	f7fe f945 	bl	80084b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a226:	4b0b      	ldr	r3, [pc, #44]	@ (800a254 <prvInitialiseTaskLists+0x78>)
 800a228:	4a05      	ldr	r2, [pc, #20]	@ (800a240 <prvInitialiseTaskLists+0x64>)
 800a22a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a22c:	4b0a      	ldr	r3, [pc, #40]	@ (800a258 <prvInitialiseTaskLists+0x7c>)
 800a22e:	4a05      	ldr	r2, [pc, #20]	@ (800a244 <prvInitialiseTaskLists+0x68>)
 800a230:	601a      	str	r2, [r3, #0]
}
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000cf0 	.word	0x20000cf0
 800a240:	20001150 	.word	0x20001150
 800a244:	20001164 	.word	0x20001164
 800a248:	20001180 	.word	0x20001180
 800a24c:	20001194 	.word	0x20001194
 800a250:	200011ac 	.word	0x200011ac
 800a254:	20001178 	.word	0x20001178
 800a258:	2000117c 	.word	0x2000117c

0800a25c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a262:	e019      	b.n	800a298 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a264:	f000 ff30 	bl	800b0c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a268:	4b10      	ldr	r3, [pc, #64]	@ (800a2ac <prvCheckTasksWaitingTermination+0x50>)
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3304      	adds	r3, #4
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe f9a5 	bl	80085c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a27a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b0 <prvCheckTasksWaitingTermination+0x54>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3b01      	subs	r3, #1
 800a280:	4a0b      	ldr	r2, [pc, #44]	@ (800a2b0 <prvCheckTasksWaitingTermination+0x54>)
 800a282:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a284:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b4 <prvCheckTasksWaitingTermination+0x58>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3b01      	subs	r3, #1
 800a28a:	4a0a      	ldr	r2, [pc, #40]	@ (800a2b4 <prvCheckTasksWaitingTermination+0x58>)
 800a28c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a28e:	f000 ff4d 	bl	800b12c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f810 	bl	800a2b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a298:	4b06      	ldr	r3, [pc, #24]	@ (800a2b4 <prvCheckTasksWaitingTermination+0x58>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e1      	bne.n	800a264 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20001194 	.word	0x20001194
 800a2b0:	200011c0 	.word	0x200011c0
 800a2b4:	200011a8 	.word	0x200011a8

0800a2b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3358      	adds	r3, #88	@ 0x58
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f002 f88b 	bl	800c3e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d108      	bne.n	800a2e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 f8e5 	bl	800b4a8 <vPortFree>
				vPortFree( pxTCB );
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 f8e2 	bl	800b4a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2e4:	e019      	b.n	800a31a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d103      	bne.n	800a2f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f8d9 	bl	800b4a8 <vPortFree>
	}
 800a2f6:	e010      	b.n	800a31a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d00b      	beq.n	800a31a <prvDeleteTCB+0x62>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	60fb      	str	r3, [r7, #12]
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <prvDeleteTCB+0x5e>
	}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a32a:	4b0c      	ldr	r3, [pc, #48]	@ (800a35c <prvResetNextTaskUnblockTime+0x38>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a334:	4b0a      	ldr	r3, [pc, #40]	@ (800a360 <prvResetNextTaskUnblockTime+0x3c>)
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a33c:	e008      	b.n	800a350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a33e:	4b07      	ldr	r3, [pc, #28]	@ (800a35c <prvResetNextTaskUnblockTime+0x38>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	4a04      	ldr	r2, [pc, #16]	@ (800a360 <prvResetNextTaskUnblockTime+0x3c>)
 800a34e:	6013      	str	r3, [r2, #0]
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	20001178 	.word	0x20001178
 800a360:	200011e0 	.word	0x200011e0

0800a364 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a36a:	4b05      	ldr	r3, [pc, #20]	@ (800a380 <xTaskGetCurrentTaskHandle+0x1c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a370:	687b      	ldr	r3, [r7, #4]
	}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20000cec 	.word	0x20000cec

0800a384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a38a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b8 <xTaskGetSchedulerState+0x34>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a392:	2301      	movs	r3, #1
 800a394:	607b      	str	r3, [r7, #4]
 800a396:	e008      	b.n	800a3aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a398:	4b08      	ldr	r3, [pc, #32]	@ (800a3bc <xTaskGetSchedulerState+0x38>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	607b      	str	r3, [r7, #4]
 800a3a4:	e001      	b.n	800a3aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3aa:	687b      	ldr	r3, [r7, #4]
	}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	200011cc 	.word	0x200011cc
 800a3bc:	200011e8 	.word	0x200011e8

0800a3c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d051      	beq.n	800a47a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3da:	4b2a      	ldr	r3, [pc, #168]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d241      	bcs.n	800a468 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db06      	blt.n	800a3fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ec:	4b25      	ldr	r3, [pc, #148]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6959      	ldr	r1, [r3, #20]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4a1f      	ldr	r2, [pc, #124]	@ (800a488 <xTaskPriorityInherit+0xc8>)
 800a40c:	4413      	add	r3, r2
 800a40e:	4299      	cmp	r1, r3
 800a410:	d122      	bne.n	800a458 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	3304      	adds	r3, #4
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe f8d4 	bl	80085c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a41c:	4b19      	ldr	r3, [pc, #100]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a42a:	4b18      	ldr	r3, [pc, #96]	@ (800a48c <xTaskPriorityInherit+0xcc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d903      	bls.n	800a43a <xTaskPriorityInherit+0x7a>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	4a15      	ldr	r2, [pc, #84]	@ (800a48c <xTaskPriorityInherit+0xcc>)
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4a10      	ldr	r2, [pc, #64]	@ (800a488 <xTaskPriorityInherit+0xc8>)
 800a448:	441a      	add	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f7fe f85a 	bl	800850a <vListInsertEnd>
 800a456:	e004      	b.n	800a462 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a458:	4b0a      	ldr	r3, [pc, #40]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a462:	2301      	movs	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e008      	b.n	800a47a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a46c:	4b05      	ldr	r3, [pc, #20]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	429a      	cmp	r2, r3
 800a474:	d201      	bcs.n	800a47a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a476:	2301      	movs	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a47a:	68fb      	ldr	r3, [r7, #12]
	}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20000cec 	.word	0x20000cec
 800a488:	20000cf0 	.word	0x20000cf0
 800a48c:	200011c8 	.word	0x200011c8

0800a490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d058      	beq.n	800a558 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a564 <xTaskPriorityDisinherit+0xd4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d00b      	beq.n	800a4c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60bb      	str	r3, [r7, #8]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d02c      	beq.n	800a558 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a502:	2b00      	cmp	r3, #0
 800a504:	d128      	bne.n	800a558 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	3304      	adds	r3, #4
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe f85a 	bl	80085c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a528:	4b0f      	ldr	r3, [pc, #60]	@ (800a568 <xTaskPriorityDisinherit+0xd8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d903      	bls.n	800a538 <xTaskPriorityDisinherit+0xa8>
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a534:	4a0c      	ldr	r2, [pc, #48]	@ (800a568 <xTaskPriorityDisinherit+0xd8>)
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4a09      	ldr	r2, [pc, #36]	@ (800a56c <xTaskPriorityDisinherit+0xdc>)
 800a546:	441a      	add	r2, r3
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7fd ffdb 	bl	800850a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a558:	697b      	ldr	r3, [r7, #20]
	}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20000cec 	.word	0x20000cec
 800a568:	200011c8 	.word	0x200011c8
 800a56c:	20000cf0 	.word	0x20000cf0

0800a570 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d06c      	beq.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10b      	bne.n	800a5a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	60fb      	str	r3, [r7, #12]
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	e7fd      	b.n	800a5a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d902      	bls.n	800a5b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	e002      	b.n	800a5be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d04c      	beq.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d147      	bne.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5d2:	4b26      	ldr	r3, [pc, #152]	@ (800a66c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d10b      	bne.n	800a5f4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	60bb      	str	r3, [r7, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	db04      	blt.n	800a612 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	6959      	ldr	r1, [r3, #20]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4a13      	ldr	r2, [pc, #76]	@ (800a670 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a622:	4413      	add	r3, r2
 800a624:	4299      	cmp	r1, r3
 800a626:	d11c      	bne.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fd ffc9 	bl	80085c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a636:	4b0f      	ldr	r3, [pc, #60]	@ (800a674 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d903      	bls.n	800a646 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a642:	4a0c      	ldr	r2, [pc, #48]	@ (800a674 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4a07      	ldr	r2, [pc, #28]	@ (800a670 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a654:	441a      	add	r2, r3
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	3304      	adds	r3, #4
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7fd ff54 	bl	800850a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a662:	bf00      	nop
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000cec 	.word	0x20000cec
 800a670:	20000cf0 	.word	0x20000cf0
 800a674:	200011c8 	.word	0x200011c8

0800a678 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a67e:	4b09      	ldr	r3, [pc, #36]	@ (800a6a4 <uxTaskResetEventItemValue+0x2c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <uxTaskResetEventItemValue+0x2c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68c:	4b05      	ldr	r3, [pc, #20]	@ (800a6a4 <uxTaskResetEventItemValue+0x2c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a694:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a696:	687b      	ldr	r3, [r7, #4]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	20000cec 	.word	0x20000cec

0800a6a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a6ac:	4b07      	ldr	r3, [pc, #28]	@ (800a6cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d004      	beq.n	800a6be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6b4:	4b05      	ldr	r3, [pc, #20]	@ (800a6cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6ba:	3201      	adds	r2, #1
 800a6bc:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800a6be:	4b03      	ldr	r3, [pc, #12]	@ (800a6cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
	}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20000cec 	.word	0x20000cec

0800a6d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6da:	4b21      	ldr	r3, [pc, #132]	@ (800a760 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e0:	4b20      	ldr	r3, [pc, #128]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd ff6c 	bl	80085c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d10a      	bne.n	800a70a <prvAddCurrentTaskToDelayedList+0x3a>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4819      	ldr	r0, [pc, #100]	@ (800a768 <prvAddCurrentTaskToDelayedList+0x98>)
 800a704:	f7fd ff01 	bl	800850a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a708:	e026      	b.n	800a758 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4413      	add	r3, r2
 800a710:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a712:	4b14      	ldr	r3, [pc, #80]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d209      	bcs.n	800a736 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a722:	4b12      	ldr	r3, [pc, #72]	@ (800a76c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b0f      	ldr	r3, [pc, #60]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fd ff0f 	bl	8008552 <vListInsert>
}
 800a734:	e010      	b.n	800a758 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a736:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	4b0a      	ldr	r3, [pc, #40]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fd ff05 	bl	8008552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a748:	4b0a      	ldr	r3, [pc, #40]	@ (800a774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d202      	bcs.n	800a758 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a752:	4a08      	ldr	r2, [pc, #32]	@ (800a774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	6013      	str	r3, [r2, #0]
}
 800a758:	bf00      	nop
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	200011c4 	.word	0x200011c4
 800a764:	20000cec 	.word	0x20000cec
 800a768:	200011ac 	.word	0x200011ac
 800a76c:	2000117c 	.word	0x2000117c
 800a770:	20001178 	.word	0x20001178
 800a774:	200011e0 	.word	0x200011e0

0800a778 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	@ 0x28
 800a77c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a782:	f000 fb13 	bl	800adac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a786:	4b1d      	ldr	r3, [pc, #116]	@ (800a7fc <xTimerCreateTimerTask+0x84>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d021      	beq.n	800a7d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a796:	1d3a      	adds	r2, r7, #4
 800a798:	f107 0108 	add.w	r1, r7, #8
 800a79c:	f107 030c 	add.w	r3, r7, #12
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd fc75 	bl	8008090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	9202      	str	r2, [sp, #8]
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	4911      	ldr	r1, [pc, #68]	@ (800a800 <xTimerCreateTimerTask+0x88>)
 800a7ba:	4812      	ldr	r0, [pc, #72]	@ (800a804 <xTimerCreateTimerTask+0x8c>)
 800a7bc:	f7fe fec4 	bl	8009548 <xTaskCreateStatic>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4a11      	ldr	r2, [pc, #68]	@ (800a808 <xTimerCreateTimerTask+0x90>)
 800a7c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7c6:	4b10      	ldr	r3, [pc, #64]	@ (800a808 <xTimerCreateTimerTask+0x90>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10b      	bne.n	800a7f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	613b      	str	r3, [r7, #16]
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a7f0:	697b      	ldr	r3, [r7, #20]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	2000121c 	.word	0x2000121c
 800a800:	0800eccc 	.word	0x0800eccc
 800a804:	0800a945 	.word	0x0800a945
 800a808:	20001220 	.word	0x20001220

0800a80c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	@ 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <xTimerGenericCommand+0x30>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	623b      	str	r3, [r7, #32]
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a83c:	4b19      	ldr	r3, [pc, #100]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d02a      	beq.n	800a89a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b05      	cmp	r3, #5
 800a854:	dc18      	bgt.n	800a888 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a856:	f7ff fd95 	bl	800a384 <xTaskGetSchedulerState>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d109      	bne.n	800a874 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a860:	4b10      	ldr	r3, [pc, #64]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	f107 0110 	add.w	r1, r7, #16
 800a868:	2300      	movs	r3, #0
 800a86a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a86c:	f7fe f8d2 	bl	8008a14 <xQueueGenericSend>
 800a870:	6278      	str	r0, [r7, #36]	@ 0x24
 800a872:	e012      	b.n	800a89a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a874:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	f107 0110 	add.w	r1, r7, #16
 800a87c:	2300      	movs	r3, #0
 800a87e:	2200      	movs	r2, #0
 800a880:	f7fe f8c8 	bl	8008a14 <xQueueGenericSend>
 800a884:	6278      	str	r0, [r7, #36]	@ 0x24
 800a886:	e008      	b.n	800a89a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a888:	4b06      	ldr	r3, [pc, #24]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	f107 0110 	add.w	r1, r7, #16
 800a890:	2300      	movs	r3, #0
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	f7fe f9c0 	bl	8008c18 <xQueueGenericSendFromISR>
 800a898:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3728      	adds	r7, #40	@ 0x28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	2000121c 	.word	0x2000121c

0800a8a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b2:	4b23      	ldr	r3, [pc, #140]	@ (800a940 <prvProcessExpiredTimer+0x98>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fd fe7f 	bl	80085c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8cc:	f003 0304 	and.w	r3, r3, #4
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d023      	beq.n	800a91c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	699a      	ldr	r2, [r3, #24]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	18d1      	adds	r1, r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	6978      	ldr	r0, [r7, #20]
 800a8e2:	f000 f8d5 	bl	800aa90 <prvInsertTimerInActiveList>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d020      	beq.n	800a92e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6978      	ldr	r0, [r7, #20]
 800a8f8:	f7ff ff88 	bl	800a80c <xTimerGenericCommand>
 800a8fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d114      	bne.n	800a92e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	60fb      	str	r3, [r7, #12]
}
 800a916:	bf00      	nop
 800a918:	bf00      	nop
 800a91a:	e7fd      	b.n	800a918 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a922:	f023 0301 	bic.w	r3, r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	6978      	ldr	r0, [r7, #20]
 800a934:	4798      	blx	r3
}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20001214 	.word	0x20001214

0800a944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a94c:	f107 0308 	add.w	r3, r7, #8
 800a950:	4618      	mov	r0, r3
 800a952:	f000 f859 	bl	800aa08 <prvGetNextExpireTime>
 800a956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f805 	bl	800a96c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a962:	f000 f8d7 	bl	800ab14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a966:	bf00      	nop
 800a968:	e7f0      	b.n	800a94c <prvTimerTask+0x8>
	...

0800a96c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a976:	f7ff f84d 	bl	8009a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f866 	bl	800aa50 <prvSampleTimeNow>
 800a984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d130      	bne.n	800a9ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <prvProcessTimerOrBlockTask+0x3c>
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	429a      	cmp	r2, r3
 800a998:	d806      	bhi.n	800a9a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a99a:	f7ff f849 	bl	8009a30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ff81 	bl	800a8a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9a6:	e024      	b.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d008      	beq.n	800a9c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ae:	4b13      	ldr	r3, [pc, #76]	@ (800a9fc <prvProcessTimerOrBlockTask+0x90>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <prvProcessTimerOrBlockTask+0x50>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <prvProcessTimerOrBlockTask+0x52>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa00 <prvProcessTimerOrBlockTask+0x94>)
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f7fe fd87 	bl	80094e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9d2:	f7ff f82d 	bl	8009a30 <xTaskResumeAll>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9dc:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <prvProcessTimerOrBlockTask+0x98>)
 800a9de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	f3bf 8f6f 	isb	sy
}
 800a9ec:	e001      	b.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9ee:	f7ff f81f 	bl	8009a30 <xTaskResumeAll>
}
 800a9f2:	bf00      	nop
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20001218 	.word	0x20001218
 800aa00:	2000121c 	.word	0x2000121c
 800aa04:	e000ed04 	.word	0xe000ed04

0800aa08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa10:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <prvGetNextExpireTime+0x44>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <prvGetNextExpireTime+0x16>
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	e000      	b.n	800aa20 <prvGetNextExpireTime+0x18>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa2c:	4b07      	ldr	r3, [pc, #28]	@ (800aa4c <prvGetNextExpireTime+0x44>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	e001      	b.n	800aa3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20001214 	.word	0x20001214

0800aa50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa58:	f7ff f888 	bl	8009b6c <xTaskGetTickCount>
 800aa5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa8c <prvSampleTimeNow+0x3c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d205      	bcs.n	800aa74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa68:	f000 f93a 	bl	800ace0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e002      	b.n	800aa7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa7a:	4a04      	ldr	r2, [pc, #16]	@ (800aa8c <prvSampleTimeNow+0x3c>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa80:	68fb      	ldr	r3, [r7, #12]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20001224 	.word	0x20001224

0800aa90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d812      	bhi.n	800aadc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	1ad2      	subs	r2, r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d302      	bcc.n	800aaca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aac4:	2301      	movs	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	e01b      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaca:	4b10      	ldr	r3, [pc, #64]	@ (800ab0c <prvInsertTimerInActiveList+0x7c>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f7fd fd3c 	bl	8008552 <vListInsert>
 800aada:	e012      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d206      	bcs.n	800aaf2 <prvInsertTimerInActiveList+0x62>
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d302      	bcc.n	800aaf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aaec:	2301      	movs	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
 800aaf0:	e007      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaf2:	4b07      	ldr	r3, [pc, #28]	@ (800ab10 <prvInsertTimerInActiveList+0x80>)
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f7fd fd28 	bl	8008552 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab02:	697b      	ldr	r3, [r7, #20]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20001218 	.word	0x20001218
 800ab10:	20001214 	.word	0x20001214

0800ab14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08e      	sub	sp, #56	@ 0x38
 800ab18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab1a:	e0ce      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	da19      	bge.n	800ab56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab22:	1d3b      	adds	r3, r7, #4
 800ab24:	3304      	adds	r3, #4
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10b      	bne.n	800ab46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	61fb      	str	r3, [r7, #28]
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	e7fd      	b.n	800ab42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab4c:	6850      	ldr	r0, [r2, #4]
 800ab4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab50:	6892      	ldr	r2, [r2, #8]
 800ab52:	4611      	mov	r1, r2
 800ab54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f2c0 80ae 	blt.w	800acba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fd fd28 	bl	80085c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab74:	463b      	mov	r3, r7
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff ff6a 	bl	800aa50 <prvSampleTimeNow>
 800ab7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	f200 8097 	bhi.w	800acb4 <prvProcessReceivedCommands+0x1a0>
 800ab86:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <prvProcessReceivedCommands+0x78>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abb5 	.word	0x0800abb5
 800ab90:	0800abb5 	.word	0x0800abb5
 800ab94:	0800abb5 	.word	0x0800abb5
 800ab98:	0800ac2b 	.word	0x0800ac2b
 800ab9c:	0800ac3f 	.word	0x0800ac3f
 800aba0:	0800ac8b 	.word	0x0800ac8b
 800aba4:	0800abb5 	.word	0x0800abb5
 800aba8:	0800abb5 	.word	0x0800abb5
 800abac:	0800ac2b 	.word	0x0800ac2b
 800abb0:	0800ac3f 	.word	0x0800ac3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	18d1      	adds	r1, r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abd4:	f7ff ff5c 	bl	800aa90 <prvInsertTimerInActiveList>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d06c      	beq.n	800acb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d061      	beq.n	800acb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	441a      	add	r2, r3
 800abfc:	2300      	movs	r3, #0
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	2300      	movs	r3, #0
 800ac02:	2100      	movs	r1, #0
 800ac04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac06:	f7ff fe01 	bl	800a80c <xTimerGenericCommand>
 800ac0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d152      	bne.n	800acb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	61bb      	str	r3, [r7, #24]
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	e7fd      	b.n	800ac26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac30:	f023 0301 	bic.w	r3, r3, #1
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac3c:	e03d      	b.n	800acba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	617b      	str	r3, [r7, #20]
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	e7fd      	b.n	800ac72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	18d1      	adds	r1, r2, r3
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac84:	f7ff ff04 	bl	800aa90 <prvInsertTimerInActiveList>
					break;
 800ac88:	e017      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d103      	bne.n	800aca0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ac98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac9a:	f000 fc05 	bl	800b4a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac9e:	e00c      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aca6:	f023 0301 	bic.w	r3, r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800acb2:	e002      	b.n	800acba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
					break;
 800acb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acba:	4b08      	ldr	r3, [pc, #32]	@ (800acdc <prvProcessReceivedCommands+0x1c8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	1d39      	adds	r1, r7, #4
 800acc0:	2200      	movs	r2, #0
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe f846 	bl	8008d54 <xQueueReceive>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f47f af26 	bne.w	800ab1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	3730      	adds	r7, #48	@ 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2000121c 	.word	0x2000121c

0800ace0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ace6:	e049      	b.n	800ad7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ace8:	4b2e      	ldr	r3, [pc, #184]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf2:	4b2c      	ldr	r3, [pc, #176]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd fc5f 	bl	80085c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d02f      	beq.n	800ad7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	4413      	add	r3, r2
 800ad24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d90e      	bls.n	800ad4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad3a:	4b1a      	ldr	r3, [pc, #104]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4619      	mov	r1, r3
 800ad44:	4610      	mov	r0, r2
 800ad46:	f7fd fc04 	bl	8008552 <vListInsert>
 800ad4a:	e017      	b.n	800ad7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	2300      	movs	r3, #0
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	2100      	movs	r1, #0
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7ff fd58 	bl	800a80c <xTimerGenericCommand>
 800ad5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	603b      	str	r3, [r7, #0]
}
 800ad76:	bf00      	nop
 800ad78:	bf00      	nop
 800ad7a:	e7fd      	b.n	800ad78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad7c:	4b09      	ldr	r3, [pc, #36]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1b0      	bne.n	800ace8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad86:	4b07      	ldr	r3, [pc, #28]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad8c:	4b06      	ldr	r3, [pc, #24]	@ (800ada8 <prvSwitchTimerLists+0xc8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a04      	ldr	r2, [pc, #16]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad94:	4a04      	ldr	r2, [pc, #16]	@ (800ada8 <prvSwitchTimerLists+0xc8>)
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	6013      	str	r3, [r2, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20001214 	.word	0x20001214
 800ada8:	20001218 	.word	0x20001218

0800adac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adb2:	f000 f989 	bl	800b0c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adb6:	4b15      	ldr	r3, [pc, #84]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d120      	bne.n	800ae00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adbe:	4814      	ldr	r0, [pc, #80]	@ (800ae10 <prvCheckForValidListAndQueue+0x64>)
 800adc0:	f7fd fb76 	bl	80084b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adc4:	4813      	ldr	r0, [pc, #76]	@ (800ae14 <prvCheckForValidListAndQueue+0x68>)
 800adc6:	f7fd fb73 	bl	80084b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adca:	4b13      	ldr	r3, [pc, #76]	@ (800ae18 <prvCheckForValidListAndQueue+0x6c>)
 800adcc:	4a10      	ldr	r2, [pc, #64]	@ (800ae10 <prvCheckForValidListAndQueue+0x64>)
 800adce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800add0:	4b12      	ldr	r3, [pc, #72]	@ (800ae1c <prvCheckForValidListAndQueue+0x70>)
 800add2:	4a10      	ldr	r2, [pc, #64]	@ (800ae14 <prvCheckForValidListAndQueue+0x68>)
 800add4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800add6:	2300      	movs	r3, #0
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4b11      	ldr	r3, [pc, #68]	@ (800ae20 <prvCheckForValidListAndQueue+0x74>)
 800addc:	4a11      	ldr	r2, [pc, #68]	@ (800ae24 <prvCheckForValidListAndQueue+0x78>)
 800adde:	2110      	movs	r1, #16
 800ade0:	200a      	movs	r0, #10
 800ade2:	f7fd fc83 	bl	80086ec <xQueueGenericCreateStatic>
 800ade6:	4603      	mov	r3, r0
 800ade8:	4a08      	ldr	r2, [pc, #32]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800adec:	4b07      	ldr	r3, [pc, #28]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adf4:	4b05      	ldr	r3, [pc, #20]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	490b      	ldr	r1, [pc, #44]	@ (800ae28 <prvCheckForValidListAndQueue+0x7c>)
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fb46 	bl	800948c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae00:	f000 f994 	bl	800b12c <vPortExitCritical>
}
 800ae04:	bf00      	nop
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	2000121c 	.word	0x2000121c
 800ae10:	200011ec 	.word	0x200011ec
 800ae14:	20001200 	.word	0x20001200
 800ae18:	20001214 	.word	0x20001214
 800ae1c:	20001218 	.word	0x20001218
 800ae20:	200012c8 	.word	0x200012c8
 800ae24:	20001228 	.word	0x20001228
 800ae28:	0800ecd4 	.word	0x0800ecd4

0800ae2c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08a      	sub	sp, #40	@ 0x28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ae3a:	f06f 0301 	mvn.w	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae4c:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <xTimerPendFunctionCallFromISR+0x3c>)
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	f107 0114 	add.w	r1, r7, #20
 800ae54:	2300      	movs	r3, #0
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	f7fd fede 	bl	8008c18 <xQueueGenericSendFromISR>
 800ae5c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3728      	adds	r7, #40	@ 0x28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	2000121c 	.word	0x2000121c

0800ae6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3b04      	subs	r3, #4
 800ae7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	f023 0201 	bic.w	r2, r3, #1
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3b04      	subs	r3, #4
 800ae9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae9c:	4a0c      	ldr	r2, [pc, #48]	@ (800aed0 <pxPortInitialiseStack+0x64>)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3b14      	subs	r3, #20
 800aea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3b04      	subs	r3, #4
 800aeb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f06f 0202 	mvn.w	r2, #2
 800aeba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3b20      	subs	r3, #32
 800aec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aec2:	68fb      	ldr	r3, [r7, #12]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	0800aed5 	.word	0x0800aed5

0800aed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aede:	4b13      	ldr	r3, [pc, #76]	@ (800af2c <prvTaskExitError+0x58>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee6:	d00b      	beq.n	800af00 <prvTaskExitError+0x2c>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	60fb      	str	r3, [r7, #12]
}
 800aefa:	bf00      	nop
 800aefc:	bf00      	nop
 800aefe:	e7fd      	b.n	800aefc <prvTaskExitError+0x28>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60bb      	str	r3, [r7, #8]
}
 800af12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af14:	bf00      	nop
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0fc      	beq.n	800af16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	2000000c 	.word	0x2000000c

0800af30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af30:	4b07      	ldr	r3, [pc, #28]	@ (800af50 <pxCurrentTCBConst2>)
 800af32:	6819      	ldr	r1, [r3, #0]
 800af34:	6808      	ldr	r0, [r1, #0]
 800af36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3a:	f380 8809 	msr	PSP, r0
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f04f 0000 	mov.w	r0, #0
 800af46:	f380 8811 	msr	BASEPRI, r0
 800af4a:	4770      	bx	lr
 800af4c:	f3af 8000 	nop.w

0800af50 <pxCurrentTCBConst2>:
 800af50:	20000cec 	.word	0x20000cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop

0800af58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af58:	4808      	ldr	r0, [pc, #32]	@ (800af7c <prvPortStartFirstTask+0x24>)
 800af5a:	6800      	ldr	r0, [r0, #0]
 800af5c:	6800      	ldr	r0, [r0, #0]
 800af5e:	f380 8808 	msr	MSP, r0
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8814 	msr	CONTROL, r0
 800af6a:	b662      	cpsie	i
 800af6c:	b661      	cpsie	f
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	df00      	svc	0
 800af78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af7a:	bf00      	nop
 800af7c:	e000ed08 	.word	0xe000ed08

0800af80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af86:	4b47      	ldr	r3, [pc, #284]	@ (800b0a4 <xPortStartScheduler+0x124>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a47      	ldr	r2, [pc, #284]	@ (800b0a8 <xPortStartScheduler+0x128>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d10b      	bne.n	800afa8 <xPortStartScheduler+0x28>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60fb      	str	r3, [r7, #12]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afa8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0a4 <xPortStartScheduler+0x124>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a3f      	ldr	r2, [pc, #252]	@ (800b0ac <xPortStartScheduler+0x12c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d10b      	bne.n	800afca <xPortStartScheduler+0x4a>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	613b      	str	r3, [r7, #16]
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	e7fd      	b.n	800afc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afca:	4b39      	ldr	r3, [pc, #228]	@ (800b0b0 <xPortStartScheduler+0x130>)
 800afcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	22ff      	movs	r2, #255	@ 0xff
 800afda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800afec:	b2da      	uxtb	r2, r3
 800afee:	4b31      	ldr	r3, [pc, #196]	@ (800b0b4 <xPortStartScheduler+0x134>)
 800aff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aff2:	4b31      	ldr	r3, [pc, #196]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800aff4:	2207      	movs	r2, #7
 800aff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aff8:	e009      	b.n	800b00e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800affa:	4b2f      	ldr	r3, [pc, #188]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3b01      	subs	r3, #1
 800b000:	4a2d      	ldr	r2, [pc, #180]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b00e:	78fb      	ldrb	r3, [r7, #3]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b016:	2b80      	cmp	r3, #128	@ 0x80
 800b018:	d0ef      	beq.n	800affa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b01a:	4b27      	ldr	r3, [pc, #156]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f1c3 0307 	rsb	r3, r3, #7
 800b022:	2b04      	cmp	r3, #4
 800b024:	d00b      	beq.n	800b03e <xPortStartScheduler+0xbe>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	60bb      	str	r3, [r7, #8]
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	e7fd      	b.n	800b03a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b03e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	4a1c      	ldr	r2, [pc, #112]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b048:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b050:	4a19      	ldr	r2, [pc, #100]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	b2da      	uxtb	r2, r3
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b05c:	4b17      	ldr	r3, [pc, #92]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a16      	ldr	r2, [pc, #88]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b068:	4b14      	ldr	r3, [pc, #80]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a13      	ldr	r2, [pc, #76]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b06e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b074:	f000 f8da 	bl	800b22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b078:	4b11      	ldr	r3, [pc, #68]	@ (800b0c0 <xPortStartScheduler+0x140>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b07e:	f000 f8f9 	bl	800b274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b082:	4b10      	ldr	r3, [pc, #64]	@ (800b0c4 <xPortStartScheduler+0x144>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a0f      	ldr	r2, [pc, #60]	@ (800b0c4 <xPortStartScheduler+0x144>)
 800b088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b08c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b08e:	f7ff ff63 	bl	800af58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b092:	f7fe fe47 	bl	8009d24 <vTaskSwitchContext>
	prvTaskExitError();
 800b096:	f7ff ff1d 	bl	800aed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	e000ed00 	.word	0xe000ed00
 800b0a8:	410fc271 	.word	0x410fc271
 800b0ac:	410fc270 	.word	0x410fc270
 800b0b0:	e000e400 	.word	0xe000e400
 800b0b4:	20001318 	.word	0x20001318
 800b0b8:	2000131c 	.word	0x2000131c
 800b0bc:	e000ed20 	.word	0xe000ed20
 800b0c0:	2000000c 	.word	0x2000000c
 800b0c4:	e000ef34 	.word	0xe000ef34

0800b0c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	607b      	str	r3, [r7, #4]
}
 800b0e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0e2:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <vPortEnterCritical+0x5c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b124 <vPortEnterCritical+0x5c>)
 800b0ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <vPortEnterCritical+0x5c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d110      	bne.n	800b116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <vPortEnterCritical+0x60>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00b      	beq.n	800b116 <vPortEnterCritical+0x4e>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	603b      	str	r3, [r7, #0]
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	e7fd      	b.n	800b112 <vPortEnterCritical+0x4a>
	}
}
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	2000000c 	.word	0x2000000c
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b132:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <vPortExitCritical+0x50>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10b      	bne.n	800b152 <vPortExitCritical+0x26>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	607b      	str	r3, [r7, #4]
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	e7fd      	b.n	800b14e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b152:	4b0a      	ldr	r3, [pc, #40]	@ (800b17c <vPortExitCritical+0x50>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3b01      	subs	r3, #1
 800b158:	4a08      	ldr	r2, [pc, #32]	@ (800b17c <vPortExitCritical+0x50>)
 800b15a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b15c:	4b07      	ldr	r3, [pc, #28]	@ (800b17c <vPortExitCritical+0x50>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d105      	bne.n	800b170 <vPortExitCritical+0x44>
 800b164:	2300      	movs	r3, #0
 800b166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f383 8811 	msr	BASEPRI, r3
}
 800b16e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	2000000c 	.word	0x2000000c

0800b180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b180:	f3ef 8009 	mrs	r0, PSP
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	4b15      	ldr	r3, [pc, #84]	@ (800b1e0 <pxCurrentTCBConst>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	f01e 0f10 	tst.w	lr, #16
 800b190:	bf08      	it	eq
 800b192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	6010      	str	r0, [r2, #0]
 800b19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b1a4:	f380 8811 	msr	BASEPRI, r0
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f7fe fdb8 	bl	8009d24 <vTaskSwitchContext>
 800b1b4:	f04f 0000 	mov.w	r0, #0
 800b1b8:	f380 8811 	msr	BASEPRI, r0
 800b1bc:	bc09      	pop	{r0, r3}
 800b1be:	6819      	ldr	r1, [r3, #0]
 800b1c0:	6808      	ldr	r0, [r1, #0]
 800b1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c6:	f01e 0f10 	tst.w	lr, #16
 800b1ca:	bf08      	it	eq
 800b1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1d0:	f380 8809 	msr	PSP, r0
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	f3af 8000 	nop.w

0800b1e0 <pxCurrentTCBConst>:
 800b1e0:	20000cec 	.word	0x20000cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop

0800b1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	607b      	str	r3, [r7, #4]
}
 800b200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b202:	f7fe fcd5 	bl	8009bb0 <xTaskIncrementTick>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b20c:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <xPortSysTickHandler+0x40>)
 800b20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	2300      	movs	r3, #0
 800b216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	f383 8811 	msr	BASEPRI, r3
}
 800b21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b230:	4b0b      	ldr	r3, [pc, #44]	@ (800b260 <vPortSetupTimerInterrupt+0x34>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b236:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <vPortSetupTimerInterrupt+0x38>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b23c:	4b0a      	ldr	r3, [pc, #40]	@ (800b268 <vPortSetupTimerInterrupt+0x3c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0a      	ldr	r2, [pc, #40]	@ (800b26c <vPortSetupTimerInterrupt+0x40>)
 800b242:	fba2 2303 	umull	r2, r3, r2, r3
 800b246:	099b      	lsrs	r3, r3, #6
 800b248:	4a09      	ldr	r2, [pc, #36]	@ (800b270 <vPortSetupTimerInterrupt+0x44>)
 800b24a:	3b01      	subs	r3, #1
 800b24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b24e:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <vPortSetupTimerInterrupt+0x34>)
 800b250:	2207      	movs	r2, #7
 800b252:	601a      	str	r2, [r3, #0]
}
 800b254:	bf00      	nop
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	e000e010 	.word	0xe000e010
 800b264:	e000e018 	.word	0xe000e018
 800b268:	20000000 	.word	0x20000000
 800b26c:	10624dd3 	.word	0x10624dd3
 800b270:	e000e014 	.word	0xe000e014

0800b274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b284 <vPortEnableVFP+0x10>
 800b278:	6801      	ldr	r1, [r0, #0]
 800b27a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b27e:	6001      	str	r1, [r0, #0]
 800b280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b282:	bf00      	nop
 800b284:	e000ed88 	.word	0xe000ed88

0800b288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b28e:	f3ef 8305 	mrs	r3, IPSR
 800b292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b0f      	cmp	r3, #15
 800b298:	d915      	bls.n	800b2c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b29a:	4a18      	ldr	r2, [pc, #96]	@ (800b2fc <vPortValidateInterruptPriority+0x74>)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4413      	add	r3, r2
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2a4:	4b16      	ldr	r3, [pc, #88]	@ (800b300 <vPortValidateInterruptPriority+0x78>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	7afa      	ldrb	r2, [r7, #11]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d20b      	bcs.n	800b2c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	607b      	str	r3, [r7, #4]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b304 <vPortValidateInterruptPriority+0x7c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b308 <vPortValidateInterruptPriority+0x80>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d90b      	bls.n	800b2ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	603b      	str	r3, [r7, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <vPortValidateInterruptPriority+0x62>
	}
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	e000e3f0 	.word	0xe000e3f0
 800b300:	20001318 	.word	0x20001318
 800b304:	e000ed0c 	.word	0xe000ed0c
 800b308:	2000131c 	.word	0x2000131c

0800b30c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	@ 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b318:	f7fe fb7c 	bl	8009a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b31c:	4b5c      	ldr	r3, [pc, #368]	@ (800b490 <pvPortMalloc+0x184>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b324:	f000 f924 	bl	800b570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b328:	4b5a      	ldr	r3, [pc, #360]	@ (800b494 <pvPortMalloc+0x188>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4013      	ands	r3, r2
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 8095 	bne.w	800b460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01e      	beq.n	800b37a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b33c:	2208      	movs	r2, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4413      	add	r3, r2
 800b342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f003 0307 	and.w	r3, r3, #7
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d015      	beq.n	800b37a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f023 0307 	bic.w	r3, r3, #7
 800b354:	3308      	adds	r3, #8
 800b356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f003 0307 	and.w	r3, r3, #7
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <pvPortMalloc+0x6e>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	617b      	str	r3, [r7, #20]
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop
 800b378:	e7fd      	b.n	800b376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d06f      	beq.n	800b460 <pvPortMalloc+0x154>
 800b380:	4b45      	ldr	r3, [pc, #276]	@ (800b498 <pvPortMalloc+0x18c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d86a      	bhi.n	800b460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b38a:	4b44      	ldr	r3, [pc, #272]	@ (800b49c <pvPortMalloc+0x190>)
 800b38c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b38e:	4b43      	ldr	r3, [pc, #268]	@ (800b49c <pvPortMalloc+0x190>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b394:	e004      	b.n	800b3a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d903      	bls.n	800b3b2 <pvPortMalloc+0xa6>
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f1      	bne.n	800b396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3b2:	4b37      	ldr	r3, [pc, #220]	@ (800b490 <pvPortMalloc+0x184>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d051      	beq.n	800b460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	4413      	add	r3, r2
 800b3c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	1ad2      	subs	r2, r2, r3
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d920      	bls.n	800b420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	f003 0307 	and.w	r3, r3, #7
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <pvPortMalloc+0xfc>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
}
 800b402:	bf00      	nop
 800b404:	bf00      	nop
 800b406:	e7fd      	b.n	800b404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b41a:	69b8      	ldr	r0, [r7, #24]
 800b41c:	f000 f90a 	bl	800b634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b420:	4b1d      	ldr	r3, [pc, #116]	@ (800b498 <pvPortMalloc+0x18c>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	4a1b      	ldr	r2, [pc, #108]	@ (800b498 <pvPortMalloc+0x18c>)
 800b42c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b42e:	4b1a      	ldr	r3, [pc, #104]	@ (800b498 <pvPortMalloc+0x18c>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4b1b      	ldr	r3, [pc, #108]	@ (800b4a0 <pvPortMalloc+0x194>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d203      	bcs.n	800b442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b43a:	4b17      	ldr	r3, [pc, #92]	@ (800b498 <pvPortMalloc+0x18c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a18      	ldr	r2, [pc, #96]	@ (800b4a0 <pvPortMalloc+0x194>)
 800b440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	4b13      	ldr	r3, [pc, #76]	@ (800b494 <pvPortMalloc+0x188>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b456:	4b13      	ldr	r3, [pc, #76]	@ (800b4a4 <pvPortMalloc+0x198>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	4a11      	ldr	r2, [pc, #68]	@ (800b4a4 <pvPortMalloc+0x198>)
 800b45e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b460:	f7fe fae6 	bl	8009a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00b      	beq.n	800b486 <pvPortMalloc+0x17a>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	60fb      	str	r3, [r7, #12]
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	e7fd      	b.n	800b482 <pvPortMalloc+0x176>
	return pvReturn;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3728      	adds	r7, #40	@ 0x28
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20004f28 	.word	0x20004f28
 800b494:	20004f3c 	.word	0x20004f3c
 800b498:	20004f2c 	.word	0x20004f2c
 800b49c:	20004f20 	.word	0x20004f20
 800b4a0:	20004f30 	.word	0x20004f30
 800b4a4:	20004f34 	.word	0x20004f34

0800b4a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d04f      	beq.n	800b55a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	425b      	negs	r3, r3
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	4b25      	ldr	r3, [pc, #148]	@ (800b564 <vPortFree+0xbc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <vPortFree+0x46>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	60fb      	str	r3, [r7, #12]
}
 800b4e8:	bf00      	nop
 800b4ea:	bf00      	nop
 800b4ec:	e7fd      	b.n	800b4ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00b      	beq.n	800b50e <vPortFree+0x66>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60bb      	str	r3, [r7, #8]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	4b14      	ldr	r3, [pc, #80]	@ (800b564 <vPortFree+0xbc>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4013      	ands	r3, r2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d01e      	beq.n	800b55a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11a      	bne.n	800b55a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <vPortFree+0xbc>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	43db      	mvns	r3, r3
 800b52e:	401a      	ands	r2, r3
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b534:	f7fe fa6e 	bl	8009a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	4b0a      	ldr	r3, [pc, #40]	@ (800b568 <vPortFree+0xc0>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4413      	add	r3, r2
 800b542:	4a09      	ldr	r2, [pc, #36]	@ (800b568 <vPortFree+0xc0>)
 800b544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b546:	6938      	ldr	r0, [r7, #16]
 800b548:	f000 f874 	bl	800b634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b54c:	4b07      	ldr	r3, [pc, #28]	@ (800b56c <vPortFree+0xc4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3301      	adds	r3, #1
 800b552:	4a06      	ldr	r2, [pc, #24]	@ (800b56c <vPortFree+0xc4>)
 800b554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b556:	f7fe fa6b 	bl	8009a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b55a:	bf00      	nop
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20004f3c 	.word	0x20004f3c
 800b568:	20004f2c 	.word	0x20004f2c
 800b56c:	20004f38 	.word	0x20004f38

0800b570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b57a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b57c:	4b27      	ldr	r3, [pc, #156]	@ (800b61c <prvHeapInit+0xac>)
 800b57e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f003 0307 	and.w	r3, r3, #7
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00c      	beq.n	800b5a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3307      	adds	r3, #7
 800b58e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0307 	bic.w	r3, r3, #7
 800b596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	4a1f      	ldr	r2, [pc, #124]	@ (800b61c <prvHeapInit+0xac>)
 800b5a0:	4413      	add	r3, r2
 800b5a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b620 <prvHeapInit+0xb0>)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b620 <prvHeapInit+0xb0>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5bc:	2208      	movs	r2, #8
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1a9b      	subs	r3, r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 0307 	bic.w	r3, r3, #7
 800b5ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4a15      	ldr	r2, [pc, #84]	@ (800b624 <prvHeapInit+0xb4>)
 800b5d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5d2:	4b14      	ldr	r3, [pc, #80]	@ (800b624 <prvHeapInit+0xb4>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5da:	4b12      	ldr	r3, [pc, #72]	@ (800b624 <prvHeapInit+0xb4>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	1ad2      	subs	r2, r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b624 <prvHeapInit+0xb4>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a0a      	ldr	r2, [pc, #40]	@ (800b628 <prvHeapInit+0xb8>)
 800b5fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4a09      	ldr	r2, [pc, #36]	@ (800b62c <prvHeapInit+0xbc>)
 800b606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b608:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <prvHeapInit+0xc0>)
 800b60a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b60e:	601a      	str	r2, [r3, #0]
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	20001320 	.word	0x20001320
 800b620:	20004f20 	.word	0x20004f20
 800b624:	20004f28 	.word	0x20004f28
 800b628:	20004f30 	.word	0x20004f30
 800b62c:	20004f2c 	.word	0x20004f2c
 800b630:	20004f3c 	.word	0x20004f3c

0800b634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b63c:	4b28      	ldr	r3, [pc, #160]	@ (800b6e0 <prvInsertBlockIntoFreeList+0xac>)
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	e002      	b.n	800b648 <prvInsertBlockIntoFreeList+0x14>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d8f7      	bhi.n	800b642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	4413      	add	r3, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	429a      	cmp	r2, r3
 800b662:	d108      	bne.n	800b676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	441a      	add	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	441a      	add	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d118      	bne.n	800b6bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	4b15      	ldr	r3, [pc, #84]	@ (800b6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d00d      	beq.n	800b6b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	441a      	add	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e008      	b.n	800b6c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e003      	b.n	800b6c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d002      	beq.n	800b6d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20004f20 	.word	0x20004f20
 800b6e4:	20004f28 	.word	0x20004f28

0800b6e8 <__cvt>:
 800b6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	ec57 6b10 	vmov	r6, r7, d0
 800b6f0:	2f00      	cmp	r7, #0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	bfbb      	ittet	lt
 800b6fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b6fe:	461f      	movlt	r7, r3
 800b700:	2300      	movge	r3, #0
 800b702:	232d      	movlt	r3, #45	@ 0x2d
 800b704:	700b      	strb	r3, [r1, #0]
 800b706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b708:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b70c:	4691      	mov	r9, r2
 800b70e:	f023 0820 	bic.w	r8, r3, #32
 800b712:	bfbc      	itt	lt
 800b714:	4632      	movlt	r2, r6
 800b716:	4616      	movlt	r6, r2
 800b718:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b71c:	d005      	beq.n	800b72a <__cvt+0x42>
 800b71e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b722:	d100      	bne.n	800b726 <__cvt+0x3e>
 800b724:	3401      	adds	r4, #1
 800b726:	2102      	movs	r1, #2
 800b728:	e000      	b.n	800b72c <__cvt+0x44>
 800b72a:	2103      	movs	r1, #3
 800b72c:	ab03      	add	r3, sp, #12
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	ab02      	add	r3, sp, #8
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	ec47 6b10 	vmov	d0, r6, r7
 800b738:	4653      	mov	r3, sl
 800b73a:	4622      	mov	r2, r4
 800b73c:	f000 ffa8 	bl	800c690 <_dtoa_r>
 800b740:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b744:	4605      	mov	r5, r0
 800b746:	d119      	bne.n	800b77c <__cvt+0x94>
 800b748:	f019 0f01 	tst.w	r9, #1
 800b74c:	d00e      	beq.n	800b76c <__cvt+0x84>
 800b74e:	eb00 0904 	add.w	r9, r0, r4
 800b752:	2200      	movs	r2, #0
 800b754:	2300      	movs	r3, #0
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f5 f9d5 	bl	8000b08 <__aeabi_dcmpeq>
 800b75e:	b108      	cbz	r0, 800b764 <__cvt+0x7c>
 800b760:	f8cd 900c 	str.w	r9, [sp, #12]
 800b764:	2230      	movs	r2, #48	@ 0x30
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	454b      	cmp	r3, r9
 800b76a:	d31e      	bcc.n	800b7aa <__cvt+0xc2>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b770:	1b5b      	subs	r3, r3, r5
 800b772:	4628      	mov	r0, r5
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	b004      	add	sp, #16
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b780:	eb00 0904 	add.w	r9, r0, r4
 800b784:	d1e5      	bne.n	800b752 <__cvt+0x6a>
 800b786:	7803      	ldrb	r3, [r0, #0]
 800b788:	2b30      	cmp	r3, #48	@ 0x30
 800b78a:	d10a      	bne.n	800b7a2 <__cvt+0xba>
 800b78c:	2200      	movs	r2, #0
 800b78e:	2300      	movs	r3, #0
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	f7f5 f9b8 	bl	8000b08 <__aeabi_dcmpeq>
 800b798:	b918      	cbnz	r0, 800b7a2 <__cvt+0xba>
 800b79a:	f1c4 0401 	rsb	r4, r4, #1
 800b79e:	f8ca 4000 	str.w	r4, [sl]
 800b7a2:	f8da 3000 	ldr.w	r3, [sl]
 800b7a6:	4499      	add	r9, r3
 800b7a8:	e7d3      	b.n	800b752 <__cvt+0x6a>
 800b7aa:	1c59      	adds	r1, r3, #1
 800b7ac:	9103      	str	r1, [sp, #12]
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	e7d9      	b.n	800b766 <__cvt+0x7e>

0800b7b2 <__exponent>:
 800b7b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7b4:	2900      	cmp	r1, #0
 800b7b6:	bfba      	itte	lt
 800b7b8:	4249      	neglt	r1, r1
 800b7ba:	232d      	movlt	r3, #45	@ 0x2d
 800b7bc:	232b      	movge	r3, #43	@ 0x2b
 800b7be:	2909      	cmp	r1, #9
 800b7c0:	7002      	strb	r2, [r0, #0]
 800b7c2:	7043      	strb	r3, [r0, #1]
 800b7c4:	dd29      	ble.n	800b81a <__exponent+0x68>
 800b7c6:	f10d 0307 	add.w	r3, sp, #7
 800b7ca:	461d      	mov	r5, r3
 800b7cc:	270a      	movs	r7, #10
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7d4:	fb07 1416 	mls	r4, r7, r6, r1
 800b7d8:	3430      	adds	r4, #48	@ 0x30
 800b7da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7de:	460c      	mov	r4, r1
 800b7e0:	2c63      	cmp	r4, #99	@ 0x63
 800b7e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	dcf1      	bgt.n	800b7ce <__exponent+0x1c>
 800b7ea:	3130      	adds	r1, #48	@ 0x30
 800b7ec:	1e94      	subs	r4, r2, #2
 800b7ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7f2:	1c41      	adds	r1, r0, #1
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	42ab      	cmp	r3, r5
 800b7f8:	d30a      	bcc.n	800b810 <__exponent+0x5e>
 800b7fa:	f10d 0309 	add.w	r3, sp, #9
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	42ac      	cmp	r4, r5
 800b802:	bf88      	it	hi
 800b804:	2300      	movhi	r3, #0
 800b806:	3302      	adds	r3, #2
 800b808:	4403      	add	r3, r0
 800b80a:	1a18      	subs	r0, r3, r0
 800b80c:	b003      	add	sp, #12
 800b80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b810:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b814:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b818:	e7ed      	b.n	800b7f6 <__exponent+0x44>
 800b81a:	2330      	movs	r3, #48	@ 0x30
 800b81c:	3130      	adds	r1, #48	@ 0x30
 800b81e:	7083      	strb	r3, [r0, #2]
 800b820:	70c1      	strb	r1, [r0, #3]
 800b822:	1d03      	adds	r3, r0, #4
 800b824:	e7f1      	b.n	800b80a <__exponent+0x58>
	...

0800b828 <_printf_float>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	b08d      	sub	sp, #52	@ 0x34
 800b82e:	460c      	mov	r4, r1
 800b830:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b834:	4616      	mov	r6, r2
 800b836:	461f      	mov	r7, r3
 800b838:	4605      	mov	r5, r0
 800b83a:	f000 fdbd 	bl	800c3b8 <_localeconv_r>
 800b83e:	6803      	ldr	r3, [r0, #0]
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	4618      	mov	r0, r3
 800b844:	f7f4 fd34 	bl	80002b0 <strlen>
 800b848:	2300      	movs	r3, #0
 800b84a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b84c:	f8d8 3000 	ldr.w	r3, [r8]
 800b850:	9005      	str	r0, [sp, #20]
 800b852:	3307      	adds	r3, #7
 800b854:	f023 0307 	bic.w	r3, r3, #7
 800b858:	f103 0208 	add.w	r2, r3, #8
 800b85c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b860:	f8d4 b000 	ldr.w	fp, [r4]
 800b864:	f8c8 2000 	str.w	r2, [r8]
 800b868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b86c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b870:	9307      	str	r3, [sp, #28]
 800b872:	f8cd 8018 	str.w	r8, [sp, #24]
 800b876:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b87a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b87e:	4b9c      	ldr	r3, [pc, #624]	@ (800baf0 <_printf_float+0x2c8>)
 800b880:	f04f 32ff 	mov.w	r2, #4294967295
 800b884:	f7f5 f972 	bl	8000b6c <__aeabi_dcmpun>
 800b888:	bb70      	cbnz	r0, 800b8e8 <_printf_float+0xc0>
 800b88a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b88e:	4b98      	ldr	r3, [pc, #608]	@ (800baf0 <_printf_float+0x2c8>)
 800b890:	f04f 32ff 	mov.w	r2, #4294967295
 800b894:	f7f5 f94c 	bl	8000b30 <__aeabi_dcmple>
 800b898:	bb30      	cbnz	r0, 800b8e8 <_printf_float+0xc0>
 800b89a:	2200      	movs	r2, #0
 800b89c:	2300      	movs	r3, #0
 800b89e:	4640      	mov	r0, r8
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	f7f5 f93b 	bl	8000b1c <__aeabi_dcmplt>
 800b8a6:	b110      	cbz	r0, 800b8ae <_printf_float+0x86>
 800b8a8:	232d      	movs	r3, #45	@ 0x2d
 800b8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8ae:	4a91      	ldr	r2, [pc, #580]	@ (800baf4 <_printf_float+0x2cc>)
 800b8b0:	4b91      	ldr	r3, [pc, #580]	@ (800baf8 <_printf_float+0x2d0>)
 800b8b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b8b6:	bf8c      	ite	hi
 800b8b8:	4690      	movhi	r8, r2
 800b8ba:	4698      	movls	r8, r3
 800b8bc:	2303      	movs	r3, #3
 800b8be:	6123      	str	r3, [r4, #16]
 800b8c0:	f02b 0304 	bic.w	r3, fp, #4
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	f04f 0900 	mov.w	r9, #0
 800b8ca:	9700      	str	r7, [sp, #0]
 800b8cc:	4633      	mov	r3, r6
 800b8ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f000 f9d2 	bl	800bc7c <_printf_common>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	f040 808d 	bne.w	800b9f8 <_printf_float+0x1d0>
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	b00d      	add	sp, #52	@ 0x34
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	464b      	mov	r3, r9
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f5 f93c 	bl	8000b6c <__aeabi_dcmpun>
 800b8f4:	b140      	cbz	r0, 800b908 <_printf_float+0xe0>
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfbc      	itt	lt
 800b8fc:	232d      	movlt	r3, #45	@ 0x2d
 800b8fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b902:	4a7e      	ldr	r2, [pc, #504]	@ (800bafc <_printf_float+0x2d4>)
 800b904:	4b7e      	ldr	r3, [pc, #504]	@ (800bb00 <_printf_float+0x2d8>)
 800b906:	e7d4      	b.n	800b8b2 <_printf_float+0x8a>
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b90e:	9206      	str	r2, [sp, #24]
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	d13b      	bne.n	800b98c <_printf_float+0x164>
 800b914:	2306      	movs	r3, #6
 800b916:	6063      	str	r3, [r4, #4]
 800b918:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b91c:	2300      	movs	r3, #0
 800b91e:	6022      	str	r2, [r4, #0]
 800b920:	9303      	str	r3, [sp, #12]
 800b922:	ab0a      	add	r3, sp, #40	@ 0x28
 800b924:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b928:	ab09      	add	r3, sp, #36	@ 0x24
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	6861      	ldr	r1, [r4, #4]
 800b92e:	ec49 8b10 	vmov	d0, r8, r9
 800b932:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b936:	4628      	mov	r0, r5
 800b938:	f7ff fed6 	bl	800b6e8 <__cvt>
 800b93c:	9b06      	ldr	r3, [sp, #24]
 800b93e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b940:	2b47      	cmp	r3, #71	@ 0x47
 800b942:	4680      	mov	r8, r0
 800b944:	d129      	bne.n	800b99a <_printf_float+0x172>
 800b946:	1cc8      	adds	r0, r1, #3
 800b948:	db02      	blt.n	800b950 <_printf_float+0x128>
 800b94a:	6863      	ldr	r3, [r4, #4]
 800b94c:	4299      	cmp	r1, r3
 800b94e:	dd41      	ble.n	800b9d4 <_printf_float+0x1ac>
 800b950:	f1aa 0a02 	sub.w	sl, sl, #2
 800b954:	fa5f fa8a 	uxtb.w	sl, sl
 800b958:	3901      	subs	r1, #1
 800b95a:	4652      	mov	r2, sl
 800b95c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b960:	9109      	str	r1, [sp, #36]	@ 0x24
 800b962:	f7ff ff26 	bl	800b7b2 <__exponent>
 800b966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b968:	1813      	adds	r3, r2, r0
 800b96a:	2a01      	cmp	r2, #1
 800b96c:	4681      	mov	r9, r0
 800b96e:	6123      	str	r3, [r4, #16]
 800b970:	dc02      	bgt.n	800b978 <_printf_float+0x150>
 800b972:	6822      	ldr	r2, [r4, #0]
 800b974:	07d2      	lsls	r2, r2, #31
 800b976:	d501      	bpl.n	800b97c <_printf_float+0x154>
 800b978:	3301      	adds	r3, #1
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0a2      	beq.n	800b8ca <_printf_float+0xa2>
 800b984:	232d      	movs	r3, #45	@ 0x2d
 800b986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b98a:	e79e      	b.n	800b8ca <_printf_float+0xa2>
 800b98c:	9a06      	ldr	r2, [sp, #24]
 800b98e:	2a47      	cmp	r2, #71	@ 0x47
 800b990:	d1c2      	bne.n	800b918 <_printf_float+0xf0>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1c0      	bne.n	800b918 <_printf_float+0xf0>
 800b996:	2301      	movs	r3, #1
 800b998:	e7bd      	b.n	800b916 <_printf_float+0xee>
 800b99a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b99e:	d9db      	bls.n	800b958 <_printf_float+0x130>
 800b9a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b9a4:	d118      	bne.n	800b9d8 <_printf_float+0x1b0>
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	dd0b      	ble.n	800b9c4 <_printf_float+0x19c>
 800b9ac:	6121      	str	r1, [r4, #16]
 800b9ae:	b913      	cbnz	r3, 800b9b6 <_printf_float+0x18e>
 800b9b0:	6822      	ldr	r2, [r4, #0]
 800b9b2:	07d0      	lsls	r0, r2, #31
 800b9b4:	d502      	bpl.n	800b9bc <_printf_float+0x194>
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	440b      	add	r3, r1
 800b9ba:	6123      	str	r3, [r4, #16]
 800b9bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b9be:	f04f 0900 	mov.w	r9, #0
 800b9c2:	e7db      	b.n	800b97c <_printf_float+0x154>
 800b9c4:	b913      	cbnz	r3, 800b9cc <_printf_float+0x1a4>
 800b9c6:	6822      	ldr	r2, [r4, #0]
 800b9c8:	07d2      	lsls	r2, r2, #31
 800b9ca:	d501      	bpl.n	800b9d0 <_printf_float+0x1a8>
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	e7f4      	b.n	800b9ba <_printf_float+0x192>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e7f2      	b.n	800b9ba <_printf_float+0x192>
 800b9d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	db05      	blt.n	800b9ea <_printf_float+0x1c2>
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	6121      	str	r1, [r4, #16]
 800b9e2:	07d8      	lsls	r0, r3, #31
 800b9e4:	d5ea      	bpl.n	800b9bc <_printf_float+0x194>
 800b9e6:	1c4b      	adds	r3, r1, #1
 800b9e8:	e7e7      	b.n	800b9ba <_printf_float+0x192>
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	bfd4      	ite	le
 800b9ee:	f1c1 0202 	rsble	r2, r1, #2
 800b9f2:	2201      	movgt	r2, #1
 800b9f4:	4413      	add	r3, r2
 800b9f6:	e7e0      	b.n	800b9ba <_printf_float+0x192>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	055a      	lsls	r2, r3, #21
 800b9fc:	d407      	bmi.n	800ba0e <_printf_float+0x1e6>
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	4642      	mov	r2, r8
 800ba02:	4631      	mov	r1, r6
 800ba04:	4628      	mov	r0, r5
 800ba06:	47b8      	blx	r7
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d12b      	bne.n	800ba64 <_printf_float+0x23c>
 800ba0c:	e767      	b.n	800b8de <_printf_float+0xb6>
 800ba0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba12:	f240 80dd 	bls.w	800bbd0 <_printf_float+0x3a8>
 800ba16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f7f5 f873 	bl	8000b08 <__aeabi_dcmpeq>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d033      	beq.n	800ba8e <_printf_float+0x266>
 800ba26:	4a37      	ldr	r2, [pc, #220]	@ (800bb04 <_printf_float+0x2dc>)
 800ba28:	2301      	movs	r3, #1
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b8      	blx	r7
 800ba30:	3001      	adds	r0, #1
 800ba32:	f43f af54 	beq.w	800b8de <_printf_float+0xb6>
 800ba36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba3a:	4543      	cmp	r3, r8
 800ba3c:	db02      	blt.n	800ba44 <_printf_float+0x21c>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	07d8      	lsls	r0, r3, #31
 800ba42:	d50f      	bpl.n	800ba64 <_printf_float+0x23c>
 800ba44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	47b8      	blx	r7
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f43f af45 	beq.w	800b8de <_printf_float+0xb6>
 800ba54:	f04f 0900 	mov.w	r9, #0
 800ba58:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba5c:	f104 0a1a 	add.w	sl, r4, #26
 800ba60:	45c8      	cmp	r8, r9
 800ba62:	dc09      	bgt.n	800ba78 <_printf_float+0x250>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	079b      	lsls	r3, r3, #30
 800ba68:	f100 8103 	bmi.w	800bc72 <_printf_float+0x44a>
 800ba6c:	68e0      	ldr	r0, [r4, #12]
 800ba6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba70:	4298      	cmp	r0, r3
 800ba72:	bfb8      	it	lt
 800ba74:	4618      	movlt	r0, r3
 800ba76:	e734      	b.n	800b8e2 <_printf_float+0xba>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	4652      	mov	r2, sl
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	f43f af2b 	beq.w	800b8de <_printf_float+0xb6>
 800ba88:	f109 0901 	add.w	r9, r9, #1
 800ba8c:	e7e8      	b.n	800ba60 <_printf_float+0x238>
 800ba8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc39      	bgt.n	800bb08 <_printf_float+0x2e0>
 800ba94:	4a1b      	ldr	r2, [pc, #108]	@ (800bb04 <_printf_float+0x2dc>)
 800ba96:	2301      	movs	r3, #1
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	47b8      	blx	r7
 800ba9e:	3001      	adds	r0, #1
 800baa0:	f43f af1d 	beq.w	800b8de <_printf_float+0xb6>
 800baa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800baa8:	ea59 0303 	orrs.w	r3, r9, r3
 800baac:	d102      	bne.n	800bab4 <_printf_float+0x28c>
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	07d9      	lsls	r1, r3, #31
 800bab2:	d5d7      	bpl.n	800ba64 <_printf_float+0x23c>
 800bab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bab8:	4631      	mov	r1, r6
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	f43f af0d 	beq.w	800b8de <_printf_float+0xb6>
 800bac4:	f04f 0a00 	mov.w	sl, #0
 800bac8:	f104 0b1a 	add.w	fp, r4, #26
 800bacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bace:	425b      	negs	r3, r3
 800bad0:	4553      	cmp	r3, sl
 800bad2:	dc01      	bgt.n	800bad8 <_printf_float+0x2b0>
 800bad4:	464b      	mov	r3, r9
 800bad6:	e793      	b.n	800ba00 <_printf_float+0x1d8>
 800bad8:	2301      	movs	r3, #1
 800bada:	465a      	mov	r2, fp
 800badc:	4631      	mov	r1, r6
 800bade:	4628      	mov	r0, r5
 800bae0:	47b8      	blx	r7
 800bae2:	3001      	adds	r0, #1
 800bae4:	f43f aefb 	beq.w	800b8de <_printf_float+0xb6>
 800bae8:	f10a 0a01 	add.w	sl, sl, #1
 800baec:	e7ee      	b.n	800bacc <_printf_float+0x2a4>
 800baee:	bf00      	nop
 800baf0:	7fefffff 	.word	0x7fefffff
 800baf4:	0800ee94 	.word	0x0800ee94
 800baf8:	0800ee90 	.word	0x0800ee90
 800bafc:	0800ee9c 	.word	0x0800ee9c
 800bb00:	0800ee98 	.word	0x0800ee98
 800bb04:	0800eea0 	.word	0x0800eea0
 800bb08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb0e:	4553      	cmp	r3, sl
 800bb10:	bfa8      	it	ge
 800bb12:	4653      	movge	r3, sl
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	4699      	mov	r9, r3
 800bb18:	dc36      	bgt.n	800bb88 <_printf_float+0x360>
 800bb1a:	f04f 0b00 	mov.w	fp, #0
 800bb1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb22:	f104 021a 	add.w	r2, r4, #26
 800bb26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb28:	9306      	str	r3, [sp, #24]
 800bb2a:	eba3 0309 	sub.w	r3, r3, r9
 800bb2e:	455b      	cmp	r3, fp
 800bb30:	dc31      	bgt.n	800bb96 <_printf_float+0x36e>
 800bb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb34:	459a      	cmp	sl, r3
 800bb36:	dc3a      	bgt.n	800bbae <_printf_float+0x386>
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	07da      	lsls	r2, r3, #31
 800bb3c:	d437      	bmi.n	800bbae <_printf_float+0x386>
 800bb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb40:	ebaa 0903 	sub.w	r9, sl, r3
 800bb44:	9b06      	ldr	r3, [sp, #24]
 800bb46:	ebaa 0303 	sub.w	r3, sl, r3
 800bb4a:	4599      	cmp	r9, r3
 800bb4c:	bfa8      	it	ge
 800bb4e:	4699      	movge	r9, r3
 800bb50:	f1b9 0f00 	cmp.w	r9, #0
 800bb54:	dc33      	bgt.n	800bbbe <_printf_float+0x396>
 800bb56:	f04f 0800 	mov.w	r8, #0
 800bb5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb5e:	f104 0b1a 	add.w	fp, r4, #26
 800bb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb64:	ebaa 0303 	sub.w	r3, sl, r3
 800bb68:	eba3 0309 	sub.w	r3, r3, r9
 800bb6c:	4543      	cmp	r3, r8
 800bb6e:	f77f af79 	ble.w	800ba64 <_printf_float+0x23c>
 800bb72:	2301      	movs	r3, #1
 800bb74:	465a      	mov	r2, fp
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	f43f aeae 	beq.w	800b8de <_printf_float+0xb6>
 800bb82:	f108 0801 	add.w	r8, r8, #1
 800bb86:	e7ec      	b.n	800bb62 <_printf_float+0x33a>
 800bb88:	4642      	mov	r2, r8
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	47b8      	blx	r7
 800bb90:	3001      	adds	r0, #1
 800bb92:	d1c2      	bne.n	800bb1a <_printf_float+0x2f2>
 800bb94:	e6a3      	b.n	800b8de <_printf_float+0xb6>
 800bb96:	2301      	movs	r3, #1
 800bb98:	4631      	mov	r1, r6
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	9206      	str	r2, [sp, #24]
 800bb9e:	47b8      	blx	r7
 800bba0:	3001      	adds	r0, #1
 800bba2:	f43f ae9c 	beq.w	800b8de <_printf_float+0xb6>
 800bba6:	9a06      	ldr	r2, [sp, #24]
 800bba8:	f10b 0b01 	add.w	fp, fp, #1
 800bbac:	e7bb      	b.n	800bb26 <_printf_float+0x2fe>
 800bbae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	47b8      	blx	r7
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d1c0      	bne.n	800bb3e <_printf_float+0x316>
 800bbbc:	e68f      	b.n	800b8de <_printf_float+0xb6>
 800bbbe:	9a06      	ldr	r2, [sp, #24]
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	4442      	add	r2, r8
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	47b8      	blx	r7
 800bbca:	3001      	adds	r0, #1
 800bbcc:	d1c3      	bne.n	800bb56 <_printf_float+0x32e>
 800bbce:	e686      	b.n	800b8de <_printf_float+0xb6>
 800bbd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbd4:	f1ba 0f01 	cmp.w	sl, #1
 800bbd8:	dc01      	bgt.n	800bbde <_printf_float+0x3b6>
 800bbda:	07db      	lsls	r3, r3, #31
 800bbdc:	d536      	bpl.n	800bc4c <_printf_float+0x424>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b8      	blx	r7
 800bbe8:	3001      	adds	r0, #1
 800bbea:	f43f ae78 	beq.w	800b8de <_printf_float+0xb6>
 800bbee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f43f ae70 	beq.w	800b8de <_printf_float+0xb6>
 800bbfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc02:	2200      	movs	r2, #0
 800bc04:	2300      	movs	r3, #0
 800bc06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc0a:	f7f4 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 800bc0e:	b9c0      	cbnz	r0, 800bc42 <_printf_float+0x41a>
 800bc10:	4653      	mov	r3, sl
 800bc12:	f108 0201 	add.w	r2, r8, #1
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	d10c      	bne.n	800bc3a <_printf_float+0x412>
 800bc20:	e65d      	b.n	800b8de <_printf_float+0xb6>
 800bc22:	2301      	movs	r3, #1
 800bc24:	465a      	mov	r2, fp
 800bc26:	4631      	mov	r1, r6
 800bc28:	4628      	mov	r0, r5
 800bc2a:	47b8      	blx	r7
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	f43f ae56 	beq.w	800b8de <_printf_float+0xb6>
 800bc32:	f108 0801 	add.w	r8, r8, #1
 800bc36:	45d0      	cmp	r8, sl
 800bc38:	dbf3      	blt.n	800bc22 <_printf_float+0x3fa>
 800bc3a:	464b      	mov	r3, r9
 800bc3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc40:	e6df      	b.n	800ba02 <_printf_float+0x1da>
 800bc42:	f04f 0800 	mov.w	r8, #0
 800bc46:	f104 0b1a 	add.w	fp, r4, #26
 800bc4a:	e7f4      	b.n	800bc36 <_printf_float+0x40e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	4642      	mov	r2, r8
 800bc50:	e7e1      	b.n	800bc16 <_printf_float+0x3ee>
 800bc52:	2301      	movs	r3, #1
 800bc54:	464a      	mov	r2, r9
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	f43f ae3e 	beq.w	800b8de <_printf_float+0xb6>
 800bc62:	f108 0801 	add.w	r8, r8, #1
 800bc66:	68e3      	ldr	r3, [r4, #12]
 800bc68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc6a:	1a5b      	subs	r3, r3, r1
 800bc6c:	4543      	cmp	r3, r8
 800bc6e:	dcf0      	bgt.n	800bc52 <_printf_float+0x42a>
 800bc70:	e6fc      	b.n	800ba6c <_printf_float+0x244>
 800bc72:	f04f 0800 	mov.w	r8, #0
 800bc76:	f104 0919 	add.w	r9, r4, #25
 800bc7a:	e7f4      	b.n	800bc66 <_printf_float+0x43e>

0800bc7c <_printf_common>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	4616      	mov	r6, r2
 800bc82:	4698      	mov	r8, r3
 800bc84:	688a      	ldr	r2, [r1, #8]
 800bc86:	690b      	ldr	r3, [r1, #16]
 800bc88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	bfb8      	it	lt
 800bc90:	4613      	movlt	r3, r2
 800bc92:	6033      	str	r3, [r6, #0]
 800bc94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc98:	4607      	mov	r7, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	b10a      	cbz	r2, 800bca2 <_printf_common+0x26>
 800bc9e:	3301      	adds	r3, #1
 800bca0:	6033      	str	r3, [r6, #0]
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	0699      	lsls	r1, r3, #26
 800bca6:	bf42      	ittt	mi
 800bca8:	6833      	ldrmi	r3, [r6, #0]
 800bcaa:	3302      	addmi	r3, #2
 800bcac:	6033      	strmi	r3, [r6, #0]
 800bcae:	6825      	ldr	r5, [r4, #0]
 800bcb0:	f015 0506 	ands.w	r5, r5, #6
 800bcb4:	d106      	bne.n	800bcc4 <_printf_common+0x48>
 800bcb6:	f104 0a19 	add.w	sl, r4, #25
 800bcba:	68e3      	ldr	r3, [r4, #12]
 800bcbc:	6832      	ldr	r2, [r6, #0]
 800bcbe:	1a9b      	subs	r3, r3, r2
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dc26      	bgt.n	800bd12 <_printf_common+0x96>
 800bcc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcc8:	6822      	ldr	r2, [r4, #0]
 800bcca:	3b00      	subs	r3, #0
 800bccc:	bf18      	it	ne
 800bcce:	2301      	movne	r3, #1
 800bcd0:	0692      	lsls	r2, r2, #26
 800bcd2:	d42b      	bmi.n	800bd2c <_printf_common+0xb0>
 800bcd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bcd8:	4641      	mov	r1, r8
 800bcda:	4638      	mov	r0, r7
 800bcdc:	47c8      	blx	r9
 800bcde:	3001      	adds	r0, #1
 800bce0:	d01e      	beq.n	800bd20 <_printf_common+0xa4>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	6922      	ldr	r2, [r4, #16]
 800bce6:	f003 0306 	and.w	r3, r3, #6
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	bf02      	ittt	eq
 800bcee:	68e5      	ldreq	r5, [r4, #12]
 800bcf0:	6833      	ldreq	r3, [r6, #0]
 800bcf2:	1aed      	subeq	r5, r5, r3
 800bcf4:	68a3      	ldr	r3, [r4, #8]
 800bcf6:	bf0c      	ite	eq
 800bcf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcfc:	2500      	movne	r5, #0
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bfc4      	itt	gt
 800bd02:	1a9b      	subgt	r3, r3, r2
 800bd04:	18ed      	addgt	r5, r5, r3
 800bd06:	2600      	movs	r6, #0
 800bd08:	341a      	adds	r4, #26
 800bd0a:	42b5      	cmp	r5, r6
 800bd0c:	d11a      	bne.n	800bd44 <_printf_common+0xc8>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	e008      	b.n	800bd24 <_printf_common+0xa8>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4652      	mov	r2, sl
 800bd16:	4641      	mov	r1, r8
 800bd18:	4638      	mov	r0, r7
 800bd1a:	47c8      	blx	r9
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d103      	bne.n	800bd28 <_printf_common+0xac>
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	3501      	adds	r5, #1
 800bd2a:	e7c6      	b.n	800bcba <_printf_common+0x3e>
 800bd2c:	18e1      	adds	r1, r4, r3
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	2030      	movs	r0, #48	@ 0x30
 800bd32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd36:	4422      	add	r2, r4
 800bd38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd40:	3302      	adds	r3, #2
 800bd42:	e7c7      	b.n	800bcd4 <_printf_common+0x58>
 800bd44:	2301      	movs	r3, #1
 800bd46:	4622      	mov	r2, r4
 800bd48:	4641      	mov	r1, r8
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	47c8      	blx	r9
 800bd4e:	3001      	adds	r0, #1
 800bd50:	d0e6      	beq.n	800bd20 <_printf_common+0xa4>
 800bd52:	3601      	adds	r6, #1
 800bd54:	e7d9      	b.n	800bd0a <_printf_common+0x8e>
	...

0800bd58 <_printf_i>:
 800bd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd5c:	7e0f      	ldrb	r7, [r1, #24]
 800bd5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd60:	2f78      	cmp	r7, #120	@ 0x78
 800bd62:	4691      	mov	r9, r2
 800bd64:	4680      	mov	r8, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	469a      	mov	sl, r3
 800bd6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd6e:	d807      	bhi.n	800bd80 <_printf_i+0x28>
 800bd70:	2f62      	cmp	r7, #98	@ 0x62
 800bd72:	d80a      	bhi.n	800bd8a <_printf_i+0x32>
 800bd74:	2f00      	cmp	r7, #0
 800bd76:	f000 80d1 	beq.w	800bf1c <_printf_i+0x1c4>
 800bd7a:	2f58      	cmp	r7, #88	@ 0x58
 800bd7c:	f000 80b8 	beq.w	800bef0 <_printf_i+0x198>
 800bd80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd88:	e03a      	b.n	800be00 <_printf_i+0xa8>
 800bd8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd8e:	2b15      	cmp	r3, #21
 800bd90:	d8f6      	bhi.n	800bd80 <_printf_i+0x28>
 800bd92:	a101      	add	r1, pc, #4	@ (adr r1, 800bd98 <_printf_i+0x40>)
 800bd94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd98:	0800bdf1 	.word	0x0800bdf1
 800bd9c:	0800be05 	.word	0x0800be05
 800bda0:	0800bd81 	.word	0x0800bd81
 800bda4:	0800bd81 	.word	0x0800bd81
 800bda8:	0800bd81 	.word	0x0800bd81
 800bdac:	0800bd81 	.word	0x0800bd81
 800bdb0:	0800be05 	.word	0x0800be05
 800bdb4:	0800bd81 	.word	0x0800bd81
 800bdb8:	0800bd81 	.word	0x0800bd81
 800bdbc:	0800bd81 	.word	0x0800bd81
 800bdc0:	0800bd81 	.word	0x0800bd81
 800bdc4:	0800bf03 	.word	0x0800bf03
 800bdc8:	0800be2f 	.word	0x0800be2f
 800bdcc:	0800bebd 	.word	0x0800bebd
 800bdd0:	0800bd81 	.word	0x0800bd81
 800bdd4:	0800bd81 	.word	0x0800bd81
 800bdd8:	0800bf25 	.word	0x0800bf25
 800bddc:	0800bd81 	.word	0x0800bd81
 800bde0:	0800be2f 	.word	0x0800be2f
 800bde4:	0800bd81 	.word	0x0800bd81
 800bde8:	0800bd81 	.word	0x0800bd81
 800bdec:	0800bec5 	.word	0x0800bec5
 800bdf0:	6833      	ldr	r3, [r6, #0]
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6032      	str	r2, [r6, #0]
 800bdf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be00:	2301      	movs	r3, #1
 800be02:	e09c      	b.n	800bf3e <_printf_i+0x1e6>
 800be04:	6833      	ldr	r3, [r6, #0]
 800be06:	6820      	ldr	r0, [r4, #0]
 800be08:	1d19      	adds	r1, r3, #4
 800be0a:	6031      	str	r1, [r6, #0]
 800be0c:	0606      	lsls	r6, r0, #24
 800be0e:	d501      	bpl.n	800be14 <_printf_i+0xbc>
 800be10:	681d      	ldr	r5, [r3, #0]
 800be12:	e003      	b.n	800be1c <_printf_i+0xc4>
 800be14:	0645      	lsls	r5, r0, #25
 800be16:	d5fb      	bpl.n	800be10 <_printf_i+0xb8>
 800be18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be1c:	2d00      	cmp	r5, #0
 800be1e:	da03      	bge.n	800be28 <_printf_i+0xd0>
 800be20:	232d      	movs	r3, #45	@ 0x2d
 800be22:	426d      	negs	r5, r5
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be28:	4858      	ldr	r0, [pc, #352]	@ (800bf8c <_printf_i+0x234>)
 800be2a:	230a      	movs	r3, #10
 800be2c:	e011      	b.n	800be52 <_printf_i+0xfa>
 800be2e:	6821      	ldr	r1, [r4, #0]
 800be30:	6833      	ldr	r3, [r6, #0]
 800be32:	0608      	lsls	r0, r1, #24
 800be34:	f853 5b04 	ldr.w	r5, [r3], #4
 800be38:	d402      	bmi.n	800be40 <_printf_i+0xe8>
 800be3a:	0649      	lsls	r1, r1, #25
 800be3c:	bf48      	it	mi
 800be3e:	b2ad      	uxthmi	r5, r5
 800be40:	2f6f      	cmp	r7, #111	@ 0x6f
 800be42:	4852      	ldr	r0, [pc, #328]	@ (800bf8c <_printf_i+0x234>)
 800be44:	6033      	str	r3, [r6, #0]
 800be46:	bf14      	ite	ne
 800be48:	230a      	movne	r3, #10
 800be4a:	2308      	moveq	r3, #8
 800be4c:	2100      	movs	r1, #0
 800be4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be52:	6866      	ldr	r6, [r4, #4]
 800be54:	60a6      	str	r6, [r4, #8]
 800be56:	2e00      	cmp	r6, #0
 800be58:	db05      	blt.n	800be66 <_printf_i+0x10e>
 800be5a:	6821      	ldr	r1, [r4, #0]
 800be5c:	432e      	orrs	r6, r5
 800be5e:	f021 0104 	bic.w	r1, r1, #4
 800be62:	6021      	str	r1, [r4, #0]
 800be64:	d04b      	beq.n	800befe <_printf_i+0x1a6>
 800be66:	4616      	mov	r6, r2
 800be68:	fbb5 f1f3 	udiv	r1, r5, r3
 800be6c:	fb03 5711 	mls	r7, r3, r1, r5
 800be70:	5dc7      	ldrb	r7, [r0, r7]
 800be72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be76:	462f      	mov	r7, r5
 800be78:	42bb      	cmp	r3, r7
 800be7a:	460d      	mov	r5, r1
 800be7c:	d9f4      	bls.n	800be68 <_printf_i+0x110>
 800be7e:	2b08      	cmp	r3, #8
 800be80:	d10b      	bne.n	800be9a <_printf_i+0x142>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	07df      	lsls	r7, r3, #31
 800be86:	d508      	bpl.n	800be9a <_printf_i+0x142>
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	6861      	ldr	r1, [r4, #4]
 800be8c:	4299      	cmp	r1, r3
 800be8e:	bfde      	ittt	le
 800be90:	2330      	movle	r3, #48	@ 0x30
 800be92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be9a:	1b92      	subs	r2, r2, r6
 800be9c:	6122      	str	r2, [r4, #16]
 800be9e:	f8cd a000 	str.w	sl, [sp]
 800bea2:	464b      	mov	r3, r9
 800bea4:	aa03      	add	r2, sp, #12
 800bea6:	4621      	mov	r1, r4
 800bea8:	4640      	mov	r0, r8
 800beaa:	f7ff fee7 	bl	800bc7c <_printf_common>
 800beae:	3001      	adds	r0, #1
 800beb0:	d14a      	bne.n	800bf48 <_printf_i+0x1f0>
 800beb2:	f04f 30ff 	mov.w	r0, #4294967295
 800beb6:	b004      	add	sp, #16
 800beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	f043 0320 	orr.w	r3, r3, #32
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	4832      	ldr	r0, [pc, #200]	@ (800bf90 <_printf_i+0x238>)
 800bec6:	2778      	movs	r7, #120	@ 0x78
 800bec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	6831      	ldr	r1, [r6, #0]
 800bed0:	061f      	lsls	r7, r3, #24
 800bed2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bed6:	d402      	bmi.n	800bede <_printf_i+0x186>
 800bed8:	065f      	lsls	r7, r3, #25
 800beda:	bf48      	it	mi
 800bedc:	b2ad      	uxthmi	r5, r5
 800bede:	6031      	str	r1, [r6, #0]
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	bf44      	itt	mi
 800bee4:	f043 0320 	orrmi.w	r3, r3, #32
 800bee8:	6023      	strmi	r3, [r4, #0]
 800beea:	b11d      	cbz	r5, 800bef4 <_printf_i+0x19c>
 800beec:	2310      	movs	r3, #16
 800beee:	e7ad      	b.n	800be4c <_printf_i+0xf4>
 800bef0:	4826      	ldr	r0, [pc, #152]	@ (800bf8c <_printf_i+0x234>)
 800bef2:	e7e9      	b.n	800bec8 <_printf_i+0x170>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	f023 0320 	bic.w	r3, r3, #32
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	e7f6      	b.n	800beec <_printf_i+0x194>
 800befe:	4616      	mov	r6, r2
 800bf00:	e7bd      	b.n	800be7e <_printf_i+0x126>
 800bf02:	6833      	ldr	r3, [r6, #0]
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	6961      	ldr	r1, [r4, #20]
 800bf08:	1d18      	adds	r0, r3, #4
 800bf0a:	6030      	str	r0, [r6, #0]
 800bf0c:	062e      	lsls	r6, r5, #24
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	d501      	bpl.n	800bf16 <_printf_i+0x1be>
 800bf12:	6019      	str	r1, [r3, #0]
 800bf14:	e002      	b.n	800bf1c <_printf_i+0x1c4>
 800bf16:	0668      	lsls	r0, r5, #25
 800bf18:	d5fb      	bpl.n	800bf12 <_printf_i+0x1ba>
 800bf1a:	8019      	strh	r1, [r3, #0]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	4616      	mov	r6, r2
 800bf22:	e7bc      	b.n	800be9e <_printf_i+0x146>
 800bf24:	6833      	ldr	r3, [r6, #0]
 800bf26:	1d1a      	adds	r2, r3, #4
 800bf28:	6032      	str	r2, [r6, #0]
 800bf2a:	681e      	ldr	r6, [r3, #0]
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7f4 f96d 	bl	8000210 <memchr>
 800bf36:	b108      	cbz	r0, 800bf3c <_printf_i+0x1e4>
 800bf38:	1b80      	subs	r0, r0, r6
 800bf3a:	6060      	str	r0, [r4, #4]
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2300      	movs	r3, #0
 800bf42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf46:	e7aa      	b.n	800be9e <_printf_i+0x146>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	4640      	mov	r0, r8
 800bf50:	47d0      	blx	sl
 800bf52:	3001      	adds	r0, #1
 800bf54:	d0ad      	beq.n	800beb2 <_printf_i+0x15a>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	079b      	lsls	r3, r3, #30
 800bf5a:	d413      	bmi.n	800bf84 <_printf_i+0x22c>
 800bf5c:	68e0      	ldr	r0, [r4, #12]
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	4298      	cmp	r0, r3
 800bf62:	bfb8      	it	lt
 800bf64:	4618      	movlt	r0, r3
 800bf66:	e7a6      	b.n	800beb6 <_printf_i+0x15e>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	4640      	mov	r0, r8
 800bf70:	47d0      	blx	sl
 800bf72:	3001      	adds	r0, #1
 800bf74:	d09d      	beq.n	800beb2 <_printf_i+0x15a>
 800bf76:	3501      	adds	r5, #1
 800bf78:	68e3      	ldr	r3, [r4, #12]
 800bf7a:	9903      	ldr	r1, [sp, #12]
 800bf7c:	1a5b      	subs	r3, r3, r1
 800bf7e:	42ab      	cmp	r3, r5
 800bf80:	dcf2      	bgt.n	800bf68 <_printf_i+0x210>
 800bf82:	e7eb      	b.n	800bf5c <_printf_i+0x204>
 800bf84:	2500      	movs	r5, #0
 800bf86:	f104 0619 	add.w	r6, r4, #25
 800bf8a:	e7f5      	b.n	800bf78 <_printf_i+0x220>
 800bf8c:	0800eea2 	.word	0x0800eea2
 800bf90:	0800eeb3 	.word	0x0800eeb3

0800bf94 <std>:
 800bf94:	2300      	movs	r3, #0
 800bf96:	b510      	push	{r4, lr}
 800bf98:	4604      	mov	r4, r0
 800bf9a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfa2:	6083      	str	r3, [r0, #8]
 800bfa4:	8181      	strh	r1, [r0, #12]
 800bfa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfa8:	81c2      	strh	r2, [r0, #14]
 800bfaa:	6183      	str	r3, [r0, #24]
 800bfac:	4619      	mov	r1, r3
 800bfae:	2208      	movs	r2, #8
 800bfb0:	305c      	adds	r0, #92	@ 0x5c
 800bfb2:	f000 f9f9 	bl	800c3a8 <memset>
 800bfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfec <std+0x58>)
 800bfb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfba:	4b0d      	ldr	r3, [pc, #52]	@ (800bff0 <std+0x5c>)
 800bfbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bff4 <std+0x60>)
 800bfc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bff8 <std+0x64>)
 800bfc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bffc <std+0x68>)
 800bfc8:	6224      	str	r4, [r4, #32]
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	d006      	beq.n	800bfdc <std+0x48>
 800bfce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bfd2:	4294      	cmp	r4, r2
 800bfd4:	d002      	beq.n	800bfdc <std+0x48>
 800bfd6:	33d0      	adds	r3, #208	@ 0xd0
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	d105      	bne.n	800bfe8 <std+0x54>
 800bfdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe4:	f000 baba 	b.w	800c55c <__retarget_lock_init_recursive>
 800bfe8:	bd10      	pop	{r4, pc}
 800bfea:	bf00      	nop
 800bfec:	0800c1f9 	.word	0x0800c1f9
 800bff0:	0800c21b 	.word	0x0800c21b
 800bff4:	0800c253 	.word	0x0800c253
 800bff8:	0800c277 	.word	0x0800c277
 800bffc:	20004f40 	.word	0x20004f40

0800c000 <stdio_exit_handler>:
 800c000:	4a02      	ldr	r2, [pc, #8]	@ (800c00c <stdio_exit_handler+0xc>)
 800c002:	4903      	ldr	r1, [pc, #12]	@ (800c010 <stdio_exit_handler+0x10>)
 800c004:	4803      	ldr	r0, [pc, #12]	@ (800c014 <stdio_exit_handler+0x14>)
 800c006:	f000 b869 	b.w	800c0dc <_fwalk_sglue>
 800c00a:	bf00      	nop
 800c00c:	20000010 	.word	0x20000010
 800c010:	0800deb1 	.word	0x0800deb1
 800c014:	20000020 	.word	0x20000020

0800c018 <cleanup_stdio>:
 800c018:	6841      	ldr	r1, [r0, #4]
 800c01a:	4b0c      	ldr	r3, [pc, #48]	@ (800c04c <cleanup_stdio+0x34>)
 800c01c:	4299      	cmp	r1, r3
 800c01e:	b510      	push	{r4, lr}
 800c020:	4604      	mov	r4, r0
 800c022:	d001      	beq.n	800c028 <cleanup_stdio+0x10>
 800c024:	f001 ff44 	bl	800deb0 <_fflush_r>
 800c028:	68a1      	ldr	r1, [r4, #8]
 800c02a:	4b09      	ldr	r3, [pc, #36]	@ (800c050 <cleanup_stdio+0x38>)
 800c02c:	4299      	cmp	r1, r3
 800c02e:	d002      	beq.n	800c036 <cleanup_stdio+0x1e>
 800c030:	4620      	mov	r0, r4
 800c032:	f001 ff3d 	bl	800deb0 <_fflush_r>
 800c036:	68e1      	ldr	r1, [r4, #12]
 800c038:	4b06      	ldr	r3, [pc, #24]	@ (800c054 <cleanup_stdio+0x3c>)
 800c03a:	4299      	cmp	r1, r3
 800c03c:	d004      	beq.n	800c048 <cleanup_stdio+0x30>
 800c03e:	4620      	mov	r0, r4
 800c040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c044:	f001 bf34 	b.w	800deb0 <_fflush_r>
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	bf00      	nop
 800c04c:	20004f40 	.word	0x20004f40
 800c050:	20004fa8 	.word	0x20004fa8
 800c054:	20005010 	.word	0x20005010

0800c058 <global_stdio_init.part.0>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	4b0b      	ldr	r3, [pc, #44]	@ (800c088 <global_stdio_init.part.0+0x30>)
 800c05c:	4c0b      	ldr	r4, [pc, #44]	@ (800c08c <global_stdio_init.part.0+0x34>)
 800c05e:	4a0c      	ldr	r2, [pc, #48]	@ (800c090 <global_stdio_init.part.0+0x38>)
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	4620      	mov	r0, r4
 800c064:	2200      	movs	r2, #0
 800c066:	2104      	movs	r1, #4
 800c068:	f7ff ff94 	bl	800bf94 <std>
 800c06c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c070:	2201      	movs	r2, #1
 800c072:	2109      	movs	r1, #9
 800c074:	f7ff ff8e 	bl	800bf94 <std>
 800c078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c07c:	2202      	movs	r2, #2
 800c07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c082:	2112      	movs	r1, #18
 800c084:	f7ff bf86 	b.w	800bf94 <std>
 800c088:	20005078 	.word	0x20005078
 800c08c:	20004f40 	.word	0x20004f40
 800c090:	0800c001 	.word	0x0800c001

0800c094 <__sfp_lock_acquire>:
 800c094:	4801      	ldr	r0, [pc, #4]	@ (800c09c <__sfp_lock_acquire+0x8>)
 800c096:	f000 ba62 	b.w	800c55e <__retarget_lock_acquire_recursive>
 800c09a:	bf00      	nop
 800c09c:	20005081 	.word	0x20005081

0800c0a0 <__sfp_lock_release>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	@ (800c0a8 <__sfp_lock_release+0x8>)
 800c0a2:	f000 ba5d 	b.w	800c560 <__retarget_lock_release_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	20005081 	.word	0x20005081

0800c0ac <__sinit>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	f7ff fff0 	bl	800c094 <__sfp_lock_acquire>
 800c0b4:	6a23      	ldr	r3, [r4, #32]
 800c0b6:	b11b      	cbz	r3, 800c0c0 <__sinit+0x14>
 800c0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0bc:	f7ff bff0 	b.w	800c0a0 <__sfp_lock_release>
 800c0c0:	4b04      	ldr	r3, [pc, #16]	@ (800c0d4 <__sinit+0x28>)
 800c0c2:	6223      	str	r3, [r4, #32]
 800c0c4:	4b04      	ldr	r3, [pc, #16]	@ (800c0d8 <__sinit+0x2c>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1f5      	bne.n	800c0b8 <__sinit+0xc>
 800c0cc:	f7ff ffc4 	bl	800c058 <global_stdio_init.part.0>
 800c0d0:	e7f2      	b.n	800c0b8 <__sinit+0xc>
 800c0d2:	bf00      	nop
 800c0d4:	0800c019 	.word	0x0800c019
 800c0d8:	20005078 	.word	0x20005078

0800c0dc <_fwalk_sglue>:
 800c0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	4688      	mov	r8, r1
 800c0e4:	4614      	mov	r4, r2
 800c0e6:	2600      	movs	r6, #0
 800c0e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c0f0:	d505      	bpl.n	800c0fe <_fwalk_sglue+0x22>
 800c0f2:	6824      	ldr	r4, [r4, #0]
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	d1f7      	bne.n	800c0e8 <_fwalk_sglue+0xc>
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0fe:	89ab      	ldrh	r3, [r5, #12]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d907      	bls.n	800c114 <_fwalk_sglue+0x38>
 800c104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c108:	3301      	adds	r3, #1
 800c10a:	d003      	beq.n	800c114 <_fwalk_sglue+0x38>
 800c10c:	4629      	mov	r1, r5
 800c10e:	4638      	mov	r0, r7
 800c110:	47c0      	blx	r8
 800c112:	4306      	orrs	r6, r0
 800c114:	3568      	adds	r5, #104	@ 0x68
 800c116:	e7e9      	b.n	800c0ec <_fwalk_sglue+0x10>

0800c118 <iprintf>:
 800c118:	b40f      	push	{r0, r1, r2, r3}
 800c11a:	b507      	push	{r0, r1, r2, lr}
 800c11c:	4906      	ldr	r1, [pc, #24]	@ (800c138 <iprintf+0x20>)
 800c11e:	ab04      	add	r3, sp, #16
 800c120:	6808      	ldr	r0, [r1, #0]
 800c122:	f853 2b04 	ldr.w	r2, [r3], #4
 800c126:	6881      	ldr	r1, [r0, #8]
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	f001 fd25 	bl	800db78 <_vfiprintf_r>
 800c12e:	b003      	add	sp, #12
 800c130:	f85d eb04 	ldr.w	lr, [sp], #4
 800c134:	b004      	add	sp, #16
 800c136:	4770      	bx	lr
 800c138:	2000001c 	.word	0x2000001c

0800c13c <_puts_r>:
 800c13c:	6a03      	ldr	r3, [r0, #32]
 800c13e:	b570      	push	{r4, r5, r6, lr}
 800c140:	6884      	ldr	r4, [r0, #8]
 800c142:	4605      	mov	r5, r0
 800c144:	460e      	mov	r6, r1
 800c146:	b90b      	cbnz	r3, 800c14c <_puts_r+0x10>
 800c148:	f7ff ffb0 	bl	800c0ac <__sinit>
 800c14c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c14e:	07db      	lsls	r3, r3, #31
 800c150:	d405      	bmi.n	800c15e <_puts_r+0x22>
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	0598      	lsls	r0, r3, #22
 800c156:	d402      	bmi.n	800c15e <_puts_r+0x22>
 800c158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c15a:	f000 fa00 	bl	800c55e <__retarget_lock_acquire_recursive>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	0719      	lsls	r1, r3, #28
 800c162:	d502      	bpl.n	800c16a <_puts_r+0x2e>
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d135      	bne.n	800c1d6 <_puts_r+0x9a>
 800c16a:	4621      	mov	r1, r4
 800c16c:	4628      	mov	r0, r5
 800c16e:	f000 f8c5 	bl	800c2fc <__swsetup_r>
 800c172:	b380      	cbz	r0, 800c1d6 <_puts_r+0x9a>
 800c174:	f04f 35ff 	mov.w	r5, #4294967295
 800c178:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c17a:	07da      	lsls	r2, r3, #31
 800c17c:	d405      	bmi.n	800c18a <_puts_r+0x4e>
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	059b      	lsls	r3, r3, #22
 800c182:	d402      	bmi.n	800c18a <_puts_r+0x4e>
 800c184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c186:	f000 f9eb 	bl	800c560 <__retarget_lock_release_recursive>
 800c18a:	4628      	mov	r0, r5
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da04      	bge.n	800c19c <_puts_r+0x60>
 800c192:	69a2      	ldr	r2, [r4, #24]
 800c194:	429a      	cmp	r2, r3
 800c196:	dc17      	bgt.n	800c1c8 <_puts_r+0x8c>
 800c198:	290a      	cmp	r1, #10
 800c19a:	d015      	beq.n	800c1c8 <_puts_r+0x8c>
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	6022      	str	r2, [r4, #0]
 800c1a2:	7019      	strb	r1, [r3, #0]
 800c1a4:	68a3      	ldr	r3, [r4, #8]
 800c1a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	2900      	cmp	r1, #0
 800c1b0:	d1ed      	bne.n	800c18e <_puts_r+0x52>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	da11      	bge.n	800c1da <_puts_r+0x9e>
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	210a      	movs	r1, #10
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f85f 	bl	800c27e <__swbuf_r>
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d0d7      	beq.n	800c174 <_puts_r+0x38>
 800c1c4:	250a      	movs	r5, #10
 800c1c6:	e7d7      	b.n	800c178 <_puts_r+0x3c>
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 f857 	bl	800c27e <__swbuf_r>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d1e7      	bne.n	800c1a4 <_puts_r+0x68>
 800c1d4:	e7ce      	b.n	800c174 <_puts_r+0x38>
 800c1d6:	3e01      	subs	r6, #1
 800c1d8:	e7e4      	b.n	800c1a4 <_puts_r+0x68>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	1c5a      	adds	r2, r3, #1
 800c1de:	6022      	str	r2, [r4, #0]
 800c1e0:	220a      	movs	r2, #10
 800c1e2:	701a      	strb	r2, [r3, #0]
 800c1e4:	e7ee      	b.n	800c1c4 <_puts_r+0x88>
	...

0800c1e8 <puts>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	@ (800c1f4 <puts+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f7ff bfa5 	b.w	800c13c <_puts_r>
 800c1f2:	bf00      	nop
 800c1f4:	2000001c 	.word	0x2000001c

0800c1f8 <__sread>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	f000 f95e 	bl	800c4c0 <_read_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	bfab      	itete	ge
 800c208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c20a:	89a3      	ldrhlt	r3, [r4, #12]
 800c20c:	181b      	addge	r3, r3, r0
 800c20e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c212:	bfac      	ite	ge
 800c214:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c216:	81a3      	strhlt	r3, [r4, #12]
 800c218:	bd10      	pop	{r4, pc}

0800c21a <__swrite>:
 800c21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	461f      	mov	r7, r3
 800c220:	898b      	ldrh	r3, [r1, #12]
 800c222:	05db      	lsls	r3, r3, #23
 800c224:	4605      	mov	r5, r0
 800c226:	460c      	mov	r4, r1
 800c228:	4616      	mov	r6, r2
 800c22a:	d505      	bpl.n	800c238 <__swrite+0x1e>
 800c22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c230:	2302      	movs	r3, #2
 800c232:	2200      	movs	r2, #0
 800c234:	f000 f932 	bl	800c49c <_lseek_r>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c23e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	4632      	mov	r2, r6
 800c246:	463b      	mov	r3, r7
 800c248:	4628      	mov	r0, r5
 800c24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	f000 b949 	b.w	800c4e4 <_write_r>

0800c252 <__sseek>:
 800c252:	b510      	push	{r4, lr}
 800c254:	460c      	mov	r4, r1
 800c256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25a:	f000 f91f 	bl	800c49c <_lseek_r>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	bf15      	itete	ne
 800c264:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c26a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c26e:	81a3      	strheq	r3, [r4, #12]
 800c270:	bf18      	it	ne
 800c272:	81a3      	strhne	r3, [r4, #12]
 800c274:	bd10      	pop	{r4, pc}

0800c276 <__sclose>:
 800c276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27a:	f000 b8a1 	b.w	800c3c0 <_close_r>

0800c27e <__swbuf_r>:
 800c27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c280:	460e      	mov	r6, r1
 800c282:	4614      	mov	r4, r2
 800c284:	4605      	mov	r5, r0
 800c286:	b118      	cbz	r0, 800c290 <__swbuf_r+0x12>
 800c288:	6a03      	ldr	r3, [r0, #32]
 800c28a:	b90b      	cbnz	r3, 800c290 <__swbuf_r+0x12>
 800c28c:	f7ff ff0e 	bl	800c0ac <__sinit>
 800c290:	69a3      	ldr	r3, [r4, #24]
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	071a      	lsls	r2, r3, #28
 800c298:	d501      	bpl.n	800c29e <__swbuf_r+0x20>
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	b943      	cbnz	r3, 800c2b0 <__swbuf_r+0x32>
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f000 f82b 	bl	800c2fc <__swsetup_r>
 800c2a6:	b118      	cbz	r0, 800c2b0 <__swbuf_r+0x32>
 800c2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	6922      	ldr	r2, [r4, #16]
 800c2b4:	1a98      	subs	r0, r3, r2
 800c2b6:	6963      	ldr	r3, [r4, #20]
 800c2b8:	b2f6      	uxtb	r6, r6
 800c2ba:	4283      	cmp	r3, r0
 800c2bc:	4637      	mov	r7, r6
 800c2be:	dc05      	bgt.n	800c2cc <__swbuf_r+0x4e>
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f001 fdf4 	bl	800deb0 <_fflush_r>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d1ed      	bne.n	800c2a8 <__swbuf_r+0x2a>
 800c2cc:	68a3      	ldr	r3, [r4, #8]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	60a3      	str	r3, [r4, #8]
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	6022      	str	r2, [r4, #0]
 800c2d8:	701e      	strb	r6, [r3, #0]
 800c2da:	6962      	ldr	r2, [r4, #20]
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d004      	beq.n	800c2ec <__swbuf_r+0x6e>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	07db      	lsls	r3, r3, #31
 800c2e6:	d5e1      	bpl.n	800c2ac <__swbuf_r+0x2e>
 800c2e8:	2e0a      	cmp	r6, #10
 800c2ea:	d1df      	bne.n	800c2ac <__swbuf_r+0x2e>
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	f001 fdde 	bl	800deb0 <_fflush_r>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d0d9      	beq.n	800c2ac <__swbuf_r+0x2e>
 800c2f8:	e7d6      	b.n	800c2a8 <__swbuf_r+0x2a>
	...

0800c2fc <__swsetup_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4b29      	ldr	r3, [pc, #164]	@ (800c3a4 <__swsetup_r+0xa8>)
 800c300:	4605      	mov	r5, r0
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	460c      	mov	r4, r1
 800c306:	b118      	cbz	r0, 800c310 <__swsetup_r+0x14>
 800c308:	6a03      	ldr	r3, [r0, #32]
 800c30a:	b90b      	cbnz	r3, 800c310 <__swsetup_r+0x14>
 800c30c:	f7ff fece 	bl	800c0ac <__sinit>
 800c310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c314:	0719      	lsls	r1, r3, #28
 800c316:	d422      	bmi.n	800c35e <__swsetup_r+0x62>
 800c318:	06da      	lsls	r2, r3, #27
 800c31a:	d407      	bmi.n	800c32c <__swsetup_r+0x30>
 800c31c:	2209      	movs	r2, #9
 800c31e:	602a      	str	r2, [r5, #0]
 800c320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c324:	81a3      	strh	r3, [r4, #12]
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	e033      	b.n	800c394 <__swsetup_r+0x98>
 800c32c:	0758      	lsls	r0, r3, #29
 800c32e:	d512      	bpl.n	800c356 <__swsetup_r+0x5a>
 800c330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c332:	b141      	cbz	r1, 800c346 <__swsetup_r+0x4a>
 800c334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c338:	4299      	cmp	r1, r3
 800c33a:	d002      	beq.n	800c342 <__swsetup_r+0x46>
 800c33c:	4628      	mov	r0, r5
 800c33e:	f000 ff77 	bl	800d230 <_free_r>
 800c342:	2300      	movs	r3, #0
 800c344:	6363      	str	r3, [r4, #52]	@ 0x34
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c34c:	81a3      	strh	r3, [r4, #12]
 800c34e:	2300      	movs	r3, #0
 800c350:	6063      	str	r3, [r4, #4]
 800c352:	6923      	ldr	r3, [r4, #16]
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	89a3      	ldrh	r3, [r4, #12]
 800c358:	f043 0308 	orr.w	r3, r3, #8
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	6923      	ldr	r3, [r4, #16]
 800c360:	b94b      	cbnz	r3, 800c376 <__swsetup_r+0x7a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c36c:	d003      	beq.n	800c376 <__swsetup_r+0x7a>
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f001 fdeb 	bl	800df4c <__smakebuf_r>
 800c376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37a:	f013 0201 	ands.w	r2, r3, #1
 800c37e:	d00a      	beq.n	800c396 <__swsetup_r+0x9a>
 800c380:	2200      	movs	r2, #0
 800c382:	60a2      	str	r2, [r4, #8]
 800c384:	6962      	ldr	r2, [r4, #20]
 800c386:	4252      	negs	r2, r2
 800c388:	61a2      	str	r2, [r4, #24]
 800c38a:	6922      	ldr	r2, [r4, #16]
 800c38c:	b942      	cbnz	r2, 800c3a0 <__swsetup_r+0xa4>
 800c38e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c392:	d1c5      	bne.n	800c320 <__swsetup_r+0x24>
 800c394:	bd38      	pop	{r3, r4, r5, pc}
 800c396:	0799      	lsls	r1, r3, #30
 800c398:	bf58      	it	pl
 800c39a:	6962      	ldrpl	r2, [r4, #20]
 800c39c:	60a2      	str	r2, [r4, #8]
 800c39e:	e7f4      	b.n	800c38a <__swsetup_r+0x8e>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e7f7      	b.n	800c394 <__swsetup_r+0x98>
 800c3a4:	2000001c 	.word	0x2000001c

0800c3a8 <memset>:
 800c3a8:	4402      	add	r2, r0
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d100      	bne.n	800c3b2 <memset+0xa>
 800c3b0:	4770      	bx	lr
 800c3b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3b6:	e7f9      	b.n	800c3ac <memset+0x4>

0800c3b8 <_localeconv_r>:
 800c3b8:	4800      	ldr	r0, [pc, #0]	@ (800c3bc <_localeconv_r+0x4>)
 800c3ba:	4770      	bx	lr
 800c3bc:	2000015c 	.word	0x2000015c

0800c3c0 <_close_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_close_r+0x1c>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7f6 fd9a 	bl	8002f04 <_close>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_close_r+0x1a>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_close_r+0x1a>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	2000507c 	.word	0x2000507c

0800c3e0 <_reclaim_reent>:
 800c3e0:	4b2d      	ldr	r3, [pc, #180]	@ (800c498 <_reclaim_reent+0xb8>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4283      	cmp	r3, r0
 800c3e6:	b570      	push	{r4, r5, r6, lr}
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	d053      	beq.n	800c494 <_reclaim_reent+0xb4>
 800c3ec:	69c3      	ldr	r3, [r0, #28]
 800c3ee:	b31b      	cbz	r3, 800c438 <_reclaim_reent+0x58>
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	b163      	cbz	r3, 800c40e <_reclaim_reent+0x2e>
 800c3f4:	2500      	movs	r5, #0
 800c3f6:	69e3      	ldr	r3, [r4, #28]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	5959      	ldr	r1, [r3, r5]
 800c3fc:	b9b1      	cbnz	r1, 800c42c <_reclaim_reent+0x4c>
 800c3fe:	3504      	adds	r5, #4
 800c400:	2d80      	cmp	r5, #128	@ 0x80
 800c402:	d1f8      	bne.n	800c3f6 <_reclaim_reent+0x16>
 800c404:	69e3      	ldr	r3, [r4, #28]
 800c406:	4620      	mov	r0, r4
 800c408:	68d9      	ldr	r1, [r3, #12]
 800c40a:	f000 ff11 	bl	800d230 <_free_r>
 800c40e:	69e3      	ldr	r3, [r4, #28]
 800c410:	6819      	ldr	r1, [r3, #0]
 800c412:	b111      	cbz	r1, 800c41a <_reclaim_reent+0x3a>
 800c414:	4620      	mov	r0, r4
 800c416:	f000 ff0b 	bl	800d230 <_free_r>
 800c41a:	69e3      	ldr	r3, [r4, #28]
 800c41c:	689d      	ldr	r5, [r3, #8]
 800c41e:	b15d      	cbz	r5, 800c438 <_reclaim_reent+0x58>
 800c420:	4629      	mov	r1, r5
 800c422:	4620      	mov	r0, r4
 800c424:	682d      	ldr	r5, [r5, #0]
 800c426:	f000 ff03 	bl	800d230 <_free_r>
 800c42a:	e7f8      	b.n	800c41e <_reclaim_reent+0x3e>
 800c42c:	680e      	ldr	r6, [r1, #0]
 800c42e:	4620      	mov	r0, r4
 800c430:	f000 fefe 	bl	800d230 <_free_r>
 800c434:	4631      	mov	r1, r6
 800c436:	e7e1      	b.n	800c3fc <_reclaim_reent+0x1c>
 800c438:	6961      	ldr	r1, [r4, #20]
 800c43a:	b111      	cbz	r1, 800c442 <_reclaim_reent+0x62>
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 fef7 	bl	800d230 <_free_r>
 800c442:	69e1      	ldr	r1, [r4, #28]
 800c444:	b111      	cbz	r1, 800c44c <_reclaim_reent+0x6c>
 800c446:	4620      	mov	r0, r4
 800c448:	f000 fef2 	bl	800d230 <_free_r>
 800c44c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c44e:	b111      	cbz	r1, 800c456 <_reclaim_reent+0x76>
 800c450:	4620      	mov	r0, r4
 800c452:	f000 feed 	bl	800d230 <_free_r>
 800c456:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c458:	b111      	cbz	r1, 800c460 <_reclaim_reent+0x80>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 fee8 	bl	800d230 <_free_r>
 800c460:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c462:	b111      	cbz	r1, 800c46a <_reclaim_reent+0x8a>
 800c464:	4620      	mov	r0, r4
 800c466:	f000 fee3 	bl	800d230 <_free_r>
 800c46a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c46c:	b111      	cbz	r1, 800c474 <_reclaim_reent+0x94>
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 fede 	bl	800d230 <_free_r>
 800c474:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c476:	b111      	cbz	r1, 800c47e <_reclaim_reent+0x9e>
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 fed9 	bl	800d230 <_free_r>
 800c47e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c480:	b111      	cbz	r1, 800c488 <_reclaim_reent+0xa8>
 800c482:	4620      	mov	r0, r4
 800c484:	f000 fed4 	bl	800d230 <_free_r>
 800c488:	6a23      	ldr	r3, [r4, #32]
 800c48a:	b11b      	cbz	r3, 800c494 <_reclaim_reent+0xb4>
 800c48c:	4620      	mov	r0, r4
 800c48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c492:	4718      	bx	r3
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	bf00      	nop
 800c498:	2000001c 	.word	0x2000001c

0800c49c <_lseek_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	@ (800c4bc <_lseek_r+0x20>)
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	602a      	str	r2, [r5, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	f7f6 fd51 	bl	8002f52 <_lseek>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	d102      	bne.n	800c4ba <_lseek_r+0x1e>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	b103      	cbz	r3, 800c4ba <_lseek_r+0x1e>
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	2000507c 	.word	0x2000507c

0800c4c0 <_read_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d07      	ldr	r5, [pc, #28]	@ (800c4e0 <_read_r+0x20>)
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	4608      	mov	r0, r1
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	602a      	str	r2, [r5, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	f7f6 fcfb 	bl	8002eca <_read>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_read_r+0x1e>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_read_r+0x1e>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	2000507c 	.word	0x2000507c

0800c4e4 <_write_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d07      	ldr	r5, [pc, #28]	@ (800c504 <_write_r+0x20>)
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	602a      	str	r2, [r5, #0]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f7f6 f9a2 	bl	800283c <_write>
 800c4f8:	1c43      	adds	r3, r0, #1
 800c4fa:	d102      	bne.n	800c502 <_write_r+0x1e>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	b103      	cbz	r3, 800c502 <_write_r+0x1e>
 800c500:	6023      	str	r3, [r4, #0]
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	2000507c 	.word	0x2000507c

0800c508 <__errno>:
 800c508:	4b01      	ldr	r3, [pc, #4]	@ (800c510 <__errno+0x8>)
 800c50a:	6818      	ldr	r0, [r3, #0]
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	2000001c 	.word	0x2000001c

0800c514 <__libc_init_array>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	4d0d      	ldr	r5, [pc, #52]	@ (800c54c <__libc_init_array+0x38>)
 800c518:	4c0d      	ldr	r4, [pc, #52]	@ (800c550 <__libc_init_array+0x3c>)
 800c51a:	1b64      	subs	r4, r4, r5
 800c51c:	10a4      	asrs	r4, r4, #2
 800c51e:	2600      	movs	r6, #0
 800c520:	42a6      	cmp	r6, r4
 800c522:	d109      	bne.n	800c538 <__libc_init_array+0x24>
 800c524:	4d0b      	ldr	r5, [pc, #44]	@ (800c554 <__libc_init_array+0x40>)
 800c526:	4c0c      	ldr	r4, [pc, #48]	@ (800c558 <__libc_init_array+0x44>)
 800c528:	f002 f99a 	bl	800e860 <_init>
 800c52c:	1b64      	subs	r4, r4, r5
 800c52e:	10a4      	asrs	r4, r4, #2
 800c530:	2600      	movs	r6, #0
 800c532:	42a6      	cmp	r6, r4
 800c534:	d105      	bne.n	800c542 <__libc_init_array+0x2e>
 800c536:	bd70      	pop	{r4, r5, r6, pc}
 800c538:	f855 3b04 	ldr.w	r3, [r5], #4
 800c53c:	4798      	blx	r3
 800c53e:	3601      	adds	r6, #1
 800c540:	e7ee      	b.n	800c520 <__libc_init_array+0xc>
 800c542:	f855 3b04 	ldr.w	r3, [r5], #4
 800c546:	4798      	blx	r3
 800c548:	3601      	adds	r6, #1
 800c54a:	e7f2      	b.n	800c532 <__libc_init_array+0x1e>
 800c54c:	0800f290 	.word	0x0800f290
 800c550:	0800f290 	.word	0x0800f290
 800c554:	0800f290 	.word	0x0800f290
 800c558:	0800f294 	.word	0x0800f294

0800c55c <__retarget_lock_init_recursive>:
 800c55c:	4770      	bx	lr

0800c55e <__retarget_lock_acquire_recursive>:
 800c55e:	4770      	bx	lr

0800c560 <__retarget_lock_release_recursive>:
 800c560:	4770      	bx	lr

0800c562 <memcpy>:
 800c562:	440a      	add	r2, r1
 800c564:	4291      	cmp	r1, r2
 800c566:	f100 33ff 	add.w	r3, r0, #4294967295
 800c56a:	d100      	bne.n	800c56e <memcpy+0xc>
 800c56c:	4770      	bx	lr
 800c56e:	b510      	push	{r4, lr}
 800c570:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c574:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c578:	4291      	cmp	r1, r2
 800c57a:	d1f9      	bne.n	800c570 <memcpy+0xe>
 800c57c:	bd10      	pop	{r4, pc}

0800c57e <quorem>:
 800c57e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c582:	6903      	ldr	r3, [r0, #16]
 800c584:	690c      	ldr	r4, [r1, #16]
 800c586:	42a3      	cmp	r3, r4
 800c588:	4607      	mov	r7, r0
 800c58a:	db7e      	blt.n	800c68a <quorem+0x10c>
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f101 0814 	add.w	r8, r1, #20
 800c592:	00a3      	lsls	r3, r4, #2
 800c594:	f100 0514 	add.w	r5, r0, #20
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5b4:	d32e      	bcc.n	800c614 <quorem+0x96>
 800c5b6:	f04f 0a00 	mov.w	sl, #0
 800c5ba:	46c4      	mov	ip, r8
 800c5bc:	46ae      	mov	lr, r5
 800c5be:	46d3      	mov	fp, sl
 800c5c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5c4:	b298      	uxth	r0, r3
 800c5c6:	fb06 a000 	mla	r0, r6, r0, sl
 800c5ca:	0c02      	lsrs	r2, r0, #16
 800c5cc:	0c1b      	lsrs	r3, r3, #16
 800c5ce:	fb06 2303 	mla	r3, r6, r3, r2
 800c5d2:	f8de 2000 	ldr.w	r2, [lr]
 800c5d6:	b280      	uxth	r0, r0
 800c5d8:	b292      	uxth	r2, r2
 800c5da:	1a12      	subs	r2, r2, r0
 800c5dc:	445a      	add	r2, fp
 800c5de:	f8de 0000 	ldr.w	r0, [lr]
 800c5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5f6:	45e1      	cmp	r9, ip
 800c5f8:	f84e 2b04 	str.w	r2, [lr], #4
 800c5fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c600:	d2de      	bcs.n	800c5c0 <quorem+0x42>
 800c602:	9b00      	ldr	r3, [sp, #0]
 800c604:	58eb      	ldr	r3, [r5, r3]
 800c606:	b92b      	cbnz	r3, 800c614 <quorem+0x96>
 800c608:	9b01      	ldr	r3, [sp, #4]
 800c60a:	3b04      	subs	r3, #4
 800c60c:	429d      	cmp	r5, r3
 800c60e:	461a      	mov	r2, r3
 800c610:	d32f      	bcc.n	800c672 <quorem+0xf4>
 800c612:	613c      	str	r4, [r7, #16]
 800c614:	4638      	mov	r0, r7
 800c616:	f001 f97d 	bl	800d914 <__mcmp>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	db25      	blt.n	800c66a <quorem+0xec>
 800c61e:	4629      	mov	r1, r5
 800c620:	2000      	movs	r0, #0
 800c622:	f858 2b04 	ldr.w	r2, [r8], #4
 800c626:	f8d1 c000 	ldr.w	ip, [r1]
 800c62a:	fa1f fe82 	uxth.w	lr, r2
 800c62e:	fa1f f38c 	uxth.w	r3, ip
 800c632:	eba3 030e 	sub.w	r3, r3, lr
 800c636:	4403      	add	r3, r0
 800c638:	0c12      	lsrs	r2, r2, #16
 800c63a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c63e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c642:	b29b      	uxth	r3, r3
 800c644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c648:	45c1      	cmp	r9, r8
 800c64a:	f841 3b04 	str.w	r3, [r1], #4
 800c64e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c652:	d2e6      	bcs.n	800c622 <quorem+0xa4>
 800c654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c65c:	b922      	cbnz	r2, 800c668 <quorem+0xea>
 800c65e:	3b04      	subs	r3, #4
 800c660:	429d      	cmp	r5, r3
 800c662:	461a      	mov	r2, r3
 800c664:	d30b      	bcc.n	800c67e <quorem+0x100>
 800c666:	613c      	str	r4, [r7, #16]
 800c668:	3601      	adds	r6, #1
 800c66a:	4630      	mov	r0, r6
 800c66c:	b003      	add	sp, #12
 800c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c672:	6812      	ldr	r2, [r2, #0]
 800c674:	3b04      	subs	r3, #4
 800c676:	2a00      	cmp	r2, #0
 800c678:	d1cb      	bne.n	800c612 <quorem+0x94>
 800c67a:	3c01      	subs	r4, #1
 800c67c:	e7c6      	b.n	800c60c <quorem+0x8e>
 800c67e:	6812      	ldr	r2, [r2, #0]
 800c680:	3b04      	subs	r3, #4
 800c682:	2a00      	cmp	r2, #0
 800c684:	d1ef      	bne.n	800c666 <quorem+0xe8>
 800c686:	3c01      	subs	r4, #1
 800c688:	e7ea      	b.n	800c660 <quorem+0xe2>
 800c68a:	2000      	movs	r0, #0
 800c68c:	e7ee      	b.n	800c66c <quorem+0xee>
	...

0800c690 <_dtoa_r>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	69c7      	ldr	r7, [r0, #28]
 800c696:	b097      	sub	sp, #92	@ 0x5c
 800c698:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c69c:	ec55 4b10 	vmov	r4, r5, d0
 800c6a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c6a2:	9107      	str	r1, [sp, #28]
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c6aa:	b97f      	cbnz	r7, 800c6cc <_dtoa_r+0x3c>
 800c6ac:	2010      	movs	r0, #16
 800c6ae:	f000 fe09 	bl	800d2c4 <malloc>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c6b8:	b920      	cbnz	r0, 800c6c4 <_dtoa_r+0x34>
 800c6ba:	4ba9      	ldr	r3, [pc, #676]	@ (800c960 <_dtoa_r+0x2d0>)
 800c6bc:	21ef      	movs	r1, #239	@ 0xef
 800c6be:	48a9      	ldr	r0, [pc, #676]	@ (800c964 <_dtoa_r+0x2d4>)
 800c6c0:	f001 fcb2 	bl	800e028 <__assert_func>
 800c6c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c6c8:	6007      	str	r7, [r0, #0]
 800c6ca:	60c7      	str	r7, [r0, #12]
 800c6cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	b159      	cbz	r1, 800c6ec <_dtoa_r+0x5c>
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	604a      	str	r2, [r1, #4]
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4093      	lsls	r3, r2
 800c6dc:	608b      	str	r3, [r1, #8]
 800c6de:	4648      	mov	r0, r9
 800c6e0:	f000 fee6 	bl	800d4b0 <_Bfree>
 800c6e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	1e2b      	subs	r3, r5, #0
 800c6ee:	bfb9      	ittee	lt
 800c6f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6f4:	9305      	strlt	r3, [sp, #20]
 800c6f6:	2300      	movge	r3, #0
 800c6f8:	6033      	strge	r3, [r6, #0]
 800c6fa:	9f05      	ldr	r7, [sp, #20]
 800c6fc:	4b9a      	ldr	r3, [pc, #616]	@ (800c968 <_dtoa_r+0x2d8>)
 800c6fe:	bfbc      	itt	lt
 800c700:	2201      	movlt	r2, #1
 800c702:	6032      	strlt	r2, [r6, #0]
 800c704:	43bb      	bics	r3, r7
 800c706:	d112      	bne.n	800c72e <_dtoa_r+0x9e>
 800c708:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c70a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c714:	4323      	orrs	r3, r4
 800c716:	f000 855a 	beq.w	800d1ce <_dtoa_r+0xb3e>
 800c71a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c71c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c97c <_dtoa_r+0x2ec>
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 855c 	beq.w	800d1de <_dtoa_r+0xb4e>
 800c726:	f10a 0303 	add.w	r3, sl, #3
 800c72a:	f000 bd56 	b.w	800d1da <_dtoa_r+0xb4a>
 800c72e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c732:	2200      	movs	r2, #0
 800c734:	ec51 0b17 	vmov	r0, r1, d7
 800c738:	2300      	movs	r3, #0
 800c73a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c73e:	f7f4 f9e3 	bl	8000b08 <__aeabi_dcmpeq>
 800c742:	4680      	mov	r8, r0
 800c744:	b158      	cbz	r0, 800c75e <_dtoa_r+0xce>
 800c746:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c748:	2301      	movs	r3, #1
 800c74a:	6013      	str	r3, [r2, #0]
 800c74c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c74e:	b113      	cbz	r3, 800c756 <_dtoa_r+0xc6>
 800c750:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c752:	4b86      	ldr	r3, [pc, #536]	@ (800c96c <_dtoa_r+0x2dc>)
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c980 <_dtoa_r+0x2f0>
 800c75a:	f000 bd40 	b.w	800d1de <_dtoa_r+0xb4e>
 800c75e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c762:	aa14      	add	r2, sp, #80	@ 0x50
 800c764:	a915      	add	r1, sp, #84	@ 0x54
 800c766:	4648      	mov	r0, r9
 800c768:	f001 f984 	bl	800da74 <__d2b>
 800c76c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c770:	9002      	str	r0, [sp, #8]
 800c772:	2e00      	cmp	r6, #0
 800c774:	d078      	beq.n	800c868 <_dtoa_r+0x1d8>
 800c776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c778:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c78c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c790:	4619      	mov	r1, r3
 800c792:	2200      	movs	r2, #0
 800c794:	4b76      	ldr	r3, [pc, #472]	@ (800c970 <_dtoa_r+0x2e0>)
 800c796:	f7f3 fd97 	bl	80002c8 <__aeabi_dsub>
 800c79a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c948 <_dtoa_r+0x2b8>)
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	f7f3 ff4a 	bl	8000638 <__aeabi_dmul>
 800c7a4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c950 <_dtoa_r+0x2c0>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	f7f3 fd8f 	bl	80002cc <__adddf3>
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	460d      	mov	r5, r1
 800c7b4:	f7f3 fed6 	bl	8000564 <__aeabi_i2d>
 800c7b8:	a367      	add	r3, pc, #412	@ (adr r3, 800c958 <_dtoa_r+0x2c8>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7f3 ff3b 	bl	8000638 <__aeabi_dmul>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 fd7f 	bl	80002cc <__adddf3>
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	f7f4 f9e1 	bl	8000b98 <__aeabi_d2iz>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	4607      	mov	r7, r0
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f7f4 f99c 	bl	8000b1c <__aeabi_dcmplt>
 800c7e4:	b140      	cbz	r0, 800c7f8 <_dtoa_r+0x168>
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	f7f3 febc 	bl	8000564 <__aeabi_i2d>
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	462b      	mov	r3, r5
 800c7f0:	f7f4 f98a 	bl	8000b08 <__aeabi_dcmpeq>
 800c7f4:	b900      	cbnz	r0, 800c7f8 <_dtoa_r+0x168>
 800c7f6:	3f01      	subs	r7, #1
 800c7f8:	2f16      	cmp	r7, #22
 800c7fa:	d852      	bhi.n	800c8a2 <_dtoa_r+0x212>
 800c7fc:	4b5d      	ldr	r3, [pc, #372]	@ (800c974 <_dtoa_r+0x2e4>)
 800c7fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c80a:	f7f4 f987 	bl	8000b1c <__aeabi_dcmplt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d049      	beq.n	800c8a6 <_dtoa_r+0x216>
 800c812:	3f01      	subs	r7, #1
 800c814:	2300      	movs	r3, #0
 800c816:	9310      	str	r3, [sp, #64]	@ 0x40
 800c818:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c81a:	1b9b      	subs	r3, r3, r6
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	bf45      	ittet	mi
 800c820:	f1c3 0301 	rsbmi	r3, r3, #1
 800c824:	9300      	strmi	r3, [sp, #0]
 800c826:	2300      	movpl	r3, #0
 800c828:	2300      	movmi	r3, #0
 800c82a:	9206      	str	r2, [sp, #24]
 800c82c:	bf54      	ite	pl
 800c82e:	9300      	strpl	r3, [sp, #0]
 800c830:	9306      	strmi	r3, [sp, #24]
 800c832:	2f00      	cmp	r7, #0
 800c834:	db39      	blt.n	800c8aa <_dtoa_r+0x21a>
 800c836:	9b06      	ldr	r3, [sp, #24]
 800c838:	970d      	str	r7, [sp, #52]	@ 0x34
 800c83a:	443b      	add	r3, r7
 800c83c:	9306      	str	r3, [sp, #24]
 800c83e:	2300      	movs	r3, #0
 800c840:	9308      	str	r3, [sp, #32]
 800c842:	9b07      	ldr	r3, [sp, #28]
 800c844:	2b09      	cmp	r3, #9
 800c846:	d863      	bhi.n	800c910 <_dtoa_r+0x280>
 800c848:	2b05      	cmp	r3, #5
 800c84a:	bfc4      	itt	gt
 800c84c:	3b04      	subgt	r3, #4
 800c84e:	9307      	strgt	r3, [sp, #28]
 800c850:	9b07      	ldr	r3, [sp, #28]
 800c852:	f1a3 0302 	sub.w	r3, r3, #2
 800c856:	bfcc      	ite	gt
 800c858:	2400      	movgt	r4, #0
 800c85a:	2401      	movle	r4, #1
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d863      	bhi.n	800c928 <_dtoa_r+0x298>
 800c860:	e8df f003 	tbb	[pc, r3]
 800c864:	2b375452 	.word	0x2b375452
 800c868:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c86c:	441e      	add	r6, r3
 800c86e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c872:	2b20      	cmp	r3, #32
 800c874:	bfc1      	itttt	gt
 800c876:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c87a:	409f      	lslgt	r7, r3
 800c87c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c880:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c884:	bfd6      	itet	le
 800c886:	f1c3 0320 	rsble	r3, r3, #32
 800c88a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c88e:	fa04 f003 	lslle.w	r0, r4, r3
 800c892:	f7f3 fe57 	bl	8000544 <__aeabi_ui2d>
 800c896:	2201      	movs	r2, #1
 800c898:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c89c:	3e01      	subs	r6, #1
 800c89e:	9212      	str	r2, [sp, #72]	@ 0x48
 800c8a0:	e776      	b.n	800c790 <_dtoa_r+0x100>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e7b7      	b.n	800c816 <_dtoa_r+0x186>
 800c8a6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c8a8:	e7b6      	b.n	800c818 <_dtoa_r+0x188>
 800c8aa:	9b00      	ldr	r3, [sp, #0]
 800c8ac:	1bdb      	subs	r3, r3, r7
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	427b      	negs	r3, r7
 800c8b2:	9308      	str	r3, [sp, #32]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c8b8:	e7c3      	b.n	800c842 <_dtoa_r+0x1b2>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8c0:	eb07 0b03 	add.w	fp, r7, r3
 800c8c4:	f10b 0301 	add.w	r3, fp, #1
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	bfb8      	it	lt
 800c8ce:	2301      	movlt	r3, #1
 800c8d0:	e006      	b.n	800c8e0 <_dtoa_r+0x250>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	dd28      	ble.n	800c92e <_dtoa_r+0x29e>
 800c8dc:	469b      	mov	fp, r3
 800c8de:	9303      	str	r3, [sp, #12]
 800c8e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	2204      	movs	r2, #4
 800c8e8:	f102 0514 	add.w	r5, r2, #20
 800c8ec:	429d      	cmp	r5, r3
 800c8ee:	d926      	bls.n	800c93e <_dtoa_r+0x2ae>
 800c8f0:	6041      	str	r1, [r0, #4]
 800c8f2:	4648      	mov	r0, r9
 800c8f4:	f000 fd9c 	bl	800d430 <_Balloc>
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d142      	bne.n	800c984 <_dtoa_r+0x2f4>
 800c8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c978 <_dtoa_r+0x2e8>)
 800c900:	4602      	mov	r2, r0
 800c902:	f240 11af 	movw	r1, #431	@ 0x1af
 800c906:	e6da      	b.n	800c6be <_dtoa_r+0x2e>
 800c908:	2300      	movs	r3, #0
 800c90a:	e7e3      	b.n	800c8d4 <_dtoa_r+0x244>
 800c90c:	2300      	movs	r3, #0
 800c90e:	e7d5      	b.n	800c8bc <_dtoa_r+0x22c>
 800c910:	2401      	movs	r4, #1
 800c912:	2300      	movs	r3, #0
 800c914:	9307      	str	r3, [sp, #28]
 800c916:	9409      	str	r4, [sp, #36]	@ 0x24
 800c918:	f04f 3bff 	mov.w	fp, #4294967295
 800c91c:	2200      	movs	r2, #0
 800c91e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c922:	2312      	movs	r3, #18
 800c924:	920c      	str	r2, [sp, #48]	@ 0x30
 800c926:	e7db      	b.n	800c8e0 <_dtoa_r+0x250>
 800c928:	2301      	movs	r3, #1
 800c92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c92c:	e7f4      	b.n	800c918 <_dtoa_r+0x288>
 800c92e:	f04f 0b01 	mov.w	fp, #1
 800c932:	f8cd b00c 	str.w	fp, [sp, #12]
 800c936:	465b      	mov	r3, fp
 800c938:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c93c:	e7d0      	b.n	800c8e0 <_dtoa_r+0x250>
 800c93e:	3101      	adds	r1, #1
 800c940:	0052      	lsls	r2, r2, #1
 800c942:	e7d1      	b.n	800c8e8 <_dtoa_r+0x258>
 800c944:	f3af 8000 	nop.w
 800c948:	636f4361 	.word	0x636f4361
 800c94c:	3fd287a7 	.word	0x3fd287a7
 800c950:	8b60c8b3 	.word	0x8b60c8b3
 800c954:	3fc68a28 	.word	0x3fc68a28
 800c958:	509f79fb 	.word	0x509f79fb
 800c95c:	3fd34413 	.word	0x3fd34413
 800c960:	0800eed1 	.word	0x0800eed1
 800c964:	0800eee8 	.word	0x0800eee8
 800c968:	7ff00000 	.word	0x7ff00000
 800c96c:	0800eea1 	.word	0x0800eea1
 800c970:	3ff80000 	.word	0x3ff80000
 800c974:	0800f038 	.word	0x0800f038
 800c978:	0800ef40 	.word	0x0800ef40
 800c97c:	0800eecd 	.word	0x0800eecd
 800c980:	0800eea0 	.word	0x0800eea0
 800c984:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c988:	6018      	str	r0, [r3, #0]
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	2b0e      	cmp	r3, #14
 800c98e:	f200 80a1 	bhi.w	800cad4 <_dtoa_r+0x444>
 800c992:	2c00      	cmp	r4, #0
 800c994:	f000 809e 	beq.w	800cad4 <_dtoa_r+0x444>
 800c998:	2f00      	cmp	r7, #0
 800c99a:	dd33      	ble.n	800ca04 <_dtoa_r+0x374>
 800c99c:	4b9c      	ldr	r3, [pc, #624]	@ (800cc10 <_dtoa_r+0x580>)
 800c99e:	f007 020f 	and.w	r2, r7, #15
 800c9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9a6:	ed93 7b00 	vldr	d7, [r3]
 800c9aa:	05f8      	lsls	r0, r7, #23
 800c9ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c9b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9b4:	d516      	bpl.n	800c9e4 <_dtoa_r+0x354>
 800c9b6:	4b97      	ldr	r3, [pc, #604]	@ (800cc14 <_dtoa_r+0x584>)
 800c9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9c0:	f7f3 ff64 	bl	800088c <__aeabi_ddiv>
 800c9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9c8:	f004 040f 	and.w	r4, r4, #15
 800c9cc:	2603      	movs	r6, #3
 800c9ce:	4d91      	ldr	r5, [pc, #580]	@ (800cc14 <_dtoa_r+0x584>)
 800c9d0:	b954      	cbnz	r4, 800c9e8 <_dtoa_r+0x358>
 800c9d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c9d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9da:	f7f3 ff57 	bl	800088c <__aeabi_ddiv>
 800c9de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9e2:	e028      	b.n	800ca36 <_dtoa_r+0x3a6>
 800c9e4:	2602      	movs	r6, #2
 800c9e6:	e7f2      	b.n	800c9ce <_dtoa_r+0x33e>
 800c9e8:	07e1      	lsls	r1, r4, #31
 800c9ea:	d508      	bpl.n	800c9fe <_dtoa_r+0x36e>
 800c9ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c9f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9f4:	f7f3 fe20 	bl	8000638 <__aeabi_dmul>
 800c9f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c9fc:	3601      	adds	r6, #1
 800c9fe:	1064      	asrs	r4, r4, #1
 800ca00:	3508      	adds	r5, #8
 800ca02:	e7e5      	b.n	800c9d0 <_dtoa_r+0x340>
 800ca04:	f000 80af 	beq.w	800cb66 <_dtoa_r+0x4d6>
 800ca08:	427c      	negs	r4, r7
 800ca0a:	4b81      	ldr	r3, [pc, #516]	@ (800cc10 <_dtoa_r+0x580>)
 800ca0c:	4d81      	ldr	r5, [pc, #516]	@ (800cc14 <_dtoa_r+0x584>)
 800ca0e:	f004 020f 	and.w	r2, r4, #15
 800ca12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca1e:	f7f3 fe0b 	bl	8000638 <__aeabi_dmul>
 800ca22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca26:	1124      	asrs	r4, r4, #4
 800ca28:	2300      	movs	r3, #0
 800ca2a:	2602      	movs	r6, #2
 800ca2c:	2c00      	cmp	r4, #0
 800ca2e:	f040 808f 	bne.w	800cb50 <_dtoa_r+0x4c0>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1d3      	bne.n	800c9de <_dtoa_r+0x34e>
 800ca36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 8094 	beq.w	800cb6a <_dtoa_r+0x4da>
 800ca42:	4b75      	ldr	r3, [pc, #468]	@ (800cc18 <_dtoa_r+0x588>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	4620      	mov	r0, r4
 800ca48:	4629      	mov	r1, r5
 800ca4a:	f7f4 f867 	bl	8000b1c <__aeabi_dcmplt>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	f000 808b 	beq.w	800cb6a <_dtoa_r+0x4da>
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 8087 	beq.w	800cb6a <_dtoa_r+0x4da>
 800ca5c:	f1bb 0f00 	cmp.w	fp, #0
 800ca60:	dd34      	ble.n	800cacc <_dtoa_r+0x43c>
 800ca62:	4620      	mov	r0, r4
 800ca64:	4b6d      	ldr	r3, [pc, #436]	@ (800cc1c <_dtoa_r+0x58c>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	4629      	mov	r1, r5
 800ca6a:	f7f3 fde5 	bl	8000638 <__aeabi_dmul>
 800ca6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca72:	f107 38ff 	add.w	r8, r7, #4294967295
 800ca76:	3601      	adds	r6, #1
 800ca78:	465c      	mov	r4, fp
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7f3 fd72 	bl	8000564 <__aeabi_i2d>
 800ca80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca84:	f7f3 fdd8 	bl	8000638 <__aeabi_dmul>
 800ca88:	4b65      	ldr	r3, [pc, #404]	@ (800cc20 <_dtoa_r+0x590>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f7f3 fc1e 	bl	80002cc <__adddf3>
 800ca90:	4605      	mov	r5, r0
 800ca92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ca96:	2c00      	cmp	r4, #0
 800ca98:	d16a      	bne.n	800cb70 <_dtoa_r+0x4e0>
 800ca9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca9e:	4b61      	ldr	r3, [pc, #388]	@ (800cc24 <_dtoa_r+0x594>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	f7f3 fc11 	bl	80002c8 <__aeabi_dsub>
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800caae:	462a      	mov	r2, r5
 800cab0:	4633      	mov	r3, r6
 800cab2:	f7f4 f851 	bl	8000b58 <__aeabi_dcmpgt>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f040 8298 	bne.w	800cfec <_dtoa_r+0x95c>
 800cabc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cac0:	462a      	mov	r2, r5
 800cac2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cac6:	f7f4 f829 	bl	8000b1c <__aeabi_dcmplt>
 800caca:	bb38      	cbnz	r0, 800cb1c <_dtoa_r+0x48c>
 800cacc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cad0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cad4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f2c0 8157 	blt.w	800cd8a <_dtoa_r+0x6fa>
 800cadc:	2f0e      	cmp	r7, #14
 800cade:	f300 8154 	bgt.w	800cd8a <_dtoa_r+0x6fa>
 800cae2:	4b4b      	ldr	r3, [pc, #300]	@ (800cc10 <_dtoa_r+0x580>)
 800cae4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cae8:	ed93 7b00 	vldr	d7, [r3]
 800caec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caee:	2b00      	cmp	r3, #0
 800caf0:	ed8d 7b00 	vstr	d7, [sp]
 800caf4:	f280 80e5 	bge.w	800ccc2 <_dtoa_r+0x632>
 800caf8:	9b03      	ldr	r3, [sp, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f300 80e1 	bgt.w	800ccc2 <_dtoa_r+0x632>
 800cb00:	d10c      	bne.n	800cb1c <_dtoa_r+0x48c>
 800cb02:	4b48      	ldr	r3, [pc, #288]	@ (800cc24 <_dtoa_r+0x594>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	ec51 0b17 	vmov	r0, r1, d7
 800cb0a:	f7f3 fd95 	bl	8000638 <__aeabi_dmul>
 800cb0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb12:	f7f4 f817 	bl	8000b44 <__aeabi_dcmpge>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f000 8266 	beq.w	800cfe8 <_dtoa_r+0x958>
 800cb1c:	2400      	movs	r4, #0
 800cb1e:	4625      	mov	r5, r4
 800cb20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb22:	4656      	mov	r6, sl
 800cb24:	ea6f 0803 	mvn.w	r8, r3
 800cb28:	2700      	movs	r7, #0
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 fcbf 	bl	800d4b0 <_Bfree>
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	f000 80bd 	beq.w	800ccb2 <_dtoa_r+0x622>
 800cb38:	b12f      	cbz	r7, 800cb46 <_dtoa_r+0x4b6>
 800cb3a:	42af      	cmp	r7, r5
 800cb3c:	d003      	beq.n	800cb46 <_dtoa_r+0x4b6>
 800cb3e:	4639      	mov	r1, r7
 800cb40:	4648      	mov	r0, r9
 800cb42:	f000 fcb5 	bl	800d4b0 <_Bfree>
 800cb46:	4629      	mov	r1, r5
 800cb48:	4648      	mov	r0, r9
 800cb4a:	f000 fcb1 	bl	800d4b0 <_Bfree>
 800cb4e:	e0b0      	b.n	800ccb2 <_dtoa_r+0x622>
 800cb50:	07e2      	lsls	r2, r4, #31
 800cb52:	d505      	bpl.n	800cb60 <_dtoa_r+0x4d0>
 800cb54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb58:	f7f3 fd6e 	bl	8000638 <__aeabi_dmul>
 800cb5c:	3601      	adds	r6, #1
 800cb5e:	2301      	movs	r3, #1
 800cb60:	1064      	asrs	r4, r4, #1
 800cb62:	3508      	adds	r5, #8
 800cb64:	e762      	b.n	800ca2c <_dtoa_r+0x39c>
 800cb66:	2602      	movs	r6, #2
 800cb68:	e765      	b.n	800ca36 <_dtoa_r+0x3a6>
 800cb6a:	9c03      	ldr	r4, [sp, #12]
 800cb6c:	46b8      	mov	r8, r7
 800cb6e:	e784      	b.n	800ca7a <_dtoa_r+0x3ea>
 800cb70:	4b27      	ldr	r3, [pc, #156]	@ (800cc10 <_dtoa_r+0x580>)
 800cb72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb7c:	4454      	add	r4, sl
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	d054      	beq.n	800cc2c <_dtoa_r+0x59c>
 800cb82:	4929      	ldr	r1, [pc, #164]	@ (800cc28 <_dtoa_r+0x598>)
 800cb84:	2000      	movs	r0, #0
 800cb86:	f7f3 fe81 	bl	800088c <__aeabi_ddiv>
 800cb8a:	4633      	mov	r3, r6
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	f7f3 fb9b 	bl	80002c8 <__aeabi_dsub>
 800cb92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb96:	4656      	mov	r6, sl
 800cb98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb9c:	f7f3 fffc 	bl	8000b98 <__aeabi_d2iz>
 800cba0:	4605      	mov	r5, r0
 800cba2:	f7f3 fcdf 	bl	8000564 <__aeabi_i2d>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbae:	f7f3 fb8b 	bl	80002c8 <__aeabi_dsub>
 800cbb2:	3530      	adds	r5, #48	@ 0x30
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbbc:	f806 5b01 	strb.w	r5, [r6], #1
 800cbc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cbc4:	f7f3 ffaa 	bl	8000b1c <__aeabi_dcmplt>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d172      	bne.n	800ccb2 <_dtoa_r+0x622>
 800cbcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbd0:	4911      	ldr	r1, [pc, #68]	@ (800cc18 <_dtoa_r+0x588>)
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f7f3 fb78 	bl	80002c8 <__aeabi_dsub>
 800cbd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cbdc:	f7f3 ff9e 	bl	8000b1c <__aeabi_dcmplt>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	f040 80b4 	bne.w	800cd4e <_dtoa_r+0x6be>
 800cbe6:	42a6      	cmp	r6, r4
 800cbe8:	f43f af70 	beq.w	800cacc <_dtoa_r+0x43c>
 800cbec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	@ (800cc1c <_dtoa_r+0x58c>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f7f3 fd20 	bl	8000638 <__aeabi_dmul>
 800cbf8:	4b08      	ldr	r3, [pc, #32]	@ (800cc1c <_dtoa_r+0x58c>)
 800cbfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cbfe:	2200      	movs	r2, #0
 800cc00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc04:	f7f3 fd18 	bl	8000638 <__aeabi_dmul>
 800cc08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc0c:	e7c4      	b.n	800cb98 <_dtoa_r+0x508>
 800cc0e:	bf00      	nop
 800cc10:	0800f038 	.word	0x0800f038
 800cc14:	0800f010 	.word	0x0800f010
 800cc18:	3ff00000 	.word	0x3ff00000
 800cc1c:	40240000 	.word	0x40240000
 800cc20:	401c0000 	.word	0x401c0000
 800cc24:	40140000 	.word	0x40140000
 800cc28:	3fe00000 	.word	0x3fe00000
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f7f3 fd02 	bl	8000638 <__aeabi_dmul>
 800cc34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc38:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc3a:	4656      	mov	r6, sl
 800cc3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc40:	f7f3 ffaa 	bl	8000b98 <__aeabi_d2iz>
 800cc44:	4605      	mov	r5, r0
 800cc46:	f7f3 fc8d 	bl	8000564 <__aeabi_i2d>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc52:	f7f3 fb39 	bl	80002c8 <__aeabi_dsub>
 800cc56:	3530      	adds	r5, #48	@ 0x30
 800cc58:	f806 5b01 	strb.w	r5, [r6], #1
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	42a6      	cmp	r6, r4
 800cc62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	d124      	bne.n	800ccb6 <_dtoa_r+0x626>
 800cc6c:	4baf      	ldr	r3, [pc, #700]	@ (800cf2c <_dtoa_r+0x89c>)
 800cc6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc72:	f7f3 fb2b 	bl	80002cc <__adddf3>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc7e:	f7f3 ff6b 	bl	8000b58 <__aeabi_dcmpgt>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d163      	bne.n	800cd4e <_dtoa_r+0x6be>
 800cc86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc8a:	49a8      	ldr	r1, [pc, #672]	@ (800cf2c <_dtoa_r+0x89c>)
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	f7f3 fb1b 	bl	80002c8 <__aeabi_dsub>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc9a:	f7f3 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f43f af14 	beq.w	800cacc <_dtoa_r+0x43c>
 800cca4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cca6:	1e73      	subs	r3, r6, #1
 800cca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccae:	2b30      	cmp	r3, #48	@ 0x30
 800ccb0:	d0f8      	beq.n	800cca4 <_dtoa_r+0x614>
 800ccb2:	4647      	mov	r7, r8
 800ccb4:	e03b      	b.n	800cd2e <_dtoa_r+0x69e>
 800ccb6:	4b9e      	ldr	r3, [pc, #632]	@ (800cf30 <_dtoa_r+0x8a0>)
 800ccb8:	f7f3 fcbe 	bl	8000638 <__aeabi_dmul>
 800ccbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccc0:	e7bc      	b.n	800cc3c <_dtoa_r+0x5ac>
 800ccc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ccc6:	4656      	mov	r6, sl
 800ccc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cccc:	4620      	mov	r0, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f7f3 fddc 	bl	800088c <__aeabi_ddiv>
 800ccd4:	f7f3 ff60 	bl	8000b98 <__aeabi_d2iz>
 800ccd8:	4680      	mov	r8, r0
 800ccda:	f7f3 fc43 	bl	8000564 <__aeabi_i2d>
 800ccde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cce2:	f7f3 fca9 	bl	8000638 <__aeabi_dmul>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4620      	mov	r0, r4
 800ccec:	4629      	mov	r1, r5
 800ccee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ccf2:	f7f3 fae9 	bl	80002c8 <__aeabi_dsub>
 800ccf6:	f806 4b01 	strb.w	r4, [r6], #1
 800ccfa:	9d03      	ldr	r5, [sp, #12]
 800ccfc:	eba6 040a 	sub.w	r4, r6, sl
 800cd00:	42a5      	cmp	r5, r4
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	d133      	bne.n	800cd70 <_dtoa_r+0x6e0>
 800cd08:	f7f3 fae0 	bl	80002cc <__adddf3>
 800cd0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd10:	4604      	mov	r4, r0
 800cd12:	460d      	mov	r5, r1
 800cd14:	f7f3 ff20 	bl	8000b58 <__aeabi_dcmpgt>
 800cd18:	b9c0      	cbnz	r0, 800cd4c <_dtoa_r+0x6bc>
 800cd1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd1e:	4620      	mov	r0, r4
 800cd20:	4629      	mov	r1, r5
 800cd22:	f7f3 fef1 	bl	8000b08 <__aeabi_dcmpeq>
 800cd26:	b110      	cbz	r0, 800cd2e <_dtoa_r+0x69e>
 800cd28:	f018 0f01 	tst.w	r8, #1
 800cd2c:	d10e      	bne.n	800cd4c <_dtoa_r+0x6bc>
 800cd2e:	9902      	ldr	r1, [sp, #8]
 800cd30:	4648      	mov	r0, r9
 800cd32:	f000 fbbd 	bl	800d4b0 <_Bfree>
 800cd36:	2300      	movs	r3, #0
 800cd38:	7033      	strb	r3, [r6, #0]
 800cd3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd3c:	3701      	adds	r7, #1
 800cd3e:	601f      	str	r7, [r3, #0]
 800cd40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 824b 	beq.w	800d1de <_dtoa_r+0xb4e>
 800cd48:	601e      	str	r6, [r3, #0]
 800cd4a:	e248      	b.n	800d1de <_dtoa_r+0xb4e>
 800cd4c:	46b8      	mov	r8, r7
 800cd4e:	4633      	mov	r3, r6
 800cd50:	461e      	mov	r6, r3
 800cd52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd56:	2a39      	cmp	r2, #57	@ 0x39
 800cd58:	d106      	bne.n	800cd68 <_dtoa_r+0x6d8>
 800cd5a:	459a      	cmp	sl, r3
 800cd5c:	d1f8      	bne.n	800cd50 <_dtoa_r+0x6c0>
 800cd5e:	2230      	movs	r2, #48	@ 0x30
 800cd60:	f108 0801 	add.w	r8, r8, #1
 800cd64:	f88a 2000 	strb.w	r2, [sl]
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	3201      	adds	r2, #1
 800cd6c:	701a      	strb	r2, [r3, #0]
 800cd6e:	e7a0      	b.n	800ccb2 <_dtoa_r+0x622>
 800cd70:	4b6f      	ldr	r3, [pc, #444]	@ (800cf30 <_dtoa_r+0x8a0>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	f7f3 fc60 	bl	8000638 <__aeabi_dmul>
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	460d      	mov	r5, r1
 800cd80:	f7f3 fec2 	bl	8000b08 <__aeabi_dcmpeq>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d09f      	beq.n	800ccc8 <_dtoa_r+0x638>
 800cd88:	e7d1      	b.n	800cd2e <_dtoa_r+0x69e>
 800cd8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	f000 80ea 	beq.w	800cf66 <_dtoa_r+0x8d6>
 800cd92:	9a07      	ldr	r2, [sp, #28]
 800cd94:	2a01      	cmp	r2, #1
 800cd96:	f300 80cd 	bgt.w	800cf34 <_dtoa_r+0x8a4>
 800cd9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd9c:	2a00      	cmp	r2, #0
 800cd9e:	f000 80c1 	beq.w	800cf24 <_dtoa_r+0x894>
 800cda2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cda6:	9c08      	ldr	r4, [sp, #32]
 800cda8:	9e00      	ldr	r6, [sp, #0]
 800cdaa:	9a00      	ldr	r2, [sp, #0]
 800cdac:	441a      	add	r2, r3
 800cdae:	9200      	str	r2, [sp, #0]
 800cdb0:	9a06      	ldr	r2, [sp, #24]
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	441a      	add	r2, r3
 800cdb6:	4648      	mov	r0, r9
 800cdb8:	9206      	str	r2, [sp, #24]
 800cdba:	f000 fc2d 	bl	800d618 <__i2b>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	b166      	cbz	r6, 800cddc <_dtoa_r+0x74c>
 800cdc2:	9b06      	ldr	r3, [sp, #24]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dd09      	ble.n	800cddc <_dtoa_r+0x74c>
 800cdc8:	42b3      	cmp	r3, r6
 800cdca:	9a00      	ldr	r2, [sp, #0]
 800cdcc:	bfa8      	it	ge
 800cdce:	4633      	movge	r3, r6
 800cdd0:	1ad2      	subs	r2, r2, r3
 800cdd2:	9200      	str	r2, [sp, #0]
 800cdd4:	9a06      	ldr	r2, [sp, #24]
 800cdd6:	1af6      	subs	r6, r6, r3
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	9306      	str	r3, [sp, #24]
 800cddc:	9b08      	ldr	r3, [sp, #32]
 800cdde:	b30b      	cbz	r3, 800ce24 <_dtoa_r+0x794>
 800cde0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 80c6 	beq.w	800cf74 <_dtoa_r+0x8e4>
 800cde8:	2c00      	cmp	r4, #0
 800cdea:	f000 80c0 	beq.w	800cf6e <_dtoa_r+0x8de>
 800cdee:	4629      	mov	r1, r5
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4648      	mov	r0, r9
 800cdf4:	f000 fcc8 	bl	800d788 <__pow5mult>
 800cdf8:	9a02      	ldr	r2, [sp, #8]
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	4648      	mov	r0, r9
 800ce00:	f000 fc20 	bl	800d644 <__multiply>
 800ce04:	9902      	ldr	r1, [sp, #8]
 800ce06:	4680      	mov	r8, r0
 800ce08:	4648      	mov	r0, r9
 800ce0a:	f000 fb51 	bl	800d4b0 <_Bfree>
 800ce0e:	9b08      	ldr	r3, [sp, #32]
 800ce10:	1b1b      	subs	r3, r3, r4
 800ce12:	9308      	str	r3, [sp, #32]
 800ce14:	f000 80b1 	beq.w	800cf7a <_dtoa_r+0x8ea>
 800ce18:	9a08      	ldr	r2, [sp, #32]
 800ce1a:	4641      	mov	r1, r8
 800ce1c:	4648      	mov	r0, r9
 800ce1e:	f000 fcb3 	bl	800d788 <__pow5mult>
 800ce22:	9002      	str	r0, [sp, #8]
 800ce24:	2101      	movs	r1, #1
 800ce26:	4648      	mov	r0, r9
 800ce28:	f000 fbf6 	bl	800d618 <__i2b>
 800ce2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce2e:	4604      	mov	r4, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f000 81d8 	beq.w	800d1e6 <_dtoa_r+0xb56>
 800ce36:	461a      	mov	r2, r3
 800ce38:	4601      	mov	r1, r0
 800ce3a:	4648      	mov	r0, r9
 800ce3c:	f000 fca4 	bl	800d788 <__pow5mult>
 800ce40:	9b07      	ldr	r3, [sp, #28]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	4604      	mov	r4, r0
 800ce46:	f300 809f 	bgt.w	800cf88 <_dtoa_r+0x8f8>
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f040 8097 	bne.w	800cf80 <_dtoa_r+0x8f0>
 800ce52:	9b05      	ldr	r3, [sp, #20]
 800ce54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f040 8093 	bne.w	800cf84 <_dtoa_r+0x8f4>
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce64:	0d1b      	lsrs	r3, r3, #20
 800ce66:	051b      	lsls	r3, r3, #20
 800ce68:	b133      	cbz	r3, 800ce78 <_dtoa_r+0x7e8>
 800ce6a:	9b00      	ldr	r3, [sp, #0]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	9b06      	ldr	r3, [sp, #24]
 800ce72:	3301      	adds	r3, #1
 800ce74:	9306      	str	r3, [sp, #24]
 800ce76:	2301      	movs	r3, #1
 800ce78:	9308      	str	r3, [sp, #32]
 800ce7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f000 81b8 	beq.w	800d1f2 <_dtoa_r+0xb62>
 800ce82:	6923      	ldr	r3, [r4, #16]
 800ce84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce88:	6918      	ldr	r0, [r3, #16]
 800ce8a:	f000 fb79 	bl	800d580 <__hi0bits>
 800ce8e:	f1c0 0020 	rsb	r0, r0, #32
 800ce92:	9b06      	ldr	r3, [sp, #24]
 800ce94:	4418      	add	r0, r3
 800ce96:	f010 001f 	ands.w	r0, r0, #31
 800ce9a:	f000 8082 	beq.w	800cfa2 <_dtoa_r+0x912>
 800ce9e:	f1c0 0320 	rsb	r3, r0, #32
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	dd73      	ble.n	800cf8e <_dtoa_r+0x8fe>
 800cea6:	9b00      	ldr	r3, [sp, #0]
 800cea8:	f1c0 001c 	rsb	r0, r0, #28
 800ceac:	4403      	add	r3, r0
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	9b06      	ldr	r3, [sp, #24]
 800ceb2:	4403      	add	r3, r0
 800ceb4:	4406      	add	r6, r0
 800ceb6:	9306      	str	r3, [sp, #24]
 800ceb8:	9b00      	ldr	r3, [sp, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dd05      	ble.n	800ceca <_dtoa_r+0x83a>
 800cebe:	9902      	ldr	r1, [sp, #8]
 800cec0:	461a      	mov	r2, r3
 800cec2:	4648      	mov	r0, r9
 800cec4:	f000 fcba 	bl	800d83c <__lshift>
 800cec8:	9002      	str	r0, [sp, #8]
 800ceca:	9b06      	ldr	r3, [sp, #24]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dd05      	ble.n	800cedc <_dtoa_r+0x84c>
 800ced0:	4621      	mov	r1, r4
 800ced2:	461a      	mov	r2, r3
 800ced4:	4648      	mov	r0, r9
 800ced6:	f000 fcb1 	bl	800d83c <__lshift>
 800ceda:	4604      	mov	r4, r0
 800cedc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d061      	beq.n	800cfa6 <_dtoa_r+0x916>
 800cee2:	9802      	ldr	r0, [sp, #8]
 800cee4:	4621      	mov	r1, r4
 800cee6:	f000 fd15 	bl	800d914 <__mcmp>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	da5b      	bge.n	800cfa6 <_dtoa_r+0x916>
 800ceee:	2300      	movs	r3, #0
 800cef0:	9902      	ldr	r1, [sp, #8]
 800cef2:	220a      	movs	r2, #10
 800cef4:	4648      	mov	r0, r9
 800cef6:	f000 fafd 	bl	800d4f4 <__multadd>
 800cefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cefc:	9002      	str	r0, [sp, #8]
 800cefe:	f107 38ff 	add.w	r8, r7, #4294967295
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8177 	beq.w	800d1f6 <_dtoa_r+0xb66>
 800cf08:	4629      	mov	r1, r5
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	220a      	movs	r2, #10
 800cf0e:	4648      	mov	r0, r9
 800cf10:	f000 faf0 	bl	800d4f4 <__multadd>
 800cf14:	f1bb 0f00 	cmp.w	fp, #0
 800cf18:	4605      	mov	r5, r0
 800cf1a:	dc6f      	bgt.n	800cffc <_dtoa_r+0x96c>
 800cf1c:	9b07      	ldr	r3, [sp, #28]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	dc49      	bgt.n	800cfb6 <_dtoa_r+0x926>
 800cf22:	e06b      	b.n	800cffc <_dtoa_r+0x96c>
 800cf24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf2a:	e73c      	b.n	800cda6 <_dtoa_r+0x716>
 800cf2c:	3fe00000 	.word	0x3fe00000
 800cf30:	40240000 	.word	0x40240000
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	1e5c      	subs	r4, r3, #1
 800cf38:	9b08      	ldr	r3, [sp, #32]
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	db09      	blt.n	800cf52 <_dtoa_r+0x8c2>
 800cf3e:	1b1c      	subs	r4, r3, r4
 800cf40:	9b03      	ldr	r3, [sp, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f6bf af30 	bge.w	800cda8 <_dtoa_r+0x718>
 800cf48:	9b00      	ldr	r3, [sp, #0]
 800cf4a:	9a03      	ldr	r2, [sp, #12]
 800cf4c:	1a9e      	subs	r6, r3, r2
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e72b      	b.n	800cdaa <_dtoa_r+0x71a>
 800cf52:	9b08      	ldr	r3, [sp, #32]
 800cf54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf56:	9408      	str	r4, [sp, #32]
 800cf58:	1ae3      	subs	r3, r4, r3
 800cf5a:	441a      	add	r2, r3
 800cf5c:	9e00      	ldr	r6, [sp, #0]
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	920d      	str	r2, [sp, #52]	@ 0x34
 800cf62:	2400      	movs	r4, #0
 800cf64:	e721      	b.n	800cdaa <_dtoa_r+0x71a>
 800cf66:	9c08      	ldr	r4, [sp, #32]
 800cf68:	9e00      	ldr	r6, [sp, #0]
 800cf6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cf6c:	e728      	b.n	800cdc0 <_dtoa_r+0x730>
 800cf6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cf72:	e751      	b.n	800ce18 <_dtoa_r+0x788>
 800cf74:	9a08      	ldr	r2, [sp, #32]
 800cf76:	9902      	ldr	r1, [sp, #8]
 800cf78:	e750      	b.n	800ce1c <_dtoa_r+0x78c>
 800cf7a:	f8cd 8008 	str.w	r8, [sp, #8]
 800cf7e:	e751      	b.n	800ce24 <_dtoa_r+0x794>
 800cf80:	2300      	movs	r3, #0
 800cf82:	e779      	b.n	800ce78 <_dtoa_r+0x7e8>
 800cf84:	9b04      	ldr	r3, [sp, #16]
 800cf86:	e777      	b.n	800ce78 <_dtoa_r+0x7e8>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9308      	str	r3, [sp, #32]
 800cf8c:	e779      	b.n	800ce82 <_dtoa_r+0x7f2>
 800cf8e:	d093      	beq.n	800ceb8 <_dtoa_r+0x828>
 800cf90:	9a00      	ldr	r2, [sp, #0]
 800cf92:	331c      	adds	r3, #28
 800cf94:	441a      	add	r2, r3
 800cf96:	9200      	str	r2, [sp, #0]
 800cf98:	9a06      	ldr	r2, [sp, #24]
 800cf9a:	441a      	add	r2, r3
 800cf9c:	441e      	add	r6, r3
 800cf9e:	9206      	str	r2, [sp, #24]
 800cfa0:	e78a      	b.n	800ceb8 <_dtoa_r+0x828>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	e7f4      	b.n	800cf90 <_dtoa_r+0x900>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	46b8      	mov	r8, r7
 800cfac:	dc20      	bgt.n	800cff0 <_dtoa_r+0x960>
 800cfae:	469b      	mov	fp, r3
 800cfb0:	9b07      	ldr	r3, [sp, #28]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	dd1e      	ble.n	800cff4 <_dtoa_r+0x964>
 800cfb6:	f1bb 0f00 	cmp.w	fp, #0
 800cfba:	f47f adb1 	bne.w	800cb20 <_dtoa_r+0x490>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	465b      	mov	r3, fp
 800cfc2:	2205      	movs	r2, #5
 800cfc4:	4648      	mov	r0, r9
 800cfc6:	f000 fa95 	bl	800d4f4 <__multadd>
 800cfca:	4601      	mov	r1, r0
 800cfcc:	4604      	mov	r4, r0
 800cfce:	9802      	ldr	r0, [sp, #8]
 800cfd0:	f000 fca0 	bl	800d914 <__mcmp>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	f77f ada3 	ble.w	800cb20 <_dtoa_r+0x490>
 800cfda:	4656      	mov	r6, sl
 800cfdc:	2331      	movs	r3, #49	@ 0x31
 800cfde:	f806 3b01 	strb.w	r3, [r6], #1
 800cfe2:	f108 0801 	add.w	r8, r8, #1
 800cfe6:	e59f      	b.n	800cb28 <_dtoa_r+0x498>
 800cfe8:	9c03      	ldr	r4, [sp, #12]
 800cfea:	46b8      	mov	r8, r7
 800cfec:	4625      	mov	r5, r4
 800cfee:	e7f4      	b.n	800cfda <_dtoa_r+0x94a>
 800cff0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 8101 	beq.w	800d1fe <_dtoa_r+0xb6e>
 800cffc:	2e00      	cmp	r6, #0
 800cffe:	dd05      	ble.n	800d00c <_dtoa_r+0x97c>
 800d000:	4629      	mov	r1, r5
 800d002:	4632      	mov	r2, r6
 800d004:	4648      	mov	r0, r9
 800d006:	f000 fc19 	bl	800d83c <__lshift>
 800d00a:	4605      	mov	r5, r0
 800d00c:	9b08      	ldr	r3, [sp, #32]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d05c      	beq.n	800d0cc <_dtoa_r+0xa3c>
 800d012:	6869      	ldr	r1, [r5, #4]
 800d014:	4648      	mov	r0, r9
 800d016:	f000 fa0b 	bl	800d430 <_Balloc>
 800d01a:	4606      	mov	r6, r0
 800d01c:	b928      	cbnz	r0, 800d02a <_dtoa_r+0x99a>
 800d01e:	4b82      	ldr	r3, [pc, #520]	@ (800d228 <_dtoa_r+0xb98>)
 800d020:	4602      	mov	r2, r0
 800d022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d026:	f7ff bb4a 	b.w	800c6be <_dtoa_r+0x2e>
 800d02a:	692a      	ldr	r2, [r5, #16]
 800d02c:	3202      	adds	r2, #2
 800d02e:	0092      	lsls	r2, r2, #2
 800d030:	f105 010c 	add.w	r1, r5, #12
 800d034:	300c      	adds	r0, #12
 800d036:	f7ff fa94 	bl	800c562 <memcpy>
 800d03a:	2201      	movs	r2, #1
 800d03c:	4631      	mov	r1, r6
 800d03e:	4648      	mov	r0, r9
 800d040:	f000 fbfc 	bl	800d83c <__lshift>
 800d044:	f10a 0301 	add.w	r3, sl, #1
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	eb0a 030b 	add.w	r3, sl, fp
 800d04e:	9308      	str	r3, [sp, #32]
 800d050:	9b04      	ldr	r3, [sp, #16]
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	462f      	mov	r7, r5
 800d058:	9306      	str	r3, [sp, #24]
 800d05a:	4605      	mov	r5, r0
 800d05c:	9b00      	ldr	r3, [sp, #0]
 800d05e:	9802      	ldr	r0, [sp, #8]
 800d060:	4621      	mov	r1, r4
 800d062:	f103 3bff 	add.w	fp, r3, #4294967295
 800d066:	f7ff fa8a 	bl	800c57e <quorem>
 800d06a:	4603      	mov	r3, r0
 800d06c:	3330      	adds	r3, #48	@ 0x30
 800d06e:	9003      	str	r0, [sp, #12]
 800d070:	4639      	mov	r1, r7
 800d072:	9802      	ldr	r0, [sp, #8]
 800d074:	9309      	str	r3, [sp, #36]	@ 0x24
 800d076:	f000 fc4d 	bl	800d914 <__mcmp>
 800d07a:	462a      	mov	r2, r5
 800d07c:	9004      	str	r0, [sp, #16]
 800d07e:	4621      	mov	r1, r4
 800d080:	4648      	mov	r0, r9
 800d082:	f000 fc63 	bl	800d94c <__mdiff>
 800d086:	68c2      	ldr	r2, [r0, #12]
 800d088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d08a:	4606      	mov	r6, r0
 800d08c:	bb02      	cbnz	r2, 800d0d0 <_dtoa_r+0xa40>
 800d08e:	4601      	mov	r1, r0
 800d090:	9802      	ldr	r0, [sp, #8]
 800d092:	f000 fc3f 	bl	800d914 <__mcmp>
 800d096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d098:	4602      	mov	r2, r0
 800d09a:	4631      	mov	r1, r6
 800d09c:	4648      	mov	r0, r9
 800d09e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0a2:	f000 fa05 	bl	800d4b0 <_Bfree>
 800d0a6:	9b07      	ldr	r3, [sp, #28]
 800d0a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0aa:	9e00      	ldr	r6, [sp, #0]
 800d0ac:	ea42 0103 	orr.w	r1, r2, r3
 800d0b0:	9b06      	ldr	r3, [sp, #24]
 800d0b2:	4319      	orrs	r1, r3
 800d0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b6:	d10d      	bne.n	800d0d4 <_dtoa_r+0xa44>
 800d0b8:	2b39      	cmp	r3, #57	@ 0x39
 800d0ba:	d027      	beq.n	800d10c <_dtoa_r+0xa7c>
 800d0bc:	9a04      	ldr	r2, [sp, #16]
 800d0be:	2a00      	cmp	r2, #0
 800d0c0:	dd01      	ble.n	800d0c6 <_dtoa_r+0xa36>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	3331      	adds	r3, #49	@ 0x31
 800d0c6:	f88b 3000 	strb.w	r3, [fp]
 800d0ca:	e52e      	b.n	800cb2a <_dtoa_r+0x49a>
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	e7b9      	b.n	800d044 <_dtoa_r+0x9b4>
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	e7e2      	b.n	800d09a <_dtoa_r+0xa0a>
 800d0d4:	9904      	ldr	r1, [sp, #16]
 800d0d6:	2900      	cmp	r1, #0
 800d0d8:	db04      	blt.n	800d0e4 <_dtoa_r+0xa54>
 800d0da:	9807      	ldr	r0, [sp, #28]
 800d0dc:	4301      	orrs	r1, r0
 800d0de:	9806      	ldr	r0, [sp, #24]
 800d0e0:	4301      	orrs	r1, r0
 800d0e2:	d120      	bne.n	800d126 <_dtoa_r+0xa96>
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	ddee      	ble.n	800d0c6 <_dtoa_r+0xa36>
 800d0e8:	9902      	ldr	r1, [sp, #8]
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	4648      	mov	r0, r9
 800d0f0:	f000 fba4 	bl	800d83c <__lshift>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	9002      	str	r0, [sp, #8]
 800d0f8:	f000 fc0c 	bl	800d914 <__mcmp>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	9b00      	ldr	r3, [sp, #0]
 800d100:	dc02      	bgt.n	800d108 <_dtoa_r+0xa78>
 800d102:	d1e0      	bne.n	800d0c6 <_dtoa_r+0xa36>
 800d104:	07da      	lsls	r2, r3, #31
 800d106:	d5de      	bpl.n	800d0c6 <_dtoa_r+0xa36>
 800d108:	2b39      	cmp	r3, #57	@ 0x39
 800d10a:	d1da      	bne.n	800d0c2 <_dtoa_r+0xa32>
 800d10c:	2339      	movs	r3, #57	@ 0x39
 800d10e:	f88b 3000 	strb.w	r3, [fp]
 800d112:	4633      	mov	r3, r6
 800d114:	461e      	mov	r6, r3
 800d116:	3b01      	subs	r3, #1
 800d118:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d11c:	2a39      	cmp	r2, #57	@ 0x39
 800d11e:	d04e      	beq.n	800d1be <_dtoa_r+0xb2e>
 800d120:	3201      	adds	r2, #1
 800d122:	701a      	strb	r2, [r3, #0]
 800d124:	e501      	b.n	800cb2a <_dtoa_r+0x49a>
 800d126:	2a00      	cmp	r2, #0
 800d128:	dd03      	ble.n	800d132 <_dtoa_r+0xaa2>
 800d12a:	2b39      	cmp	r3, #57	@ 0x39
 800d12c:	d0ee      	beq.n	800d10c <_dtoa_r+0xa7c>
 800d12e:	3301      	adds	r3, #1
 800d130:	e7c9      	b.n	800d0c6 <_dtoa_r+0xa36>
 800d132:	9a00      	ldr	r2, [sp, #0]
 800d134:	9908      	ldr	r1, [sp, #32]
 800d136:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d13a:	428a      	cmp	r2, r1
 800d13c:	d028      	beq.n	800d190 <_dtoa_r+0xb00>
 800d13e:	9902      	ldr	r1, [sp, #8]
 800d140:	2300      	movs	r3, #0
 800d142:	220a      	movs	r2, #10
 800d144:	4648      	mov	r0, r9
 800d146:	f000 f9d5 	bl	800d4f4 <__multadd>
 800d14a:	42af      	cmp	r7, r5
 800d14c:	9002      	str	r0, [sp, #8]
 800d14e:	f04f 0300 	mov.w	r3, #0
 800d152:	f04f 020a 	mov.w	r2, #10
 800d156:	4639      	mov	r1, r7
 800d158:	4648      	mov	r0, r9
 800d15a:	d107      	bne.n	800d16c <_dtoa_r+0xadc>
 800d15c:	f000 f9ca 	bl	800d4f4 <__multadd>
 800d160:	4607      	mov	r7, r0
 800d162:	4605      	mov	r5, r0
 800d164:	9b00      	ldr	r3, [sp, #0]
 800d166:	3301      	adds	r3, #1
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	e777      	b.n	800d05c <_dtoa_r+0x9cc>
 800d16c:	f000 f9c2 	bl	800d4f4 <__multadd>
 800d170:	4629      	mov	r1, r5
 800d172:	4607      	mov	r7, r0
 800d174:	2300      	movs	r3, #0
 800d176:	220a      	movs	r2, #10
 800d178:	4648      	mov	r0, r9
 800d17a:	f000 f9bb 	bl	800d4f4 <__multadd>
 800d17e:	4605      	mov	r5, r0
 800d180:	e7f0      	b.n	800d164 <_dtoa_r+0xad4>
 800d182:	f1bb 0f00 	cmp.w	fp, #0
 800d186:	bfcc      	ite	gt
 800d188:	465e      	movgt	r6, fp
 800d18a:	2601      	movle	r6, #1
 800d18c:	4456      	add	r6, sl
 800d18e:	2700      	movs	r7, #0
 800d190:	9902      	ldr	r1, [sp, #8]
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	2201      	movs	r2, #1
 800d196:	4648      	mov	r0, r9
 800d198:	f000 fb50 	bl	800d83c <__lshift>
 800d19c:	4621      	mov	r1, r4
 800d19e:	9002      	str	r0, [sp, #8]
 800d1a0:	f000 fbb8 	bl	800d914 <__mcmp>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	dcb4      	bgt.n	800d112 <_dtoa_r+0xa82>
 800d1a8:	d102      	bne.n	800d1b0 <_dtoa_r+0xb20>
 800d1aa:	9b00      	ldr	r3, [sp, #0]
 800d1ac:	07db      	lsls	r3, r3, #31
 800d1ae:	d4b0      	bmi.n	800d112 <_dtoa_r+0xa82>
 800d1b0:	4633      	mov	r3, r6
 800d1b2:	461e      	mov	r6, r3
 800d1b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1b8:	2a30      	cmp	r2, #48	@ 0x30
 800d1ba:	d0fa      	beq.n	800d1b2 <_dtoa_r+0xb22>
 800d1bc:	e4b5      	b.n	800cb2a <_dtoa_r+0x49a>
 800d1be:	459a      	cmp	sl, r3
 800d1c0:	d1a8      	bne.n	800d114 <_dtoa_r+0xa84>
 800d1c2:	2331      	movs	r3, #49	@ 0x31
 800d1c4:	f108 0801 	add.w	r8, r8, #1
 800d1c8:	f88a 3000 	strb.w	r3, [sl]
 800d1cc:	e4ad      	b.n	800cb2a <_dtoa_r+0x49a>
 800d1ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d1d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d22c <_dtoa_r+0xb9c>
 800d1d4:	b11b      	cbz	r3, 800d1de <_dtoa_r+0xb4e>
 800d1d6:	f10a 0308 	add.w	r3, sl, #8
 800d1da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	4650      	mov	r0, sl
 800d1e0:	b017      	add	sp, #92	@ 0x5c
 800d1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e6:	9b07      	ldr	r3, [sp, #28]
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	f77f ae2e 	ble.w	800ce4a <_dtoa_r+0x7ba>
 800d1ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1f0:	9308      	str	r3, [sp, #32]
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	e64d      	b.n	800ce92 <_dtoa_r+0x802>
 800d1f6:	f1bb 0f00 	cmp.w	fp, #0
 800d1fa:	f77f aed9 	ble.w	800cfb0 <_dtoa_r+0x920>
 800d1fe:	4656      	mov	r6, sl
 800d200:	9802      	ldr	r0, [sp, #8]
 800d202:	4621      	mov	r1, r4
 800d204:	f7ff f9bb 	bl	800c57e <quorem>
 800d208:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d20c:	f806 3b01 	strb.w	r3, [r6], #1
 800d210:	eba6 020a 	sub.w	r2, r6, sl
 800d214:	4593      	cmp	fp, r2
 800d216:	ddb4      	ble.n	800d182 <_dtoa_r+0xaf2>
 800d218:	9902      	ldr	r1, [sp, #8]
 800d21a:	2300      	movs	r3, #0
 800d21c:	220a      	movs	r2, #10
 800d21e:	4648      	mov	r0, r9
 800d220:	f000 f968 	bl	800d4f4 <__multadd>
 800d224:	9002      	str	r0, [sp, #8]
 800d226:	e7eb      	b.n	800d200 <_dtoa_r+0xb70>
 800d228:	0800ef40 	.word	0x0800ef40
 800d22c:	0800eec4 	.word	0x0800eec4

0800d230 <_free_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4605      	mov	r5, r0
 800d234:	2900      	cmp	r1, #0
 800d236:	d041      	beq.n	800d2bc <_free_r+0x8c>
 800d238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23c:	1f0c      	subs	r4, r1, #4
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfb8      	it	lt
 800d242:	18e4      	addlt	r4, r4, r3
 800d244:	f000 f8e8 	bl	800d418 <__malloc_lock>
 800d248:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c0 <_free_r+0x90>)
 800d24a:	6813      	ldr	r3, [r2, #0]
 800d24c:	b933      	cbnz	r3, 800d25c <_free_r+0x2c>
 800d24e:	6063      	str	r3, [r4, #4]
 800d250:	6014      	str	r4, [r2, #0]
 800d252:	4628      	mov	r0, r5
 800d254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d258:	f000 b8e4 	b.w	800d424 <__malloc_unlock>
 800d25c:	42a3      	cmp	r3, r4
 800d25e:	d908      	bls.n	800d272 <_free_r+0x42>
 800d260:	6820      	ldr	r0, [r4, #0]
 800d262:	1821      	adds	r1, r4, r0
 800d264:	428b      	cmp	r3, r1
 800d266:	bf01      	itttt	eq
 800d268:	6819      	ldreq	r1, [r3, #0]
 800d26a:	685b      	ldreq	r3, [r3, #4]
 800d26c:	1809      	addeq	r1, r1, r0
 800d26e:	6021      	streq	r1, [r4, #0]
 800d270:	e7ed      	b.n	800d24e <_free_r+0x1e>
 800d272:	461a      	mov	r2, r3
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	b10b      	cbz	r3, 800d27c <_free_r+0x4c>
 800d278:	42a3      	cmp	r3, r4
 800d27a:	d9fa      	bls.n	800d272 <_free_r+0x42>
 800d27c:	6811      	ldr	r1, [r2, #0]
 800d27e:	1850      	adds	r0, r2, r1
 800d280:	42a0      	cmp	r0, r4
 800d282:	d10b      	bne.n	800d29c <_free_r+0x6c>
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	4401      	add	r1, r0
 800d288:	1850      	adds	r0, r2, r1
 800d28a:	4283      	cmp	r3, r0
 800d28c:	6011      	str	r1, [r2, #0]
 800d28e:	d1e0      	bne.n	800d252 <_free_r+0x22>
 800d290:	6818      	ldr	r0, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	6053      	str	r3, [r2, #4]
 800d296:	4408      	add	r0, r1
 800d298:	6010      	str	r0, [r2, #0]
 800d29a:	e7da      	b.n	800d252 <_free_r+0x22>
 800d29c:	d902      	bls.n	800d2a4 <_free_r+0x74>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	602b      	str	r3, [r5, #0]
 800d2a2:	e7d6      	b.n	800d252 <_free_r+0x22>
 800d2a4:	6820      	ldr	r0, [r4, #0]
 800d2a6:	1821      	adds	r1, r4, r0
 800d2a8:	428b      	cmp	r3, r1
 800d2aa:	bf04      	itt	eq
 800d2ac:	6819      	ldreq	r1, [r3, #0]
 800d2ae:	685b      	ldreq	r3, [r3, #4]
 800d2b0:	6063      	str	r3, [r4, #4]
 800d2b2:	bf04      	itt	eq
 800d2b4:	1809      	addeq	r1, r1, r0
 800d2b6:	6021      	streq	r1, [r4, #0]
 800d2b8:	6054      	str	r4, [r2, #4]
 800d2ba:	e7ca      	b.n	800d252 <_free_r+0x22>
 800d2bc:	bd38      	pop	{r3, r4, r5, pc}
 800d2be:	bf00      	nop
 800d2c0:	20005088 	.word	0x20005088

0800d2c4 <malloc>:
 800d2c4:	4b02      	ldr	r3, [pc, #8]	@ (800d2d0 <malloc+0xc>)
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	f000 b825 	b.w	800d318 <_malloc_r>
 800d2ce:	bf00      	nop
 800d2d0:	2000001c 	.word	0x2000001c

0800d2d4 <sbrk_aligned>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	4e0f      	ldr	r6, [pc, #60]	@ (800d314 <sbrk_aligned+0x40>)
 800d2d8:	460c      	mov	r4, r1
 800d2da:	6831      	ldr	r1, [r6, #0]
 800d2dc:	4605      	mov	r5, r0
 800d2de:	b911      	cbnz	r1, 800d2e6 <sbrk_aligned+0x12>
 800d2e0:	f000 fe92 	bl	800e008 <_sbrk_r>
 800d2e4:	6030      	str	r0, [r6, #0]
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f000 fe8d 	bl	800e008 <_sbrk_r>
 800d2ee:	1c43      	adds	r3, r0, #1
 800d2f0:	d103      	bne.n	800d2fa <sbrk_aligned+0x26>
 800d2f2:	f04f 34ff 	mov.w	r4, #4294967295
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	bd70      	pop	{r4, r5, r6, pc}
 800d2fa:	1cc4      	adds	r4, r0, #3
 800d2fc:	f024 0403 	bic.w	r4, r4, #3
 800d300:	42a0      	cmp	r0, r4
 800d302:	d0f8      	beq.n	800d2f6 <sbrk_aligned+0x22>
 800d304:	1a21      	subs	r1, r4, r0
 800d306:	4628      	mov	r0, r5
 800d308:	f000 fe7e 	bl	800e008 <_sbrk_r>
 800d30c:	3001      	adds	r0, #1
 800d30e:	d1f2      	bne.n	800d2f6 <sbrk_aligned+0x22>
 800d310:	e7ef      	b.n	800d2f2 <sbrk_aligned+0x1e>
 800d312:	bf00      	nop
 800d314:	20005084 	.word	0x20005084

0800d318 <_malloc_r>:
 800d318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d31c:	1ccd      	adds	r5, r1, #3
 800d31e:	f025 0503 	bic.w	r5, r5, #3
 800d322:	3508      	adds	r5, #8
 800d324:	2d0c      	cmp	r5, #12
 800d326:	bf38      	it	cc
 800d328:	250c      	movcc	r5, #12
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	4606      	mov	r6, r0
 800d32e:	db01      	blt.n	800d334 <_malloc_r+0x1c>
 800d330:	42a9      	cmp	r1, r5
 800d332:	d904      	bls.n	800d33e <_malloc_r+0x26>
 800d334:	230c      	movs	r3, #12
 800d336:	6033      	str	r3, [r6, #0]
 800d338:	2000      	movs	r0, #0
 800d33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d33e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d414 <_malloc_r+0xfc>
 800d342:	f000 f869 	bl	800d418 <__malloc_lock>
 800d346:	f8d8 3000 	ldr.w	r3, [r8]
 800d34a:	461c      	mov	r4, r3
 800d34c:	bb44      	cbnz	r4, 800d3a0 <_malloc_r+0x88>
 800d34e:	4629      	mov	r1, r5
 800d350:	4630      	mov	r0, r6
 800d352:	f7ff ffbf 	bl	800d2d4 <sbrk_aligned>
 800d356:	1c43      	adds	r3, r0, #1
 800d358:	4604      	mov	r4, r0
 800d35a:	d158      	bne.n	800d40e <_malloc_r+0xf6>
 800d35c:	f8d8 4000 	ldr.w	r4, [r8]
 800d360:	4627      	mov	r7, r4
 800d362:	2f00      	cmp	r7, #0
 800d364:	d143      	bne.n	800d3ee <_malloc_r+0xd6>
 800d366:	2c00      	cmp	r4, #0
 800d368:	d04b      	beq.n	800d402 <_malloc_r+0xea>
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	4639      	mov	r1, r7
 800d36e:	4630      	mov	r0, r6
 800d370:	eb04 0903 	add.w	r9, r4, r3
 800d374:	f000 fe48 	bl	800e008 <_sbrk_r>
 800d378:	4581      	cmp	r9, r0
 800d37a:	d142      	bne.n	800d402 <_malloc_r+0xea>
 800d37c:	6821      	ldr	r1, [r4, #0]
 800d37e:	1a6d      	subs	r5, r5, r1
 800d380:	4629      	mov	r1, r5
 800d382:	4630      	mov	r0, r6
 800d384:	f7ff ffa6 	bl	800d2d4 <sbrk_aligned>
 800d388:	3001      	adds	r0, #1
 800d38a:	d03a      	beq.n	800d402 <_malloc_r+0xea>
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	442b      	add	r3, r5
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	f8d8 3000 	ldr.w	r3, [r8]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	bb62      	cbnz	r2, 800d3f4 <_malloc_r+0xdc>
 800d39a:	f8c8 7000 	str.w	r7, [r8]
 800d39e:	e00f      	b.n	800d3c0 <_malloc_r+0xa8>
 800d3a0:	6822      	ldr	r2, [r4, #0]
 800d3a2:	1b52      	subs	r2, r2, r5
 800d3a4:	d420      	bmi.n	800d3e8 <_malloc_r+0xd0>
 800d3a6:	2a0b      	cmp	r2, #11
 800d3a8:	d917      	bls.n	800d3da <_malloc_r+0xc2>
 800d3aa:	1961      	adds	r1, r4, r5
 800d3ac:	42a3      	cmp	r3, r4
 800d3ae:	6025      	str	r5, [r4, #0]
 800d3b0:	bf18      	it	ne
 800d3b2:	6059      	strne	r1, [r3, #4]
 800d3b4:	6863      	ldr	r3, [r4, #4]
 800d3b6:	bf08      	it	eq
 800d3b8:	f8c8 1000 	streq.w	r1, [r8]
 800d3bc:	5162      	str	r2, [r4, r5]
 800d3be:	604b      	str	r3, [r1, #4]
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f000 f82f 	bl	800d424 <__malloc_unlock>
 800d3c6:	f104 000b 	add.w	r0, r4, #11
 800d3ca:	1d23      	adds	r3, r4, #4
 800d3cc:	f020 0007 	bic.w	r0, r0, #7
 800d3d0:	1ac2      	subs	r2, r0, r3
 800d3d2:	bf1c      	itt	ne
 800d3d4:	1a1b      	subne	r3, r3, r0
 800d3d6:	50a3      	strne	r3, [r4, r2]
 800d3d8:	e7af      	b.n	800d33a <_malloc_r+0x22>
 800d3da:	6862      	ldr	r2, [r4, #4]
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	bf0c      	ite	eq
 800d3e0:	f8c8 2000 	streq.w	r2, [r8]
 800d3e4:	605a      	strne	r2, [r3, #4]
 800d3e6:	e7eb      	b.n	800d3c0 <_malloc_r+0xa8>
 800d3e8:	4623      	mov	r3, r4
 800d3ea:	6864      	ldr	r4, [r4, #4]
 800d3ec:	e7ae      	b.n	800d34c <_malloc_r+0x34>
 800d3ee:	463c      	mov	r4, r7
 800d3f0:	687f      	ldr	r7, [r7, #4]
 800d3f2:	e7b6      	b.n	800d362 <_malloc_r+0x4a>
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	42a3      	cmp	r3, r4
 800d3fa:	d1fb      	bne.n	800d3f4 <_malloc_r+0xdc>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	6053      	str	r3, [r2, #4]
 800d400:	e7de      	b.n	800d3c0 <_malloc_r+0xa8>
 800d402:	230c      	movs	r3, #12
 800d404:	6033      	str	r3, [r6, #0]
 800d406:	4630      	mov	r0, r6
 800d408:	f000 f80c 	bl	800d424 <__malloc_unlock>
 800d40c:	e794      	b.n	800d338 <_malloc_r+0x20>
 800d40e:	6005      	str	r5, [r0, #0]
 800d410:	e7d6      	b.n	800d3c0 <_malloc_r+0xa8>
 800d412:	bf00      	nop
 800d414:	20005088 	.word	0x20005088

0800d418 <__malloc_lock>:
 800d418:	4801      	ldr	r0, [pc, #4]	@ (800d420 <__malloc_lock+0x8>)
 800d41a:	f7ff b8a0 	b.w	800c55e <__retarget_lock_acquire_recursive>
 800d41e:	bf00      	nop
 800d420:	20005080 	.word	0x20005080

0800d424 <__malloc_unlock>:
 800d424:	4801      	ldr	r0, [pc, #4]	@ (800d42c <__malloc_unlock+0x8>)
 800d426:	f7ff b89b 	b.w	800c560 <__retarget_lock_release_recursive>
 800d42a:	bf00      	nop
 800d42c:	20005080 	.word	0x20005080

0800d430 <_Balloc>:
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	69c6      	ldr	r6, [r0, #28]
 800d434:	4604      	mov	r4, r0
 800d436:	460d      	mov	r5, r1
 800d438:	b976      	cbnz	r6, 800d458 <_Balloc+0x28>
 800d43a:	2010      	movs	r0, #16
 800d43c:	f7ff ff42 	bl	800d2c4 <malloc>
 800d440:	4602      	mov	r2, r0
 800d442:	61e0      	str	r0, [r4, #28]
 800d444:	b920      	cbnz	r0, 800d450 <_Balloc+0x20>
 800d446:	4b18      	ldr	r3, [pc, #96]	@ (800d4a8 <_Balloc+0x78>)
 800d448:	4818      	ldr	r0, [pc, #96]	@ (800d4ac <_Balloc+0x7c>)
 800d44a:	216b      	movs	r1, #107	@ 0x6b
 800d44c:	f000 fdec 	bl	800e028 <__assert_func>
 800d450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d454:	6006      	str	r6, [r0, #0]
 800d456:	60c6      	str	r6, [r0, #12]
 800d458:	69e6      	ldr	r6, [r4, #28]
 800d45a:	68f3      	ldr	r3, [r6, #12]
 800d45c:	b183      	cbz	r3, 800d480 <_Balloc+0x50>
 800d45e:	69e3      	ldr	r3, [r4, #28]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d466:	b9b8      	cbnz	r0, 800d498 <_Balloc+0x68>
 800d468:	2101      	movs	r1, #1
 800d46a:	fa01 f605 	lsl.w	r6, r1, r5
 800d46e:	1d72      	adds	r2, r6, #5
 800d470:	0092      	lsls	r2, r2, #2
 800d472:	4620      	mov	r0, r4
 800d474:	f000 fdf6 	bl	800e064 <_calloc_r>
 800d478:	b160      	cbz	r0, 800d494 <_Balloc+0x64>
 800d47a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d47e:	e00e      	b.n	800d49e <_Balloc+0x6e>
 800d480:	2221      	movs	r2, #33	@ 0x21
 800d482:	2104      	movs	r1, #4
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fded 	bl	800e064 <_calloc_r>
 800d48a:	69e3      	ldr	r3, [r4, #28]
 800d48c:	60f0      	str	r0, [r6, #12]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1e4      	bne.n	800d45e <_Balloc+0x2e>
 800d494:	2000      	movs	r0, #0
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	6802      	ldr	r2, [r0, #0]
 800d49a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4a4:	e7f7      	b.n	800d496 <_Balloc+0x66>
 800d4a6:	bf00      	nop
 800d4a8:	0800eed1 	.word	0x0800eed1
 800d4ac:	0800ef51 	.word	0x0800ef51

0800d4b0 <_Bfree>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	69c6      	ldr	r6, [r0, #28]
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	b976      	cbnz	r6, 800d4d8 <_Bfree+0x28>
 800d4ba:	2010      	movs	r0, #16
 800d4bc:	f7ff ff02 	bl	800d2c4 <malloc>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	61e8      	str	r0, [r5, #28]
 800d4c4:	b920      	cbnz	r0, 800d4d0 <_Bfree+0x20>
 800d4c6:	4b09      	ldr	r3, [pc, #36]	@ (800d4ec <_Bfree+0x3c>)
 800d4c8:	4809      	ldr	r0, [pc, #36]	@ (800d4f0 <_Bfree+0x40>)
 800d4ca:	218f      	movs	r1, #143	@ 0x8f
 800d4cc:	f000 fdac 	bl	800e028 <__assert_func>
 800d4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4d4:	6006      	str	r6, [r0, #0]
 800d4d6:	60c6      	str	r6, [r0, #12]
 800d4d8:	b13c      	cbz	r4, 800d4ea <_Bfree+0x3a>
 800d4da:	69eb      	ldr	r3, [r5, #28]
 800d4dc:	6862      	ldr	r2, [r4, #4]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4e4:	6021      	str	r1, [r4, #0]
 800d4e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	0800eed1 	.word	0x0800eed1
 800d4f0:	0800ef51 	.word	0x0800ef51

0800d4f4 <__multadd>:
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	690d      	ldr	r5, [r1, #16]
 800d4fa:	4607      	mov	r7, r0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	461e      	mov	r6, r3
 800d500:	f101 0c14 	add.w	ip, r1, #20
 800d504:	2000      	movs	r0, #0
 800d506:	f8dc 3000 	ldr.w	r3, [ip]
 800d50a:	b299      	uxth	r1, r3
 800d50c:	fb02 6101 	mla	r1, r2, r1, r6
 800d510:	0c1e      	lsrs	r6, r3, #16
 800d512:	0c0b      	lsrs	r3, r1, #16
 800d514:	fb02 3306 	mla	r3, r2, r6, r3
 800d518:	b289      	uxth	r1, r1
 800d51a:	3001      	adds	r0, #1
 800d51c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d520:	4285      	cmp	r5, r0
 800d522:	f84c 1b04 	str.w	r1, [ip], #4
 800d526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d52a:	dcec      	bgt.n	800d506 <__multadd+0x12>
 800d52c:	b30e      	cbz	r6, 800d572 <__multadd+0x7e>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	42ab      	cmp	r3, r5
 800d532:	dc19      	bgt.n	800d568 <__multadd+0x74>
 800d534:	6861      	ldr	r1, [r4, #4]
 800d536:	4638      	mov	r0, r7
 800d538:	3101      	adds	r1, #1
 800d53a:	f7ff ff79 	bl	800d430 <_Balloc>
 800d53e:	4680      	mov	r8, r0
 800d540:	b928      	cbnz	r0, 800d54e <__multadd+0x5a>
 800d542:	4602      	mov	r2, r0
 800d544:	4b0c      	ldr	r3, [pc, #48]	@ (800d578 <__multadd+0x84>)
 800d546:	480d      	ldr	r0, [pc, #52]	@ (800d57c <__multadd+0x88>)
 800d548:	21ba      	movs	r1, #186	@ 0xba
 800d54a:	f000 fd6d 	bl	800e028 <__assert_func>
 800d54e:	6922      	ldr	r2, [r4, #16]
 800d550:	3202      	adds	r2, #2
 800d552:	f104 010c 	add.w	r1, r4, #12
 800d556:	0092      	lsls	r2, r2, #2
 800d558:	300c      	adds	r0, #12
 800d55a:	f7ff f802 	bl	800c562 <memcpy>
 800d55e:	4621      	mov	r1, r4
 800d560:	4638      	mov	r0, r7
 800d562:	f7ff ffa5 	bl	800d4b0 <_Bfree>
 800d566:	4644      	mov	r4, r8
 800d568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d56c:	3501      	adds	r5, #1
 800d56e:	615e      	str	r6, [r3, #20]
 800d570:	6125      	str	r5, [r4, #16]
 800d572:	4620      	mov	r0, r4
 800d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d578:	0800ef40 	.word	0x0800ef40
 800d57c:	0800ef51 	.word	0x0800ef51

0800d580 <__hi0bits>:
 800d580:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d584:	4603      	mov	r3, r0
 800d586:	bf36      	itet	cc
 800d588:	0403      	lslcc	r3, r0, #16
 800d58a:	2000      	movcs	r0, #0
 800d58c:	2010      	movcc	r0, #16
 800d58e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d592:	bf3c      	itt	cc
 800d594:	021b      	lslcc	r3, r3, #8
 800d596:	3008      	addcc	r0, #8
 800d598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d59c:	bf3c      	itt	cc
 800d59e:	011b      	lslcc	r3, r3, #4
 800d5a0:	3004      	addcc	r0, #4
 800d5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5a6:	bf3c      	itt	cc
 800d5a8:	009b      	lslcc	r3, r3, #2
 800d5aa:	3002      	addcc	r0, #2
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	db05      	blt.n	800d5bc <__hi0bits+0x3c>
 800d5b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d5b4:	f100 0001 	add.w	r0, r0, #1
 800d5b8:	bf08      	it	eq
 800d5ba:	2020      	moveq	r0, #32
 800d5bc:	4770      	bx	lr

0800d5be <__lo0bits>:
 800d5be:	6803      	ldr	r3, [r0, #0]
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	f013 0007 	ands.w	r0, r3, #7
 800d5c6:	d00b      	beq.n	800d5e0 <__lo0bits+0x22>
 800d5c8:	07d9      	lsls	r1, r3, #31
 800d5ca:	d421      	bmi.n	800d610 <__lo0bits+0x52>
 800d5cc:	0798      	lsls	r0, r3, #30
 800d5ce:	bf49      	itett	mi
 800d5d0:	085b      	lsrmi	r3, r3, #1
 800d5d2:	089b      	lsrpl	r3, r3, #2
 800d5d4:	2001      	movmi	r0, #1
 800d5d6:	6013      	strmi	r3, [r2, #0]
 800d5d8:	bf5c      	itt	pl
 800d5da:	6013      	strpl	r3, [r2, #0]
 800d5dc:	2002      	movpl	r0, #2
 800d5de:	4770      	bx	lr
 800d5e0:	b299      	uxth	r1, r3
 800d5e2:	b909      	cbnz	r1, 800d5e8 <__lo0bits+0x2a>
 800d5e4:	0c1b      	lsrs	r3, r3, #16
 800d5e6:	2010      	movs	r0, #16
 800d5e8:	b2d9      	uxtb	r1, r3
 800d5ea:	b909      	cbnz	r1, 800d5f0 <__lo0bits+0x32>
 800d5ec:	3008      	adds	r0, #8
 800d5ee:	0a1b      	lsrs	r3, r3, #8
 800d5f0:	0719      	lsls	r1, r3, #28
 800d5f2:	bf04      	itt	eq
 800d5f4:	091b      	lsreq	r3, r3, #4
 800d5f6:	3004      	addeq	r0, #4
 800d5f8:	0799      	lsls	r1, r3, #30
 800d5fa:	bf04      	itt	eq
 800d5fc:	089b      	lsreq	r3, r3, #2
 800d5fe:	3002      	addeq	r0, #2
 800d600:	07d9      	lsls	r1, r3, #31
 800d602:	d403      	bmi.n	800d60c <__lo0bits+0x4e>
 800d604:	085b      	lsrs	r3, r3, #1
 800d606:	f100 0001 	add.w	r0, r0, #1
 800d60a:	d003      	beq.n	800d614 <__lo0bits+0x56>
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	4770      	bx	lr
 800d610:	2000      	movs	r0, #0
 800d612:	4770      	bx	lr
 800d614:	2020      	movs	r0, #32
 800d616:	4770      	bx	lr

0800d618 <__i2b>:
 800d618:	b510      	push	{r4, lr}
 800d61a:	460c      	mov	r4, r1
 800d61c:	2101      	movs	r1, #1
 800d61e:	f7ff ff07 	bl	800d430 <_Balloc>
 800d622:	4602      	mov	r2, r0
 800d624:	b928      	cbnz	r0, 800d632 <__i2b+0x1a>
 800d626:	4b05      	ldr	r3, [pc, #20]	@ (800d63c <__i2b+0x24>)
 800d628:	4805      	ldr	r0, [pc, #20]	@ (800d640 <__i2b+0x28>)
 800d62a:	f240 1145 	movw	r1, #325	@ 0x145
 800d62e:	f000 fcfb 	bl	800e028 <__assert_func>
 800d632:	2301      	movs	r3, #1
 800d634:	6144      	str	r4, [r0, #20]
 800d636:	6103      	str	r3, [r0, #16]
 800d638:	bd10      	pop	{r4, pc}
 800d63a:	bf00      	nop
 800d63c:	0800ef40 	.word	0x0800ef40
 800d640:	0800ef51 	.word	0x0800ef51

0800d644 <__multiply>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	4617      	mov	r7, r2
 800d64a:	690a      	ldr	r2, [r1, #16]
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	429a      	cmp	r2, r3
 800d650:	bfa8      	it	ge
 800d652:	463b      	movge	r3, r7
 800d654:	4689      	mov	r9, r1
 800d656:	bfa4      	itt	ge
 800d658:	460f      	movge	r7, r1
 800d65a:	4699      	movge	r9, r3
 800d65c:	693d      	ldr	r5, [r7, #16]
 800d65e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	eb05 060a 	add.w	r6, r5, sl
 800d66a:	42b3      	cmp	r3, r6
 800d66c:	b085      	sub	sp, #20
 800d66e:	bfb8      	it	lt
 800d670:	3101      	addlt	r1, #1
 800d672:	f7ff fedd 	bl	800d430 <_Balloc>
 800d676:	b930      	cbnz	r0, 800d686 <__multiply+0x42>
 800d678:	4602      	mov	r2, r0
 800d67a:	4b41      	ldr	r3, [pc, #260]	@ (800d780 <__multiply+0x13c>)
 800d67c:	4841      	ldr	r0, [pc, #260]	@ (800d784 <__multiply+0x140>)
 800d67e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d682:	f000 fcd1 	bl	800e028 <__assert_func>
 800d686:	f100 0414 	add.w	r4, r0, #20
 800d68a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d68e:	4623      	mov	r3, r4
 800d690:	2200      	movs	r2, #0
 800d692:	4573      	cmp	r3, lr
 800d694:	d320      	bcc.n	800d6d8 <__multiply+0x94>
 800d696:	f107 0814 	add.w	r8, r7, #20
 800d69a:	f109 0114 	add.w	r1, r9, #20
 800d69e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d6a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d6a6:	9302      	str	r3, [sp, #8]
 800d6a8:	1beb      	subs	r3, r5, r7
 800d6aa:	3b15      	subs	r3, #21
 800d6ac:	f023 0303 	bic.w	r3, r3, #3
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	3715      	adds	r7, #21
 800d6b4:	42bd      	cmp	r5, r7
 800d6b6:	bf38      	it	cc
 800d6b8:	2304      	movcc	r3, #4
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	9b02      	ldr	r3, [sp, #8]
 800d6be:	9103      	str	r1, [sp, #12]
 800d6c0:	428b      	cmp	r3, r1
 800d6c2:	d80c      	bhi.n	800d6de <__multiply+0x9a>
 800d6c4:	2e00      	cmp	r6, #0
 800d6c6:	dd03      	ble.n	800d6d0 <__multiply+0x8c>
 800d6c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d055      	beq.n	800d77c <__multiply+0x138>
 800d6d0:	6106      	str	r6, [r0, #16]
 800d6d2:	b005      	add	sp, #20
 800d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d8:	f843 2b04 	str.w	r2, [r3], #4
 800d6dc:	e7d9      	b.n	800d692 <__multiply+0x4e>
 800d6de:	f8b1 a000 	ldrh.w	sl, [r1]
 800d6e2:	f1ba 0f00 	cmp.w	sl, #0
 800d6e6:	d01f      	beq.n	800d728 <__multiply+0xe4>
 800d6e8:	46c4      	mov	ip, r8
 800d6ea:	46a1      	mov	r9, r4
 800d6ec:	2700      	movs	r7, #0
 800d6ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6f2:	f8d9 3000 	ldr.w	r3, [r9]
 800d6f6:	fa1f fb82 	uxth.w	fp, r2
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800d700:	443b      	add	r3, r7
 800d702:	f8d9 7000 	ldr.w	r7, [r9]
 800d706:	0c12      	lsrs	r2, r2, #16
 800d708:	0c3f      	lsrs	r7, r7, #16
 800d70a:	fb0a 7202 	mla	r2, sl, r2, r7
 800d70e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d712:	b29b      	uxth	r3, r3
 800d714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d718:	4565      	cmp	r5, ip
 800d71a:	f849 3b04 	str.w	r3, [r9], #4
 800d71e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d722:	d8e4      	bhi.n	800d6ee <__multiply+0xaa>
 800d724:	9b01      	ldr	r3, [sp, #4]
 800d726:	50e7      	str	r7, [r4, r3]
 800d728:	9b03      	ldr	r3, [sp, #12]
 800d72a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d72e:	3104      	adds	r1, #4
 800d730:	f1b9 0f00 	cmp.w	r9, #0
 800d734:	d020      	beq.n	800d778 <__multiply+0x134>
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	4647      	mov	r7, r8
 800d73a:	46a4      	mov	ip, r4
 800d73c:	f04f 0a00 	mov.w	sl, #0
 800d740:	f8b7 b000 	ldrh.w	fp, [r7]
 800d744:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d748:	fb09 220b 	mla	r2, r9, fp, r2
 800d74c:	4452      	add	r2, sl
 800d74e:	b29b      	uxth	r3, r3
 800d750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d754:	f84c 3b04 	str.w	r3, [ip], #4
 800d758:	f857 3b04 	ldr.w	r3, [r7], #4
 800d75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d760:	f8bc 3000 	ldrh.w	r3, [ip]
 800d764:	fb09 330a 	mla	r3, r9, sl, r3
 800d768:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d76c:	42bd      	cmp	r5, r7
 800d76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d772:	d8e5      	bhi.n	800d740 <__multiply+0xfc>
 800d774:	9a01      	ldr	r2, [sp, #4]
 800d776:	50a3      	str	r3, [r4, r2]
 800d778:	3404      	adds	r4, #4
 800d77a:	e79f      	b.n	800d6bc <__multiply+0x78>
 800d77c:	3e01      	subs	r6, #1
 800d77e:	e7a1      	b.n	800d6c4 <__multiply+0x80>
 800d780:	0800ef40 	.word	0x0800ef40
 800d784:	0800ef51 	.word	0x0800ef51

0800d788 <__pow5mult>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	4615      	mov	r5, r2
 800d78e:	f012 0203 	ands.w	r2, r2, #3
 800d792:	4607      	mov	r7, r0
 800d794:	460e      	mov	r6, r1
 800d796:	d007      	beq.n	800d7a8 <__pow5mult+0x20>
 800d798:	4c25      	ldr	r4, [pc, #148]	@ (800d830 <__pow5mult+0xa8>)
 800d79a:	3a01      	subs	r2, #1
 800d79c:	2300      	movs	r3, #0
 800d79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7a2:	f7ff fea7 	bl	800d4f4 <__multadd>
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	10ad      	asrs	r5, r5, #2
 800d7aa:	d03d      	beq.n	800d828 <__pow5mult+0xa0>
 800d7ac:	69fc      	ldr	r4, [r7, #28]
 800d7ae:	b97c      	cbnz	r4, 800d7d0 <__pow5mult+0x48>
 800d7b0:	2010      	movs	r0, #16
 800d7b2:	f7ff fd87 	bl	800d2c4 <malloc>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	61f8      	str	r0, [r7, #28]
 800d7ba:	b928      	cbnz	r0, 800d7c8 <__pow5mult+0x40>
 800d7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d834 <__pow5mult+0xac>)
 800d7be:	481e      	ldr	r0, [pc, #120]	@ (800d838 <__pow5mult+0xb0>)
 800d7c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7c4:	f000 fc30 	bl	800e028 <__assert_func>
 800d7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7cc:	6004      	str	r4, [r0, #0]
 800d7ce:	60c4      	str	r4, [r0, #12]
 800d7d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7d8:	b94c      	cbnz	r4, 800d7ee <__pow5mult+0x66>
 800d7da:	f240 2171 	movw	r1, #625	@ 0x271
 800d7de:	4638      	mov	r0, r7
 800d7e0:	f7ff ff1a 	bl	800d618 <__i2b>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7ea:	4604      	mov	r4, r0
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	f04f 0900 	mov.w	r9, #0
 800d7f2:	07eb      	lsls	r3, r5, #31
 800d7f4:	d50a      	bpl.n	800d80c <__pow5mult+0x84>
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	f7ff ff22 	bl	800d644 <__multiply>
 800d800:	4631      	mov	r1, r6
 800d802:	4680      	mov	r8, r0
 800d804:	4638      	mov	r0, r7
 800d806:	f7ff fe53 	bl	800d4b0 <_Bfree>
 800d80a:	4646      	mov	r6, r8
 800d80c:	106d      	asrs	r5, r5, #1
 800d80e:	d00b      	beq.n	800d828 <__pow5mult+0xa0>
 800d810:	6820      	ldr	r0, [r4, #0]
 800d812:	b938      	cbnz	r0, 800d824 <__pow5mult+0x9c>
 800d814:	4622      	mov	r2, r4
 800d816:	4621      	mov	r1, r4
 800d818:	4638      	mov	r0, r7
 800d81a:	f7ff ff13 	bl	800d644 <__multiply>
 800d81e:	6020      	str	r0, [r4, #0]
 800d820:	f8c0 9000 	str.w	r9, [r0]
 800d824:	4604      	mov	r4, r0
 800d826:	e7e4      	b.n	800d7f2 <__pow5mult+0x6a>
 800d828:	4630      	mov	r0, r6
 800d82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82e:	bf00      	nop
 800d830:	0800f004 	.word	0x0800f004
 800d834:	0800eed1 	.word	0x0800eed1
 800d838:	0800ef51 	.word	0x0800ef51

0800d83c <__lshift>:
 800d83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d840:	460c      	mov	r4, r1
 800d842:	6849      	ldr	r1, [r1, #4]
 800d844:	6923      	ldr	r3, [r4, #16]
 800d846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d84a:	68a3      	ldr	r3, [r4, #8]
 800d84c:	4607      	mov	r7, r0
 800d84e:	4691      	mov	r9, r2
 800d850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d854:	f108 0601 	add.w	r6, r8, #1
 800d858:	42b3      	cmp	r3, r6
 800d85a:	db0b      	blt.n	800d874 <__lshift+0x38>
 800d85c:	4638      	mov	r0, r7
 800d85e:	f7ff fde7 	bl	800d430 <_Balloc>
 800d862:	4605      	mov	r5, r0
 800d864:	b948      	cbnz	r0, 800d87a <__lshift+0x3e>
 800d866:	4602      	mov	r2, r0
 800d868:	4b28      	ldr	r3, [pc, #160]	@ (800d90c <__lshift+0xd0>)
 800d86a:	4829      	ldr	r0, [pc, #164]	@ (800d910 <__lshift+0xd4>)
 800d86c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d870:	f000 fbda 	bl	800e028 <__assert_func>
 800d874:	3101      	adds	r1, #1
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	e7ee      	b.n	800d858 <__lshift+0x1c>
 800d87a:	2300      	movs	r3, #0
 800d87c:	f100 0114 	add.w	r1, r0, #20
 800d880:	f100 0210 	add.w	r2, r0, #16
 800d884:	4618      	mov	r0, r3
 800d886:	4553      	cmp	r3, sl
 800d888:	db33      	blt.n	800d8f2 <__lshift+0xb6>
 800d88a:	6920      	ldr	r0, [r4, #16]
 800d88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d890:	f104 0314 	add.w	r3, r4, #20
 800d894:	f019 091f 	ands.w	r9, r9, #31
 800d898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8a0:	d02b      	beq.n	800d8fa <__lshift+0xbe>
 800d8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8a6:	468a      	mov	sl, r1
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d8b0:	4310      	orrs	r0, r2
 800d8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ba:	459c      	cmp	ip, r3
 800d8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8c0:	d8f3      	bhi.n	800d8aa <__lshift+0x6e>
 800d8c2:	ebac 0304 	sub.w	r3, ip, r4
 800d8c6:	3b15      	subs	r3, #21
 800d8c8:	f023 0303 	bic.w	r3, r3, #3
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	f104 0015 	add.w	r0, r4, #21
 800d8d2:	4560      	cmp	r0, ip
 800d8d4:	bf88      	it	hi
 800d8d6:	2304      	movhi	r3, #4
 800d8d8:	50ca      	str	r2, [r1, r3]
 800d8da:	b10a      	cbz	r2, 800d8e0 <__lshift+0xa4>
 800d8dc:	f108 0602 	add.w	r6, r8, #2
 800d8e0:	3e01      	subs	r6, #1
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	612e      	str	r6, [r5, #16]
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	f7ff fde2 	bl	800d4b0 <_Bfree>
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	e7c5      	b.n	800d886 <__lshift+0x4a>
 800d8fa:	3904      	subs	r1, #4
 800d8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d900:	f841 2f04 	str.w	r2, [r1, #4]!
 800d904:	459c      	cmp	ip, r3
 800d906:	d8f9      	bhi.n	800d8fc <__lshift+0xc0>
 800d908:	e7ea      	b.n	800d8e0 <__lshift+0xa4>
 800d90a:	bf00      	nop
 800d90c:	0800ef40 	.word	0x0800ef40
 800d910:	0800ef51 	.word	0x0800ef51

0800d914 <__mcmp>:
 800d914:	690a      	ldr	r2, [r1, #16]
 800d916:	4603      	mov	r3, r0
 800d918:	6900      	ldr	r0, [r0, #16]
 800d91a:	1a80      	subs	r0, r0, r2
 800d91c:	b530      	push	{r4, r5, lr}
 800d91e:	d10e      	bne.n	800d93e <__mcmp+0x2a>
 800d920:	3314      	adds	r3, #20
 800d922:	3114      	adds	r1, #20
 800d924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d934:	4295      	cmp	r5, r2
 800d936:	d003      	beq.n	800d940 <__mcmp+0x2c>
 800d938:	d205      	bcs.n	800d946 <__mcmp+0x32>
 800d93a:	f04f 30ff 	mov.w	r0, #4294967295
 800d93e:	bd30      	pop	{r4, r5, pc}
 800d940:	42a3      	cmp	r3, r4
 800d942:	d3f3      	bcc.n	800d92c <__mcmp+0x18>
 800d944:	e7fb      	b.n	800d93e <__mcmp+0x2a>
 800d946:	2001      	movs	r0, #1
 800d948:	e7f9      	b.n	800d93e <__mcmp+0x2a>
	...

0800d94c <__mdiff>:
 800d94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	4689      	mov	r9, r1
 800d952:	4606      	mov	r6, r0
 800d954:	4611      	mov	r1, r2
 800d956:	4648      	mov	r0, r9
 800d958:	4614      	mov	r4, r2
 800d95a:	f7ff ffdb 	bl	800d914 <__mcmp>
 800d95e:	1e05      	subs	r5, r0, #0
 800d960:	d112      	bne.n	800d988 <__mdiff+0x3c>
 800d962:	4629      	mov	r1, r5
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff fd63 	bl	800d430 <_Balloc>
 800d96a:	4602      	mov	r2, r0
 800d96c:	b928      	cbnz	r0, 800d97a <__mdiff+0x2e>
 800d96e:	4b3f      	ldr	r3, [pc, #252]	@ (800da6c <__mdiff+0x120>)
 800d970:	f240 2137 	movw	r1, #567	@ 0x237
 800d974:	483e      	ldr	r0, [pc, #248]	@ (800da70 <__mdiff+0x124>)
 800d976:	f000 fb57 	bl	800e028 <__assert_func>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d980:	4610      	mov	r0, r2
 800d982:	b003      	add	sp, #12
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	bfbc      	itt	lt
 800d98a:	464b      	movlt	r3, r9
 800d98c:	46a1      	movlt	r9, r4
 800d98e:	4630      	mov	r0, r6
 800d990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d994:	bfba      	itte	lt
 800d996:	461c      	movlt	r4, r3
 800d998:	2501      	movlt	r5, #1
 800d99a:	2500      	movge	r5, #0
 800d99c:	f7ff fd48 	bl	800d430 <_Balloc>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	b918      	cbnz	r0, 800d9ac <__mdiff+0x60>
 800d9a4:	4b31      	ldr	r3, [pc, #196]	@ (800da6c <__mdiff+0x120>)
 800d9a6:	f240 2145 	movw	r1, #581	@ 0x245
 800d9aa:	e7e3      	b.n	800d974 <__mdiff+0x28>
 800d9ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9b0:	6926      	ldr	r6, [r4, #16]
 800d9b2:	60c5      	str	r5, [r0, #12]
 800d9b4:	f109 0310 	add.w	r3, r9, #16
 800d9b8:	f109 0514 	add.w	r5, r9, #20
 800d9bc:	f104 0e14 	add.w	lr, r4, #20
 800d9c0:	f100 0b14 	add.w	fp, r0, #20
 800d9c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	46d9      	mov	r9, fp
 800d9d0:	f04f 0c00 	mov.w	ip, #0
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d9da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9de:	9301      	str	r3, [sp, #4]
 800d9e0:	fa1f f38a 	uxth.w	r3, sl
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	b283      	uxth	r3, r0
 800d9e8:	1acb      	subs	r3, r1, r3
 800d9ea:	0c00      	lsrs	r0, r0, #16
 800d9ec:	4463      	add	r3, ip
 800d9ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9fc:	4576      	cmp	r6, lr
 800d9fe:	f849 3b04 	str.w	r3, [r9], #4
 800da02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da06:	d8e5      	bhi.n	800d9d4 <__mdiff+0x88>
 800da08:	1b33      	subs	r3, r6, r4
 800da0a:	3b15      	subs	r3, #21
 800da0c:	f023 0303 	bic.w	r3, r3, #3
 800da10:	3415      	adds	r4, #21
 800da12:	3304      	adds	r3, #4
 800da14:	42a6      	cmp	r6, r4
 800da16:	bf38      	it	cc
 800da18:	2304      	movcc	r3, #4
 800da1a:	441d      	add	r5, r3
 800da1c:	445b      	add	r3, fp
 800da1e:	461e      	mov	r6, r3
 800da20:	462c      	mov	r4, r5
 800da22:	4544      	cmp	r4, r8
 800da24:	d30e      	bcc.n	800da44 <__mdiff+0xf8>
 800da26:	f108 0103 	add.w	r1, r8, #3
 800da2a:	1b49      	subs	r1, r1, r5
 800da2c:	f021 0103 	bic.w	r1, r1, #3
 800da30:	3d03      	subs	r5, #3
 800da32:	45a8      	cmp	r8, r5
 800da34:	bf38      	it	cc
 800da36:	2100      	movcc	r1, #0
 800da38:	440b      	add	r3, r1
 800da3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da3e:	b191      	cbz	r1, 800da66 <__mdiff+0x11a>
 800da40:	6117      	str	r7, [r2, #16]
 800da42:	e79d      	b.n	800d980 <__mdiff+0x34>
 800da44:	f854 1b04 	ldr.w	r1, [r4], #4
 800da48:	46e6      	mov	lr, ip
 800da4a:	0c08      	lsrs	r0, r1, #16
 800da4c:	fa1c fc81 	uxtah	ip, ip, r1
 800da50:	4471      	add	r1, lr
 800da52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da56:	b289      	uxth	r1, r1
 800da58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da5c:	f846 1b04 	str.w	r1, [r6], #4
 800da60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da64:	e7dd      	b.n	800da22 <__mdiff+0xd6>
 800da66:	3f01      	subs	r7, #1
 800da68:	e7e7      	b.n	800da3a <__mdiff+0xee>
 800da6a:	bf00      	nop
 800da6c:	0800ef40 	.word	0x0800ef40
 800da70:	0800ef51 	.word	0x0800ef51

0800da74 <__d2b>:
 800da74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da78:	460f      	mov	r7, r1
 800da7a:	2101      	movs	r1, #1
 800da7c:	ec59 8b10 	vmov	r8, r9, d0
 800da80:	4616      	mov	r6, r2
 800da82:	f7ff fcd5 	bl	800d430 <_Balloc>
 800da86:	4604      	mov	r4, r0
 800da88:	b930      	cbnz	r0, 800da98 <__d2b+0x24>
 800da8a:	4602      	mov	r2, r0
 800da8c:	4b23      	ldr	r3, [pc, #140]	@ (800db1c <__d2b+0xa8>)
 800da8e:	4824      	ldr	r0, [pc, #144]	@ (800db20 <__d2b+0xac>)
 800da90:	f240 310f 	movw	r1, #783	@ 0x30f
 800da94:	f000 fac8 	bl	800e028 <__assert_func>
 800da98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800daa0:	b10d      	cbz	r5, 800daa6 <__d2b+0x32>
 800daa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800daa6:	9301      	str	r3, [sp, #4]
 800daa8:	f1b8 0300 	subs.w	r3, r8, #0
 800daac:	d023      	beq.n	800daf6 <__d2b+0x82>
 800daae:	4668      	mov	r0, sp
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	f7ff fd84 	bl	800d5be <__lo0bits>
 800dab6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800daba:	b1d0      	cbz	r0, 800daf2 <__d2b+0x7e>
 800dabc:	f1c0 0320 	rsb	r3, r0, #32
 800dac0:	fa02 f303 	lsl.w	r3, r2, r3
 800dac4:	430b      	orrs	r3, r1
 800dac6:	40c2      	lsrs	r2, r0
 800dac8:	6163      	str	r3, [r4, #20]
 800daca:	9201      	str	r2, [sp, #4]
 800dacc:	9b01      	ldr	r3, [sp, #4]
 800dace:	61a3      	str	r3, [r4, #24]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	bf0c      	ite	eq
 800dad4:	2201      	moveq	r2, #1
 800dad6:	2202      	movne	r2, #2
 800dad8:	6122      	str	r2, [r4, #16]
 800dada:	b1a5      	cbz	r5, 800db06 <__d2b+0x92>
 800dadc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dae0:	4405      	add	r5, r0
 800dae2:	603d      	str	r5, [r7, #0]
 800dae4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dae8:	6030      	str	r0, [r6, #0]
 800daea:	4620      	mov	r0, r4
 800daec:	b003      	add	sp, #12
 800daee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daf2:	6161      	str	r1, [r4, #20]
 800daf4:	e7ea      	b.n	800dacc <__d2b+0x58>
 800daf6:	a801      	add	r0, sp, #4
 800daf8:	f7ff fd61 	bl	800d5be <__lo0bits>
 800dafc:	9b01      	ldr	r3, [sp, #4]
 800dafe:	6163      	str	r3, [r4, #20]
 800db00:	3020      	adds	r0, #32
 800db02:	2201      	movs	r2, #1
 800db04:	e7e8      	b.n	800dad8 <__d2b+0x64>
 800db06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db0e:	6038      	str	r0, [r7, #0]
 800db10:	6918      	ldr	r0, [r3, #16]
 800db12:	f7ff fd35 	bl	800d580 <__hi0bits>
 800db16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db1a:	e7e5      	b.n	800dae8 <__d2b+0x74>
 800db1c:	0800ef40 	.word	0x0800ef40
 800db20:	0800ef51 	.word	0x0800ef51

0800db24 <__sfputc_r>:
 800db24:	6893      	ldr	r3, [r2, #8]
 800db26:	3b01      	subs	r3, #1
 800db28:	2b00      	cmp	r3, #0
 800db2a:	b410      	push	{r4}
 800db2c:	6093      	str	r3, [r2, #8]
 800db2e:	da08      	bge.n	800db42 <__sfputc_r+0x1e>
 800db30:	6994      	ldr	r4, [r2, #24]
 800db32:	42a3      	cmp	r3, r4
 800db34:	db01      	blt.n	800db3a <__sfputc_r+0x16>
 800db36:	290a      	cmp	r1, #10
 800db38:	d103      	bne.n	800db42 <__sfputc_r+0x1e>
 800db3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db3e:	f7fe bb9e 	b.w	800c27e <__swbuf_r>
 800db42:	6813      	ldr	r3, [r2, #0]
 800db44:	1c58      	adds	r0, r3, #1
 800db46:	6010      	str	r0, [r2, #0]
 800db48:	7019      	strb	r1, [r3, #0]
 800db4a:	4608      	mov	r0, r1
 800db4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <__sfputs_r>:
 800db52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db54:	4606      	mov	r6, r0
 800db56:	460f      	mov	r7, r1
 800db58:	4614      	mov	r4, r2
 800db5a:	18d5      	adds	r5, r2, r3
 800db5c:	42ac      	cmp	r4, r5
 800db5e:	d101      	bne.n	800db64 <__sfputs_r+0x12>
 800db60:	2000      	movs	r0, #0
 800db62:	e007      	b.n	800db74 <__sfputs_r+0x22>
 800db64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db68:	463a      	mov	r2, r7
 800db6a:	4630      	mov	r0, r6
 800db6c:	f7ff ffda 	bl	800db24 <__sfputc_r>
 800db70:	1c43      	adds	r3, r0, #1
 800db72:	d1f3      	bne.n	800db5c <__sfputs_r+0xa>
 800db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db78 <_vfiprintf_r>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	460d      	mov	r5, r1
 800db7e:	b09d      	sub	sp, #116	@ 0x74
 800db80:	4614      	mov	r4, r2
 800db82:	4698      	mov	r8, r3
 800db84:	4606      	mov	r6, r0
 800db86:	b118      	cbz	r0, 800db90 <_vfiprintf_r+0x18>
 800db88:	6a03      	ldr	r3, [r0, #32]
 800db8a:	b90b      	cbnz	r3, 800db90 <_vfiprintf_r+0x18>
 800db8c:	f7fe fa8e 	bl	800c0ac <__sinit>
 800db90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db92:	07d9      	lsls	r1, r3, #31
 800db94:	d405      	bmi.n	800dba2 <_vfiprintf_r+0x2a>
 800db96:	89ab      	ldrh	r3, [r5, #12]
 800db98:	059a      	lsls	r2, r3, #22
 800db9a:	d402      	bmi.n	800dba2 <_vfiprintf_r+0x2a>
 800db9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db9e:	f7fe fcde 	bl	800c55e <__retarget_lock_acquire_recursive>
 800dba2:	89ab      	ldrh	r3, [r5, #12]
 800dba4:	071b      	lsls	r3, r3, #28
 800dba6:	d501      	bpl.n	800dbac <_vfiprintf_r+0x34>
 800dba8:	692b      	ldr	r3, [r5, #16]
 800dbaa:	b99b      	cbnz	r3, 800dbd4 <_vfiprintf_r+0x5c>
 800dbac:	4629      	mov	r1, r5
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7fe fba4 	bl	800c2fc <__swsetup_r>
 800dbb4:	b170      	cbz	r0, 800dbd4 <_vfiprintf_r+0x5c>
 800dbb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbb8:	07dc      	lsls	r4, r3, #31
 800dbba:	d504      	bpl.n	800dbc6 <_vfiprintf_r+0x4e>
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc0:	b01d      	add	sp, #116	@ 0x74
 800dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc6:	89ab      	ldrh	r3, [r5, #12]
 800dbc8:	0598      	lsls	r0, r3, #22
 800dbca:	d4f7      	bmi.n	800dbbc <_vfiprintf_r+0x44>
 800dbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbce:	f7fe fcc7 	bl	800c560 <__retarget_lock_release_recursive>
 800dbd2:	e7f3      	b.n	800dbbc <_vfiprintf_r+0x44>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbd8:	2320      	movs	r3, #32
 800dbda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbde:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbe2:	2330      	movs	r3, #48	@ 0x30
 800dbe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd94 <_vfiprintf_r+0x21c>
 800dbe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbec:	f04f 0901 	mov.w	r9, #1
 800dbf0:	4623      	mov	r3, r4
 800dbf2:	469a      	mov	sl, r3
 800dbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbf8:	b10a      	cbz	r2, 800dbfe <_vfiprintf_r+0x86>
 800dbfa:	2a25      	cmp	r2, #37	@ 0x25
 800dbfc:	d1f9      	bne.n	800dbf2 <_vfiprintf_r+0x7a>
 800dbfe:	ebba 0b04 	subs.w	fp, sl, r4
 800dc02:	d00b      	beq.n	800dc1c <_vfiprintf_r+0xa4>
 800dc04:	465b      	mov	r3, fp
 800dc06:	4622      	mov	r2, r4
 800dc08:	4629      	mov	r1, r5
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f7ff ffa1 	bl	800db52 <__sfputs_r>
 800dc10:	3001      	adds	r0, #1
 800dc12:	f000 80a7 	beq.w	800dd64 <_vfiprintf_r+0x1ec>
 800dc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc18:	445a      	add	r2, fp
 800dc1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc1c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 809f 	beq.w	800dd64 <_vfiprintf_r+0x1ec>
 800dc26:	2300      	movs	r3, #0
 800dc28:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc30:	f10a 0a01 	add.w	sl, sl, #1
 800dc34:	9304      	str	r3, [sp, #16]
 800dc36:	9307      	str	r3, [sp, #28]
 800dc38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc3e:	4654      	mov	r4, sl
 800dc40:	2205      	movs	r2, #5
 800dc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc46:	4853      	ldr	r0, [pc, #332]	@ (800dd94 <_vfiprintf_r+0x21c>)
 800dc48:	f7f2 fae2 	bl	8000210 <memchr>
 800dc4c:	9a04      	ldr	r2, [sp, #16]
 800dc4e:	b9d8      	cbnz	r0, 800dc88 <_vfiprintf_r+0x110>
 800dc50:	06d1      	lsls	r1, r2, #27
 800dc52:	bf44      	itt	mi
 800dc54:	2320      	movmi	r3, #32
 800dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc5a:	0713      	lsls	r3, r2, #28
 800dc5c:	bf44      	itt	mi
 800dc5e:	232b      	movmi	r3, #43	@ 0x2b
 800dc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc64:	f89a 3000 	ldrb.w	r3, [sl]
 800dc68:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc6a:	d015      	beq.n	800dc98 <_vfiprintf_r+0x120>
 800dc6c:	9a07      	ldr	r2, [sp, #28]
 800dc6e:	4654      	mov	r4, sl
 800dc70:	2000      	movs	r0, #0
 800dc72:	f04f 0c0a 	mov.w	ip, #10
 800dc76:	4621      	mov	r1, r4
 800dc78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc7c:	3b30      	subs	r3, #48	@ 0x30
 800dc7e:	2b09      	cmp	r3, #9
 800dc80:	d94b      	bls.n	800dd1a <_vfiprintf_r+0x1a2>
 800dc82:	b1b0      	cbz	r0, 800dcb2 <_vfiprintf_r+0x13a>
 800dc84:	9207      	str	r2, [sp, #28]
 800dc86:	e014      	b.n	800dcb2 <_vfiprintf_r+0x13a>
 800dc88:	eba0 0308 	sub.w	r3, r0, r8
 800dc8c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc90:	4313      	orrs	r3, r2
 800dc92:	9304      	str	r3, [sp, #16]
 800dc94:	46a2      	mov	sl, r4
 800dc96:	e7d2      	b.n	800dc3e <_vfiprintf_r+0xc6>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	1d19      	adds	r1, r3, #4
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	9103      	str	r1, [sp, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	bfbb      	ittet	lt
 800dca4:	425b      	neglt	r3, r3
 800dca6:	f042 0202 	orrlt.w	r2, r2, #2
 800dcaa:	9307      	strge	r3, [sp, #28]
 800dcac:	9307      	strlt	r3, [sp, #28]
 800dcae:	bfb8      	it	lt
 800dcb0:	9204      	strlt	r2, [sp, #16]
 800dcb2:	7823      	ldrb	r3, [r4, #0]
 800dcb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcb6:	d10a      	bne.n	800dcce <_vfiprintf_r+0x156>
 800dcb8:	7863      	ldrb	r3, [r4, #1]
 800dcba:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcbc:	d132      	bne.n	800dd24 <_vfiprintf_r+0x1ac>
 800dcbe:	9b03      	ldr	r3, [sp, #12]
 800dcc0:	1d1a      	adds	r2, r3, #4
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	9203      	str	r2, [sp, #12]
 800dcc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcca:	3402      	adds	r4, #2
 800dccc:	9305      	str	r3, [sp, #20]
 800dcce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dda4 <_vfiprintf_r+0x22c>
 800dcd2:	7821      	ldrb	r1, [r4, #0]
 800dcd4:	2203      	movs	r2, #3
 800dcd6:	4650      	mov	r0, sl
 800dcd8:	f7f2 fa9a 	bl	8000210 <memchr>
 800dcdc:	b138      	cbz	r0, 800dcee <_vfiprintf_r+0x176>
 800dcde:	9b04      	ldr	r3, [sp, #16]
 800dce0:	eba0 000a 	sub.w	r0, r0, sl
 800dce4:	2240      	movs	r2, #64	@ 0x40
 800dce6:	4082      	lsls	r2, r0
 800dce8:	4313      	orrs	r3, r2
 800dcea:	3401      	adds	r4, #1
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcf2:	4829      	ldr	r0, [pc, #164]	@ (800dd98 <_vfiprintf_r+0x220>)
 800dcf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcf8:	2206      	movs	r2, #6
 800dcfa:	f7f2 fa89 	bl	8000210 <memchr>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d03f      	beq.n	800dd82 <_vfiprintf_r+0x20a>
 800dd02:	4b26      	ldr	r3, [pc, #152]	@ (800dd9c <_vfiprintf_r+0x224>)
 800dd04:	bb1b      	cbnz	r3, 800dd4e <_vfiprintf_r+0x1d6>
 800dd06:	9b03      	ldr	r3, [sp, #12]
 800dd08:	3307      	adds	r3, #7
 800dd0a:	f023 0307 	bic.w	r3, r3, #7
 800dd0e:	3308      	adds	r3, #8
 800dd10:	9303      	str	r3, [sp, #12]
 800dd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd14:	443b      	add	r3, r7
 800dd16:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd18:	e76a      	b.n	800dbf0 <_vfiprintf_r+0x78>
 800dd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd1e:	460c      	mov	r4, r1
 800dd20:	2001      	movs	r0, #1
 800dd22:	e7a8      	b.n	800dc76 <_vfiprintf_r+0xfe>
 800dd24:	2300      	movs	r3, #0
 800dd26:	3401      	adds	r4, #1
 800dd28:	9305      	str	r3, [sp, #20]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	f04f 0c0a 	mov.w	ip, #10
 800dd30:	4620      	mov	r0, r4
 800dd32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd36:	3a30      	subs	r2, #48	@ 0x30
 800dd38:	2a09      	cmp	r2, #9
 800dd3a:	d903      	bls.n	800dd44 <_vfiprintf_r+0x1cc>
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d0c6      	beq.n	800dcce <_vfiprintf_r+0x156>
 800dd40:	9105      	str	r1, [sp, #20]
 800dd42:	e7c4      	b.n	800dcce <_vfiprintf_r+0x156>
 800dd44:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd48:	4604      	mov	r4, r0
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e7f0      	b.n	800dd30 <_vfiprintf_r+0x1b8>
 800dd4e:	ab03      	add	r3, sp, #12
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	462a      	mov	r2, r5
 800dd54:	4b12      	ldr	r3, [pc, #72]	@ (800dda0 <_vfiprintf_r+0x228>)
 800dd56:	a904      	add	r1, sp, #16
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f7fd fd65 	bl	800b828 <_printf_float>
 800dd5e:	4607      	mov	r7, r0
 800dd60:	1c78      	adds	r0, r7, #1
 800dd62:	d1d6      	bne.n	800dd12 <_vfiprintf_r+0x19a>
 800dd64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd66:	07d9      	lsls	r1, r3, #31
 800dd68:	d405      	bmi.n	800dd76 <_vfiprintf_r+0x1fe>
 800dd6a:	89ab      	ldrh	r3, [r5, #12]
 800dd6c:	059a      	lsls	r2, r3, #22
 800dd6e:	d402      	bmi.n	800dd76 <_vfiprintf_r+0x1fe>
 800dd70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd72:	f7fe fbf5 	bl	800c560 <__retarget_lock_release_recursive>
 800dd76:	89ab      	ldrh	r3, [r5, #12]
 800dd78:	065b      	lsls	r3, r3, #25
 800dd7a:	f53f af1f 	bmi.w	800dbbc <_vfiprintf_r+0x44>
 800dd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd80:	e71e      	b.n	800dbc0 <_vfiprintf_r+0x48>
 800dd82:	ab03      	add	r3, sp, #12
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	462a      	mov	r2, r5
 800dd88:	4b05      	ldr	r3, [pc, #20]	@ (800dda0 <_vfiprintf_r+0x228>)
 800dd8a:	a904      	add	r1, sp, #16
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f7fd ffe3 	bl	800bd58 <_printf_i>
 800dd92:	e7e4      	b.n	800dd5e <_vfiprintf_r+0x1e6>
 800dd94:	0800efaa 	.word	0x0800efaa
 800dd98:	0800efb4 	.word	0x0800efb4
 800dd9c:	0800b829 	.word	0x0800b829
 800dda0:	0800db53 	.word	0x0800db53
 800dda4:	0800efb0 	.word	0x0800efb0

0800dda8 <__sflush_r>:
 800dda8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	0716      	lsls	r6, r2, #28
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	d454      	bmi.n	800de62 <__sflush_r+0xba>
 800ddb8:	684b      	ldr	r3, [r1, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dc02      	bgt.n	800ddc4 <__sflush_r+0x1c>
 800ddbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dd48      	ble.n	800de56 <__sflush_r+0xae>
 800ddc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddc6:	2e00      	cmp	r6, #0
 800ddc8:	d045      	beq.n	800de56 <__sflush_r+0xae>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddd0:	682f      	ldr	r7, [r5, #0]
 800ddd2:	6a21      	ldr	r1, [r4, #32]
 800ddd4:	602b      	str	r3, [r5, #0]
 800ddd6:	d030      	beq.n	800de3a <__sflush_r+0x92>
 800ddd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddda:	89a3      	ldrh	r3, [r4, #12]
 800dddc:	0759      	lsls	r1, r3, #29
 800ddde:	d505      	bpl.n	800ddec <__sflush_r+0x44>
 800dde0:	6863      	ldr	r3, [r4, #4]
 800dde2:	1ad2      	subs	r2, r2, r3
 800dde4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dde6:	b10b      	cbz	r3, 800ddec <__sflush_r+0x44>
 800dde8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddea:	1ad2      	subs	r2, r2, r3
 800ddec:	2300      	movs	r3, #0
 800ddee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddf0:	6a21      	ldr	r1, [r4, #32]
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	47b0      	blx	r6
 800ddf6:	1c43      	adds	r3, r0, #1
 800ddf8:	89a3      	ldrh	r3, [r4, #12]
 800ddfa:	d106      	bne.n	800de0a <__sflush_r+0x62>
 800ddfc:	6829      	ldr	r1, [r5, #0]
 800ddfe:	291d      	cmp	r1, #29
 800de00:	d82b      	bhi.n	800de5a <__sflush_r+0xb2>
 800de02:	4a2a      	ldr	r2, [pc, #168]	@ (800deac <__sflush_r+0x104>)
 800de04:	40ca      	lsrs	r2, r1
 800de06:	07d6      	lsls	r6, r2, #31
 800de08:	d527      	bpl.n	800de5a <__sflush_r+0xb2>
 800de0a:	2200      	movs	r2, #0
 800de0c:	6062      	str	r2, [r4, #4]
 800de0e:	04d9      	lsls	r1, r3, #19
 800de10:	6922      	ldr	r2, [r4, #16]
 800de12:	6022      	str	r2, [r4, #0]
 800de14:	d504      	bpl.n	800de20 <__sflush_r+0x78>
 800de16:	1c42      	adds	r2, r0, #1
 800de18:	d101      	bne.n	800de1e <__sflush_r+0x76>
 800de1a:	682b      	ldr	r3, [r5, #0]
 800de1c:	b903      	cbnz	r3, 800de20 <__sflush_r+0x78>
 800de1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800de20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de22:	602f      	str	r7, [r5, #0]
 800de24:	b1b9      	cbz	r1, 800de56 <__sflush_r+0xae>
 800de26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de2a:	4299      	cmp	r1, r3
 800de2c:	d002      	beq.n	800de34 <__sflush_r+0x8c>
 800de2e:	4628      	mov	r0, r5
 800de30:	f7ff f9fe 	bl	800d230 <_free_r>
 800de34:	2300      	movs	r3, #0
 800de36:	6363      	str	r3, [r4, #52]	@ 0x34
 800de38:	e00d      	b.n	800de56 <__sflush_r+0xae>
 800de3a:	2301      	movs	r3, #1
 800de3c:	4628      	mov	r0, r5
 800de3e:	47b0      	blx	r6
 800de40:	4602      	mov	r2, r0
 800de42:	1c50      	adds	r0, r2, #1
 800de44:	d1c9      	bne.n	800ddda <__sflush_r+0x32>
 800de46:	682b      	ldr	r3, [r5, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0c6      	beq.n	800ddda <__sflush_r+0x32>
 800de4c:	2b1d      	cmp	r3, #29
 800de4e:	d001      	beq.n	800de54 <__sflush_r+0xac>
 800de50:	2b16      	cmp	r3, #22
 800de52:	d11e      	bne.n	800de92 <__sflush_r+0xea>
 800de54:	602f      	str	r7, [r5, #0]
 800de56:	2000      	movs	r0, #0
 800de58:	e022      	b.n	800dea0 <__sflush_r+0xf8>
 800de5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de5e:	b21b      	sxth	r3, r3
 800de60:	e01b      	b.n	800de9a <__sflush_r+0xf2>
 800de62:	690f      	ldr	r7, [r1, #16]
 800de64:	2f00      	cmp	r7, #0
 800de66:	d0f6      	beq.n	800de56 <__sflush_r+0xae>
 800de68:	0793      	lsls	r3, r2, #30
 800de6a:	680e      	ldr	r6, [r1, #0]
 800de6c:	bf08      	it	eq
 800de6e:	694b      	ldreq	r3, [r1, #20]
 800de70:	600f      	str	r7, [r1, #0]
 800de72:	bf18      	it	ne
 800de74:	2300      	movne	r3, #0
 800de76:	eba6 0807 	sub.w	r8, r6, r7
 800de7a:	608b      	str	r3, [r1, #8]
 800de7c:	f1b8 0f00 	cmp.w	r8, #0
 800de80:	dde9      	ble.n	800de56 <__sflush_r+0xae>
 800de82:	6a21      	ldr	r1, [r4, #32]
 800de84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de86:	4643      	mov	r3, r8
 800de88:	463a      	mov	r2, r7
 800de8a:	4628      	mov	r0, r5
 800de8c:	47b0      	blx	r6
 800de8e:	2800      	cmp	r0, #0
 800de90:	dc08      	bgt.n	800dea4 <__sflush_r+0xfc>
 800de92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de9a:	81a3      	strh	r3, [r4, #12]
 800de9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea4:	4407      	add	r7, r0
 800dea6:	eba8 0800 	sub.w	r8, r8, r0
 800deaa:	e7e7      	b.n	800de7c <__sflush_r+0xd4>
 800deac:	20400001 	.word	0x20400001

0800deb0 <_fflush_r>:
 800deb0:	b538      	push	{r3, r4, r5, lr}
 800deb2:	690b      	ldr	r3, [r1, #16]
 800deb4:	4605      	mov	r5, r0
 800deb6:	460c      	mov	r4, r1
 800deb8:	b913      	cbnz	r3, 800dec0 <_fflush_r+0x10>
 800deba:	2500      	movs	r5, #0
 800debc:	4628      	mov	r0, r5
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	b118      	cbz	r0, 800deca <_fflush_r+0x1a>
 800dec2:	6a03      	ldr	r3, [r0, #32]
 800dec4:	b90b      	cbnz	r3, 800deca <_fflush_r+0x1a>
 800dec6:	f7fe f8f1 	bl	800c0ac <__sinit>
 800deca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0f3      	beq.n	800deba <_fflush_r+0xa>
 800ded2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ded4:	07d0      	lsls	r0, r2, #31
 800ded6:	d404      	bmi.n	800dee2 <_fflush_r+0x32>
 800ded8:	0599      	lsls	r1, r3, #22
 800deda:	d402      	bmi.n	800dee2 <_fflush_r+0x32>
 800dedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dede:	f7fe fb3e 	bl	800c55e <__retarget_lock_acquire_recursive>
 800dee2:	4628      	mov	r0, r5
 800dee4:	4621      	mov	r1, r4
 800dee6:	f7ff ff5f 	bl	800dda8 <__sflush_r>
 800deea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800deec:	07da      	lsls	r2, r3, #31
 800deee:	4605      	mov	r5, r0
 800def0:	d4e4      	bmi.n	800debc <_fflush_r+0xc>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	059b      	lsls	r3, r3, #22
 800def6:	d4e1      	bmi.n	800debc <_fflush_r+0xc>
 800def8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800defa:	f7fe fb31 	bl	800c560 <__retarget_lock_release_recursive>
 800defe:	e7dd      	b.n	800debc <_fflush_r+0xc>

0800df00 <__swhatbuf_r>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	460c      	mov	r4, r1
 800df04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df08:	2900      	cmp	r1, #0
 800df0a:	b096      	sub	sp, #88	@ 0x58
 800df0c:	4615      	mov	r5, r2
 800df0e:	461e      	mov	r6, r3
 800df10:	da0d      	bge.n	800df2e <__swhatbuf_r+0x2e>
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df18:	f04f 0100 	mov.w	r1, #0
 800df1c:	bf14      	ite	ne
 800df1e:	2340      	movne	r3, #64	@ 0x40
 800df20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df24:	2000      	movs	r0, #0
 800df26:	6031      	str	r1, [r6, #0]
 800df28:	602b      	str	r3, [r5, #0]
 800df2a:	b016      	add	sp, #88	@ 0x58
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	466a      	mov	r2, sp
 800df30:	f000 f848 	bl	800dfc4 <_fstat_r>
 800df34:	2800      	cmp	r0, #0
 800df36:	dbec      	blt.n	800df12 <__swhatbuf_r+0x12>
 800df38:	9901      	ldr	r1, [sp, #4]
 800df3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df42:	4259      	negs	r1, r3
 800df44:	4159      	adcs	r1, r3
 800df46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df4a:	e7eb      	b.n	800df24 <__swhatbuf_r+0x24>

0800df4c <__smakebuf_r>:
 800df4c:	898b      	ldrh	r3, [r1, #12]
 800df4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df50:	079d      	lsls	r5, r3, #30
 800df52:	4606      	mov	r6, r0
 800df54:	460c      	mov	r4, r1
 800df56:	d507      	bpl.n	800df68 <__smakebuf_r+0x1c>
 800df58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	6123      	str	r3, [r4, #16]
 800df60:	2301      	movs	r3, #1
 800df62:	6163      	str	r3, [r4, #20]
 800df64:	b003      	add	sp, #12
 800df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df68:	ab01      	add	r3, sp, #4
 800df6a:	466a      	mov	r2, sp
 800df6c:	f7ff ffc8 	bl	800df00 <__swhatbuf_r>
 800df70:	9f00      	ldr	r7, [sp, #0]
 800df72:	4605      	mov	r5, r0
 800df74:	4639      	mov	r1, r7
 800df76:	4630      	mov	r0, r6
 800df78:	f7ff f9ce 	bl	800d318 <_malloc_r>
 800df7c:	b948      	cbnz	r0, 800df92 <__smakebuf_r+0x46>
 800df7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df82:	059a      	lsls	r2, r3, #22
 800df84:	d4ee      	bmi.n	800df64 <__smakebuf_r+0x18>
 800df86:	f023 0303 	bic.w	r3, r3, #3
 800df8a:	f043 0302 	orr.w	r3, r3, #2
 800df8e:	81a3      	strh	r3, [r4, #12]
 800df90:	e7e2      	b.n	800df58 <__smakebuf_r+0xc>
 800df92:	89a3      	ldrh	r3, [r4, #12]
 800df94:	6020      	str	r0, [r4, #0]
 800df96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	9b01      	ldr	r3, [sp, #4]
 800df9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfa2:	b15b      	cbz	r3, 800dfbc <__smakebuf_r+0x70>
 800dfa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f000 f81d 	bl	800dfe8 <_isatty_r>
 800dfae:	b128      	cbz	r0, 800dfbc <__smakebuf_r+0x70>
 800dfb0:	89a3      	ldrh	r3, [r4, #12]
 800dfb2:	f023 0303 	bic.w	r3, r3, #3
 800dfb6:	f043 0301 	orr.w	r3, r3, #1
 800dfba:	81a3      	strh	r3, [r4, #12]
 800dfbc:	89a3      	ldrh	r3, [r4, #12]
 800dfbe:	431d      	orrs	r5, r3
 800dfc0:	81a5      	strh	r5, [r4, #12]
 800dfc2:	e7cf      	b.n	800df64 <__smakebuf_r+0x18>

0800dfc4 <_fstat_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d07      	ldr	r5, [pc, #28]	@ (800dfe4 <_fstat_r+0x20>)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	4611      	mov	r1, r2
 800dfd0:	602b      	str	r3, [r5, #0]
 800dfd2:	f7f4 ffa3 	bl	8002f1c <_fstat>
 800dfd6:	1c43      	adds	r3, r0, #1
 800dfd8:	d102      	bne.n	800dfe0 <_fstat_r+0x1c>
 800dfda:	682b      	ldr	r3, [r5, #0]
 800dfdc:	b103      	cbz	r3, 800dfe0 <_fstat_r+0x1c>
 800dfde:	6023      	str	r3, [r4, #0]
 800dfe0:	bd38      	pop	{r3, r4, r5, pc}
 800dfe2:	bf00      	nop
 800dfe4:	2000507c 	.word	0x2000507c

0800dfe8 <_isatty_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4d06      	ldr	r5, [pc, #24]	@ (800e004 <_isatty_r+0x1c>)
 800dfec:	2300      	movs	r3, #0
 800dfee:	4604      	mov	r4, r0
 800dff0:	4608      	mov	r0, r1
 800dff2:	602b      	str	r3, [r5, #0]
 800dff4:	f7f4 ffa2 	bl	8002f3c <_isatty>
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	d102      	bne.n	800e002 <_isatty_r+0x1a>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	b103      	cbz	r3, 800e002 <_isatty_r+0x1a>
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	bd38      	pop	{r3, r4, r5, pc}
 800e004:	2000507c 	.word	0x2000507c

0800e008 <_sbrk_r>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	4d06      	ldr	r5, [pc, #24]	@ (800e024 <_sbrk_r+0x1c>)
 800e00c:	2300      	movs	r3, #0
 800e00e:	4604      	mov	r4, r0
 800e010:	4608      	mov	r0, r1
 800e012:	602b      	str	r3, [r5, #0]
 800e014:	f7f4 ffaa 	bl	8002f6c <_sbrk>
 800e018:	1c43      	adds	r3, r0, #1
 800e01a:	d102      	bne.n	800e022 <_sbrk_r+0x1a>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	b103      	cbz	r3, 800e022 <_sbrk_r+0x1a>
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	2000507c 	.word	0x2000507c

0800e028 <__assert_func>:
 800e028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e02a:	4614      	mov	r4, r2
 800e02c:	461a      	mov	r2, r3
 800e02e:	4b09      	ldr	r3, [pc, #36]	@ (800e054 <__assert_func+0x2c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4605      	mov	r5, r0
 800e034:	68d8      	ldr	r0, [r3, #12]
 800e036:	b14c      	cbz	r4, 800e04c <__assert_func+0x24>
 800e038:	4b07      	ldr	r3, [pc, #28]	@ (800e058 <__assert_func+0x30>)
 800e03a:	9100      	str	r1, [sp, #0]
 800e03c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e040:	4906      	ldr	r1, [pc, #24]	@ (800e05c <__assert_func+0x34>)
 800e042:	462b      	mov	r3, r5
 800e044:	f000 f842 	bl	800e0cc <fiprintf>
 800e048:	f000 f852 	bl	800e0f0 <abort>
 800e04c:	4b04      	ldr	r3, [pc, #16]	@ (800e060 <__assert_func+0x38>)
 800e04e:	461c      	mov	r4, r3
 800e050:	e7f3      	b.n	800e03a <__assert_func+0x12>
 800e052:	bf00      	nop
 800e054:	2000001c 	.word	0x2000001c
 800e058:	0800efc5 	.word	0x0800efc5
 800e05c:	0800efd2 	.word	0x0800efd2
 800e060:	0800f000 	.word	0x0800f000

0800e064 <_calloc_r>:
 800e064:	b570      	push	{r4, r5, r6, lr}
 800e066:	fba1 5402 	umull	r5, r4, r1, r2
 800e06a:	b934      	cbnz	r4, 800e07a <_calloc_r+0x16>
 800e06c:	4629      	mov	r1, r5
 800e06e:	f7ff f953 	bl	800d318 <_malloc_r>
 800e072:	4606      	mov	r6, r0
 800e074:	b928      	cbnz	r0, 800e082 <_calloc_r+0x1e>
 800e076:	4630      	mov	r0, r6
 800e078:	bd70      	pop	{r4, r5, r6, pc}
 800e07a:	220c      	movs	r2, #12
 800e07c:	6002      	str	r2, [r0, #0]
 800e07e:	2600      	movs	r6, #0
 800e080:	e7f9      	b.n	800e076 <_calloc_r+0x12>
 800e082:	462a      	mov	r2, r5
 800e084:	4621      	mov	r1, r4
 800e086:	f7fe f98f 	bl	800c3a8 <memset>
 800e08a:	e7f4      	b.n	800e076 <_calloc_r+0x12>

0800e08c <__ascii_mbtowc>:
 800e08c:	b082      	sub	sp, #8
 800e08e:	b901      	cbnz	r1, 800e092 <__ascii_mbtowc+0x6>
 800e090:	a901      	add	r1, sp, #4
 800e092:	b142      	cbz	r2, 800e0a6 <__ascii_mbtowc+0x1a>
 800e094:	b14b      	cbz	r3, 800e0aa <__ascii_mbtowc+0x1e>
 800e096:	7813      	ldrb	r3, [r2, #0]
 800e098:	600b      	str	r3, [r1, #0]
 800e09a:	7812      	ldrb	r2, [r2, #0]
 800e09c:	1e10      	subs	r0, r2, #0
 800e09e:	bf18      	it	ne
 800e0a0:	2001      	movne	r0, #1
 800e0a2:	b002      	add	sp, #8
 800e0a4:	4770      	bx	lr
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	e7fb      	b.n	800e0a2 <__ascii_mbtowc+0x16>
 800e0aa:	f06f 0001 	mvn.w	r0, #1
 800e0ae:	e7f8      	b.n	800e0a2 <__ascii_mbtowc+0x16>

0800e0b0 <__ascii_wctomb>:
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	4608      	mov	r0, r1
 800e0b4:	b141      	cbz	r1, 800e0c8 <__ascii_wctomb+0x18>
 800e0b6:	2aff      	cmp	r2, #255	@ 0xff
 800e0b8:	d904      	bls.n	800e0c4 <__ascii_wctomb+0x14>
 800e0ba:	228a      	movs	r2, #138	@ 0x8a
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c2:	4770      	bx	lr
 800e0c4:	700a      	strb	r2, [r1, #0]
 800e0c6:	2001      	movs	r0, #1
 800e0c8:	4770      	bx	lr
	...

0800e0cc <fiprintf>:
 800e0cc:	b40e      	push	{r1, r2, r3}
 800e0ce:	b503      	push	{r0, r1, lr}
 800e0d0:	4601      	mov	r1, r0
 800e0d2:	ab03      	add	r3, sp, #12
 800e0d4:	4805      	ldr	r0, [pc, #20]	@ (800e0ec <fiprintf+0x20>)
 800e0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0da:	6800      	ldr	r0, [r0, #0]
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	f7ff fd4b 	bl	800db78 <_vfiprintf_r>
 800e0e2:	b002      	add	sp, #8
 800e0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0e8:	b003      	add	sp, #12
 800e0ea:	4770      	bx	lr
 800e0ec:	2000001c 	.word	0x2000001c

0800e0f0 <abort>:
 800e0f0:	b508      	push	{r3, lr}
 800e0f2:	2006      	movs	r0, #6
 800e0f4:	f000 f82c 	bl	800e150 <raise>
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	f7f4 fedb 	bl	8002eb4 <_exit>

0800e0fe <_raise_r>:
 800e0fe:	291f      	cmp	r1, #31
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4605      	mov	r5, r0
 800e104:	460c      	mov	r4, r1
 800e106:	d904      	bls.n	800e112 <_raise_r+0x14>
 800e108:	2316      	movs	r3, #22
 800e10a:	6003      	str	r3, [r0, #0]
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	bd38      	pop	{r3, r4, r5, pc}
 800e112:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e114:	b112      	cbz	r2, 800e11c <_raise_r+0x1e>
 800e116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e11a:	b94b      	cbnz	r3, 800e130 <_raise_r+0x32>
 800e11c:	4628      	mov	r0, r5
 800e11e:	f000 f831 	bl	800e184 <_getpid_r>
 800e122:	4622      	mov	r2, r4
 800e124:	4601      	mov	r1, r0
 800e126:	4628      	mov	r0, r5
 800e128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e12c:	f000 b818 	b.w	800e160 <_kill_r>
 800e130:	2b01      	cmp	r3, #1
 800e132:	d00a      	beq.n	800e14a <_raise_r+0x4c>
 800e134:	1c59      	adds	r1, r3, #1
 800e136:	d103      	bne.n	800e140 <_raise_r+0x42>
 800e138:	2316      	movs	r3, #22
 800e13a:	6003      	str	r3, [r0, #0]
 800e13c:	2001      	movs	r0, #1
 800e13e:	e7e7      	b.n	800e110 <_raise_r+0x12>
 800e140:	2100      	movs	r1, #0
 800e142:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e146:	4620      	mov	r0, r4
 800e148:	4798      	blx	r3
 800e14a:	2000      	movs	r0, #0
 800e14c:	e7e0      	b.n	800e110 <_raise_r+0x12>
	...

0800e150 <raise>:
 800e150:	4b02      	ldr	r3, [pc, #8]	@ (800e15c <raise+0xc>)
 800e152:	4601      	mov	r1, r0
 800e154:	6818      	ldr	r0, [r3, #0]
 800e156:	f7ff bfd2 	b.w	800e0fe <_raise_r>
 800e15a:	bf00      	nop
 800e15c:	2000001c 	.word	0x2000001c

0800e160 <_kill_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	@ (800e180 <_kill_r+0x20>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	f7f4 fe91 	bl	8002e94 <_kill>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d102      	bne.n	800e17c <_kill_r+0x1c>
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	b103      	cbz	r3, 800e17c <_kill_r+0x1c>
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	2000507c 	.word	0x2000507c

0800e184 <_getpid_r>:
 800e184:	f7f4 be7e 	b.w	8002e84 <_getpid>

0800e188 <atan2>:
 800e188:	f000 b902 	b.w	800e390 <__ieee754_atan2>

0800e18c <sqrt>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	ed2d 8b02 	vpush	{d8}
 800e192:	ec55 4b10 	vmov	r4, r5, d0
 800e196:	f000 f825 	bl	800e1e4 <__ieee754_sqrt>
 800e19a:	4622      	mov	r2, r4
 800e19c:	462b      	mov	r3, r5
 800e19e:	4620      	mov	r0, r4
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e1a6:	eef0 8a60 	vmov.f32	s17, s1
 800e1aa:	f7f2 fcdf 	bl	8000b6c <__aeabi_dcmpun>
 800e1ae:	b990      	cbnz	r0, 800e1d6 <sqrt+0x4a>
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7f2 fcb0 	bl	8000b1c <__aeabi_dcmplt>
 800e1bc:	b158      	cbz	r0, 800e1d6 <sqrt+0x4a>
 800e1be:	f7fe f9a3 	bl	800c508 <__errno>
 800e1c2:	2321      	movs	r3, #33	@ 0x21
 800e1c4:	6003      	str	r3, [r0, #0]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	f7f2 fb5d 	bl	800088c <__aeabi_ddiv>
 800e1d2:	ec41 0b18 	vmov	d8, r0, r1
 800e1d6:	eeb0 0a48 	vmov.f32	s0, s16
 800e1da:	eef0 0a68 	vmov.f32	s1, s17
 800e1de:	ecbd 8b02 	vpop	{d8}
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}

0800e1e4 <__ieee754_sqrt>:
 800e1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e8:	4a66      	ldr	r2, [pc, #408]	@ (800e384 <__ieee754_sqrt+0x1a0>)
 800e1ea:	ec55 4b10 	vmov	r4, r5, d0
 800e1ee:	43aa      	bics	r2, r5
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	d110      	bne.n	800e218 <__ieee754_sqrt+0x34>
 800e1f6:	4622      	mov	r2, r4
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	f7f2 fa1c 	bl	8000638 <__aeabi_dmul>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4620      	mov	r0, r4
 800e206:	4629      	mov	r1, r5
 800e208:	f7f2 f860 	bl	80002cc <__adddf3>
 800e20c:	4604      	mov	r4, r0
 800e20e:	460d      	mov	r5, r1
 800e210:	ec45 4b10 	vmov	d0, r4, r5
 800e214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e218:	2d00      	cmp	r5, #0
 800e21a:	dc0e      	bgt.n	800e23a <__ieee754_sqrt+0x56>
 800e21c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e220:	4322      	orrs	r2, r4
 800e222:	d0f5      	beq.n	800e210 <__ieee754_sqrt+0x2c>
 800e224:	b19d      	cbz	r5, 800e24e <__ieee754_sqrt+0x6a>
 800e226:	4622      	mov	r2, r4
 800e228:	4620      	mov	r0, r4
 800e22a:	4629      	mov	r1, r5
 800e22c:	f7f2 f84c 	bl	80002c8 <__aeabi_dsub>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	f7f2 fb2a 	bl	800088c <__aeabi_ddiv>
 800e238:	e7e8      	b.n	800e20c <__ieee754_sqrt+0x28>
 800e23a:	152a      	asrs	r2, r5, #20
 800e23c:	d115      	bne.n	800e26a <__ieee754_sqrt+0x86>
 800e23e:	2000      	movs	r0, #0
 800e240:	e009      	b.n	800e256 <__ieee754_sqrt+0x72>
 800e242:	0acb      	lsrs	r3, r1, #11
 800e244:	3a15      	subs	r2, #21
 800e246:	0549      	lsls	r1, r1, #21
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d0fa      	beq.n	800e242 <__ieee754_sqrt+0x5e>
 800e24c:	e7f7      	b.n	800e23e <__ieee754_sqrt+0x5a>
 800e24e:	462a      	mov	r2, r5
 800e250:	e7fa      	b.n	800e248 <__ieee754_sqrt+0x64>
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	3001      	adds	r0, #1
 800e256:	02dc      	lsls	r4, r3, #11
 800e258:	d5fb      	bpl.n	800e252 <__ieee754_sqrt+0x6e>
 800e25a:	1e44      	subs	r4, r0, #1
 800e25c:	1b12      	subs	r2, r2, r4
 800e25e:	f1c0 0420 	rsb	r4, r0, #32
 800e262:	fa21 f404 	lsr.w	r4, r1, r4
 800e266:	4323      	orrs	r3, r4
 800e268:	4081      	lsls	r1, r0
 800e26a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e26e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e276:	07d2      	lsls	r2, r2, #31
 800e278:	bf5c      	itt	pl
 800e27a:	005b      	lslpl	r3, r3, #1
 800e27c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e280:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e284:	bf58      	it	pl
 800e286:	0049      	lslpl	r1, r1, #1
 800e288:	2600      	movs	r6, #0
 800e28a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e28e:	107f      	asrs	r7, r7, #1
 800e290:	0049      	lsls	r1, r1, #1
 800e292:	2016      	movs	r0, #22
 800e294:	4632      	mov	r2, r6
 800e296:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e29a:	1915      	adds	r5, r2, r4
 800e29c:	429d      	cmp	r5, r3
 800e29e:	bfde      	ittt	le
 800e2a0:	192a      	addle	r2, r5, r4
 800e2a2:	1b5b      	suble	r3, r3, r5
 800e2a4:	1936      	addle	r6, r6, r4
 800e2a6:	0fcd      	lsrs	r5, r1, #31
 800e2a8:	3801      	subs	r0, #1
 800e2aa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e2ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e2b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e2b6:	d1f0      	bne.n	800e29a <__ieee754_sqrt+0xb6>
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	2420      	movs	r4, #32
 800e2bc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	eb0c 0e00 	add.w	lr, ip, r0
 800e2c6:	dc02      	bgt.n	800e2ce <__ieee754_sqrt+0xea>
 800e2c8:	d113      	bne.n	800e2f2 <__ieee754_sqrt+0x10e>
 800e2ca:	458e      	cmp	lr, r1
 800e2cc:	d811      	bhi.n	800e2f2 <__ieee754_sqrt+0x10e>
 800e2ce:	f1be 0f00 	cmp.w	lr, #0
 800e2d2:	eb0e 000c 	add.w	r0, lr, ip
 800e2d6:	da3f      	bge.n	800e358 <__ieee754_sqrt+0x174>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	db3d      	blt.n	800e358 <__ieee754_sqrt+0x174>
 800e2dc:	f102 0801 	add.w	r8, r2, #1
 800e2e0:	1a9b      	subs	r3, r3, r2
 800e2e2:	458e      	cmp	lr, r1
 800e2e4:	bf88      	it	hi
 800e2e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e2ea:	eba1 010e 	sub.w	r1, r1, lr
 800e2ee:	4465      	add	r5, ip
 800e2f0:	4642      	mov	r2, r8
 800e2f2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e2f6:	3c01      	subs	r4, #1
 800e2f8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e2fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e300:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e304:	d1dc      	bne.n	800e2c0 <__ieee754_sqrt+0xdc>
 800e306:	4319      	orrs	r1, r3
 800e308:	d01b      	beq.n	800e342 <__ieee754_sqrt+0x15e>
 800e30a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800e388 <__ieee754_sqrt+0x1a4>
 800e30e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800e38c <__ieee754_sqrt+0x1a8>
 800e312:	e9da 0100 	ldrd	r0, r1, [sl]
 800e316:	e9db 2300 	ldrd	r2, r3, [fp]
 800e31a:	f7f1 ffd5 	bl	80002c8 <__aeabi_dsub>
 800e31e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	4640      	mov	r0, r8
 800e328:	4649      	mov	r1, r9
 800e32a:	f7f2 fc01 	bl	8000b30 <__aeabi_dcmple>
 800e32e:	b140      	cbz	r0, 800e342 <__ieee754_sqrt+0x15e>
 800e330:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e334:	e9da 0100 	ldrd	r0, r1, [sl]
 800e338:	e9db 2300 	ldrd	r2, r3, [fp]
 800e33c:	d10e      	bne.n	800e35c <__ieee754_sqrt+0x178>
 800e33e:	3601      	adds	r6, #1
 800e340:	4625      	mov	r5, r4
 800e342:	1073      	asrs	r3, r6, #1
 800e344:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e348:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e34c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800e350:	086b      	lsrs	r3, r5, #1
 800e352:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800e356:	e759      	b.n	800e20c <__ieee754_sqrt+0x28>
 800e358:	4690      	mov	r8, r2
 800e35a:	e7c1      	b.n	800e2e0 <__ieee754_sqrt+0xfc>
 800e35c:	f7f1 ffb6 	bl	80002cc <__adddf3>
 800e360:	e9da 8900 	ldrd	r8, r9, [sl]
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	4640      	mov	r0, r8
 800e36a:	4649      	mov	r1, r9
 800e36c:	f7f2 fbd6 	bl	8000b1c <__aeabi_dcmplt>
 800e370:	b120      	cbz	r0, 800e37c <__ieee754_sqrt+0x198>
 800e372:	1cab      	adds	r3, r5, #2
 800e374:	bf08      	it	eq
 800e376:	3601      	addeq	r6, #1
 800e378:	3502      	adds	r5, #2
 800e37a:	e7e2      	b.n	800e342 <__ieee754_sqrt+0x15e>
 800e37c:	1c6b      	adds	r3, r5, #1
 800e37e:	f023 0501 	bic.w	r5, r3, #1
 800e382:	e7de      	b.n	800e342 <__ieee754_sqrt+0x15e>
 800e384:	7ff00000 	.word	0x7ff00000
 800e388:	0800f210 	.word	0x0800f210
 800e38c:	0800f208 	.word	0x0800f208

0800e390 <__ieee754_atan2>:
 800e390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e394:	ec57 6b11 	vmov	r6, r7, d1
 800e398:	4273      	negs	r3, r6
 800e39a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e518 <__ieee754_atan2+0x188>
 800e39e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e3a2:	4333      	orrs	r3, r6
 800e3a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e3a8:	4543      	cmp	r3, r8
 800e3aa:	ec51 0b10 	vmov	r0, r1, d0
 800e3ae:	4635      	mov	r5, r6
 800e3b0:	d809      	bhi.n	800e3c6 <__ieee754_atan2+0x36>
 800e3b2:	4244      	negs	r4, r0
 800e3b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e3b8:	4304      	orrs	r4, r0
 800e3ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e3be:	4544      	cmp	r4, r8
 800e3c0:	468e      	mov	lr, r1
 800e3c2:	4681      	mov	r9, r0
 800e3c4:	d907      	bls.n	800e3d6 <__ieee754_atan2+0x46>
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	463b      	mov	r3, r7
 800e3ca:	f7f1 ff7f 	bl	80002cc <__adddf3>
 800e3ce:	ec41 0b10 	vmov	d0, r0, r1
 800e3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e3da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e3de:	4334      	orrs	r4, r6
 800e3e0:	d103      	bne.n	800e3ea <__ieee754_atan2+0x5a>
 800e3e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e6:	f000 b89b 	b.w	800e520 <atan>
 800e3ea:	17bc      	asrs	r4, r7, #30
 800e3ec:	f004 0402 	and.w	r4, r4, #2
 800e3f0:	ea53 0909 	orrs.w	r9, r3, r9
 800e3f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e3f8:	d107      	bne.n	800e40a <__ieee754_atan2+0x7a>
 800e3fa:	2c02      	cmp	r4, #2
 800e3fc:	d05f      	beq.n	800e4be <__ieee754_atan2+0x12e>
 800e3fe:	2c03      	cmp	r4, #3
 800e400:	d1e5      	bne.n	800e3ce <__ieee754_atan2+0x3e>
 800e402:	a143      	add	r1, pc, #268	@ (adr r1, 800e510 <__ieee754_atan2+0x180>)
 800e404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e408:	e7e1      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e40a:	4315      	orrs	r5, r2
 800e40c:	d106      	bne.n	800e41c <__ieee754_atan2+0x8c>
 800e40e:	f1be 0f00 	cmp.w	lr, #0
 800e412:	db5f      	blt.n	800e4d4 <__ieee754_atan2+0x144>
 800e414:	a136      	add	r1, pc, #216	@ (adr r1, 800e4f0 <__ieee754_atan2+0x160>)
 800e416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e41a:	e7d8      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e41c:	4542      	cmp	r2, r8
 800e41e:	d10f      	bne.n	800e440 <__ieee754_atan2+0xb0>
 800e420:	4293      	cmp	r3, r2
 800e422:	f104 34ff 	add.w	r4, r4, #4294967295
 800e426:	d107      	bne.n	800e438 <__ieee754_atan2+0xa8>
 800e428:	2c02      	cmp	r4, #2
 800e42a:	d84c      	bhi.n	800e4c6 <__ieee754_atan2+0x136>
 800e42c:	4b36      	ldr	r3, [pc, #216]	@ (800e508 <__ieee754_atan2+0x178>)
 800e42e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e432:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e436:	e7ca      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e438:	2c02      	cmp	r4, #2
 800e43a:	d848      	bhi.n	800e4ce <__ieee754_atan2+0x13e>
 800e43c:	4b33      	ldr	r3, [pc, #204]	@ (800e50c <__ieee754_atan2+0x17c>)
 800e43e:	e7f6      	b.n	800e42e <__ieee754_atan2+0x9e>
 800e440:	4543      	cmp	r3, r8
 800e442:	d0e4      	beq.n	800e40e <__ieee754_atan2+0x7e>
 800e444:	1a9b      	subs	r3, r3, r2
 800e446:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e44a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e44e:	da1e      	bge.n	800e48e <__ieee754_atan2+0xfe>
 800e450:	2f00      	cmp	r7, #0
 800e452:	da01      	bge.n	800e458 <__ieee754_atan2+0xc8>
 800e454:	323c      	adds	r2, #60	@ 0x3c
 800e456:	db1e      	blt.n	800e496 <__ieee754_atan2+0x106>
 800e458:	4632      	mov	r2, r6
 800e45a:	463b      	mov	r3, r7
 800e45c:	f7f2 fa16 	bl	800088c <__aeabi_ddiv>
 800e460:	ec41 0b10 	vmov	d0, r0, r1
 800e464:	f000 f9f4 	bl	800e850 <fabs>
 800e468:	f000 f85a 	bl	800e520 <atan>
 800e46c:	ec51 0b10 	vmov	r0, r1, d0
 800e470:	2c01      	cmp	r4, #1
 800e472:	d013      	beq.n	800e49c <__ieee754_atan2+0x10c>
 800e474:	2c02      	cmp	r4, #2
 800e476:	d015      	beq.n	800e4a4 <__ieee754_atan2+0x114>
 800e478:	2c00      	cmp	r4, #0
 800e47a:	d0a8      	beq.n	800e3ce <__ieee754_atan2+0x3e>
 800e47c:	a318      	add	r3, pc, #96	@ (adr r3, 800e4e0 <__ieee754_atan2+0x150>)
 800e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e482:	f7f1 ff21 	bl	80002c8 <__aeabi_dsub>
 800e486:	a318      	add	r3, pc, #96	@ (adr r3, 800e4e8 <__ieee754_atan2+0x158>)
 800e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48c:	e014      	b.n	800e4b8 <__ieee754_atan2+0x128>
 800e48e:	a118      	add	r1, pc, #96	@ (adr r1, 800e4f0 <__ieee754_atan2+0x160>)
 800e490:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e494:	e7ec      	b.n	800e470 <__ieee754_atan2+0xe0>
 800e496:	2000      	movs	r0, #0
 800e498:	2100      	movs	r1, #0
 800e49a:	e7e9      	b.n	800e470 <__ieee754_atan2+0xe0>
 800e49c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	e794      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e4a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e4e0 <__ieee754_atan2+0x150>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f7f1 ff0d 	bl	80002c8 <__aeabi_dsub>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	a10d      	add	r1, pc, #52	@ (adr r1, 800e4e8 <__ieee754_atan2+0x158>)
 800e4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b8:	f7f1 ff06 	bl	80002c8 <__aeabi_dsub>
 800e4bc:	e787      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e4be:	a10a      	add	r1, pc, #40	@ (adr r1, 800e4e8 <__ieee754_atan2+0x158>)
 800e4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c4:	e783      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e4c6:	a10c      	add	r1, pc, #48	@ (adr r1, 800e4f8 <__ieee754_atan2+0x168>)
 800e4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4cc:	e77f      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	e77c      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e4d4:	a10a      	add	r1, pc, #40	@ (adr r1, 800e500 <__ieee754_atan2+0x170>)
 800e4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4da:	e778      	b.n	800e3ce <__ieee754_atan2+0x3e>
 800e4dc:	f3af 8000 	nop.w
 800e4e0:	33145c07 	.word	0x33145c07
 800e4e4:	3ca1a626 	.word	0x3ca1a626
 800e4e8:	54442d18 	.word	0x54442d18
 800e4ec:	400921fb 	.word	0x400921fb
 800e4f0:	54442d18 	.word	0x54442d18
 800e4f4:	3ff921fb 	.word	0x3ff921fb
 800e4f8:	54442d18 	.word	0x54442d18
 800e4fc:	3fe921fb 	.word	0x3fe921fb
 800e500:	54442d18 	.word	0x54442d18
 800e504:	bff921fb 	.word	0xbff921fb
 800e508:	0800f230 	.word	0x0800f230
 800e50c:	0800f218 	.word	0x0800f218
 800e510:	54442d18 	.word	0x54442d18
 800e514:	c00921fb 	.word	0xc00921fb
 800e518:	7ff00000 	.word	0x7ff00000
 800e51c:	00000000 	.word	0x00000000

0800e520 <atan>:
 800e520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	ec55 4b10 	vmov	r4, r5, d0
 800e528:	4bbf      	ldr	r3, [pc, #764]	@ (800e828 <atan+0x308>)
 800e52a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e52e:	429e      	cmp	r6, r3
 800e530:	46ab      	mov	fp, r5
 800e532:	d918      	bls.n	800e566 <atan+0x46>
 800e534:	4bbd      	ldr	r3, [pc, #756]	@ (800e82c <atan+0x30c>)
 800e536:	429e      	cmp	r6, r3
 800e538:	d801      	bhi.n	800e53e <atan+0x1e>
 800e53a:	d109      	bne.n	800e550 <atan+0x30>
 800e53c:	b144      	cbz	r4, 800e550 <atan+0x30>
 800e53e:	4622      	mov	r2, r4
 800e540:	462b      	mov	r3, r5
 800e542:	4620      	mov	r0, r4
 800e544:	4629      	mov	r1, r5
 800e546:	f7f1 fec1 	bl	80002cc <__adddf3>
 800e54a:	4604      	mov	r4, r0
 800e54c:	460d      	mov	r5, r1
 800e54e:	e006      	b.n	800e55e <atan+0x3e>
 800e550:	f1bb 0f00 	cmp.w	fp, #0
 800e554:	f340 812b 	ble.w	800e7ae <atan+0x28e>
 800e558:	a597      	add	r5, pc, #604	@ (adr r5, 800e7b8 <atan+0x298>)
 800e55a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e55e:	ec45 4b10 	vmov	d0, r4, r5
 800e562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e566:	4bb2      	ldr	r3, [pc, #712]	@ (800e830 <atan+0x310>)
 800e568:	429e      	cmp	r6, r3
 800e56a:	d813      	bhi.n	800e594 <atan+0x74>
 800e56c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e570:	429e      	cmp	r6, r3
 800e572:	d80c      	bhi.n	800e58e <atan+0x6e>
 800e574:	a392      	add	r3, pc, #584	@ (adr r3, 800e7c0 <atan+0x2a0>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	4620      	mov	r0, r4
 800e57c:	4629      	mov	r1, r5
 800e57e:	f7f1 fea5 	bl	80002cc <__adddf3>
 800e582:	4bac      	ldr	r3, [pc, #688]	@ (800e834 <atan+0x314>)
 800e584:	2200      	movs	r2, #0
 800e586:	f7f2 fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d1e7      	bne.n	800e55e <atan+0x3e>
 800e58e:	f04f 3aff 	mov.w	sl, #4294967295
 800e592:	e029      	b.n	800e5e8 <atan+0xc8>
 800e594:	f000 f95c 	bl	800e850 <fabs>
 800e598:	4ba7      	ldr	r3, [pc, #668]	@ (800e838 <atan+0x318>)
 800e59a:	429e      	cmp	r6, r3
 800e59c:	ec55 4b10 	vmov	r4, r5, d0
 800e5a0:	f200 80bc 	bhi.w	800e71c <atan+0x1fc>
 800e5a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e5a8:	429e      	cmp	r6, r3
 800e5aa:	f200 809e 	bhi.w	800e6ea <atan+0x1ca>
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	462b      	mov	r3, r5
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	f7f1 fe89 	bl	80002cc <__adddf3>
 800e5ba:	4b9e      	ldr	r3, [pc, #632]	@ (800e834 <atan+0x314>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f7f1 fe83 	bl	80002c8 <__aeabi_dsub>
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	f7f1 fe7c 	bl	80002cc <__adddf3>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	4630      	mov	r0, r6
 800e5da:	4639      	mov	r1, r7
 800e5dc:	f7f2 f956 	bl	800088c <__aeabi_ddiv>
 800e5e0:	f04f 0a00 	mov.w	sl, #0
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	460d      	mov	r5, r1
 800e5e8:	4622      	mov	r2, r4
 800e5ea:	462b      	mov	r3, r5
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f7f2 f822 	bl	8000638 <__aeabi_dmul>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	4680      	mov	r8, r0
 800e5fa:	4689      	mov	r9, r1
 800e5fc:	f7f2 f81c 	bl	8000638 <__aeabi_dmul>
 800e600:	a371      	add	r3, pc, #452	@ (adr r3, 800e7c8 <atan+0x2a8>)
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	4606      	mov	r6, r0
 800e608:	460f      	mov	r7, r1
 800e60a:	f7f2 f815 	bl	8000638 <__aeabi_dmul>
 800e60e:	a370      	add	r3, pc, #448	@ (adr r3, 800e7d0 <atan+0x2b0>)
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	f7f1 fe5a 	bl	80002cc <__adddf3>
 800e618:	4632      	mov	r2, r6
 800e61a:	463b      	mov	r3, r7
 800e61c:	f7f2 f80c 	bl	8000638 <__aeabi_dmul>
 800e620:	a36d      	add	r3, pc, #436	@ (adr r3, 800e7d8 <atan+0x2b8>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f7f1 fe51 	bl	80002cc <__adddf3>
 800e62a:	4632      	mov	r2, r6
 800e62c:	463b      	mov	r3, r7
 800e62e:	f7f2 f803 	bl	8000638 <__aeabi_dmul>
 800e632:	a36b      	add	r3, pc, #428	@ (adr r3, 800e7e0 <atan+0x2c0>)
 800e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e638:	f7f1 fe48 	bl	80002cc <__adddf3>
 800e63c:	4632      	mov	r2, r6
 800e63e:	463b      	mov	r3, r7
 800e640:	f7f1 fffa 	bl	8000638 <__aeabi_dmul>
 800e644:	a368      	add	r3, pc, #416	@ (adr r3, 800e7e8 <atan+0x2c8>)
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f7f1 fe3f 	bl	80002cc <__adddf3>
 800e64e:	4632      	mov	r2, r6
 800e650:	463b      	mov	r3, r7
 800e652:	f7f1 fff1 	bl	8000638 <__aeabi_dmul>
 800e656:	a366      	add	r3, pc, #408	@ (adr r3, 800e7f0 <atan+0x2d0>)
 800e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65c:	f7f1 fe36 	bl	80002cc <__adddf3>
 800e660:	4642      	mov	r2, r8
 800e662:	464b      	mov	r3, r9
 800e664:	f7f1 ffe8 	bl	8000638 <__aeabi_dmul>
 800e668:	a363      	add	r3, pc, #396	@ (adr r3, 800e7f8 <atan+0x2d8>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	4680      	mov	r8, r0
 800e670:	4689      	mov	r9, r1
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f1 ffdf 	bl	8000638 <__aeabi_dmul>
 800e67a:	a361      	add	r3, pc, #388	@ (adr r3, 800e800 <atan+0x2e0>)
 800e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e680:	f7f1 fe22 	bl	80002c8 <__aeabi_dsub>
 800e684:	4632      	mov	r2, r6
 800e686:	463b      	mov	r3, r7
 800e688:	f7f1 ffd6 	bl	8000638 <__aeabi_dmul>
 800e68c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e808 <atan+0x2e8>)
 800e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e692:	f7f1 fe19 	bl	80002c8 <__aeabi_dsub>
 800e696:	4632      	mov	r2, r6
 800e698:	463b      	mov	r3, r7
 800e69a:	f7f1 ffcd 	bl	8000638 <__aeabi_dmul>
 800e69e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e810 <atan+0x2f0>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f7f1 fe10 	bl	80002c8 <__aeabi_dsub>
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	f7f1 ffc4 	bl	8000638 <__aeabi_dmul>
 800e6b0:	a359      	add	r3, pc, #356	@ (adr r3, 800e818 <atan+0x2f8>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	f7f1 fe07 	bl	80002c8 <__aeabi_dsub>
 800e6ba:	4632      	mov	r2, r6
 800e6bc:	463b      	mov	r3, r7
 800e6be:	f7f1 ffbb 	bl	8000638 <__aeabi_dmul>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	f7f1 fdff 	bl	80002cc <__adddf3>
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	f7f1 ffb1 	bl	8000638 <__aeabi_dmul>
 800e6d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	d148      	bne.n	800e772 <atan+0x252>
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	f7f1 fdf0 	bl	80002c8 <__aeabi_dsub>
 800e6e8:	e72f      	b.n	800e54a <atan+0x2a>
 800e6ea:	4b52      	ldr	r3, [pc, #328]	@ (800e834 <atan+0x314>)
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	f7f1 fde9 	bl	80002c8 <__aeabi_dsub>
 800e6f6:	4b4f      	ldr	r3, [pc, #316]	@ (800e834 <atan+0x314>)
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	460f      	mov	r7, r1
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	4620      	mov	r0, r4
 800e700:	4629      	mov	r1, r5
 800e702:	f7f1 fde3 	bl	80002cc <__adddf3>
 800e706:	4602      	mov	r2, r0
 800e708:	460b      	mov	r3, r1
 800e70a:	4630      	mov	r0, r6
 800e70c:	4639      	mov	r1, r7
 800e70e:	f7f2 f8bd 	bl	800088c <__aeabi_ddiv>
 800e712:	f04f 0a01 	mov.w	sl, #1
 800e716:	4604      	mov	r4, r0
 800e718:	460d      	mov	r5, r1
 800e71a:	e765      	b.n	800e5e8 <atan+0xc8>
 800e71c:	4b47      	ldr	r3, [pc, #284]	@ (800e83c <atan+0x31c>)
 800e71e:	429e      	cmp	r6, r3
 800e720:	d21c      	bcs.n	800e75c <atan+0x23c>
 800e722:	4b47      	ldr	r3, [pc, #284]	@ (800e840 <atan+0x320>)
 800e724:	2200      	movs	r2, #0
 800e726:	4620      	mov	r0, r4
 800e728:	4629      	mov	r1, r5
 800e72a:	f7f1 fdcd 	bl	80002c8 <__aeabi_dsub>
 800e72e:	4b44      	ldr	r3, [pc, #272]	@ (800e840 <atan+0x320>)
 800e730:	4606      	mov	r6, r0
 800e732:	460f      	mov	r7, r1
 800e734:	2200      	movs	r2, #0
 800e736:	4620      	mov	r0, r4
 800e738:	4629      	mov	r1, r5
 800e73a:	f7f1 ff7d 	bl	8000638 <__aeabi_dmul>
 800e73e:	4b3d      	ldr	r3, [pc, #244]	@ (800e834 <atan+0x314>)
 800e740:	2200      	movs	r2, #0
 800e742:	f7f1 fdc3 	bl	80002cc <__adddf3>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	4630      	mov	r0, r6
 800e74c:	4639      	mov	r1, r7
 800e74e:	f7f2 f89d 	bl	800088c <__aeabi_ddiv>
 800e752:	f04f 0a02 	mov.w	sl, #2
 800e756:	4604      	mov	r4, r0
 800e758:	460d      	mov	r5, r1
 800e75a:	e745      	b.n	800e5e8 <atan+0xc8>
 800e75c:	4622      	mov	r2, r4
 800e75e:	462b      	mov	r3, r5
 800e760:	4938      	ldr	r1, [pc, #224]	@ (800e844 <atan+0x324>)
 800e762:	2000      	movs	r0, #0
 800e764:	f7f2 f892 	bl	800088c <__aeabi_ddiv>
 800e768:	f04f 0a03 	mov.w	sl, #3
 800e76c:	4604      	mov	r4, r0
 800e76e:	460d      	mov	r5, r1
 800e770:	e73a      	b.n	800e5e8 <atan+0xc8>
 800e772:	4b35      	ldr	r3, [pc, #212]	@ (800e848 <atan+0x328>)
 800e774:	4e35      	ldr	r6, [pc, #212]	@ (800e84c <atan+0x32c>)
 800e776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	f7f1 fda3 	bl	80002c8 <__aeabi_dsub>
 800e782:	4622      	mov	r2, r4
 800e784:	462b      	mov	r3, r5
 800e786:	f7f1 fd9f 	bl	80002c8 <__aeabi_dsub>
 800e78a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e78e:	4602      	mov	r2, r0
 800e790:	460b      	mov	r3, r1
 800e792:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e796:	f7f1 fd97 	bl	80002c8 <__aeabi_dsub>
 800e79a:	f1bb 0f00 	cmp.w	fp, #0
 800e79e:	4604      	mov	r4, r0
 800e7a0:	460d      	mov	r5, r1
 800e7a2:	f6bf aedc 	bge.w	800e55e <atan+0x3e>
 800e7a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7aa:	461d      	mov	r5, r3
 800e7ac:	e6d7      	b.n	800e55e <atan+0x3e>
 800e7ae:	a51c      	add	r5, pc, #112	@ (adr r5, 800e820 <atan+0x300>)
 800e7b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e7b4:	e6d3      	b.n	800e55e <atan+0x3e>
 800e7b6:	bf00      	nop
 800e7b8:	54442d18 	.word	0x54442d18
 800e7bc:	3ff921fb 	.word	0x3ff921fb
 800e7c0:	8800759c 	.word	0x8800759c
 800e7c4:	7e37e43c 	.word	0x7e37e43c
 800e7c8:	e322da11 	.word	0xe322da11
 800e7cc:	3f90ad3a 	.word	0x3f90ad3a
 800e7d0:	24760deb 	.word	0x24760deb
 800e7d4:	3fa97b4b 	.word	0x3fa97b4b
 800e7d8:	a0d03d51 	.word	0xa0d03d51
 800e7dc:	3fb10d66 	.word	0x3fb10d66
 800e7e0:	c54c206e 	.word	0xc54c206e
 800e7e4:	3fb745cd 	.word	0x3fb745cd
 800e7e8:	920083ff 	.word	0x920083ff
 800e7ec:	3fc24924 	.word	0x3fc24924
 800e7f0:	5555550d 	.word	0x5555550d
 800e7f4:	3fd55555 	.word	0x3fd55555
 800e7f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e7fc:	bfa2b444 	.word	0xbfa2b444
 800e800:	52defd9a 	.word	0x52defd9a
 800e804:	3fadde2d 	.word	0x3fadde2d
 800e808:	af749a6d 	.word	0xaf749a6d
 800e80c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e810:	fe231671 	.word	0xfe231671
 800e814:	3fbc71c6 	.word	0x3fbc71c6
 800e818:	9998ebc4 	.word	0x9998ebc4
 800e81c:	3fc99999 	.word	0x3fc99999
 800e820:	54442d18 	.word	0x54442d18
 800e824:	bff921fb 	.word	0xbff921fb
 800e828:	440fffff 	.word	0x440fffff
 800e82c:	7ff00000 	.word	0x7ff00000
 800e830:	3fdbffff 	.word	0x3fdbffff
 800e834:	3ff00000 	.word	0x3ff00000
 800e838:	3ff2ffff 	.word	0x3ff2ffff
 800e83c:	40038000 	.word	0x40038000
 800e840:	3ff80000 	.word	0x3ff80000
 800e844:	bff00000 	.word	0xbff00000
 800e848:	0800f248 	.word	0x0800f248
 800e84c:	0800f268 	.word	0x0800f268

0800e850 <fabs>:
 800e850:	ec51 0b10 	vmov	r0, r1, d0
 800e854:	4602      	mov	r2, r0
 800e856:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e85a:	ec43 2b10 	vmov	d0, r2, r3
 800e85e:	4770      	bx	lr

0800e860 <_init>:
 800e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e862:	bf00      	nop
 800e864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e866:	bc08      	pop	{r3}
 800e868:	469e      	mov	lr, r3
 800e86a:	4770      	bx	lr

0800e86c <_fini>:
 800e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86e:	bf00      	nop
 800e870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e872:	bc08      	pop	{r3}
 800e874:	469e      	mov	lr, r3
 800e876:	4770      	bx	lr
