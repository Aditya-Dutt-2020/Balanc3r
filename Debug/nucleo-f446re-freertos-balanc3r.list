
nucleo-f446re-freertos-balanc3r.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a020  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800a1f0  0800a1f0  0000b1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ec  0800a7ec  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a7ec  0800a7ec  0000b7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f4  0800a7f4  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f4  0800a7f4  0000b7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7f8  0800a7f8  0000b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a7fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  200001d8  0800a9d4  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e60  0800a9d4  0000ce60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c308  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0a  00000000  00000000  00028510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  0002c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ca  00000000  00000000  0002d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256ef  00000000  00000000  0002eaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3d7  00000000  00000000  000541d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfe58  00000000  00000000  000705b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ac  00000000  00000000  0015044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00157af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1d8 	.word	0x0800a1d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a1d8 	.word	0x0800a1d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
	uint8_t buf[14];
	configIMU(buf);
 8000f1c:	f107 0320 	add.w	r3, r7, #32
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f975 	bl	8001210 <configIMU>
		osDelay(10000);
	}

	for(;;)
	{
		vec3 vals = getAccelVals(buf);
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f828 	bl	8000f80 <getAccelVals>
 8000f30:	eeb0 5a40 	vmov.f32	s10, s0
 8000f34:	eef0 5a60 	vmov.f32	s11, s1
 8000f38:	eeb0 6a41 	vmov.f32	s12, s2
 8000f3c:	eef0 6a61 	vmov.f32	s13, s3
 8000f40:	eeb0 7a42 	vmov.f32	s14, s4
 8000f44:	eef0 7a62 	vmov.f32	s15, s5
 8000f48:	ed87 5b02 	vstr	d5, [r7, #8]
 8000f4c:	ed87 6b04 	vstr	d6, [r7, #16]
 8000f50:	ed87 7b06 	vstr	d7, [r7, #24]
		printf("x:%.5f\ty:%.5f\tz:%.5f\n", vals.x, vals.y, vals.z);
 8000f54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f64:	e9cd 2300 	strd	r2, r3, [sp]
 8000f68:	4622      	mov	r2, r4
 8000f6a:	462b      	mov	r3, r5
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <StartDefaultTask+0x68>)
 8000f6e:	f007 f8fb 	bl	8008168 <iprintf>
		osDelay(30);
 8000f72:	201e      	movs	r0, #30
 8000f74:	f003 fe2f 	bl	8004bd6 <osDelay>
	{
 8000f78:	bf00      	nop
 8000f7a:	e7d4      	b.n	8000f26 <StartDefaultTask+0x12>
 8000f7c:	0800a1f0 	.word	0x0800a1f0

08000f80 <getAccelVals>:
	}

	return vals;
}

vec3 getAccelVals(uint8_t* buf) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b098      	sub	sp, #96	@ 0x60
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	61f8      	str	r0, [r7, #28]
	vec3 vals = {0.0, 0.0, 0.0};
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	HAL_StatusTypeDef ret;
	buf[0] = REG_VALS_START;
 8000fac:	223b      	movs	r2, #59	@ 0x3b
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 1, customTimeout);
 8000fb2:	23d0      	movs	r3, #208	@ 0xd0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	2364      	movs	r3, #100	@ 0x64
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	4890      	ldr	r0, [pc, #576]	@ (8001200 <getAccelVals+0x280>)
 8000fc0:	f001 fa2e 	bl	8002420 <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (ret != HAL_OK) {
 8000fca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <getAccelVals+0x5a>
		printf("Error TX\n");
 8000fd2:	488c      	ldr	r0, [pc, #560]	@ (8001204 <getAccelVals+0x284>)
 8000fd4:	f007 f930 	bl	8008238 <puts>
 8000fd8:	e0d5      	b.n	8001186 <getAccelVals+0x206>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buf, 14, customTimeout);
 8000fda:	23d0      	movs	r3, #208	@ 0xd0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2364      	movs	r3, #100	@ 0x64
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	4886      	ldr	r0, [pc, #536]	@ (8001200 <getAccelVals+0x280>)
 8000fe8:	f001 fb18 	bl	800261c <HAL_I2C_Master_Receive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (ret != HAL_OK) {
 8000ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <getAccelVals+0x82>
			printf("Error RX\n");
 8000ffa:	4883      	ldr	r0, [pc, #524]	@ (8001208 <getAccelVals+0x288>)
 8000ffc:	f007 f91c 	bl	8008238 <puts>
 8001000:	e0c1      	b.n	8001186 <getAccelVals+0x206>
		} else {
			int rawAccel = (int16_t)((buf[0] << 8) | buf[1]);
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b21b      	sxth	r3, r3
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	3301      	adds	r3, #1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21b      	sxth	r3, r3
 8001018:	653b      	str	r3, [r7, #80]	@ 0x50
			vals.x = (rawAccel /  ACCEL_LSB_SENS) - AX_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
 800101a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001024:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 800120c <getAccelVals+0x28c>
 8001028:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800102c:	ee16 0a90 	vmov	r0, s13
 8001030:	f7ff faaa 	bl	8000588 <__aeabi_f2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001042:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800120c <getAccelVals+0x28c>
 8001046:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800104a:	ee16 0a90 	vmov	r0, s13
 800104e:	f7ff fa9b 	bl	8000588 <__aeabi_f2d>
 8001052:	a35f      	add	r3, pc, #380	@ (adr r3, 80011d0 <getAccelVals+0x250>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff faee 	bl	8000638 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	a35c      	add	r3, pc, #368	@ (adr r3, 80011d8 <getAccelVals+0x258>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff f92f 	bl	80002cc <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff f927 	bl	80002c8 <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9c7 2308 	strd	r2, r3, [r7, #32]
			rawAccel = (int16_t)((buf[2] << 8) | buf[3]);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3302      	adds	r3, #2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b21b      	sxth	r3, r3
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3303      	adds	r3, #3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	653b      	str	r3, [r7, #80]	@ 0x50
			vals.y = (rawAccel /  ACCEL_LSB_SENS) - AY_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
 800109c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800120c <getAccelVals+0x28c>
 80010aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ae:	ee16 0a90 	vmov	r0, s13
 80010b2:	f7ff fa69 	bl	8000588 <__aeabi_f2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800120c <getAccelVals+0x28c>
 80010c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010cc:	ee16 0a90 	vmov	r0, s13
 80010d0:	f7ff fa5a 	bl	8000588 <__aeabi_f2d>
 80010d4:	a342      	add	r3, pc, #264	@ (adr r3, 80011e0 <getAccelVals+0x260>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff faad 	bl	8000638 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	a340      	add	r3, pc, #256	@ (adr r3, 80011e8 <getAccelVals+0x268>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f8ee 	bl	80002cc <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff f8e6 	bl	80002c8 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			rawAccel = (int16_t)((buf[4] << 8) | buf[5]);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	3304      	adds	r3, #4
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b21b      	sxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	3305      	adds	r3, #5
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	653b      	str	r3, [r7, #80]	@ 0x50
			vals.z = (rawAccel /  ACCEL_LSB_SENS) - AZ_CALIB_OFFSET(rawAccel /  ACCEL_LSB_SENS);
 800111e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800120c <getAccelVals+0x28c>
 800112c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001130:	ee16 0a90 	vmov	r0, s13
 8001134:	f7ff fa28 	bl	8000588 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001146:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800120c <getAccelVals+0x28c>
 800114a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800114e:	ee16 0a90 	vmov	r0, s13
 8001152:	f7ff fa19 	bl	8000588 <__aeabi_f2d>
 8001156:	a326      	add	r3, pc, #152	@ (adr r3, 80011f0 <getAccelVals+0x270>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fa6c 	bl	8000638 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	a323      	add	r3, pc, #140	@ (adr r3, 80011f8 <getAccelVals+0x278>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f8ab 	bl	80002c8 <__aeabi_dsub>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff f8a5 	bl	80002c8 <__aeabi_dsub>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		}
	}

	return vals;
 8001186:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800118a:	f107 0520 	add.w	r5, r7, #32
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001192:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001196:	e884 0003 	stmia.w	r4, {r0, r1}
 800119a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800119e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80011a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80011a6:	ec45 4b15 	vmov	d5, r4, r5
 80011aa:	ec41 0b16 	vmov	d6, r0, r1
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b2:	eeb0 0a45 	vmov.f32	s0, s10
 80011b6:	eef0 0a65 	vmov.f32	s1, s11
 80011ba:	eeb0 1a46 	vmov.f32	s2, s12
 80011be:	eef0 1a66 	vmov.f32	s3, s13
 80011c2:	eeb0 2a47 	vmov.f32	s4, s14
 80011c6:	eef0 2a67 	vmov.f32	s5, s15
 80011ca:	3758      	adds	r7, #88	@ 0x58
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	7c1bda51 	.word	0x7c1bda51
 80011d4:	bf853261 	.word	0xbf853261
 80011d8:	3a7daa50 	.word	0x3a7daa50
 80011dc:	3fb0331e 	.word	0x3fb0331e
 80011e0:	e646f156 	.word	0xe646f156
 80011e4:	bf683f91 	.word	0xbf683f91
 80011e8:	a4a8c155 	.word	0xa4a8c155
 80011ec:	3f93404e 	.word	0x3f93404e
 80011f0:	d4d4024b 	.word	0xd4d4024b
 80011f4:	3f9eb5b2 	.word	0x3f9eb5b2
 80011f8:	ca57a787 	.word	0xca57a787
 80011fc:	3fb9c432 	.word	0x3fb9c432
 8001200:	200001f4 	.word	0x200001f4
 8001204:	0800a208 	.word	0x0800a208
 8001208:	0800a214 	.word	0x0800a214
 800120c:	46000000 	.word	0x46000000

08001210 <configIMU>:
void configIMU(uint8_t* buf) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	buf[0] = 0x6B;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	226b      	movs	r2, #107	@ 0x6b
 800121c:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x01;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 2, customTimeout);
 8001226:	23d0      	movs	r3, #208	@ 0xd0
 8001228:	4619      	mov	r1, r3
 800122a:	2364      	movs	r3, #100	@ 0x64
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2302      	movs	r3, #2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	481d      	ldr	r0, [pc, #116]	@ (80012a8 <configIMU+0x98>)
 8001234:	f001 f8f4 	bl	8002420 <HAL_I2C_Master_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <configIMU+0x3e>
		printf("Error TX Wakeup\n");
 8001242:	481a      	ldr	r0, [pc, #104]	@ (80012ac <configIMU+0x9c>)
 8001244:	f006 fff8 	bl	8008238 <puts>
		osThreadTerminate(NULL);
 8001248:	2000      	movs	r0, #0
 800124a:	f003 fc97 	bl	8004b7c <osThreadTerminate>
	}
	osDelay(100);
 800124e:	2064      	movs	r0, #100	@ 0x64
 8001250:	f003 fcc1 	bl	8004bd6 <osDelay>
	buf[0] = REG_CONFIG;
 8001254:	221a      	movs	r2, #26
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3301      	adds	r3, #1
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	buf[2] = 1 << 3;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3302      	adds	r3, #2
 8001266:	2208      	movs	r2, #8
 8001268:	701a      	strb	r2, [r3, #0]
	buf[3] = 1 << 3;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3303      	adds	r3, #3
 800126e:	2208      	movs	r2, #8
 8001270:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buf, 4, customTimeout);
 8001272:	23d0      	movs	r3, #208	@ 0xd0
 8001274:	4619      	mov	r1, r3
 8001276:	2364      	movs	r3, #100	@ 0x64
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2304      	movs	r3, #4
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <configIMU+0x98>)
 8001280:	f001 f8ce 	bl	8002420 <HAL_I2C_Master_Transmit>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <configIMU+0x8a>
		printf("Error TX Config\n");
 800128e:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <configIMU+0xa0>)
 8001290:	f006 ffd2 	bl	8008238 <puts>
		osThreadTerminate(NULL);
 8001294:	2000      	movs	r0, #0
 8001296:	f003 fc71 	bl	8004b7c <osThreadTerminate>
	}

	printf("Config Wrote Successfully!\n");
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <configIMU+0xa4>)
 800129c:	f006 ffcc 	bl	8008238 <puts>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001f4 	.word	0x200001f4
 80012ac:	0800a220 	.word	0x0800a220
 80012b0:	0800a230 	.word	0x0800a230
 80012b4:	0800a240 	.word	0x0800a240

080012b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012e0:	e000      	b.n	80012e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012ee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f000 fc72 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f81c 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f000 f90a 	bl	800152c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001318:	f000 f8de 	bl	80014d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800131c:	f000 f884 	bl	8001428 <MX_I2C1_Init>
  MX_UART4_Init();
 8001320:	f000 f8b0 	bl	8001484 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001324:	f003 fb4e 	bl	80049c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001328:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <main+0x38>)
 800132a:	2100      	movs	r1, #0
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <main+0x3c>)
 800132e:	f003 fb93 	bl	8004a58 <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <main+0x40>)
 8001336:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001338:	f003 fb68 	bl	8004a0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <main+0x34>
 8001340:	0800a43c 	.word	0x0800a43c
 8001344:	08000f15 	.word	0x08000f15
 8001348:	200002d8 	.word	0x200002d8

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	@ 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f007 f84c 	bl	80083f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <SystemClock_Config+0xd4>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <SystemClock_Config+0xd4>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <SystemClock_Config+0xd4>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <SystemClock_Config+0xd8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001398:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <SystemClock_Config+0xd8>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <SystemClock_Config+0xd8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2310      	movs	r3, #16
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013c0:	2310      	movs	r3, #16
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fa52 	bl	8003884 <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013e6:	f000 f987 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ee:	2302      	movs	r3, #2
 80013f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fec0 	bl	800318c <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001412:	f000 f971 	bl	80016f8 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3750      	adds	r7, #80	@ 0x50
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x50>)
 800142e:	4a13      	ldr	r2, [pc, #76]	@ (800147c <MX_I2C1_Init+0x54>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <MX_I2C1_Init+0x58>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001466:	f000 fe97 	bl	8002198 <HAL_I2C_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001470:	f000 f942 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001f4 	.word	0x200001f4
 800147c:	40005400 	.word	0x40005400
 8001480:	000186a0 	.word	0x000186a0

08001484 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_UART4_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <MX_UART4_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_UART4_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_UART4_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_UART4_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MX_UART4_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_UART4_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_UART4_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_UART4_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_UART4_Init+0x4c>)
 80014bc:	f002 ff72 	bl	80043a4 <HAL_HalfDuplex_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014c6:	f000 f917 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000248 	.word	0x20000248
 80014d4:	40004c00 	.word	0x40004c00

080014d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <MX_USART2_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_USART2_UART_Init+0x4c>)
 8001510:	f002 fef8 	bl	8004304 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 f8ed 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000290 	.word	0x20000290
 8001528:	40004400 	.word	0x40004400

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b51      	ldr	r3, [pc, #324]	@ (800168c <MX_GPIO_Init+0x160>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a50      	ldr	r2, [pc, #320]	@ (800168c <MX_GPIO_Init+0x160>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b4e      	ldr	r3, [pc, #312]	@ (800168c <MX_GPIO_Init+0x160>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b4a      	ldr	r3, [pc, #296]	@ (800168c <MX_GPIO_Init+0x160>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a49      	ldr	r2, [pc, #292]	@ (800168c <MX_GPIO_Init+0x160>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b47      	ldr	r3, [pc, #284]	@ (800168c <MX_GPIO_Init+0x160>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b43      	ldr	r3, [pc, #268]	@ (800168c <MX_GPIO_Init+0x160>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a42      	ldr	r2, [pc, #264]	@ (800168c <MX_GPIO_Init+0x160>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b40      	ldr	r3, [pc, #256]	@ (800168c <MX_GPIO_Init+0x160>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <MX_GPIO_Init+0x160>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <MX_GPIO_Init+0x160>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b39      	ldr	r3, [pc, #228]	@ (800168c <MX_GPIO_Init+0x160>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2160      	movs	r1, #96	@ 0x60
 80015b6:	4836      	ldr	r0, [pc, #216]	@ (8001690 <MX_GPIO_Init+0x164>)
 80015b8:	f000 fdd4 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2120      	movs	r1, #32
 80015c0:	4834      	ldr	r0, [pc, #208]	@ (8001694 <MX_GPIO_Init+0x168>)
 80015c2:	f000 fdcf 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	482e      	ldr	r0, [pc, #184]	@ (8001698 <MX_GPIO_Init+0x16c>)
 80015de:	f000 fc2d 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80015e2:	2360      	movs	r3, #96	@ 0x60
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4825      	ldr	r0, [pc, #148]	@ (8001690 <MX_GPIO_Init+0x164>)
 80015fa:	f000 fc1f 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80015fe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	481f      	ldr	r0, [pc, #124]	@ (8001690 <MX_GPIO_Init+0x164>)
 8001614:	f000 fc12 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001618:	2320      	movs	r3, #32
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001628:	2307      	movs	r3, #7
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4819      	ldr	r0, [pc, #100]	@ (8001698 <MX_GPIO_Init+0x16c>)
 8001634:	f000 fc02 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_GPIO_Init+0x16c>)
 800164c:	f000 fbf6 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001650:	2320      	movs	r3, #32
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	480b      	ldr	r0, [pc, #44]	@ (8001694 <MX_GPIO_Init+0x168>)
 8001668:	f000 fbe8 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800166c:	2340      	movs	r3, #64	@ 0x40
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_GPIO_Init+0x168>)
 8001680:	f000 fbdc 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800

0800169c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e009      	b.n	80016c2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	60ba      	str	r2, [r7, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fdfe 	bl	80012b8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbf1      	blt.n	80016ae <_write+0x12>
  }
  return len;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80016e6:	f000 faa7 	bl	8001c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40001000 	.word	0x40001000

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_MspInit+0x54>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a11      	ldr	r2, [pc, #68]	@ (8001758 <HAL_MspInit+0x54>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_MspInit+0x54>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_MspInit+0x54>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_MspInit+0x54>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_MspInit+0x54>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	210f      	movs	r1, #15
 8001746:	f06f 0001 	mvn.w	r0, #1
 800174a:	f000 fb4d 	bl	8001de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	@ (80017e0 <HAL_I2C_MspInit+0x84>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12c      	bne.n	80017d8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <HAL_I2C_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <HAL_I2C_MspInit+0x88>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_I2C_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800179a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ac:	2304      	movs	r3, #4
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <HAL_I2C_MspInit+0x8c>)
 80017b8:	f000 fb40 	bl	8001e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_I2C_MspInit+0x88>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	4a07      	ldr	r2, [pc, #28]	@ (80017e4 <HAL_I2C_MspInit+0x88>)
 80017c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_I2C_MspInit+0x88>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	@ 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40005400 	.word	0x40005400
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400

080017ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12c      	bne.n	8001868 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	4a30      	ldr	r2, [pc, #192]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001818:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800181c:	6413      	str	r3, [r2, #64]	@ 0x40
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a29      	ldr	r2, [pc, #164]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001846:	2301      	movs	r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001856:	2308      	movs	r3, #8
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	481e      	ldr	r0, [pc, #120]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 8001862:	f000 faeb 	bl	8001e3c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001866:	e030      	b.n	80018ca <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1c      	ldr	r2, [pc, #112]	@ (80018e0 <HAL_UART_MspInit+0xf4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12b      	bne.n	80018ca <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018aa:	230c      	movs	r3, #12
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 80018c6:	f000 fab9 	bl	8001e3c <HAL_GPIO_Init>
}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004c00 	.word	0x40004c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40004400 	.word	0x40004400

080018e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	@ 0x38
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <HAL_InitTick+0xe4>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	4a32      	ldr	r2, [pc, #200]	@ (80019c8 <HAL_InitTick+0xe4>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <HAL_InitTick+0xe4>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001910:	f107 0210 	add.w	r2, r7, #16
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fd50 	bl	80033c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800192a:	f001 fd21 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 800192e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001930:	e004      	b.n	800193c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001932:	f001 fd1d 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8001936:	4603      	mov	r3, r0
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <HAL_InitTick+0xe8>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	3b01      	subs	r3, #1
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_InitTick+0xec>)
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_InitTick+0xf0>)
 800194e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_InitTick+0xec>)
 8001952:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001956:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001958:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_InitTick+0xec>)
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_InitTick+0xec>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_InitTick+0xec>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_InitTick+0xec>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001970:	4817      	ldr	r0, [pc, #92]	@ (80019d0 <HAL_InitTick+0xec>)
 8001972:	f002 fa25 	bl	8003dc0 <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800197c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001980:	2b00      	cmp	r3, #0
 8001982:	d11b      	bne.n	80019bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <HAL_InitTick+0xec>)
 8001986:	f002 fa75 	bl	8003e74 <HAL_TIM_Base_Start_IT>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001998:	2036      	movs	r0, #54	@ 0x36
 800199a:	f000 fa41 	bl	8001e20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d808      	bhi.n	80019b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	2036      	movs	r0, #54	@ 0x36
 80019aa:	f000 fa1d 	bl	8001de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_InitTick+0xf4>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e002      	b.n	80019bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3738      	adds	r7, #56	@ 0x38
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	200002dc 	.word	0x200002dc
 80019d4:	40001000 	.word	0x40001000
 80019d8:	20000004 	.word	0x20000004

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <NMI_Handler+0x4>

080019e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <MemManage_Handler+0x4>

080019f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <TIM6_DAC_IRQHandler+0x10>)
 8001a1a:	f002 fa9b 	bl	8003f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002dc 	.word	0x200002dc

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a42:	f006 fd89 	bl	8008558 <__errno>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2216      	movs	r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_exit>:

void _exit (int status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffe7 	bl	8001a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6a:	bf00      	nop
 8001a6c:	e7fd      	b.n	8001a6a <_exit+0x12>

08001a6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e00a      	b.n	8001a96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a80:	f3af 8000 	nop.w
 8001a84:	4601      	mov	r1, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	b2ca      	uxtb	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf0      	blt.n	8001a80 <_read+0x12>
  }

  return len;
 8001a9e:	687b      	ldr	r3, [r7, #4]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_isatty>:

int _isatty(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f006 fd0a 	bl	8008558 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20020000 	.word	0x20020000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	20000324 	.word	0x20000324
 8001b78:	20004e60 	.word	0x20004e60

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ba4:	f7ff ffea 	bl	8001b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	@ (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f006 fcc9 	bl	8008564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff fb99 	bl	8001308 <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001be4:	0800a7fc 	.word	0x0800a7fc
  ldr r2, =_sbss
 8001be8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001bec:	20004e60 	.word	0x20004e60

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f8d8 	bl	8001dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f7ff fe5e 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fd6c 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000328 	.word	0x20000328

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000328 	.word	0x20000328

08001c78 <__NVIC_SetPriorityGrouping>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff4c 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfa:	f7ff ff61 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	6978      	ldr	r0, [r7, #20]
 8001e06:	f7ff ffb1 	bl	8001d6c <NVIC_EncodePriority>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff80 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff54 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e165      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8154 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80ae 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800213c <HAL_GPIO_Init+0x300>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a5c      	ldr	r2, [pc, #368]	@ (800213c <HAL_GPIO_Init+0x300>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800213c <HAL_GPIO_Init+0x300>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a58      	ldr	r2, [pc, #352]	@ (8002140 <HAL_GPIO_Init+0x304>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4f      	ldr	r2, [pc, #316]	@ (8002144 <HAL_GPIO_Init+0x308>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4e      	ldr	r2, [pc, #312]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4d      	ldr	r2, [pc, #308]	@ (800214c <HAL_GPIO_Init+0x310>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x212>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4c      	ldr	r2, [pc, #304]	@ (8002150 <HAL_GPIO_Init+0x314>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x20e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4b      	ldr	r2, [pc, #300]	@ (8002154 <HAL_GPIO_Init+0x318>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x20a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4a      	ldr	r2, [pc, #296]	@ (8002158 <HAL_GPIO_Init+0x31c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x206>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a49      	ldr	r2, [pc, #292]	@ (800215c <HAL_GPIO_Init+0x320>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x202>
 800203a:	2306      	movs	r3, #6
 800203c:	e00c      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800203e:	2307      	movs	r3, #7
 8002040:	e00a      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002042:	2305      	movs	r3, #5
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002046:	2304      	movs	r3, #4
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002056:	2300      	movs	r3, #0
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002068:	4935      	ldr	r1, [pc, #212]	@ (8002140 <HAL_GPIO_Init+0x304>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002076:	4b3a      	ldr	r3, [pc, #232]	@ (8002160 <HAL_GPIO_Init+0x324>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209a:	4a31      	ldr	r2, [pc, #196]	@ (8002160 <HAL_GPIO_Init+0x324>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002160 <HAL_GPIO_Init+0x324>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c4:	4a26      	ldr	r2, [pc, #152]	@ (8002160 <HAL_GPIO_Init+0x324>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ca:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <HAL_GPIO_Init+0x324>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <HAL_GPIO_Init+0x324>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_GPIO_Init+0x324>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002118:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_GPIO_Init+0x324>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f67f ae96 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3724      	adds	r7, #36	@ 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40013800 	.word	0x40013800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40021400 	.word	0x40021400
 800215c:	40021800 	.word	0x40021800
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e12b      	b.n	8002402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff facc 	bl	800175c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	@ 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021fc:	f001 f8b8 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a81      	ldr	r2, [pc, #516]	@ (800240c <HAL_I2C_Init+0x274>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d807      	bhi.n	800221c <HAL_I2C_Init+0x84>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a80      	ldr	r2, [pc, #512]	@ (8002410 <HAL_I2C_Init+0x278>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e006      	b.n	800222a <HAL_I2C_Init+0x92>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a7d      	ldr	r2, [pc, #500]	@ (8002414 <HAL_I2C_Init+0x27c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0e7      	b.n	8002402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a78      	ldr	r2, [pc, #480]	@ (8002418 <HAL_I2C_Init+0x280>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a6a      	ldr	r2, [pc, #424]	@ (800240c <HAL_I2C_Init+0x274>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d802      	bhi.n	800226c <HAL_I2C_Init+0xd4>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	e009      	b.n	8002280 <HAL_I2C_Init+0xe8>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a69      	ldr	r2, [pc, #420]	@ (800241c <HAL_I2C_Init+0x284>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	3301      	adds	r3, #1
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002292:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	495c      	ldr	r1, [pc, #368]	@ (800240c <HAL_I2C_Init+0x274>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d819      	bhi.n	80022d4 <HAL_I2C_Init+0x13c>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e59      	subs	r1, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_I2C_Init+0x138>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ce:	e051      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e04f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_I2C_Init+0x168>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e012      	b.n	8002326 <HAL_I2C_Init+0x18e>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	0099      	lsls	r1, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	fbb0 f3f3 	udiv	r3, r0, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Init+0x196>
 800232a:	2301      	movs	r3, #1
 800232c:	e022      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10e      	bne.n	8002354 <HAL_I2C_Init+0x1bc>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e58      	subs	r0, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	440b      	add	r3, r1
 8002344:	fbb0 f3f3 	udiv	r3, r0, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002352:	e00f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	0099      	lsls	r1, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6911      	ldr	r1, [r2, #16]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	000186a0 	.word	0x000186a0
 8002410:	001e847f 	.word	0x001e847f
 8002414:	003d08ff 	.word	0x003d08ff
 8002418:	431bde83 	.word	0x431bde83
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	817b      	strh	r3, [r7, #10]
 8002430:	4613      	mov	r3, r2
 8002432:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fc14 	bl	8001c60 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	f040 80e0 	bne.w	8002608 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2319      	movs	r3, #25
 800244e:	2201      	movs	r2, #1
 8002450:	4970      	ldr	r1, [pc, #448]	@ (8002614 <HAL_I2C_Master_Transmit+0x1f4>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fc64 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800245e:	2302      	movs	r3, #2
 8002460:	e0d3      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_I2C_Master_Transmit+0x50>
 800246c:	2302      	movs	r3, #2
 800246e:	e0cc      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d007      	beq.n	8002496 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	@ 0x21
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2210      	movs	r2, #16
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	893a      	ldrh	r2, [r7, #8]
 80024c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a50      	ldr	r2, [pc, #320]	@ (8002618 <HAL_I2C_Master_Transmit+0x1f8>)
 80024d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024d8:	8979      	ldrh	r1, [r7, #10]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 face 	bl	8002a80 <I2C_MasterRequestWrite>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e08d      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002504:	e066      	b.n	80025d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fd22 	bl	8002f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b04      	cmp	r3, #4
 800251c:	d107      	bne.n	800252e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d11b      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x188>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d017      	beq.n	80025a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	6a39      	ldr	r1, [r7, #32]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fd19 	bl	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e01a      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d194      	bne.n	8002506 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	00100002 	.word	0x00100002
 8002618:	ffff0000 	.word	0xffff0000

0800261c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	@ 0x30
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	4613      	mov	r3, r2
 800262e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff fb16 	bl	8001c60 <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	f040 8217 	bne.w	8002a72 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	497c      	ldr	r1, [pc, #496]	@ (8002840 <HAL_I2C_Master_Receive+0x224>)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fb66 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	e20a      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2C_Master_Receive+0x50>
 8002668:	2302      	movs	r3, #2
 800266a:	e203      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d007      	beq.n	8002692 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2222      	movs	r2, #34	@ 0x22
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2210      	movs	r2, #16
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002844 <HAL_I2C_Master_Receive+0x228>)
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa52 	bl	8002b84 <I2C_MasterRequestRead>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1c4      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e198      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	2b01      	cmp	r3, #1
 8002720:	d11b      	bne.n	800275a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e178      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	2b02      	cmp	r3, #2
 8002760:	d11b      	bne.n	800279a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002770:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	e158      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027c0:	e144      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	f200 80f1 	bhi.w	80029ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d123      	bne.n	800281c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fc4b 	bl	8003074 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e145      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800281a:	e117      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	2b02      	cmp	r3, #2
 8002822:	d14e      	bne.n	80028c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	2200      	movs	r2, #0
 800282c:	4906      	ldr	r1, [pc, #24]	@ (8002848 <HAL_I2C_Master_Receive+0x22c>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fa76 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e11a      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
 800283e:	bf00      	nop
 8002840:	00100002 	.word	0x00100002
 8002844:	ffff0000 	.word	0xffff0000
 8002848:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028c0:	e0c4      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	2200      	movs	r2, #0
 80028ca:	496c      	ldr	r1, [pc, #432]	@ (8002a7c <HAL_I2C_Master_Receive+0x460>)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fa27 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0cb      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	4955      	ldr	r1, [pc, #340]	@ (8002a7c <HAL_I2C_Master_Receive+0x460>)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f9f9 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e09d      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029ac:	e04e      	b.n	8002a4c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fb5e 	bl	8003074 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e058      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d124      	bne.n	8002a4c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d107      	bne.n	8002a1a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a18:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f aeb6 	bne.w	80027c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3728      	adds	r7, #40	@ 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	00010004 	.word	0x00010004

08002a80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d006      	beq.n	8002aaa <I2C_MasterRequestWrite+0x2a>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d003      	beq.n	8002aaa <I2C_MasterRequestWrite+0x2a>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aa8:	d108      	bne.n	8002abc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00b      	b.n	8002ad4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	2b12      	cmp	r3, #18
 8002ac2:	d107      	bne.n	8002ad4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f91d 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afa:	d103      	bne.n	8002b04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e035      	b.n	8002b74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b10:	d108      	bne.n	8002b24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	e01b      	b.n	8002b5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b24:	897b      	ldrh	r3, [r7, #10]
 8002b26:	11db      	asrs	r3, r3, #7
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 0306 	and.w	r3, r3, #6
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f063 030f 	orn	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	490e      	ldr	r1, [pc, #56]	@ (8002b7c <I2C_MasterRequestWrite+0xfc>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f966 	bl	8002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e010      	b.n	8002b74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4907      	ldr	r1, [pc, #28]	@ (8002b80 <I2C_MasterRequestWrite+0x100>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f956 	bl	8002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	00010008 	.word	0x00010008
 8002b80:	00010002 	.word	0x00010002

08002b84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	460b      	mov	r3, r1
 8002b92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d006      	beq.n	8002bbe <I2C_MasterRequestRead+0x3a>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d003      	beq.n	8002bbe <I2C_MasterRequestRead+0x3a>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bbc:	d108      	bne.n	8002bd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e00b      	b.n	8002be8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	2b11      	cmp	r3, #17
 8002bd6:	d107      	bne.n	8002be8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f893 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c0e:	d103      	bne.n	8002c18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e079      	b.n	8002d10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c24:	d108      	bne.n	8002c38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e05f      	b.n	8002cf8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	11db      	asrs	r3, r3, #7
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0306 	and.w	r3, r3, #6
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f063 030f 	orn	r3, r3, #15
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4930      	ldr	r1, [pc, #192]	@ (8002d18 <I2C_MasterRequestRead+0x194>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8dc 	bl	8002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e054      	b.n	8002d10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4929      	ldr	r1, [pc, #164]	@ (8002d1c <I2C_MasterRequestRead+0x198>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8cc 	bl	8002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e044      	b.n	8002d10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002caa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f831 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd2:	d103      	bne.n	8002cdc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e017      	b.n	8002d10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ce0:	897b      	ldrh	r3, [r7, #10]
 8002ce2:	11db      	asrs	r3, r3, #7
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0306 	and.w	r3, r3, #6
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f063 030e 	orn	r3, r3, #14
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4907      	ldr	r1, [pc, #28]	@ (8002d1c <I2C_MasterRequestRead+0x198>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f888 	bl	8002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00010008 	.word	0x00010008
 8002d1c:	00010002 	.word	0x00010002

08002d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d30:	e048      	b.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d044      	beq.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7fe ff91 	bl	8001c60 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d302      	bcc.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d139      	bne.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10d      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	e00c      	b.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d116      	bne.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e023      	b.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	e00c      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d093      	beq.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e22:	e071      	b.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e32:	d123      	bne.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e067      	b.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d041      	beq.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e84:	f7fe feec 	bl	8001c60 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d136      	bne.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10c      	bne.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e00b      	b.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e021      	b.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10c      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e00b      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f af6d 	bne.w	8002e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f60:	e034      	b.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8e3 	bl	800312e <I2C_IsAcknowledgeFailed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e034      	b.n	8002fdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d028      	beq.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fe71 	bl	8001c60 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11d      	bne.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9a:	2b80      	cmp	r3, #128	@ 0x80
 8002f9c:	d016      	beq.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e007      	b.n	8002fdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b80      	cmp	r3, #128	@ 0x80
 8002fd8:	d1c3      	bne.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff0:	e034      	b.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f89b 	bl	800312e <I2C_IsAcknowledgeFailed>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e034      	b.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d028      	beq.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300a:	f7fe fe29 	bl	8001c60 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d11d      	bne.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d016      	beq.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e007      	b.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d1c3      	bne.n	8002ff2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003080:	e049      	b.n	8003116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d119      	bne.n	80030c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e030      	b.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7fe fdcc 	bl	8001c60 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11d      	bne.n	8003116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d016      	beq.n	8003116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e007      	b.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b40      	cmp	r3, #64	@ 0x40
 8003122:	d1ae      	bne.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003144:	d11b      	bne.n	800317e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800314e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cc      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b68      	ldr	r3, [pc, #416]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d90c      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b65      	ldr	r3, [pc, #404]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d044      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b3f      	ldr	r3, [pc, #252]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3b      	ldr	r3, [pc, #236]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e067      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4934      	ldr	r1, [pc, #208]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fe fcf0 	bl	8001c60 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fe fcec 	bl	8001c60 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2b      	ldr	r3, [pc, #172]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d20c      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fe:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f887 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	@ (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fad6 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00
 8003348:	40023800 	.word	0x40023800
 800334c:	0800a460 	.word	0x0800a460
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800335c:	4b03      	ldr	r3, [pc, #12]	@ (800336c <HAL_RCC_GetHCLKFreq+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000000 	.word	0x20000000

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff0 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	0800a470 	.word	0x0800a470

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800339c:	f7ff ffdc 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0b5b      	lsrs	r3, r3, #13
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	0800a470 	.word	0x0800a470

080033c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	220f      	movs	r2, #15
 80033ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033d0:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <HAL_RCC_GetClockConfig+0x60>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	601a      	str	r2, [r3, #0]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40023c00 	.word	0x40023c00

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b0ae      	sub	sp, #184	@ 0xb8
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344a:	4bcb      	ldr	r3, [pc, #812]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b0c      	cmp	r3, #12
 8003454:	f200 8206 	bhi.w	8003864 <HAL_RCC_GetSysClockFreq+0x440>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003495 	.word	0x08003495
 8003464:	08003865 	.word	0x08003865
 8003468:	08003865 	.word	0x08003865
 800346c:	08003865 	.word	0x08003865
 8003470:	0800349d 	.word	0x0800349d
 8003474:	08003865 	.word	0x08003865
 8003478:	08003865 	.word	0x08003865
 800347c:	08003865 	.word	0x08003865
 8003480:	080034a5 	.word	0x080034a5
 8003484:	08003865 	.word	0x08003865
 8003488:	08003865 	.word	0x08003865
 800348c:	08003865 	.word	0x08003865
 8003490:	08003695 	.word	0x08003695
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4bb9      	ldr	r3, [pc, #740]	@ (800377c <HAL_RCC_GetSysClockFreq+0x358>)
 8003496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800349a:	e1e7      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349c:	4bb8      	ldr	r3, [pc, #736]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x35c>)
 800349e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034a2:	e1e3      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a4:	4bb4      	ldr	r3, [pc, #720]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b0:	4bb1      	ldr	r3, [pc, #708]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d071      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4bae      	ldr	r3, [pc, #696]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80034cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	f04f 0000 	mov.w	r0, #0
 80034ea:	f04f 0100 	mov.w	r1, #0
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f4:	0150      	lsls	r0, r2, #5
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4621      	mov	r1, r4
 80034fc:	1a51      	subs	r1, r2, r1
 80034fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8003500:	4629      	mov	r1, r5
 8003502:	eb63 0301 	sbc.w	r3, r3, r1
 8003506:	647b      	str	r3, [r7, #68]	@ 0x44
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003514:	4649      	mov	r1, r9
 8003516:	018b      	lsls	r3, r1, #6
 8003518:	4641      	mov	r1, r8
 800351a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351e:	4641      	mov	r1, r8
 8003520:	018a      	lsls	r2, r1, #6
 8003522:	4641      	mov	r1, r8
 8003524:	1a51      	subs	r1, r2, r1
 8003526:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003528:	4649      	mov	r1, r9
 800352a:	eb63 0301 	sbc.w	r3, r3, r1
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800353c:	4649      	mov	r1, r9
 800353e:	00cb      	lsls	r3, r1, #3
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003546:	4641      	mov	r1, r8
 8003548:	00ca      	lsls	r2, r1, #3
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4622      	mov	r2, r4
 8003552:	189b      	adds	r3, r3, r2
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
 8003556:	462b      	mov	r3, r5
 8003558:	460a      	mov	r2, r1
 800355a:	eb42 0303 	adc.w	r3, r2, r3
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800356c:	4629      	mov	r1, r5
 800356e:	024b      	lsls	r3, r1, #9
 8003570:	4621      	mov	r1, r4
 8003572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003576:	4621      	mov	r1, r4
 8003578:	024a      	lsls	r2, r1, #9
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003582:	2200      	movs	r2, #0
 8003584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003588:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800358c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003590:	f7fd fb2a 	bl	8000be8 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800359e:	e067      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a0:	4b75      	ldr	r3, [pc, #468]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80035b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ba:	2300      	movs	r3, #0
 80035bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4621      	mov	r1, r4
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035e0:	4629      	mov	r1, r5
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80035f4:	4649      	mov	r1, r9
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4641      	mov	r1, r8
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4641      	mov	r1, r8
 8003604:	ebb2 0a01 	subs.w	sl, r2, r1
 8003608:	4649      	mov	r1, r9
 800360a:	eb63 0b01 	sbc.w	fp, r3, r1
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800361a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003622:	4692      	mov	sl, r2
 8003624:	469b      	mov	fp, r3
 8003626:	4623      	mov	r3, r4
 8003628:	eb1a 0303 	adds.w	r3, sl, r3
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	462b      	mov	r3, r5
 8003630:	eb4b 0303 	adc.w	r3, fp, r3
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003642:	4629      	mov	r1, r5
 8003644:	028b      	lsls	r3, r1, #10
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800364c:	4621      	mov	r1, r4
 800364e:	028a      	lsls	r2, r1, #10
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003658:	2200      	movs	r2, #0
 800365a:	673b      	str	r3, [r7, #112]	@ 0x70
 800365c:	677a      	str	r2, [r7, #116]	@ 0x74
 800365e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003662:	f7fd fac1 	bl	8000be8 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003670:	4b41      	ldr	r3, [pc, #260]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	3301      	adds	r3, #1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003692:	e0eb      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003694:	4b38      	ldr	r3, [pc, #224]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800369c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036a0:	4b35      	ldr	r3, [pc, #212]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d06b      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ac:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	2200      	movs	r2, #0
 80036b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	663b      	str	r3, [r7, #96]	@ 0x60
 80036c0:	2300      	movs	r3, #0
 80036c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80036c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80036c8:	4622      	mov	r2, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	0159      	lsls	r1, r3, #5
 80036d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036da:	0150      	lsls	r0, r2, #5
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4621      	mov	r1, r4
 80036e2:	1a51      	subs	r1, r2, r1
 80036e4:	61b9      	str	r1, [r7, #24]
 80036e6:	4629      	mov	r1, r5
 80036e8:	eb63 0301 	sbc.w	r3, r3, r1
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036fa:	4659      	mov	r1, fp
 80036fc:	018b      	lsls	r3, r1, #6
 80036fe:	4651      	mov	r1, sl
 8003700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003704:	4651      	mov	r1, sl
 8003706:	018a      	lsls	r2, r1, #6
 8003708:	4651      	mov	r1, sl
 800370a:	ebb2 0801 	subs.w	r8, r2, r1
 800370e:	4659      	mov	r1, fp
 8003710:	eb63 0901 	sbc.w	r9, r3, r1
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003728:	4690      	mov	r8, r2
 800372a:	4699      	mov	r9, r3
 800372c:	4623      	mov	r3, r4
 800372e:	eb18 0303 	adds.w	r3, r8, r3
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	462b      	mov	r3, r5
 8003736:	eb49 0303 	adc.w	r3, r9, r3
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003748:	4629      	mov	r1, r5
 800374a:	024b      	lsls	r3, r1, #9
 800374c:	4621      	mov	r1, r4
 800374e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003752:	4621      	mov	r1, r4
 8003754:	024a      	lsls	r2, r1, #9
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800375e:	2200      	movs	r2, #0
 8003760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003762:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003768:	f7fd fa3e 	bl	8000be8 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4613      	mov	r3, r2
 8003772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003776:	e065      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x420>
 8003778:	40023800 	.word	0x40023800
 800377c:	00f42400 	.word	0x00f42400
 8003780:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003784:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_RCC_GetSysClockFreq+0x458>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	2200      	movs	r2, #0
 800378c:	4618      	mov	r0, r3
 800378e:	4611      	mov	r1, r2
 8003790:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003794:	653b      	str	r3, [r7, #80]	@ 0x50
 8003796:	2300      	movs	r3, #0
 8003798:	657b      	str	r3, [r7, #84]	@ 0x54
 800379a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800379e:	4642      	mov	r2, r8
 80037a0:	464b      	mov	r3, r9
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	0159      	lsls	r1, r3, #5
 80037ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b0:	0150      	lsls	r0, r2, #5
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4641      	mov	r1, r8
 80037b8:	1a51      	subs	r1, r2, r1
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4649      	mov	r1, r9
 80037be:	eb63 0301 	sbc.w	r3, r3, r1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037d0:	4659      	mov	r1, fp
 80037d2:	018b      	lsls	r3, r1, #6
 80037d4:	4651      	mov	r1, sl
 80037d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037da:	4651      	mov	r1, sl
 80037dc:	018a      	lsls	r2, r1, #6
 80037de:	4651      	mov	r1, sl
 80037e0:	1a54      	subs	r4, r2, r1
 80037e2:	4659      	mov	r1, fp
 80037e4:	eb63 0501 	sbc.w	r5, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	00eb      	lsls	r3, r5, #3
 80037f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f6:	00e2      	lsls	r2, r4, #3
 80037f8:	4614      	mov	r4, r2
 80037fa:	461d      	mov	r5, r3
 80037fc:	4643      	mov	r3, r8
 80037fe:	18e3      	adds	r3, r4, r3
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	464b      	mov	r3, r9
 8003804:	eb45 0303 	adc.w	r3, r5, r3
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003816:	4629      	mov	r1, r5
 8003818:	028b      	lsls	r3, r1, #10
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003820:	4621      	mov	r1, r4
 8003822:	028a      	lsls	r2, r1, #10
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800382c:	2200      	movs	r2, #0
 800382e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003830:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003836:	f7fd f9d7 	bl	8000be8 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4613      	mov	r3, r2
 8003840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003844:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <HAL_RCC_GetSysClockFreq+0x458>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0f1b      	lsrs	r3, r3, #28
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003862:	e003      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800386a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003870:	4618      	mov	r0, r3
 8003872:	37b8      	adds	r7, #184	@ 0xb8
 8003874:	46bd      	mov	sp, r7
 8003876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400

08003884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e28d      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8083 	beq.w	80039aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038a4:	4b94      	ldr	r3, [pc, #592]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d019      	beq.n	80038e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038b0:	4b91      	ldr	r3, [pc, #580]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d106      	bne.n	80038ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038bc:	4b8e      	ldr	r3, [pc, #568]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c8:	d00c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b8b      	ldr	r3, [pc, #556]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d112      	bne.n	80038fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b88      	ldr	r3, [pc, #544]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e2:	d10b      	bne.n	80038fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	4b84      	ldr	r3, [pc, #528]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05b      	beq.n	80039a8 <HAL_RCC_OscConfig+0x124>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d157      	bne.n	80039a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e25a      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003904:	d106      	bne.n	8003914 <HAL_RCC_OscConfig+0x90>
 8003906:	4b7c      	ldr	r3, [pc, #496]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7b      	ldr	r2, [pc, #492]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e01d      	b.n	8003950 <HAL_RCC_OscConfig+0xcc>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0xb4>
 800391e:	4b76      	ldr	r3, [pc, #472]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a75      	ldr	r2, [pc, #468]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b73      	ldr	r3, [pc, #460]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a72      	ldr	r2, [pc, #456]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0xcc>
 8003938:	4b6f      	ldr	r3, [pc, #444]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6e      	ldr	r2, [pc, #440]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b6c      	ldr	r3, [pc, #432]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6b      	ldr	r2, [pc, #428]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 800394a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe f982 	bl	8001c60 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fe f97e 	bl	8001c60 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e21f      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0xdc>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fe f96e 	bl	8001c60 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003988:	f7fe f96a 	bl	8001c60 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	@ 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e20b      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	4b57      	ldr	r3, [pc, #348]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x104>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d06f      	beq.n	8003a96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039b6:	4b50      	ldr	r3, [pc, #320]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039c2:	4b4d      	ldr	r3, [pc, #308]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d105      	bne.n	80039da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039ce:	4b4a      	ldr	r3, [pc, #296]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b47      	ldr	r3, [pc, #284]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d11c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b44      	ldr	r3, [pc, #272]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d116      	bne.n	8003a20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	4b41      	ldr	r3, [pc, #260]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_RCC_OscConfig+0x186>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e1d3      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4937      	ldr	r1, [pc, #220]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	e03a      	b.n	8003a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a28:	4b34      	ldr	r3, [pc, #208]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe f917 	bl	8001c60 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a36:	f7fe f913 	bl	8001c60 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e1b4      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	4b2b      	ldr	r3, [pc, #172]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a54:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4925      	ldr	r1, [pc, #148]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6a:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe f8f6 	bl	8001c60 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a78:	f7fe f8f2 	bl	8001c60 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e193      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d036      	beq.n	8003b10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fe f8d6 	bl	8001c60 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab8:	f7fe f8d2 	bl	8001c60 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e173      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <HAL_RCC_OscConfig+0x274>)
 8003acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x234>
 8003ad6:	e01b      	b.n	8003b10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fe f8bf 	bl	8001c60 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	e00e      	b.n	8003b04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7fe f8bb 	bl	8001c60 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d907      	bls.n	8003b04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e15c      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
 8003af8:	40023800 	.word	0x40023800
 8003afc:	42470000 	.word	0x42470000
 8003b00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b8a      	ldr	r3, [pc, #552]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ea      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8097 	beq.w	8003c4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b83      	ldr	r3, [pc, #524]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	4b7f      	ldr	r3, [pc, #508]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	4a7e      	ldr	r2, [pc, #504]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b79      	ldr	r3, [pc, #484]	@ (8003d34 <HAL_RCC_OscConfig+0x4b0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4b76      	ldr	r3, [pc, #472]	@ (8003d34 <HAL_RCC_OscConfig+0x4b0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a75      	ldr	r2, [pc, #468]	@ (8003d34 <HAL_RCC_OscConfig+0x4b0>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fe f87b 	bl	8001c60 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fe f877 	bl	8001c60 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e118      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b6c      	ldr	r3, [pc, #432]	@ (8003d34 <HAL_RCC_OscConfig+0x4b0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x31e>
 8003b94:	4b66      	ldr	r3, [pc, #408]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a65      	ldr	r2, [pc, #404]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba0:	e01c      	b.n	8003bdc <HAL_RCC_OscConfig+0x358>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x340>
 8003baa:	4b61      	ldr	r3, [pc, #388]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	4a60      	ldr	r2, [pc, #384]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a5d      	ldr	r2, [pc, #372]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0x358>
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	4a59      	ldr	r2, [pc, #356]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd0:	4b57      	ldr	r3, [pc, #348]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	4a56      	ldr	r2, [pc, #344]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d015      	beq.n	8003c10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fe f83c 	bl	8001c60 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fe f838 	bl	8001c60 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e0d7      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c02:	4b4b      	ldr	r3, [pc, #300]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0ee      	beq.n	8003bec <HAL_RCC_OscConfig+0x368>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fe f826 	bl	8001c60 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fe f822 	bl	8001c60 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0c1      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2e:	4b40      	ldr	r3, [pc, #256]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ee      	bne.n	8003c18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c40:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	4a3a      	ldr	r2, [pc, #232]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80ad 	beq.w	8003db0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c56:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d060      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d145      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b33      	ldr	r3, [pc, #204]	@ (8003d38 <HAL_RCC_OscConfig+0x4b4>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fd fff6 	bl	8001c60 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd fff2 	bl	8001c60 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e093      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	491b      	ldr	r1, [pc, #108]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_RCC_OscConfig+0x4b4>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7fd ffc7 	bl	8001c60 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd6:	f7fd ffc3 	bl	8001c60 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e064      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce8:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x452>
 8003cf4:	e05c      	b.n	8003db0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_RCC_OscConfig+0x4b4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fd ffb0 	bl	8001c60 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd ffac 	bl	8001c60 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04d      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCC_OscConfig+0x4ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x480>
 8003d22:	e045      	b.n	8003db0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e040      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40007000 	.word	0x40007000
 8003d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <HAL_RCC_OscConfig+0x538>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d030      	beq.n	8003dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d129      	bne.n	8003dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d122      	bne.n	8003dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d119      	bne.n	8003dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	3b01      	subs	r3, #1
 8003d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d10f      	bne.n	8003dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d107      	bne.n	8003dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e041      	b.n	8003e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f839 	bl	8003e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 f9c0 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e04e      	b.n	8003f2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x80>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a18      	ldr	r2, [pc, #96]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d010      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	e007      	b.n	8003f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40010400 	.word	0x40010400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40001800 	.word	0x40001800

08003f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8d2 	bl	8004148 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8c4 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8d5 	bl	800415c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0204 	mvn.w	r2, #4
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8ac 	bl	8004148 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f89e 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8af 	bl	800415c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d020      	beq.n	8004050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01b      	beq.n	8004050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0208 	mvn.w	r2, #8
 8004020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2204      	movs	r2, #4
 8004026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f886 	bl	8004148 <HAL_TIM_IC_CaptureCallback>
 800403c:	e005      	b.n	800404a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f878 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f889 	bl	800415c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d020      	beq.n	800409c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01b      	beq.n	800409c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f860 	bl	8004148 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f852 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f863 	bl	800415c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0201 	mvn.w	r2, #1
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd fb0a 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f906 	bl	80042f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00c      	beq.n	8004108 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f834 	bl	8004170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0220 	mvn.w	r2, #32
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8d8 	bl	80042dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a46      	ldr	r2, [pc, #280]	@ (80042b0 <TIM_Base_SetConfig+0x12c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a2:	d00f      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a43      	ldr	r2, [pc, #268]	@ (80042b4 <TIM_Base_SetConfig+0x130>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a42      	ldr	r2, [pc, #264]	@ (80042b8 <TIM_Base_SetConfig+0x134>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a41      	ldr	r2, [pc, #260]	@ (80042bc <TIM_Base_SetConfig+0x138>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a40      	ldr	r2, [pc, #256]	@ (80042c0 <TIM_Base_SetConfig+0x13c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d108      	bne.n	80041d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a35      	ldr	r2, [pc, #212]	@ (80042b0 <TIM_Base_SetConfig+0x12c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d02b      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e4:	d027      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <TIM_Base_SetConfig+0x130>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d023      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a31      	ldr	r2, [pc, #196]	@ (80042b8 <TIM_Base_SetConfig+0x134>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01f      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a30      	ldr	r2, [pc, #192]	@ (80042bc <TIM_Base_SetConfig+0x138>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01b      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2f      	ldr	r2, [pc, #188]	@ (80042c0 <TIM_Base_SetConfig+0x13c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d017      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2e      	ldr	r2, [pc, #184]	@ (80042c4 <TIM_Base_SetConfig+0x140>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2d      	ldr	r2, [pc, #180]	@ (80042c8 <TIM_Base_SetConfig+0x144>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <TIM_Base_SetConfig+0x148>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	@ (80042d0 <TIM_Base_SetConfig+0x14c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	@ (80042d4 <TIM_Base_SetConfig+0x150>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	@ (80042d8 <TIM_Base_SetConfig+0x154>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d108      	bne.n	8004248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800423c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <TIM_Base_SetConfig+0x12c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0xf8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a12      	ldr	r2, [pc, #72]	@ (80042c0 <TIM_Base_SetConfig+0x13c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d103      	bne.n	8004284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f023 0201 	bic.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	611a      	str	r2, [r3, #16]
  }
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40010400 	.word	0x40010400
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400
 80042cc:	40014800 	.word	0x40014800
 80042d0:	40001800 	.word	0x40001800
 80042d4:	40001c00 	.word	0x40001c00
 80042d8:	40002000 	.word	0x40002000

080042dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e042      	b.n	800439c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd fa5e 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	@ 0x24
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f883 	bl	8004454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800435c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800437c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e04a      	b.n	800444c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd fa0e 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2224      	movs	r2, #36	@ 0x24
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f833 	bl	8004454 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800440c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800442c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004458:	b0c0      	sub	sp, #256	@ 0x100
 800445a:	af00      	add	r7, sp, #0
 800445c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	68d9      	ldr	r1, [r3, #12]
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	ea40 0301 	orr.w	r3, r0, r1
 800447c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044ac:	f021 010c 	bic.w	r1, r1, #12
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044ba:	430b      	orrs	r3, r1
 80044bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	6999      	ldr	r1, [r3, #24]
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	ea40 0301 	orr.w	r3, r0, r1
 80044da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004720 <UART_SetConfig+0x2cc>)
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d005      	beq.n	80044f4 <UART_SetConfig+0xa0>
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004724 <UART_SetConfig+0x2d0>)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d104      	bne.n	80044fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7fe ff50 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 80044f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044fc:	e003      	b.n	8004506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044fe:	f7fe ff37 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8004502:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004510:	f040 810c 	bne.w	800472c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004518:	2200      	movs	r2, #0
 800451a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800451e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004526:	4622      	mov	r2, r4
 8004528:	462b      	mov	r3, r5
 800452a:	1891      	adds	r1, r2, r2
 800452c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800452e:	415b      	adcs	r3, r3
 8004530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004536:	4621      	mov	r1, r4
 8004538:	eb12 0801 	adds.w	r8, r2, r1
 800453c:	4629      	mov	r1, r5
 800453e:	eb43 0901 	adc.w	r9, r3, r1
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800454e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004556:	4690      	mov	r8, r2
 8004558:	4699      	mov	r9, r3
 800455a:	4623      	mov	r3, r4
 800455c:	eb18 0303 	adds.w	r3, r8, r3
 8004560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004564:	462b      	mov	r3, r5
 8004566:	eb49 0303 	adc.w	r3, r9, r3
 800456a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800457a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800457e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004582:	460b      	mov	r3, r1
 8004584:	18db      	adds	r3, r3, r3
 8004586:	653b      	str	r3, [r7, #80]	@ 0x50
 8004588:	4613      	mov	r3, r2
 800458a:	eb42 0303 	adc.w	r3, r2, r3
 800458e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004598:	f7fc fb26 	bl	8000be8 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4b61      	ldr	r3, [pc, #388]	@ (8004728 <UART_SetConfig+0x2d4>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	011c      	lsls	r4, r3, #4
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045c4:	415b      	adcs	r3, r3
 80045c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045cc:	4641      	mov	r1, r8
 80045ce:	eb12 0a01 	adds.w	sl, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb43 0b01 	adc.w	fp, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ec:	4692      	mov	sl, r2
 80045ee:	469b      	mov	fp, r3
 80045f0:	4643      	mov	r3, r8
 80045f2:	eb1a 0303 	adds.w	r3, sl, r3
 80045f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045fa:	464b      	mov	r3, r9
 80045fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004600:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004610:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004618:	460b      	mov	r3, r1
 800461a:	18db      	adds	r3, r3, r3
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
 800461e:	4613      	mov	r3, r2
 8004620:	eb42 0303 	adc.w	r3, r2, r3
 8004624:	647b      	str	r3, [r7, #68]	@ 0x44
 8004626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800462a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800462e:	f7fc fadb 	bl	8000be8 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4611      	mov	r1, r2
 8004638:	4b3b      	ldr	r3, [pc, #236]	@ (8004728 <UART_SetConfig+0x2d4>)
 800463a:	fba3 2301 	umull	r2, r3, r3, r1
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2264      	movs	r2, #100	@ 0x64
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	1acb      	subs	r3, r1, r3
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800464e:	4b36      	ldr	r3, [pc, #216]	@ (8004728 <UART_SetConfig+0x2d4>)
 8004650:	fba3 2302 	umull	r2, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800465c:	441c      	add	r4, r3
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004668:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800466c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004678:	415b      	adcs	r3, r3
 800467a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800467c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004680:	4641      	mov	r1, r8
 8004682:	1851      	adds	r1, r2, r1
 8004684:	6339      	str	r1, [r7, #48]	@ 0x30
 8004686:	4649      	mov	r1, r9
 8004688:	414b      	adcs	r3, r1
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004698:	4659      	mov	r1, fp
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4651      	mov	r1, sl
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4642      	mov	r2, r8
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046b4:	464b      	mov	r3, r9
 80046b6:	460a      	mov	r2, r1
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046d4:	460b      	mov	r3, r1
 80046d6:	18db      	adds	r3, r3, r3
 80046d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046da:	4613      	mov	r3, r2
 80046dc:	eb42 0303 	adc.w	r3, r2, r3
 80046e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046ea:	f7fc fa7d 	bl	8000be8 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <UART_SetConfig+0x2d4>)
 80046f4:	fba3 1302 	umull	r1, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	2164      	movs	r1, #100	@ 0x64
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	3332      	adds	r3, #50	@ 0x32
 8004706:	4a08      	ldr	r2, [pc, #32]	@ (8004728 <UART_SetConfig+0x2d4>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f003 0207 	and.w	r2, r3, #7
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4422      	add	r2, r4
 800471a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800471c:	e106      	b.n	800492c <UART_SetConfig+0x4d8>
 800471e:	bf00      	nop
 8004720:	40011000 	.word	0x40011000
 8004724:	40011400 	.word	0x40011400
 8004728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004730:	2200      	movs	r2, #0
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004736:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800473a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800473e:	4642      	mov	r2, r8
 8004740:	464b      	mov	r3, r9
 8004742:	1891      	adds	r1, r2, r2
 8004744:	6239      	str	r1, [r7, #32]
 8004746:	415b      	adcs	r3, r3
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
 800474a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800474e:	4641      	mov	r1, r8
 8004750:	1854      	adds	r4, r2, r1
 8004752:	4649      	mov	r1, r9
 8004754:	eb43 0501 	adc.w	r5, r3, r1
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	00eb      	lsls	r3, r5, #3
 8004762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004766:	00e2      	lsls	r2, r4, #3
 8004768:	4614      	mov	r4, r2
 800476a:	461d      	mov	r5, r3
 800476c:	4643      	mov	r3, r8
 800476e:	18e3      	adds	r3, r4, r3
 8004770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004774:	464b      	mov	r3, r9
 8004776:	eb45 0303 	adc.w	r3, r5, r3
 800477a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800478a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800479a:	4629      	mov	r1, r5
 800479c:	008b      	lsls	r3, r1, #2
 800479e:	4621      	mov	r1, r4
 80047a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a4:	4621      	mov	r1, r4
 80047a6:	008a      	lsls	r2, r1, #2
 80047a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047ac:	f7fc fa1c 	bl	8000be8 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4b60      	ldr	r3, [pc, #384]	@ (8004938 <UART_SetConfig+0x4e4>)
 80047b6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	011c      	lsls	r4, r3, #4
 80047be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	1891      	adds	r1, r2, r2
 80047d6:	61b9      	str	r1, [r7, #24]
 80047d8:	415b      	adcs	r3, r3
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e0:	4641      	mov	r1, r8
 80047e2:	1851      	adds	r1, r2, r1
 80047e4:	6139      	str	r1, [r7, #16]
 80047e6:	4649      	mov	r1, r9
 80047e8:	414b      	adcs	r3, r1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f8:	4659      	mov	r1, fp
 80047fa:	00cb      	lsls	r3, r1, #3
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004802:	4651      	mov	r1, sl
 8004804:	00ca      	lsls	r2, r1, #3
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	4603      	mov	r3, r0
 800480c:	4642      	mov	r2, r8
 800480e:	189b      	adds	r3, r3, r2
 8004810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004814:	464b      	mov	r3, r9
 8004816:	460a      	mov	r2, r1
 8004818:	eb42 0303 	adc.w	r3, r2, r3
 800481c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800482a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004838:	4649      	mov	r1, r9
 800483a:	008b      	lsls	r3, r1, #2
 800483c:	4641      	mov	r1, r8
 800483e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004842:	4641      	mov	r1, r8
 8004844:	008a      	lsls	r2, r1, #2
 8004846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800484a:	f7fc f9cd 	bl	8000be8 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4611      	mov	r1, r2
 8004854:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <UART_SetConfig+0x4e4>)
 8004856:	fba3 2301 	umull	r2, r3, r3, r1
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2264      	movs	r2, #100	@ 0x64
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	1acb      	subs	r3, r1, r3
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	3332      	adds	r3, #50	@ 0x32
 8004868:	4a33      	ldr	r2, [pc, #204]	@ (8004938 <UART_SetConfig+0x4e4>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004874:	441c      	add	r4, r3
 8004876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487a:	2200      	movs	r2, #0
 800487c:	673b      	str	r3, [r7, #112]	@ 0x70
 800487e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	415b      	adcs	r3, r3
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048c6:	464b      	mov	r3, r9
 80048c8:	460a      	mov	r2, r1
 80048ca:	eb42 0303 	adc.w	r3, r2, r3
 80048ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80048da:	667a      	str	r2, [r7, #100]	@ 0x64
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048e8:	4649      	mov	r1, r9
 80048ea:	008b      	lsls	r3, r1, #2
 80048ec:	4641      	mov	r1, r8
 80048ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f2:	4641      	mov	r1, r8
 80048f4:	008a      	lsls	r2, r1, #2
 80048f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048fa:	f7fc f975 	bl	8000be8 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <UART_SetConfig+0x4e4>)
 8004904:	fba3 1302 	umull	r1, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	2164      	movs	r1, #100	@ 0x64
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	3332      	adds	r3, #50	@ 0x32
 8004916:	4a08      	ldr	r2, [pc, #32]	@ (8004938 <UART_SetConfig+0x4e4>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 020f 	and.w	r2, r3, #15
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4422      	add	r2, r4
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004932:	46bd      	mov	sp, r7
 8004934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004938:	51eb851f 	.word	0x51eb851f

0800493c <__NVIC_SetPriority>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	2b00      	cmp	r3, #0
 800494e:	db0a      	blt.n	8004966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	490c      	ldr	r1, [pc, #48]	@ (8004988 <__NVIC_SetPriority+0x4c>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	440b      	add	r3, r1
 8004960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004964:	e00a      	b.n	800497c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4908      	ldr	r1, [pc, #32]	@ (800498c <__NVIC_SetPriority+0x50>)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	3b04      	subs	r3, #4
 8004974:	0112      	lsls	r2, r2, #4
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	440b      	add	r3, r1
 800497a:	761a      	strb	r2, [r3, #24]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000e100 	.word	0xe000e100
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <SysTick_Handler+0x1c>)
 8004996:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004998:	f001 fe4e 	bl	8006638 <xTaskGetSchedulerState>
 800499c:	4603      	mov	r3, r0
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80049a2:	f002 fc49 	bl	8007238 <xPortSysTickHandler>
  }
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000e010 	.word	0xe000e010

080049b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80049b4:	2100      	movs	r1, #0
 80049b6:	f06f 0004 	mvn.w	r0, #4
 80049ba:	f7ff ffbf 	bl	800493c <__NVIC_SetPriority>
#endif
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ca:	f3ef 8305 	mrs	r3, IPSR
 80049ce:	603b      	str	r3, [r7, #0]
  return(result);
 80049d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80049d6:	f06f 0305 	mvn.w	r3, #5
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	e00c      	b.n	80049f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049de:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <osKernelInitialize+0x44>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049e6:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <osKernelInitialize+0x44>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	e002      	b.n	80049f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049f8:	687b      	ldr	r3, [r7, #4]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000032c 	.word	0x2000032c

08004a0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a12:	f3ef 8305 	mrs	r3, IPSR
 8004a16:	603b      	str	r3, [r7, #0]
  return(result);
 8004a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004a1e:	f06f 0305 	mvn.w	r3, #5
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	e010      	b.n	8004a48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a26:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <osKernelStart+0x48>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d109      	bne.n	8004a42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a2e:	f7ff ffbf 	bl	80049b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a32:	4b08      	ldr	r3, [pc, #32]	@ (8004a54 <osKernelStart+0x48>)
 8004a34:	2202      	movs	r2, #2
 8004a36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a38:	f001 f99a 	bl	8005d70 <vTaskStartScheduler>
      stat = osOK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	e002      	b.n	8004a48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a48:	687b      	ldr	r3, [r7, #4]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000032c 	.word	0x2000032c

08004a58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08e      	sub	sp, #56	@ 0x38
 8004a5c:	af04      	add	r7, sp, #16
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a68:	f3ef 8305 	mrs	r3, IPSR
 8004a6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d17e      	bne.n	8004b72 <osThreadNew+0x11a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d07b      	beq.n	8004b72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a7a:	2380      	movs	r3, #128	@ 0x80
 8004a7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a7e:	2318      	movs	r3, #24
 8004a80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d045      	beq.n	8004b1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <osThreadNew+0x48>
        name = attr->name;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <osThreadNew+0x6e>
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b38      	cmp	r3, #56	@ 0x38
 8004ab8:	d805      	bhi.n	8004ac6 <osThreadNew+0x6e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <osThreadNew+0x72>
        return (NULL);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e054      	b.n	8004b74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00e      	beq.n	8004b00 <osThreadNew+0xa8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2ba7      	cmp	r3, #167	@ 0xa7
 8004ae8:	d90a      	bls.n	8004b00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d006      	beq.n	8004b00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <osThreadNew+0xa8>
        mem = 1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e010      	b.n	8004b22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10c      	bne.n	8004b22 <osThreadNew+0xca>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <osThreadNew+0xca>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <osThreadNew+0xca>
          mem = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e001      	b.n	8004b22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d110      	bne.n	8004b4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b30:	9202      	str	r2, [sp, #8]
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a3a      	ldr	r2, [r7, #32]
 8004b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fe46 	bl	80057d0 <xTaskCreateStatic>
 8004b44:	4603      	mov	r3, r0
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	e013      	b.n	8004b72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fe94 	bl	8005890 <xTaskCreate>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <osThreadNew+0x11a>
            hTask = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b72:	693b      	ldr	r3, [r7, #16]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3728      	adds	r7, #40	@ 0x28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b88:	f3ef 8305 	mrs	r3, IPSR
 8004b8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8004b94:	f06f 0305 	mvn.w	r3, #5
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e017      	b.n	8004bcc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8004ba2:	f06f 0303 	mvn.w	r3, #3
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e010      	b.n	8004bcc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004baa:	6938      	ldr	r0, [r7, #16]
 8004bac:	f001 f878 	bl	8005ca0 <eTaskGetState>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d005      	beq.n	8004bc6 <osThreadTerminate+0x4a>
      stat = osOK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8004bbe:	6938      	ldr	r0, [r7, #16]
 8004bc0:	f000 ffc4 	bl	8005b4c <vTaskDelete>
 8004bc4:	e002      	b.n	8004bcc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8004bc6:	f06f 0302 	mvn.w	r3, #2
 8004bca:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bde:	f3ef 8305 	mrs	r3, IPSR
 8004be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <osDelay+0x1c>
    stat = osErrorISR;
 8004bea:	f06f 0305 	mvn.w	r3, #5
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e007      	b.n	8004c02 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 f819 	bl	8005c34 <vTaskDelay>
    }
  }

  return (stat);
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a07      	ldr	r2, [pc, #28]	@ (8004c38 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4a06      	ldr	r2, [pc, #24]	@ (8004c3c <vApplicationGetIdleTaskMemory+0x30>)
 8004c22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000330 	.word	0x20000330
 8004c3c:	200003d8 	.word	0x200003d8

08004c40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a07      	ldr	r2, [pc, #28]	@ (8004c6c <vApplicationGetTimerTaskMemory+0x2c>)
 8004c50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a06      	ldr	r2, [pc, #24]	@ (8004c70 <vApplicationGetTimerTaskMemory+0x30>)
 8004c56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	200005d8 	.word	0x200005d8
 8004c70:	20000680 	.word	0x20000680

08004c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f103 0208 	add.w	r2, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 0208 	add.w	r2, r3, #8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f103 0208 	add.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d103      	bne.n	8004d36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e00c      	b.n	8004d50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e002      	b.n	8004d44 <vListInsert+0x2e>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d2f6      	bcs.n	8004d3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6892      	ldr	r2, [r2, #8]
 8004d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6852      	ldr	r2, [r2, #4]
 8004da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d103      	bne.n	8004dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	1e5a      	subs	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e08:	f002 f986 	bl	8007118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	441a      	add	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	441a      	add	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	22ff      	movs	r2, #255	@ 0xff
 8004e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	22ff      	movs	r2, #255	@ 0xff
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d114      	bne.n	8004e88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01a      	beq.n	8004e9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3310      	adds	r3, #16
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fa1e 	bl	80062ac <xTaskRemoveFromEventList>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <xQueueGenericReset+0xd0>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	e009      	b.n	8004e9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3310      	adds	r3, #16
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fef1 	bl	8004c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3324      	adds	r3, #36	@ 0x24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff feec 	bl	8004c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e9c:	f002 f96e 	bl	800717c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ea0:	2301      	movs	r3, #1
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	@ 0x38
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	e7fd      	b.n	8004ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	e7fd      	b.n	8004ef6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <xQueueGenericCreateStatic+0x56>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <xQueueGenericCreateStatic+0x5a>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueGenericCreateStatic+0x5c>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	623b      	str	r3, [r7, #32]
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <xQueueGenericCreateStatic+0x84>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <xQueueGenericCreateStatic+0x88>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <xQueueGenericCreateStatic+0x8a>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fb      	str	r3, [r7, #28]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f56:	2350      	movs	r3, #80	@ 0x50
 8004f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b50      	cmp	r3, #80	@ 0x50
 8004f5e:	d00b      	beq.n	8004f78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	61bb      	str	r3, [r7, #24]
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f805 	bl	8004faa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3730      	adds	r7, #48	@ 0x30
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e002      	b.n	8004fcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fd8:	2101      	movs	r1, #1
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f7ff fefe 	bl	8004ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	@ 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ffe:	2300      	movs	r3, #0
 8005000:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <xQueueGenericSend+0x34>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <xQueueGenericSend+0x42>
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <xQueueGenericSend+0x46>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <xQueueGenericSend+0x48>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <xQueueGenericSend+0x64>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d103      	bne.n	8005062 <xQueueGenericSend+0x72>
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <xQueueGenericSend+0x76>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <xQueueGenericSend+0x78>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <xQueueGenericSend+0x94>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	623b      	str	r3, [r7, #32]
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	e7fd      	b.n	8005080 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005084:	f001 fad8 	bl	8006638 <xTaskGetSchedulerState>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <xQueueGenericSend+0xa4>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <xQueueGenericSend+0xa8>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <xQueueGenericSend+0xaa>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	61fb      	str	r3, [r7, #28]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050b6:	f002 f82f 	bl	8007118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <xQueueGenericSend+0xdc>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d129      	bne.n	8005120 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050d2:	f000 fa0f 	bl	80054f4 <prvCopyDataToQueue>
 80050d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	3324      	adds	r3, #36	@ 0x24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 f8e1 	bl	80062ac <xTaskRemoveFromEventList>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050f0:	4b3f      	ldr	r3, [pc, #252]	@ (80051f0 <xQueueGenericSend+0x200>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	e00a      	b.n	8005118 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005108:	4b39      	ldr	r3, [pc, #228]	@ (80051f0 <xQueueGenericSend+0x200>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005118:	f002 f830 	bl	800717c <vPortExitCritical>
				return pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	e063      	b.n	80051e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005126:	f002 f829 	bl	800717c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800512a:	2300      	movs	r3, #0
 800512c:	e05c      	b.n	80051e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800512e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	4618      	mov	r0, r3
 800513a:	f001 f91b 	bl	8006374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800513e:	2301      	movs	r3, #1
 8005140:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005142:	f002 f81b 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005146:	f000 fe83 	bl	8005e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800514a:	f001 ffe5 	bl	8007118 <vPortEnterCritical>
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005154:	b25b      	sxtb	r3, r3
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d103      	bne.n	8005164 <xQueueGenericSend+0x174>
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800516a:	b25b      	sxtb	r3, r3
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d103      	bne.n	800517a <xQueueGenericSend+0x18a>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800517a:	f001 ffff 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800517e:	1d3a      	adds	r2, r7, #4
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f001 f90a 	bl	80063a0 <xTaskCheckForTimeOut>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d124      	bne.n	80051dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005192:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005194:	f000 faa6 	bl	80056e4 <prvIsQueueFull>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	3310      	adds	r3, #16
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f82e 	bl	8006208 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051ae:	f000 fa31 	bl	8005614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051b2:	f000 fe5b 	bl	8005e6c <xTaskResumeAll>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f af7c 	bne.w	80050b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80051be:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <xQueueGenericSend+0x200>)
 80051c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	e772      	b.n	80050b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051d2:	f000 fa1f 	bl	8005614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051d6:	f000 fe49 	bl	8005e6c <xTaskResumeAll>
 80051da:	e76c      	b.n	80050b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051de:	f000 fa19 	bl	8005614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051e2:	f000 fe43 	bl	8005e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3738      	adds	r7, #56	@ 0x38
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b090      	sub	sp, #64	@ 0x40
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	e7fd      	b.n	8005220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <xQueueGenericSendFromISR+0x3e>
 800522a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <xQueueGenericSendFromISR+0x42>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <xQueueGenericSendFromISR+0x44>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d103      	bne.n	8005262 <xQueueGenericSendFromISR+0x6e>
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <xQueueGenericSendFromISR+0x72>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <xQueueGenericSendFromISR+0x74>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	623b      	str	r3, [r7, #32]
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005284:	f002 f828 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005288:	f3ef 8211 	mrs	r2, BASEPRI
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61fa      	str	r2, [r7, #28]
 800529e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d302      	bcc.n	80052b6 <xQueueGenericSendFromISR+0xc2>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d12f      	bne.n	8005316 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052cc:	f000 f912 	bl	80054f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d112      	bne.n	8005300 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	3324      	adds	r3, #36	@ 0x24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ffe0 	bl	80062ac <xTaskRemoveFromEventList>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00e      	beq.n	8005310 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e007      	b.n	8005310 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005304:	3301      	adds	r3, #1
 8005306:	b2db      	uxtb	r3, r3
 8005308:	b25a      	sxtb	r2, r3
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005310:	2301      	movs	r3, #1
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005314:	e001      	b.n	800531a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005316:	2300      	movs	r3, #0
 8005318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005324:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005328:	4618      	mov	r0, r3
 800532a:	3740      	adds	r7, #64	@ 0x40
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08c      	sub	sp, #48	@ 0x30
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800533c:	2300      	movs	r3, #0
 800533e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <xQueueReceive+0x32>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	623b      	str	r3, [r7, #32]
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <xQueueReceive+0x40>
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <xQueueReceive+0x44>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <xQueueReceive+0x46>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <xQueueReceive+0x62>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61fb      	str	r3, [r7, #28]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005392:	f001 f951 	bl	8006638 <xTaskGetSchedulerState>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d102      	bne.n	80053a2 <xQueueReceive+0x72>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <xQueueReceive+0x76>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <xQueueReceive+0x78>
 80053a6:	2300      	movs	r3, #0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <xQueueReceive+0x94>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053c4:	f001 fea8 	bl	8007118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01f      	beq.n	8005414 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d8:	f000 f8f6 	bl	80055c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	1e5a      	subs	r2, r3, #1
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00f      	beq.n	800540c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	3310      	adds	r3, #16
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 ff5b 	bl	80062ac <xTaskRemoveFromEventList>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053fc:	4b3c      	ldr	r3, [pc, #240]	@ (80054f0 <xQueueReceive+0x1c0>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800540c:	f001 feb6 	bl	800717c <vPortExitCritical>
				return pdPASS;
 8005410:	2301      	movs	r3, #1
 8005412:	e069      	b.n	80054e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800541a:	f001 feaf 	bl	800717c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800541e:	2300      	movs	r3, #0
 8005420:	e062      	b.n	80054e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005428:	f107 0310 	add.w	r3, r7, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f000 ffa1 	bl	8006374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005432:	2301      	movs	r3, #1
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005436:	f001 fea1 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800543a:	f000 fd09 	bl	8005e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800543e:	f001 fe6b 	bl	8007118 <vPortEnterCritical>
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005448:	b25b      	sxtb	r3, r3
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d103      	bne.n	8005458 <xQueueReceive+0x128>
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800545e:	b25b      	sxtb	r3, r3
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d103      	bne.n	800546e <xQueueReceive+0x13e>
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800546e:	f001 fe85 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005472:	1d3a      	adds	r2, r7, #4
 8005474:	f107 0310 	add.w	r3, r7, #16
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 ff90 	bl	80063a0 <xTaskCheckForTimeOut>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d123      	bne.n	80054ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005488:	f000 f916 	bl	80056b8 <prvIsQueueEmpty>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d017      	beq.n	80054c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	3324      	adds	r3, #36	@ 0x24
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4611      	mov	r1, r2
 800549a:	4618      	mov	r0, r3
 800549c:	f000 feb4 	bl	8006208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054a2:	f000 f8b7 	bl	8005614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054a6:	f000 fce1 	bl	8005e6c <xTaskResumeAll>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d189      	bne.n	80053c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80054b0:	4b0f      	ldr	r3, [pc, #60]	@ (80054f0 <xQueueReceive+0x1c0>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	e780      	b.n	80053c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c4:	f000 f8a6 	bl	8005614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054c8:	f000 fcd0 	bl	8005e6c <xTaskResumeAll>
 80054cc:	e77a      	b.n	80053c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d0:	f000 f8a0 	bl	8005614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054d4:	f000 fcca 	bl	8005e6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054da:	f000 f8ed 	bl	80056b8 <prvIsQueueEmpty>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f43f af6f 	beq.w	80053c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3730      	adds	r7, #48	@ 0x30
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10d      	bne.n	800552e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d14d      	bne.n	80055b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f001 f8a8 	bl	8006674 <xTaskPriorityDisinherit>
 8005524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	e043      	b.n	80055b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d119      	bne.n	8005568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6858      	ldr	r0, [r3, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	461a      	mov	r2, r3
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	f003 f837 	bl	80085b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	441a      	add	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d32b      	bcc.n	80055b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	e026      	b.n	80055b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68d8      	ldr	r0, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	461a      	mov	r2, r3
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	f003 f81d 	bl	80085b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	425b      	negs	r3, r3
 8005582:	441a      	add	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d207      	bcs.n	80055a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	425b      	negs	r3, r3
 800559e:	441a      	add	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d105      	bne.n	80055b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80055be:	697b      	ldr	r3, [r7, #20]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	441a      	add	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d303      	bcc.n	80055fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68d9      	ldr	r1, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	461a      	mov	r2, r3
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	f002 ffd3 	bl	80085b2 <memcpy>
	}
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800561c:	f001 fd7c 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005628:	e011      	b.n	800564e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d012      	beq.n	8005658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3324      	adds	r3, #36	@ 0x24
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fe38 	bl	80062ac <xTaskRemoveFromEventList>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005642:	f000 ff11 	bl	8006468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	3b01      	subs	r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800564e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	dce9      	bgt.n	800562a <prvUnlockQueue+0x16>
 8005656:	e000      	b.n	800565a <prvUnlockQueue+0x46>
					break;
 8005658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	22ff      	movs	r2, #255	@ 0xff
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005662:	f001 fd8b 	bl	800717c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005666:	f001 fd57 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005672:	e011      	b.n	8005698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3310      	adds	r3, #16
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fe13 	bl	80062ac <xTaskRemoveFromEventList>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800568c:	f000 feec 	bl	8006468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	3b01      	subs	r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800569c:	2b00      	cmp	r3, #0
 800569e:	dce9      	bgt.n	8005674 <prvUnlockQueue+0x60>
 80056a0:	e000      	b.n	80056a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	22ff      	movs	r2, #255	@ 0xff
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80056ac:	f001 fd66 	bl	800717c <vPortExitCritical>
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056c0:	f001 fd2a 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e001      	b.n	80056d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056d6:	f001 fd51 	bl	800717c <vPortExitCritical>

	return xReturn;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056ec:	f001 fd14 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d102      	bne.n	8005702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e001      	b.n	8005706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005706:	f001 fd39 	bl	800717c <vPortExitCritical>

	return xReturn;
 800570a:	68fb      	ldr	r3, [r7, #12]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e014      	b.n	800574e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005724:	4a0f      	ldr	r2, [pc, #60]	@ (8005764 <vQueueAddToRegistry+0x50>)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005730:	490c      	ldr	r1, [pc, #48]	@ (8005764 <vQueueAddToRegistry+0x50>)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800573a:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <vQueueAddToRegistry+0x50>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005746:	e006      	b.n	8005756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b07      	cmp	r3, #7
 8005752:	d9e7      	bls.n	8005724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000a80 	.word	0x20000a80

08005768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005778:	f001 fcce 	bl	8007118 <vPortEnterCritical>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005782:	b25b      	sxtb	r3, r3
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <vQueueWaitForMessageRestricted+0x2a>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005798:	b25b      	sxtb	r3, r3
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d103      	bne.n	80057a8 <vQueueWaitForMessageRestricted+0x40>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a8:	f001 fce8 	bl	800717c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	3324      	adds	r3, #36	@ 0x24
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fd49 	bl	8006254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7ff ff26 	bl	8005614 <prvUnlockQueue>
	}
 80057c8:	bf00      	nop
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08e      	sub	sp, #56	@ 0x38
 80057d4:	af04      	add	r7, sp, #16
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	623b      	str	r3, [r7, #32]
}
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	61fb      	str	r3, [r7, #28]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800581a:	23a8      	movs	r3, #168	@ 0xa8
 800581c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2ba8      	cmp	r3, #168	@ 0xa8
 8005822:	d00b      	beq.n	800583c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	61bb      	str	r3, [r7, #24]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800583c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01e      	beq.n	8005882 <xTaskCreateStatic+0xb2>
 8005844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01b      	beq.n	8005882 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	2202      	movs	r2, #2
 8005858:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800585c:	2300      	movs	r3, #0
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f851 	bl	800591c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800587c:	f000 f8f6 	bl	8005a6c <prvAddNewTaskToReadyList>
 8005880:	e001      	b.n	8005886 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005886:	697b      	ldr	r3, [r7, #20]
	}
 8005888:	4618      	mov	r0, r3
 800588a:	3728      	adds	r7, #40	@ 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	@ 0x30
 8005894:	af04      	add	r7, sp, #16
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fd59 	bl	800735c <pvPortMalloc>
 80058aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00e      	beq.n	80058d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058b2:	20a8      	movs	r0, #168	@ 0xa8
 80058b4:	f001 fd52 	bl	800735c <pvPortMalloc>
 80058b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80058c6:	e005      	b.n	80058d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058c8:	6978      	ldr	r0, [r7, #20]
 80058ca:	f001 fe15 	bl	80074f8 <vPortFree>
 80058ce:	e001      	b.n	80058d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f80f 	bl	800591c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058fe:	69f8      	ldr	r0, [r7, #28]
 8005900:	f000 f8b4 	bl	8005a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005904:	2301      	movs	r3, #1
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e002      	b.n	8005910 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005910:	69bb      	ldr	r3, [r7, #24]
	}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	461a      	mov	r2, r3
 8005934:	21a5      	movs	r1, #165	@ 0xa5
 8005936:	f002 fd5f 	bl	80083f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	3b01      	subs	r3, #1
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	617b      	str	r3, [r7, #20]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01f      	beq.n	80059bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e012      	b.n	80059a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	7819      	ldrb	r1, [r3, #0]
 800598a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	3334      	adds	r3, #52	@ 0x34
 8005992:	460a      	mov	r2, r1
 8005994:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d006      	beq.n	80059b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3301      	adds	r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d9e9      	bls.n	8005982 <prvInitialiseNewTask+0x66>
 80059ae:	e000      	b.n	80059b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80059b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ba:	e003      	b.n	80059c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	2b37      	cmp	r3, #55	@ 0x37
 80059c8:	d901      	bls.n	80059ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ca:	2337      	movs	r3, #55	@ 0x37
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	2200      	movs	r2, #0
 80059de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff f965 	bl	8004cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	3318      	adds	r3, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff f960 	bl	8004cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	3354      	adds	r3, #84	@ 0x54
 8005a1e:	224c      	movs	r2, #76	@ 0x4c
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f002 fce8 	bl	80083f8 <memset>
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a60 <prvInitialiseNewTask+0x144>)
 8005a2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <prvInitialiseNewTask+0x148>)
 8005a32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	4a0c      	ldr	r2, [pc, #48]	@ (8005a68 <prvInitialiseNewTask+0x14c>)
 8005a38:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	69b8      	ldr	r0, [r7, #24]
 8005a40:	f001 fa36 	bl	8006eb0 <pxPortInitialiseStack>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a56:	bf00      	nop
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20004d14 	.word	0x20004d14
 8005a64:	20004d7c 	.word	0x20004d7c
 8005a68:	20004de4 	.word	0x20004de4

08005a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a74:	f001 fb50 	bl	8007118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a78:	4b2d      	ldr	r3, [pc, #180]	@ (8005b30 <prvAddNewTaskToReadyList+0xc4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b30 <prvAddNewTaskToReadyList+0xc4>)
 8005a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a82:	4b2c      	ldr	r3, [pc, #176]	@ (8005b34 <prvAddNewTaskToReadyList+0xc8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005b34 <prvAddNewTaskToReadyList+0xc8>)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a90:	4b27      	ldr	r3, [pc, #156]	@ (8005b30 <prvAddNewTaskToReadyList+0xc4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d110      	bne.n	8005aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a98:	f000 fd0a 	bl	80064b0 <prvInitialiseTaskLists>
 8005a9c:	e00d      	b.n	8005aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a9e:	4b26      	ldr	r3, [pc, #152]	@ (8005b38 <prvAddNewTaskToReadyList+0xcc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005aa6:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <prvAddNewTaskToReadyList+0xc8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d802      	bhi.n	8005aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b34 <prvAddNewTaskToReadyList+0xc8>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aba:	4b20      	ldr	r3, [pc, #128]	@ (8005b3c <prvAddNewTaskToReadyList+0xd0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b3c <prvAddNewTaskToReadyList+0xd0>)
 8005ac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b3c <prvAddNewTaskToReadyList+0xd0>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <prvAddNewTaskToReadyList+0xd4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d903      	bls.n	8005ae0 <prvAddNewTaskToReadyList+0x74>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	4a18      	ldr	r2, [pc, #96]	@ (8005b40 <prvAddNewTaskToReadyList+0xd4>)
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <prvAddNewTaskToReadyList+0xd8>)
 8005aee:	441a      	add	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7ff f8e9 	bl	8004cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005afc:	f001 fb3e 	bl	800717c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b00:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <prvAddNewTaskToReadyList+0xcc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b08:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <prvAddNewTaskToReadyList+0xc8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d207      	bcs.n	8005b26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b16:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <prvAddNewTaskToReadyList+0xdc>)
 8005b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000f94 	.word	0x20000f94
 8005b34:	20000ac0 	.word	0x20000ac0
 8005b38:	20000fa0 	.word	0x20000fa0
 8005b3c:	20000fb0 	.word	0x20000fb0
 8005b40:	20000f9c 	.word	0x20000f9c
 8005b44:	20000ac4 	.word	0x20000ac4
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005b54:	f001 fae0 	bl	8007118 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <vTaskDelete+0x18>
 8005b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c14 <vTaskDelete+0xc8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	e000      	b.n	8005b66 <vTaskDelete+0x1a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff f90b 	bl	8004d88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff f902 	bl	8004d88 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005b84:	4b24      	ldr	r3, [pc, #144]	@ (8005c18 <vTaskDelete+0xcc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a23      	ldr	r2, [pc, #140]	@ (8005c18 <vTaskDelete+0xcc>)
 8005b8c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005b8e:	4b21      	ldr	r3, [pc, #132]	@ (8005c14 <vTaskDelete+0xc8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d10b      	bne.n	8005bb0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	481f      	ldr	r0, [pc, #124]	@ (8005c1c <vTaskDelete+0xd0>)
 8005ba0:	f7ff f895 	bl	8004cce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8005c20 <vTaskDelete+0xd4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <vTaskDelete+0xd4>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e009      	b.n	8005bc4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c24 <vTaskDelete+0xd8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c24 <vTaskDelete+0xd8>)
 8005bb8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fce6 	bl	800658c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005bc0:	f000 fd1a 	bl	80065f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005bc4:	f001 fada 	bl	800717c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005bc8:	4b17      	ldr	r3, [pc, #92]	@ (8005c28 <vTaskDelete+0xdc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01c      	beq.n	8005c0a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8005bd0:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <vTaskDelete+0xc8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d117      	bne.n	8005c0a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005bda:	4b14      	ldr	r3, [pc, #80]	@ (8005c2c <vTaskDelete+0xe0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <vTaskDelete+0xae>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60bb      	str	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	e7fd      	b.n	8005bf6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <vTaskDelete+0xe4>)
 8005bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000ac0 	.word	0x20000ac0
 8005c18:	20000fb0 	.word	0x20000fb0
 8005c1c:	20000f68 	.word	0x20000f68
 8005c20:	20000f7c 	.word	0x20000f7c
 8005c24:	20000f94 	.word	0x20000f94
 8005c28:	20000fa0 	.word	0x20000fa0
 8005c2c:	20000fbc 	.word	0x20000fbc
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c46:	4b14      	ldr	r3, [pc, #80]	@ (8005c98 <vTaskDelay+0x64>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <vTaskDelay+0x32>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60bb      	str	r3, [r7, #8]
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c66:	f000 f8f3 	bl	8005e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fd71 	bl	8006754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c72:	f000 f8fb 	bl	8005e6c <xTaskResumeAll>
 8005c76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c7e:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <vTaskDelay+0x68>)
 8005c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000fbc 	.word	0x20000fbc
 8005c9c:	e000ed04 	.word	0xe000ed04

08005ca0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <eTaskGetState+0x2a>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	60bb      	str	r3, [r7, #8]
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	e7fd      	b.n	8005cc6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005cca:	4b24      	ldr	r3, [pc, #144]	@ (8005d5c <eTaskGetState+0xbc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d102      	bne.n	8005cda <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e03a      	b.n	8005d50 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8005cda:	f001 fa1d 	bl	8007118 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8005ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <eTaskGetState+0xc0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005cea:	4b1e      	ldr	r3, [pc, #120]	@ (8005d64 <eTaskGetState+0xc4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005cf0:	f001 fa44 	bl	800717c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d003      	beq.n	8005d04 <eTaskGetState+0x64>
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d102      	bne.n	8005d0a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005d04:	2302      	movs	r3, #2
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e022      	b.n	8005d50 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4a16      	ldr	r2, [pc, #88]	@ (8005d68 <eTaskGetState+0xc8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d112      	bne.n	8005d38 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d102      	bne.n	8005d2c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e011      	b.n	8005d50 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e00e      	b.n	8005d50 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005d32:	2302      	movs	r3, #2
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e00b      	b.n	8005d50 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d6c <eTaskGetState+0xcc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d002      	beq.n	8005d46 <eTaskGetState+0xa6>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005d46:	2304      	movs	r3, #4
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e001      	b.n	8005d50 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005d50:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000ac0 	.word	0x20000ac0
 8005d60:	20000f4c 	.word	0x20000f4c
 8005d64:	20000f50 	.word	0x20000f50
 8005d68:	20000f80 	.word	0x20000f80
 8005d6c:	20000f68 	.word	0x20000f68

08005d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d7e:	463a      	mov	r2, r7
 8005d80:	1d39      	adds	r1, r7, #4
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe ff40 	bl	8004c0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	9202      	str	r2, [sp, #8]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	460a      	mov	r2, r1
 8005d9e:	4924      	ldr	r1, [pc, #144]	@ (8005e30 <vTaskStartScheduler+0xc0>)
 8005da0:	4824      	ldr	r0, [pc, #144]	@ (8005e34 <vTaskStartScheduler+0xc4>)
 8005da2:	f7ff fd15 	bl	80057d0 <xTaskCreateStatic>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4a23      	ldr	r2, [pc, #140]	@ (8005e38 <vTaskStartScheduler+0xc8>)
 8005daa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dac:	4b22      	ldr	r3, [pc, #136]	@ (8005e38 <vTaskStartScheduler+0xc8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e001      	b.n	8005dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dc4:	f000 fd1a 	bl	80067fc <xTimerCreateTimerTask>
 8005dc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d11b      	bne.n	8005e08 <vTaskStartScheduler+0x98>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005de4:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <vTaskStartScheduler+0xcc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3354      	adds	r3, #84	@ 0x54
 8005dea:	4a15      	ldr	r2, [pc, #84]	@ (8005e40 <vTaskStartScheduler+0xd0>)
 8005dec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dee:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <vTaskStartScheduler+0xd4>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005df6:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <vTaskStartScheduler+0xd8>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <vTaskStartScheduler+0xdc>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e02:	f001 f8e5 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e06:	e00f      	b.n	8005e28 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d10b      	bne.n	8005e28 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <vTaskStartScheduler+0xb4>
}
 8005e28:	bf00      	nop
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	0800a424 	.word	0x0800a424
 8005e34:	08006481 	.word	0x08006481
 8005e38:	20000fb8 	.word	0x20000fb8
 8005e3c:	20000ac0 	.word	0x20000ac0
 8005e40:	2000001c 	.word	0x2000001c
 8005e44:	20000fb4 	.word	0x20000fb4
 8005e48:	20000fa0 	.word	0x20000fa0
 8005e4c:	20000f98 	.word	0x20000f98

08005e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e54:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <vTaskSuspendAll+0x18>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4a03      	ldr	r2, [pc, #12]	@ (8005e68 <vTaskSuspendAll+0x18>)
 8005e5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	20000fbc 	.word	0x20000fbc

08005e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e7a:	4b42      	ldr	r3, [pc, #264]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	603b      	str	r3, [r7, #0]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e9a:	f001 f93d 	bl	8007118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e9e:	4b39      	ldr	r3, [pc, #228]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	4a37      	ldr	r2, [pc, #220]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005ea6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea8:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d162      	bne.n	8005f76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eb0:	4b35      	ldr	r3, [pc, #212]	@ (8005f88 <xTaskResumeAll+0x11c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d05e      	beq.n	8005f76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb8:	e02f      	b.n	8005f1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eba:	4b34      	ldr	r3, [pc, #208]	@ (8005f8c <xTaskResumeAll+0x120>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe ff5e 	bl	8004d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe ff59 	bl	8004d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eda:	4b2d      	ldr	r3, [pc, #180]	@ (8005f90 <xTaskResumeAll+0x124>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d903      	bls.n	8005eea <xTaskResumeAll+0x7e>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <xTaskResumeAll+0x124>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4a27      	ldr	r2, [pc, #156]	@ (8005f94 <xTaskResumeAll+0x128>)
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f7fe fee4 	bl	8004cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0a:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <xTaskResumeAll+0x12c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f14:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <xTaskResumeAll+0x130>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f8c <xTaskResumeAll+0x120>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1cb      	bne.n	8005eba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f28:	f000 fb66 	bl	80065f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <xTaskResumeAll+0x134>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d010      	beq.n	8005f5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f38:	f000 f846 	bl	8005fc8 <xTaskIncrementTick>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f42:	4b16      	ldr	r3, [pc, #88]	@ (8005f9c <xTaskResumeAll+0x130>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f1      	bne.n	8005f38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f54:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <xTaskResumeAll+0x134>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f5a:	4b10      	ldr	r3, [pc, #64]	@ (8005f9c <xTaskResumeAll+0x130>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <xTaskResumeAll+0x138>)
 8005f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 f901 	bl	800717c <vPortExitCritical>

	return xAlreadyYielded;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000fbc 	.word	0x20000fbc
 8005f88:	20000f94 	.word	0x20000f94
 8005f8c:	20000f54 	.word	0x20000f54
 8005f90:	20000f9c 	.word	0x20000f9c
 8005f94:	20000ac4 	.word	0x20000ac4
 8005f98:	20000ac0 	.word	0x20000ac0
 8005f9c:	20000fa8 	.word	0x20000fa8
 8005fa0:	20000fa4 	.word	0x20000fa4
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fae:	4b05      	ldr	r3, [pc, #20]	@ (8005fc4 <xTaskGetTickCount+0x1c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fb4:	687b      	ldr	r3, [r7, #4]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000f98 	.word	0x20000f98

08005fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006110 <xTaskIncrementTick+0x148>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 8090 	bne.w	80060fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006114 <xTaskIncrementTick+0x14c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8006114 <xTaskIncrementTick+0x14c>)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d121      	bne.n	8006034 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ff0:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <xTaskIncrementTick+0x150>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	603b      	str	r3, [r7, #0]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xTaskIncrementTick+0x46>
 8006012:	4b41      	ldr	r3, [pc, #260]	@ (8006118 <xTaskIncrementTick+0x150>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	4b40      	ldr	r3, [pc, #256]	@ (800611c <xTaskIncrementTick+0x154>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3e      	ldr	r2, [pc, #248]	@ (8006118 <xTaskIncrementTick+0x150>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4a3e      	ldr	r2, [pc, #248]	@ (800611c <xTaskIncrementTick+0x154>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b3e      	ldr	r3, [pc, #248]	@ (8006120 <xTaskIncrementTick+0x158>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a3c      	ldr	r2, [pc, #240]	@ (8006120 <xTaskIncrementTick+0x158>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	f000 fae2 	bl	80065f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006034:	4b3b      	ldr	r3, [pc, #236]	@ (8006124 <xTaskIncrementTick+0x15c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	429a      	cmp	r2, r3
 800603c:	d349      	bcc.n	80060d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800603e:	4b36      	ldr	r3, [pc, #216]	@ (8006118 <xTaskIncrementTick+0x150>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006048:	4b36      	ldr	r3, [pc, #216]	@ (8006124 <xTaskIncrementTick+0x15c>)
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	601a      	str	r2, [r3, #0]
					break;
 8006050:	e03f      	b.n	80060d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006052:	4b31      	ldr	r3, [pc, #196]	@ (8006118 <xTaskIncrementTick+0x150>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d203      	bcs.n	8006072 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800606a:	4a2e      	ldr	r2, [pc, #184]	@ (8006124 <xTaskIncrementTick+0x15c>)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006070:	e02f      	b.n	80060d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3304      	adds	r3, #4
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fe86 	bl	8004d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3318      	adds	r3, #24
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fe7d 	bl	8004d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	4b25      	ldr	r3, [pc, #148]	@ (8006128 <xTaskIncrementTick+0x160>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d903      	bls.n	80060a2 <xTaskIncrementTick+0xda>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	4a22      	ldr	r2, [pc, #136]	@ (8006128 <xTaskIncrementTick+0x160>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <xTaskIncrementTick+0x164>)
 80060b0:	441a      	add	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe fe08 	bl	8004cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <xTaskIncrementTick+0x168>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3b8      	bcc.n	800603e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d0:	e7b5      	b.n	800603e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060d2:	4b17      	ldr	r3, [pc, #92]	@ (8006130 <xTaskIncrementTick+0x168>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d8:	4914      	ldr	r1, [pc, #80]	@ (800612c <xTaskIncrementTick+0x164>)
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d901      	bls.n	80060ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ee:	4b11      	ldr	r3, [pc, #68]	@ (8006134 <xTaskIncrementTick+0x16c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e004      	b.n	8006106 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <xTaskIncrementTick+0x170>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	4a0d      	ldr	r2, [pc, #52]	@ (8006138 <xTaskIncrementTick+0x170>)
 8006104:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006106:	697b      	ldr	r3, [r7, #20]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000fbc 	.word	0x20000fbc
 8006114:	20000f98 	.word	0x20000f98
 8006118:	20000f4c 	.word	0x20000f4c
 800611c:	20000f50 	.word	0x20000f50
 8006120:	20000fac 	.word	0x20000fac
 8006124:	20000fb4 	.word	0x20000fb4
 8006128:	20000f9c 	.word	0x20000f9c
 800612c:	20000ac4 	.word	0x20000ac4
 8006130:	20000ac0 	.word	0x20000ac0
 8006134:	20000fa8 	.word	0x20000fa8
 8006138:	20000fa4 	.word	0x20000fa4

0800613c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006142:	4b2b      	ldr	r3, [pc, #172]	@ (80061f0 <vTaskSwitchContext+0xb4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800614a:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <vTaskSwitchContext+0xb8>)
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006150:	e047      	b.n	80061e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006152:	4b28      	ldr	r3, [pc, #160]	@ (80061f4 <vTaskSwitchContext+0xb8>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006158:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <vTaskSwitchContext+0xbc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e011      	b.n	8006184 <vTaskSwitchContext+0x48>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <vTaskSwitchContext+0x42>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	607b      	str	r3, [r7, #4]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <vTaskSwitchContext+0x3e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3b01      	subs	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	491d      	ldr	r1, [pc, #116]	@ (80061fc <vTaskSwitchContext+0xc0>)
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0e3      	beq.n	8006160 <vTaskSwitchContext+0x24>
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <vTaskSwitchContext+0xc0>)
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3308      	adds	r3, #8
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d104      	bne.n	80061c8 <vTaskSwitchContext+0x8c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006200 <vTaskSwitchContext+0xc4>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <vTaskSwitchContext+0xbc>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061d8:	4b09      	ldr	r3, [pc, #36]	@ (8006200 <vTaskSwitchContext+0xc4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3354      	adds	r3, #84	@ 0x54
 80061de:	4a09      	ldr	r2, [pc, #36]	@ (8006204 <vTaskSwitchContext+0xc8>)
 80061e0:	6013      	str	r3, [r2, #0]
}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000fbc 	.word	0x20000fbc
 80061f4:	20000fa8 	.word	0x20000fa8
 80061f8:	20000f9c 	.word	0x20000f9c
 80061fc:	20000ac4 	.word	0x20000ac4
 8006200:	20000ac0 	.word	0x20000ac0
 8006204:	2000001c 	.word	0x2000001c

08006208 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60fb      	str	r3, [r7, #12]
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <vTaskPlaceOnEventList+0x48>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3318      	adds	r3, #24
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fe fd6c 	bl	8004d16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800623e:	2101      	movs	r1, #1
 8006240:	6838      	ldr	r0, [r7, #0]
 8006242:	f000 fa87 	bl	8006754 <prvAddCurrentTaskToDelayedList>
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000ac0 	.word	0x20000ac0

08006254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10b      	bne.n	800627e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	617b      	str	r3, [r7, #20]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3318      	adds	r3, #24
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7fe fd21 	bl	8004cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	68b8      	ldr	r0, [r7, #8]
 800629c:	f000 fa5a 	bl	8006754 <prvAddCurrentTaskToDelayedList>
	}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000ac0 	.word	0x20000ac0

080062ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fd52 	bl	8004d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e4:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <xTaskRemoveFromEventList+0xb0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11d      	bne.n	8006328 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fd49 	bl	8004d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4b19      	ldr	r3, [pc, #100]	@ (8006360 <xTaskRemoveFromEventList+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d903      	bls.n	800630a <xTaskRemoveFromEventList+0x5e>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <xTaskRemoveFromEventList+0xb4>)
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a13      	ldr	r2, [pc, #76]	@ (8006364 <xTaskRemoveFromEventList+0xb8>)
 8006318:	441a      	add	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7fe fcd4 	bl	8004cce <vListInsertEnd>
 8006326:	e005      	b.n	8006334 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	3318      	adds	r3, #24
 800632c:	4619      	mov	r1, r3
 800632e:	480e      	ldr	r0, [pc, #56]	@ (8006368 <xTaskRemoveFromEventList+0xbc>)
 8006330:	f7fe fccd 	bl	8004cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006338:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <xTaskRemoveFromEventList+0xc0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	429a      	cmp	r2, r3
 8006340:	d905      	bls.n	800634e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006346:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <xTaskRemoveFromEventList+0xc4>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e001      	b.n	8006352 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006352:	697b      	ldr	r3, [r7, #20]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000fbc 	.word	0x20000fbc
 8006360:	20000f9c 	.word	0x20000f9c
 8006364:	20000ac4 	.word	0x20000ac4
 8006368:	20000f54 	.word	0x20000f54
 800636c:	20000ac0 	.word	0x20000ac0
 8006370:	20000fa8 	.word	0x20000fa8

08006374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <vTaskInternalSetTimeOutState+0x24>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006384:	4b05      	ldr	r3, [pc, #20]	@ (800639c <vTaskInternalSetTimeOutState+0x28>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	605a      	str	r2, [r3, #4]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000fac 	.word	0x20000fac
 800639c:	20000f98 	.word	0x20000f98

080063a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	e7fd      	b.n	80063c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063e6:	f000 fe97 	bl	8007118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006460 <xTaskCheckForTimeOut+0xc0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e023      	b.n	8006452 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <xTaskCheckForTimeOut+0xc4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d007      	beq.n	8006426 <xTaskCheckForTimeOut+0x86>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e015      	b.n	8006452 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20b      	bcs.n	8006448 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff99 	bl	8006374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e004      	b.n	8006452 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f000 fe93 	bl	800717c <vPortExitCritical>

	return xReturn;
 8006456:	69fb      	ldr	r3, [r7, #28]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000f98 	.word	0x20000f98
 8006464:	20000fac 	.word	0x20000fac

08006468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800646c:	4b03      	ldr	r3, [pc, #12]	@ (800647c <vTaskMissedYield+0x14>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000fa8 	.word	0x20000fa8

08006480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006488:	f000 f852 	bl	8006530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <prvIdleTask+0x28>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d9f9      	bls.n	8006488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006494:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <prvIdleTask+0x2c>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a4:	e7f0      	b.n	8006488 <prvIdleTask+0x8>
 80064a6:	bf00      	nop
 80064a8:	20000ac4 	.word	0x20000ac4
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e00c      	b.n	80064d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a12      	ldr	r2, [pc, #72]	@ (8006510 <prvInitialiseTaskLists+0x60>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fbd2 	bl	8004c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b37      	cmp	r3, #55	@ 0x37
 80064da:	d9ef      	bls.n	80064bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064dc:	480d      	ldr	r0, [pc, #52]	@ (8006514 <prvInitialiseTaskLists+0x64>)
 80064de:	f7fe fbc9 	bl	8004c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064e2:	480d      	ldr	r0, [pc, #52]	@ (8006518 <prvInitialiseTaskLists+0x68>)
 80064e4:	f7fe fbc6 	bl	8004c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064e8:	480c      	ldr	r0, [pc, #48]	@ (800651c <prvInitialiseTaskLists+0x6c>)
 80064ea:	f7fe fbc3 	bl	8004c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ee:	480c      	ldr	r0, [pc, #48]	@ (8006520 <prvInitialiseTaskLists+0x70>)
 80064f0:	f7fe fbc0 	bl	8004c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f4:	480b      	ldr	r0, [pc, #44]	@ (8006524 <prvInitialiseTaskLists+0x74>)
 80064f6:	f7fe fbbd 	bl	8004c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006528 <prvInitialiseTaskLists+0x78>)
 80064fc:	4a05      	ldr	r2, [pc, #20]	@ (8006514 <prvInitialiseTaskLists+0x64>)
 80064fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006500:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <prvInitialiseTaskLists+0x7c>)
 8006502:	4a05      	ldr	r2, [pc, #20]	@ (8006518 <prvInitialiseTaskLists+0x68>)
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000ac4 	.word	0x20000ac4
 8006514:	20000f24 	.word	0x20000f24
 8006518:	20000f38 	.word	0x20000f38
 800651c:	20000f54 	.word	0x20000f54
 8006520:	20000f68 	.word	0x20000f68
 8006524:	20000f80 	.word	0x20000f80
 8006528:	20000f4c 	.word	0x20000f4c
 800652c:	20000f50 	.word	0x20000f50

08006530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006536:	e019      	b.n	800656c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006538:	f000 fdee 	bl	8007118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <prvCheckTasksWaitingTermination+0x50>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fc1d 	bl	8004d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a0b      	ldr	r2, [pc, #44]	@ (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006558:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <prvCheckTasksWaitingTermination+0x58>)
 8006560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006562:	f000 fe0b 	bl	800717c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f810 	bl	800658c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656c:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e1      	bne.n	8006538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000f68 	.word	0x20000f68
 8006584:	20000f94 	.word	0x20000f94
 8006588:	20000f7c 	.word	0x20000f7c

0800658c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3354      	adds	r3, #84	@ 0x54
 8006598:	4618      	mov	r0, r3
 800659a:	f001 ff49 	bl	8008430 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d108      	bne.n	80065ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 ffa3 	bl	80074f8 <vPortFree>
				vPortFree( pxTCB );
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 ffa0 	bl	80074f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065b8:	e019      	b.n	80065ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d103      	bne.n	80065cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 ff97 	bl	80074f8 <vPortFree>
	}
 80065ca:	e010      	b.n	80065ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d00b      	beq.n	80065ee <prvDeleteTCB+0x62>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <prvDeleteTCB+0x5e>
	}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <prvResetNextTaskUnblockTime+0x38>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006608:	4b0a      	ldr	r3, [pc, #40]	@ (8006634 <prvResetNextTaskUnblockTime+0x3c>)
 800660a:	f04f 32ff 	mov.w	r2, #4294967295
 800660e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006610:	e008      	b.n	8006624 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <prvResetNextTaskUnblockTime+0x38>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a04      	ldr	r2, [pc, #16]	@ (8006634 <prvResetNextTaskUnblockTime+0x3c>)
 8006622:	6013      	str	r3, [r2, #0]
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	20000f4c 	.word	0x20000f4c
 8006634:	20000fb4 	.word	0x20000fb4

08006638 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800663e:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <xTaskGetSchedulerState+0x34>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006646:	2301      	movs	r3, #1
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	e008      	b.n	800665e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664c:	4b08      	ldr	r3, [pc, #32]	@ (8006670 <xTaskGetSchedulerState+0x38>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006654:	2302      	movs	r3, #2
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	e001      	b.n	800665e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800665e:	687b      	ldr	r3, [r7, #4]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	20000fa0 	.word	0x20000fa0
 8006670:	20000fbc 	.word	0x20000fbc

08006674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d058      	beq.n	800673c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800668a:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <xTaskPriorityDisinherit+0xd4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d00b      	beq.n	80066ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10b      	bne.n	80066cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	60bb      	str	r3, [r7, #8]
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	e7fd      	b.n	80066c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d0:	1e5a      	subs	r2, r3, #1
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d02c      	beq.n	800673c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d128      	bne.n	800673c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fb4a 	bl	8004d88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670c:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <xTaskPriorityDisinherit+0xd8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d903      	bls.n	800671c <xTaskPriorityDisinherit+0xa8>
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	4a0c      	ldr	r2, [pc, #48]	@ (800674c <xTaskPriorityDisinherit+0xd8>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4a09      	ldr	r2, [pc, #36]	@ (8006750 <xTaskPriorityDisinherit+0xdc>)
 800672a:	441a      	add	r2, r3
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe facb 	bl	8004cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800673c:	697b      	ldr	r3, [r7, #20]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000ac0 	.word	0x20000ac0
 800674c:	20000f9c 	.word	0x20000f9c
 8006750:	20000ac4 	.word	0x20000ac4

08006754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800675e:	4b21      	ldr	r3, [pc, #132]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006764:	4b20      	ldr	r3, [pc, #128]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fb0c 	bl	8004d88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d10a      	bne.n	800678e <prvAddCurrentTaskToDelayedList+0x3a>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4819      	ldr	r0, [pc, #100]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006788:	f7fe faa1 	bl	8004cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800678c:	e026      	b.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006796:	4b14      	ldr	r3, [pc, #80]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d209      	bcs.n	80067ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a6:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b0f      	ldr	r3, [pc, #60]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f7fe faaf 	bl	8004d16 <vListInsert>
}
 80067b8:	e010      	b.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ba:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe faa5 	bl	8004d16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067cc:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d202      	bcs.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067d6:	4a08      	ldr	r2, [pc, #32]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6013      	str	r3, [r2, #0]
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000f98 	.word	0x20000f98
 80067e8:	20000ac0 	.word	0x20000ac0
 80067ec:	20000f80 	.word	0x20000f80
 80067f0:	20000f50 	.word	0x20000f50
 80067f4:	20000f4c 	.word	0x20000f4c
 80067f8:	20000fb4 	.word	0x20000fb4

080067fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	@ 0x28
 8006800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006806:	f000 fb13 	bl	8006e30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800680a:	4b1d      	ldr	r3, [pc, #116]	@ (8006880 <xTimerCreateTimerTask+0x84>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d021      	beq.n	8006856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800681a:	1d3a      	adds	r2, r7, #4
 800681c:	f107 0108 	add.w	r1, r7, #8
 8006820:	f107 030c 	add.w	r3, r7, #12
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fa0b 	bl	8004c40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	9202      	str	r2, [sp, #8]
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	2302      	movs	r3, #2
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	460a      	mov	r2, r1
 800683c:	4911      	ldr	r1, [pc, #68]	@ (8006884 <xTimerCreateTimerTask+0x88>)
 800683e:	4812      	ldr	r0, [pc, #72]	@ (8006888 <xTimerCreateTimerTask+0x8c>)
 8006840:	f7fe ffc6 	bl	80057d0 <xTaskCreateStatic>
 8006844:	4603      	mov	r3, r0
 8006846:	4a11      	ldr	r2, [pc, #68]	@ (800688c <xTimerCreateTimerTask+0x90>)
 8006848:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800684a:	4b10      	ldr	r3, [pc, #64]	@ (800688c <xTimerCreateTimerTask+0x90>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006852:	2301      	movs	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006874:	697b      	ldr	r3, [r7, #20]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000ff0 	.word	0x20000ff0
 8006884:	0800a42c 	.word	0x0800a42c
 8006888:	080069c9 	.word	0x080069c9
 800688c:	20000ff4 	.word	0x20000ff4

08006890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	623b      	str	r3, [r7, #32]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068c0:	4b19      	ldr	r3, [pc, #100]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d02a      	beq.n	800691e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	dc18      	bgt.n	800690c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068da:	f7ff fead 	bl	8006638 <xTaskGetSchedulerState>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d109      	bne.n	80068f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068e4:	4b10      	ldr	r3, [pc, #64]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	f107 0110 	add.w	r1, r7, #16
 80068ec:	2300      	movs	r3, #0
 80068ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f0:	f7fe fb7e 	bl	8004ff0 <xQueueGenericSend>
 80068f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068f6:	e012      	b.n	800691e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	f107 0110 	add.w	r1, r7, #16
 8006900:	2300      	movs	r3, #0
 8006902:	2200      	movs	r2, #0
 8006904:	f7fe fb74 	bl	8004ff0 <xQueueGenericSend>
 8006908:	6278      	str	r0, [r7, #36]	@ 0x24
 800690a:	e008      	b.n	800691e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800690c:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <xTimerGenericCommand+0x98>)
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	f107 0110 	add.w	r1, r7, #16
 8006914:	2300      	movs	r3, #0
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	f7fe fc6c 	bl	80051f4 <xQueueGenericSendFromISR>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	@ 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000ff0 	.word	0x20000ff0

0800692c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	4b23      	ldr	r3, [pc, #140]	@ (80069c4 <prvProcessExpiredTimer+0x98>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fa1f 	bl	8004d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d023      	beq.n	80069a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	18d1      	adds	r1, r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	6978      	ldr	r0, [r7, #20]
 8006966:	f000 f8d5 	bl	8006b14 <prvInsertTimerInActiveList>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006970:	2300      	movs	r3, #0
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	2100      	movs	r1, #0
 800697a:	6978      	ldr	r0, [r7, #20]
 800697c:	f7ff ff88 	bl	8006890 <xTimerGenericCommand>
 8006980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d114      	bne.n	80069b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	6978      	ldr	r0, [r7, #20]
 80069b8:	4798      	blx	r3
}
 80069ba:	bf00      	nop
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000fe8 	.word	0x20000fe8

080069c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f859 	bl	8006a8c <prvGetNextExpireTime>
 80069da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f805 	bl	80069f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069e6:	f000 f8d7 	bl	8006b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ea:	bf00      	nop
 80069ec:	e7f0      	b.n	80069d0 <prvTimerTask+0x8>
	...

080069f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069fa:	f7ff fa29 	bl	8005e50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069fe:	f107 0308 	add.w	r3, r7, #8
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f866 	bl	8006ad4 <prvSampleTimeNow>
 8006a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d130      	bne.n	8006a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <prvProcessTimerOrBlockTask+0x3c>
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d806      	bhi.n	8006a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a1e:	f7ff fa25 	bl	8005e6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff81 	bl	800692c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a2a:	e024      	b.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a32:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <prvProcessTimerOrBlockTask+0x90>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <prvProcessTimerOrBlockTask+0x50>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <prvProcessTimerOrBlockTask+0x52>
 8006a40:	2300      	movs	r3, #0
 8006a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a44:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <prvProcessTimerOrBlockTask+0x94>)
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fe fe89 	bl	8005768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a56:	f7ff fa09 	bl	8005e6c <xTaskResumeAll>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a60:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <prvProcessTimerOrBlockTask+0x98>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
}
 8006a70:	e001      	b.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a72:	f7ff f9fb 	bl	8005e6c <xTaskResumeAll>
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000fec 	.word	0x20000fec
 8006a84:	20000ff0 	.word	0x20000ff0
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a94:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad0 <prvGetNextExpireTime+0x44>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <prvGetNextExpireTime+0x16>
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	e000      	b.n	8006aa4 <prvGetNextExpireTime+0x18>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <prvGetNextExpireTime+0x44>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e001      	b.n	8006ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000fe8 	.word	0x20000fe8

08006ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006adc:	f7ff fa64 	bl	8005fa8 <xTaskGetTickCount>
 8006ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <prvSampleTimeNow+0x3c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d205      	bcs.n	8006af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006aec:	f000 f93a 	bl	8006d64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e002      	b.n	8006afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006afe:	4a04      	ldr	r2, [pc, #16]	@ (8006b10 <prvSampleTimeNow+0x3c>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000ff8 	.word	0x20000ff8

08006b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d812      	bhi.n	8006b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e01b      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <prvInsertTimerInActiveList+0x7c>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7fe f8dc 	bl	8004d16 <vListInsert>
 8006b5e:	e012      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d206      	bcs.n	8006b76 <prvInsertTimerInActiveList+0x62>
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e007      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b76:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <prvInsertTimerInActiveList+0x80>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f7fe f8c8 	bl	8004d16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b86:	697b      	ldr	r3, [r7, #20]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000fec 	.word	0x20000fec
 8006b94:	20000fe8 	.word	0x20000fe8

08006b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	@ 0x38
 8006b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b9e:	e0ce      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da19      	bge.n	8006bda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	3304      	adds	r3, #4
 8006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	61fb      	str	r3, [r7, #28]
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	e7fd      	b.n	8006bc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	6850      	ldr	r0, [r2, #4]
 8006bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f2c0 80ae 	blt.w	8006d3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe f8c8 	bl	8004d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff6a 	bl	8006ad4 <prvSampleTimeNow>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	f200 8097 	bhi.w	8006d38 <prvProcessReceivedCommands+0x1a0>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <prvProcessReceivedCommands+0x78>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006caf 	.word	0x08006caf
 8006c20:	08006cc3 	.word	0x08006cc3
 8006c24:	08006d0f 	.word	0x08006d0f
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c39 	.word	0x08006c39
 8006c30:	08006caf 	.word	0x08006caf
 8006c34:	08006cc3 	.word	0x08006cc3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	18d1      	adds	r1, r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c58:	f7ff ff5c 	bl	8006b14 <prvInsertTimerInActiveList>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d06c      	beq.n	8006d3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d061      	beq.n	8006d3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	441a      	add	r2, r3
 8006c80:	2300      	movs	r3, #0
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c8a:	f7ff fe01 	bl	8006890 <xTimerGenericCommand>
 8006c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d152      	bne.n	8006d3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	61bb      	str	r3, [r7, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cc0:	e03d      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	617b      	str	r3, [r7, #20]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	18d1      	adds	r1, r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d08:	f7ff ff04 	bl	8006b14 <prvInsertTimerInActiveList>
					break;
 8006d0c:	e017      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1e:	f000 fbeb 	bl	80074f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d22:	e00c      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d36:	e002      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d3e:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <prvProcessReceivedCommands+0x1c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	1d39      	adds	r1, r7, #4
 8006d44:	2200      	movs	r2, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe faf2 	bl	8005330 <xQueueReceive>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f47f af26 	bne.w	8006ba0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3730      	adds	r7, #48	@ 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000ff0 	.word	0x20000ff0

08006d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d6a:	e049      	b.n	8006e00 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d76:	4b2c      	ldr	r3, [pc, #176]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fd ffff 	bl	8004d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02f      	beq.n	8006e00 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4413      	add	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90e      	bls.n	8006dd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7fd ffa4 	bl	8004d16 <vListInsert>
 8006dce:	e017      	b.n	8006e00 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff fd58 	bl	8006890 <xTimerGenericCommand>
 8006de0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10b      	bne.n	8006e00 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	603b      	str	r3, [r7, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e00:	4b09      	ldr	r3, [pc, #36]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1b0      	bne.n	8006d6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e0a:	4b07      	ldr	r3, [pc, #28]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <prvSwitchTimerLists+0xc8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e18:	4a04      	ldr	r2, [pc, #16]	@ (8006e2c <prvSwitchTimerLists+0xc8>)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000fe8 	.word	0x20000fe8
 8006e2c:	20000fec 	.word	0x20000fec

08006e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e36:	f000 f96f 	bl	8007118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e3a:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d120      	bne.n	8006e84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e42:	4814      	ldr	r0, [pc, #80]	@ (8006e94 <prvCheckForValidListAndQueue+0x64>)
 8006e44:	f7fd ff16 	bl	8004c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e48:	4813      	ldr	r0, [pc, #76]	@ (8006e98 <prvCheckForValidListAndQueue+0x68>)
 8006e4a:	f7fd ff13 	bl	8004c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e4e:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <prvCheckForValidListAndQueue+0x6c>)
 8006e50:	4a10      	ldr	r2, [pc, #64]	@ (8006e94 <prvCheckForValidListAndQueue+0x64>)
 8006e52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e54:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <prvCheckForValidListAndQueue+0x70>)
 8006e56:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <prvCheckForValidListAndQueue+0x68>)
 8006e58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <prvCheckForValidListAndQueue+0x74>)
 8006e60:	4a11      	ldr	r2, [pc, #68]	@ (8006ea8 <prvCheckForValidListAndQueue+0x78>)
 8006e62:	2110      	movs	r1, #16
 8006e64:	200a      	movs	r0, #10
 8006e66:	f7fe f823 	bl	8004eb0 <xQueueGenericCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e70:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	490b      	ldr	r1, [pc, #44]	@ (8006eac <prvCheckForValidListAndQueue+0x7c>)
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fc48 	bl	8005714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e84:	f000 f97a 	bl	800717c <vPortExitCritical>
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000ff0 	.word	0x20000ff0
 8006e94:	20000fc0 	.word	0x20000fc0
 8006e98:	20000fd4 	.word	0x20000fd4
 8006e9c:	20000fe8 	.word	0x20000fe8
 8006ea0:	20000fec 	.word	0x20000fec
 8006ea4:	2000109c 	.word	0x2000109c
 8006ea8:	20000ffc 	.word	0x20000ffc
 8006eac:	0800a434 	.word	0x0800a434

08006eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b04      	subs	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0201 	bic.w	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <pxPortInitialiseStack+0x64>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b14      	subs	r3, #20
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f06f 0202 	mvn.w	r2, #2
 8006efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3b20      	subs	r3, #32
 8006f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	08006f19 	.word	0x08006f19

08006f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f22:	4b13      	ldr	r3, [pc, #76]	@ (8006f70 <prvTaskExitError+0x58>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d00b      	beq.n	8006f44 <prvTaskExitError+0x2c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60fb      	str	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <prvTaskExitError+0x28>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60bb      	str	r3, [r7, #8]
}
 8006f56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f58:	bf00      	nop
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0fc      	beq.n	8006f5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	2000000c 	.word	0x2000000c
	...

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	@ (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b47      	ldr	r3, [pc, #284]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a47      	ldr	r2, [pc, #284]	@ (80070f8 <xPortStartScheduler+0x128>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10b      	bne.n	8006ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80070fc <xPortStartScheduler+0x12c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10b      	bne.n	800701a <xPortStartScheduler+0x4a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	613b      	str	r3, [r7, #16]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800701a:	4b39      	ldr	r3, [pc, #228]	@ (8007100 <xPortStartScheduler+0x130>)
 800701c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	22ff      	movs	r2, #255	@ 0xff
 800702a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <xPortStartScheduler+0x134>)
 8007040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <xPortStartScheduler+0x138>)
 8007044:	2207      	movs	r2, #7
 8007046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007048:	e009      	b.n	800705e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800704a:	4b2f      	ldr	r3, [pc, #188]	@ (8007108 <xPortStartScheduler+0x138>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3b01      	subs	r3, #1
 8007050:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <xPortStartScheduler+0x138>)
 8007052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b80      	cmp	r3, #128	@ 0x80
 8007068:	d0ef      	beq.n	800704a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800706a:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <xPortStartScheduler+0x138>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f1c3 0307 	rsb	r3, r3, #7
 8007072:	2b04      	cmp	r3, #4
 8007074:	d00b      	beq.n	800708e <xPortStartScheduler+0xbe>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800708e:	4b1e      	ldr	r3, [pc, #120]	@ (8007108 <xPortStartScheduler+0x138>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	4a1c      	ldr	r2, [pc, #112]	@ (8007108 <xPortStartScheduler+0x138>)
 8007096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007098:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <xPortStartScheduler+0x138>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070a0:	4a19      	ldr	r2, [pc, #100]	@ (8007108 <xPortStartScheduler+0x138>)
 80070a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070ac:	4b17      	ldr	r3, [pc, #92]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a16      	ldr	r2, [pc, #88]	@ (800710c <xPortStartScheduler+0x13c>)
 80070b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a13      	ldr	r2, [pc, #76]	@ (800710c <xPortStartScheduler+0x13c>)
 80070be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070c4:	f000 f8da 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c8:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <xPortStartScheduler+0x140>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070ce:	f000 f8f9 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070d2:	4b10      	ldr	r3, [pc, #64]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070de:	f7ff ff63 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070e2:	f7ff f82b 	bl	800613c <vTaskSwitchContext>
	prvTaskExitError();
 80070e6:	f7ff ff17 	bl	8006f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	e000ed00 	.word	0xe000ed00
 80070f8:	410fc271 	.word	0x410fc271
 80070fc:	410fc270 	.word	0x410fc270
 8007100:	e000e400 	.word	0xe000e400
 8007104:	200010ec 	.word	0x200010ec
 8007108:	200010f0 	.word	0x200010f0
 800710c:	e000ed20 	.word	0xe000ed20
 8007110:	2000000c 	.word	0x2000000c
 8007114:	e000ef34 	.word	0xe000ef34

08007118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <vPortEnterCritical+0x5c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0e      	ldr	r2, [pc, #56]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800713c:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d110      	bne.n	8007166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <vPortEnterCritical+0x60>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <vPortEnterCritical+0x4e>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	603b      	str	r3, [r7, #0]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vPortEnterCritical+0x4a>
	}
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <vPortExitCritical+0x26>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <vPortExitCritical+0x50>)
 80071aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <vPortExitCritical+0x50>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <vPortExitCritical+0x44>
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f383 8811 	msr	BASEPRI, r3
}
 80071be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe ff9c 	bl	800613c <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe feb9 	bl	8005fc8 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <xPortSysTickHandler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	@ (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	@ (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	@ (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d915      	bls.n	8007316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a18      	ldr	r2, [pc, #96]	@ (800734c <vPortValidateInterruptPriority+0x74>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <vPortValidateInterruptPriority+0x78>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20b      	bcs.n	8007316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <vPortValidateInterruptPriority+0x7c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800731e:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <vPortValidateInterruptPriority+0x80>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90b      	bls.n	800733e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	603b      	str	r3, [r7, #0]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <vPortValidateInterruptPriority+0x62>
	}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000e3f0 	.word	0xe000e3f0
 8007350:	200010ec 	.word	0x200010ec
 8007354:	e000ed0c 	.word	0xe000ed0c
 8007358:	200010f0 	.word	0x200010f0

0800735c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	@ 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007368:	f7fe fd72 	bl	8005e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800736c:	4b5c      	ldr	r3, [pc, #368]	@ (80074e0 <pvPortMalloc+0x184>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007374:	f000 f924 	bl	80075c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007378:	4b5a      	ldr	r3, [pc, #360]	@ (80074e4 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 8095 	bne.w	80074b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800738c:	2208      	movs	r2, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d015      	beq.n	80073ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <pvPortMalloc+0x6e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d06f      	beq.n	80074b0 <pvPortMalloc+0x154>
 80073d0:	4b45      	ldr	r3, [pc, #276]	@ (80074e8 <pvPortMalloc+0x18c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d86a      	bhi.n	80074b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073da:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <pvPortMalloc+0x190>)
 80073dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073de:	4b43      	ldr	r3, [pc, #268]	@ (80074ec <pvPortMalloc+0x190>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e4:	e004      	b.n	80073f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d903      	bls.n	8007402 <pvPortMalloc+0xa6>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f1      	bne.n	80073e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007402:	4b37      	ldr	r3, [pc, #220]	@ (80074e0 <pvPortMalloc+0x184>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	429a      	cmp	r2, r3
 800740a:	d051      	beq.n	80074b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	4413      	add	r3, r2
 8007414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1ad2      	subs	r2, r2, r3
 8007426:	2308      	movs	r3, #8
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	429a      	cmp	r2, r3
 800742c:	d920      	bls.n	8007470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <pvPortMalloc+0xfc>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800746a:	69b8      	ldr	r0, [r7, #24]
 800746c:	f000 f90a 	bl	8007684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	4a1b      	ldr	r2, [pc, #108]	@ (80074e8 <pvPortMalloc+0x18c>)
 800747c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800747e:	4b1a      	ldr	r3, [pc, #104]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b1b      	ldr	r3, [pc, #108]	@ (80074f0 <pvPortMalloc+0x194>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d203      	bcs.n	8007492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800748a:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <pvPortMalloc+0x18c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a18      	ldr	r2, [pc, #96]	@ (80074f0 <pvPortMalloc+0x194>)
 8007490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <pvPortMalloc+0x188>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	431a      	orrs	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <pvPortMalloc+0x198>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a11      	ldr	r2, [pc, #68]	@ (80074f4 <pvPortMalloc+0x198>)
 80074ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074b0:	f7fe fcdc 	bl	8005e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <pvPortMalloc+0x17a>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <pvPortMalloc+0x176>
	return pvReturn;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3728      	adds	r7, #40	@ 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20004cfc 	.word	0x20004cfc
 80074e4:	20004d10 	.word	0x20004d10
 80074e8:	20004d00 	.word	0x20004d00
 80074ec:	20004cf4 	.word	0x20004cf4
 80074f0:	20004d04 	.word	0x20004d04
 80074f4:	20004d08 	.word	0x20004d08

080074f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04f      	beq.n	80075aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750a:	2308      	movs	r3, #8
 800750c:	425b      	negs	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b25      	ldr	r3, [pc, #148]	@ (80075b4 <vPortFree+0xbc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <vPortFree+0x46>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <vPortFree+0x66>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	4b14      	ldr	r3, [pc, #80]	@ (80075b4 <vPortFree+0xbc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4013      	ands	r3, r2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11a      	bne.n	80075aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <vPortFree+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	43db      	mvns	r3, r3
 800757e:	401a      	ands	r2, r3
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007584:	f7fe fc64 	bl	8005e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <vPortFree+0xc0>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4413      	add	r3, r2
 8007592:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <vPortFree+0xc0>)
 8007594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007596:	6938      	ldr	r0, [r7, #16]
 8007598:	f000 f874 	bl	8007684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800759c:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <vPortFree+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a06      	ldr	r2, [pc, #24]	@ (80075bc <vPortFree+0xc4>)
 80075a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075a6:	f7fe fc61 	bl	8005e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20004d10 	.word	0x20004d10
 80075b8:	20004d00 	.word	0x20004d00
 80075bc:	20004d0c 	.word	0x20004d0c

080075c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80075ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075cc:	4b27      	ldr	r3, [pc, #156]	@ (800766c <prvHeapInit+0xac>)
 80075ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <prvHeapInit+0xac>)
 80075f0:	4413      	add	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007670 <prvHeapInit+0xb0>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <prvHeapInit+0xb0>)
 8007600:	2200      	movs	r2, #0
 8007602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800760c:	2208      	movs	r2, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <prvHeapInit+0xb4>)
 8007620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <prvHeapInit+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762a:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <prvHeapInit+0xb4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <prvHeapInit+0xb4>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <prvHeapInit+0xb8>)
 800764e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4a09      	ldr	r2, [pc, #36]	@ (800767c <prvHeapInit+0xbc>)
 8007656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <prvHeapInit+0xc0>)
 800765a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	200010f4 	.word	0x200010f4
 8007670:	20004cf4 	.word	0x20004cf4
 8007674:	20004cfc 	.word	0x20004cfc
 8007678:	20004d04 	.word	0x20004d04
 800767c:	20004d00 	.word	0x20004d00
 8007680:	20004d10 	.word	0x20004d10

08007684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800768c:	4b28      	ldr	r3, [pc, #160]	@ (8007730 <prvInsertBlockIntoFreeList+0xac>)
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <prvInsertBlockIntoFreeList+0x14>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8f7      	bhi.n	8007692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	441a      	add	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d118      	bne.n	800770c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d00d      	beq.n	8007702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	441a      	add	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e008      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007702:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e003      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d002      	beq.n	8007722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20004cf4 	.word	0x20004cf4
 8007734:	20004cfc 	.word	0x20004cfc

08007738 <__cvt>:
 8007738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	ec57 6b10 	vmov	r6, r7, d0
 8007740:	2f00      	cmp	r7, #0
 8007742:	460c      	mov	r4, r1
 8007744:	4619      	mov	r1, r3
 8007746:	463b      	mov	r3, r7
 8007748:	bfbb      	ittet	lt
 800774a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800774e:	461f      	movlt	r7, r3
 8007750:	2300      	movge	r3, #0
 8007752:	232d      	movlt	r3, #45	@ 0x2d
 8007754:	700b      	strb	r3, [r1, #0]
 8007756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007758:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800775c:	4691      	mov	r9, r2
 800775e:	f023 0820 	bic.w	r8, r3, #32
 8007762:	bfbc      	itt	lt
 8007764:	4632      	movlt	r2, r6
 8007766:	4616      	movlt	r6, r2
 8007768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800776c:	d005      	beq.n	800777a <__cvt+0x42>
 800776e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007772:	d100      	bne.n	8007776 <__cvt+0x3e>
 8007774:	3401      	adds	r4, #1
 8007776:	2102      	movs	r1, #2
 8007778:	e000      	b.n	800777c <__cvt+0x44>
 800777a:	2103      	movs	r1, #3
 800777c:	ab03      	add	r3, sp, #12
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	ab02      	add	r3, sp, #8
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	ec47 6b10 	vmov	d0, r6, r7
 8007788:	4653      	mov	r3, sl
 800778a:	4622      	mov	r2, r4
 800778c:	f000 ffa8 	bl	80086e0 <_dtoa_r>
 8007790:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007794:	4605      	mov	r5, r0
 8007796:	d119      	bne.n	80077cc <__cvt+0x94>
 8007798:	f019 0f01 	tst.w	r9, #1
 800779c:	d00e      	beq.n	80077bc <__cvt+0x84>
 800779e:	eb00 0904 	add.w	r9, r0, r4
 80077a2:	2200      	movs	r2, #0
 80077a4:	2300      	movs	r3, #0
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f9 f9ad 	bl	8000b08 <__aeabi_dcmpeq>
 80077ae:	b108      	cbz	r0, 80077b4 <__cvt+0x7c>
 80077b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80077b4:	2230      	movs	r2, #48	@ 0x30
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	454b      	cmp	r3, r9
 80077ba:	d31e      	bcc.n	80077fa <__cvt+0xc2>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077c0:	1b5b      	subs	r3, r3, r5
 80077c2:	4628      	mov	r0, r5
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	b004      	add	sp, #16
 80077c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077d0:	eb00 0904 	add.w	r9, r0, r4
 80077d4:	d1e5      	bne.n	80077a2 <__cvt+0x6a>
 80077d6:	7803      	ldrb	r3, [r0, #0]
 80077d8:	2b30      	cmp	r3, #48	@ 0x30
 80077da:	d10a      	bne.n	80077f2 <__cvt+0xba>
 80077dc:	2200      	movs	r2, #0
 80077de:	2300      	movs	r3, #0
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	f7f9 f990 	bl	8000b08 <__aeabi_dcmpeq>
 80077e8:	b918      	cbnz	r0, 80077f2 <__cvt+0xba>
 80077ea:	f1c4 0401 	rsb	r4, r4, #1
 80077ee:	f8ca 4000 	str.w	r4, [sl]
 80077f2:	f8da 3000 	ldr.w	r3, [sl]
 80077f6:	4499      	add	r9, r3
 80077f8:	e7d3      	b.n	80077a2 <__cvt+0x6a>
 80077fa:	1c59      	adds	r1, r3, #1
 80077fc:	9103      	str	r1, [sp, #12]
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e7d9      	b.n	80077b6 <__cvt+0x7e>

08007802 <__exponent>:
 8007802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007804:	2900      	cmp	r1, #0
 8007806:	bfba      	itte	lt
 8007808:	4249      	neglt	r1, r1
 800780a:	232d      	movlt	r3, #45	@ 0x2d
 800780c:	232b      	movge	r3, #43	@ 0x2b
 800780e:	2909      	cmp	r1, #9
 8007810:	7002      	strb	r2, [r0, #0]
 8007812:	7043      	strb	r3, [r0, #1]
 8007814:	dd29      	ble.n	800786a <__exponent+0x68>
 8007816:	f10d 0307 	add.w	r3, sp, #7
 800781a:	461d      	mov	r5, r3
 800781c:	270a      	movs	r7, #10
 800781e:	461a      	mov	r2, r3
 8007820:	fbb1 f6f7 	udiv	r6, r1, r7
 8007824:	fb07 1416 	mls	r4, r7, r6, r1
 8007828:	3430      	adds	r4, #48	@ 0x30
 800782a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800782e:	460c      	mov	r4, r1
 8007830:	2c63      	cmp	r4, #99	@ 0x63
 8007832:	f103 33ff 	add.w	r3, r3, #4294967295
 8007836:	4631      	mov	r1, r6
 8007838:	dcf1      	bgt.n	800781e <__exponent+0x1c>
 800783a:	3130      	adds	r1, #48	@ 0x30
 800783c:	1e94      	subs	r4, r2, #2
 800783e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007842:	1c41      	adds	r1, r0, #1
 8007844:	4623      	mov	r3, r4
 8007846:	42ab      	cmp	r3, r5
 8007848:	d30a      	bcc.n	8007860 <__exponent+0x5e>
 800784a:	f10d 0309 	add.w	r3, sp, #9
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	42ac      	cmp	r4, r5
 8007852:	bf88      	it	hi
 8007854:	2300      	movhi	r3, #0
 8007856:	3302      	adds	r3, #2
 8007858:	4403      	add	r3, r0
 800785a:	1a18      	subs	r0, r3, r0
 800785c:	b003      	add	sp, #12
 800785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007860:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007864:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007868:	e7ed      	b.n	8007846 <__exponent+0x44>
 800786a:	2330      	movs	r3, #48	@ 0x30
 800786c:	3130      	adds	r1, #48	@ 0x30
 800786e:	7083      	strb	r3, [r0, #2]
 8007870:	70c1      	strb	r1, [r0, #3]
 8007872:	1d03      	adds	r3, r0, #4
 8007874:	e7f1      	b.n	800785a <__exponent+0x58>
	...

08007878 <_printf_float>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	b08d      	sub	sp, #52	@ 0x34
 800787e:	460c      	mov	r4, r1
 8007880:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007884:	4616      	mov	r6, r2
 8007886:	461f      	mov	r7, r3
 8007888:	4605      	mov	r5, r0
 800788a:	f000 fdbd 	bl	8008408 <_localeconv_r>
 800788e:	6803      	ldr	r3, [r0, #0]
 8007890:	9304      	str	r3, [sp, #16]
 8007892:	4618      	mov	r0, r3
 8007894:	f7f8 fd0c 	bl	80002b0 <strlen>
 8007898:	2300      	movs	r3, #0
 800789a:	930a      	str	r3, [sp, #40]	@ 0x28
 800789c:	f8d8 3000 	ldr.w	r3, [r8]
 80078a0:	9005      	str	r0, [sp, #20]
 80078a2:	3307      	adds	r3, #7
 80078a4:	f023 0307 	bic.w	r3, r3, #7
 80078a8:	f103 0208 	add.w	r2, r3, #8
 80078ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078b0:	f8d4 b000 	ldr.w	fp, [r4]
 80078b4:	f8c8 2000 	str.w	r2, [r8]
 80078b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078c0:	9307      	str	r3, [sp, #28]
 80078c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80078c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007b40 <_printf_float+0x2c8>)
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	f7f9 f94a 	bl	8000b6c <__aeabi_dcmpun>
 80078d8:	bb70      	cbnz	r0, 8007938 <_printf_float+0xc0>
 80078da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078de:	4b98      	ldr	r3, [pc, #608]	@ (8007b40 <_printf_float+0x2c8>)
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295
 80078e4:	f7f9 f924 	bl	8000b30 <__aeabi_dcmple>
 80078e8:	bb30      	cbnz	r0, 8007938 <_printf_float+0xc0>
 80078ea:	2200      	movs	r2, #0
 80078ec:	2300      	movs	r3, #0
 80078ee:	4640      	mov	r0, r8
 80078f0:	4649      	mov	r1, r9
 80078f2:	f7f9 f913 	bl	8000b1c <__aeabi_dcmplt>
 80078f6:	b110      	cbz	r0, 80078fe <_printf_float+0x86>
 80078f8:	232d      	movs	r3, #45	@ 0x2d
 80078fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fe:	4a91      	ldr	r2, [pc, #580]	@ (8007b44 <_printf_float+0x2cc>)
 8007900:	4b91      	ldr	r3, [pc, #580]	@ (8007b48 <_printf_float+0x2d0>)
 8007902:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007906:	bf8c      	ite	hi
 8007908:	4690      	movhi	r8, r2
 800790a:	4698      	movls	r8, r3
 800790c:	2303      	movs	r3, #3
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	f02b 0304 	bic.w	r3, fp, #4
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	9700      	str	r7, [sp, #0]
 800791c:	4633      	mov	r3, r6
 800791e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007920:	4621      	mov	r1, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f9d2 	bl	8007ccc <_printf_common>
 8007928:	3001      	adds	r0, #1
 800792a:	f040 808d 	bne.w	8007a48 <_printf_float+0x1d0>
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
 8007932:	b00d      	add	sp, #52	@ 0x34
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 f914 	bl	8000b6c <__aeabi_dcmpun>
 8007944:	b140      	cbz	r0, 8007958 <_printf_float+0xe0>
 8007946:	464b      	mov	r3, r9
 8007948:	2b00      	cmp	r3, #0
 800794a:	bfbc      	itt	lt
 800794c:	232d      	movlt	r3, #45	@ 0x2d
 800794e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007952:	4a7e      	ldr	r2, [pc, #504]	@ (8007b4c <_printf_float+0x2d4>)
 8007954:	4b7e      	ldr	r3, [pc, #504]	@ (8007b50 <_printf_float+0x2d8>)
 8007956:	e7d4      	b.n	8007902 <_printf_float+0x8a>
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800795e:	9206      	str	r2, [sp, #24]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	d13b      	bne.n	80079dc <_printf_float+0x164>
 8007964:	2306      	movs	r3, #6
 8007966:	6063      	str	r3, [r4, #4]
 8007968:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800796c:	2300      	movs	r3, #0
 800796e:	6022      	str	r2, [r4, #0]
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	ab0a      	add	r3, sp, #40	@ 0x28
 8007974:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007978:	ab09      	add	r3, sp, #36	@ 0x24
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	6861      	ldr	r1, [r4, #4]
 800797e:	ec49 8b10 	vmov	d0, r8, r9
 8007982:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff fed6 	bl	8007738 <__cvt>
 800798c:	9b06      	ldr	r3, [sp, #24]
 800798e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007990:	2b47      	cmp	r3, #71	@ 0x47
 8007992:	4680      	mov	r8, r0
 8007994:	d129      	bne.n	80079ea <_printf_float+0x172>
 8007996:	1cc8      	adds	r0, r1, #3
 8007998:	db02      	blt.n	80079a0 <_printf_float+0x128>
 800799a:	6863      	ldr	r3, [r4, #4]
 800799c:	4299      	cmp	r1, r3
 800799e:	dd41      	ble.n	8007a24 <_printf_float+0x1ac>
 80079a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80079a4:	fa5f fa8a 	uxtb.w	sl, sl
 80079a8:	3901      	subs	r1, #1
 80079aa:	4652      	mov	r2, sl
 80079ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80079b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80079b2:	f7ff ff26 	bl	8007802 <__exponent>
 80079b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079b8:	1813      	adds	r3, r2, r0
 80079ba:	2a01      	cmp	r2, #1
 80079bc:	4681      	mov	r9, r0
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	dc02      	bgt.n	80079c8 <_printf_float+0x150>
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	07d2      	lsls	r2, r2, #31
 80079c6:	d501      	bpl.n	80079cc <_printf_float+0x154>
 80079c8:	3301      	adds	r3, #1
 80079ca:	6123      	str	r3, [r4, #16]
 80079cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0a2      	beq.n	800791a <_printf_float+0xa2>
 80079d4:	232d      	movs	r3, #45	@ 0x2d
 80079d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079da:	e79e      	b.n	800791a <_printf_float+0xa2>
 80079dc:	9a06      	ldr	r2, [sp, #24]
 80079de:	2a47      	cmp	r2, #71	@ 0x47
 80079e0:	d1c2      	bne.n	8007968 <_printf_float+0xf0>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1c0      	bne.n	8007968 <_printf_float+0xf0>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e7bd      	b.n	8007966 <_printf_float+0xee>
 80079ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079ee:	d9db      	bls.n	80079a8 <_printf_float+0x130>
 80079f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079f4:	d118      	bne.n	8007a28 <_printf_float+0x1b0>
 80079f6:	2900      	cmp	r1, #0
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	dd0b      	ble.n	8007a14 <_printf_float+0x19c>
 80079fc:	6121      	str	r1, [r4, #16]
 80079fe:	b913      	cbnz	r3, 8007a06 <_printf_float+0x18e>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	07d0      	lsls	r0, r2, #31
 8007a04:	d502      	bpl.n	8007a0c <_printf_float+0x194>
 8007a06:	3301      	adds	r3, #1
 8007a08:	440b      	add	r3, r1
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a0e:	f04f 0900 	mov.w	r9, #0
 8007a12:	e7db      	b.n	80079cc <_printf_float+0x154>
 8007a14:	b913      	cbnz	r3, 8007a1c <_printf_float+0x1a4>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	07d2      	lsls	r2, r2, #31
 8007a1a:	d501      	bpl.n	8007a20 <_printf_float+0x1a8>
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	e7f4      	b.n	8007a0a <_printf_float+0x192>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e7f2      	b.n	8007a0a <_printf_float+0x192>
 8007a24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a2a:	4299      	cmp	r1, r3
 8007a2c:	db05      	blt.n	8007a3a <_printf_float+0x1c2>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6121      	str	r1, [r4, #16]
 8007a32:	07d8      	lsls	r0, r3, #31
 8007a34:	d5ea      	bpl.n	8007a0c <_printf_float+0x194>
 8007a36:	1c4b      	adds	r3, r1, #1
 8007a38:	e7e7      	b.n	8007a0a <_printf_float+0x192>
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	bfd4      	ite	le
 8007a3e:	f1c1 0202 	rsble	r2, r1, #2
 8007a42:	2201      	movgt	r2, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	e7e0      	b.n	8007a0a <_printf_float+0x192>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	055a      	lsls	r2, r3, #21
 8007a4c:	d407      	bmi.n	8007a5e <_printf_float+0x1e6>
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	4642      	mov	r2, r8
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d12b      	bne.n	8007ab4 <_printf_float+0x23c>
 8007a5c:	e767      	b.n	800792e <_printf_float+0xb6>
 8007a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a62:	f240 80dd 	bls.w	8007c20 <_printf_float+0x3a8>
 8007a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f7f9 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d033      	beq.n	8007ade <_printf_float+0x266>
 8007a76:	4a37      	ldr	r2, [pc, #220]	@ (8007b54 <_printf_float+0x2dc>)
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	f43f af54 	beq.w	800792e <_printf_float+0xb6>
 8007a86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a8a:	4543      	cmp	r3, r8
 8007a8c:	db02      	blt.n	8007a94 <_printf_float+0x21c>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	07d8      	lsls	r0, r3, #31
 8007a92:	d50f      	bpl.n	8007ab4 <_printf_float+0x23c>
 8007a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f43f af45 	beq.w	800792e <_printf_float+0xb6>
 8007aa4:	f04f 0900 	mov.w	r9, #0
 8007aa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007aac:	f104 0a1a 	add.w	sl, r4, #26
 8007ab0:	45c8      	cmp	r8, r9
 8007ab2:	dc09      	bgt.n	8007ac8 <_printf_float+0x250>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	079b      	lsls	r3, r3, #30
 8007ab8:	f100 8103 	bmi.w	8007cc2 <_printf_float+0x44a>
 8007abc:	68e0      	ldr	r0, [r4, #12]
 8007abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ac0:	4298      	cmp	r0, r3
 8007ac2:	bfb8      	it	lt
 8007ac4:	4618      	movlt	r0, r3
 8007ac6:	e734      	b.n	8007932 <_printf_float+0xba>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4652      	mov	r2, sl
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f af2b 	beq.w	800792e <_printf_float+0xb6>
 8007ad8:	f109 0901 	add.w	r9, r9, #1
 8007adc:	e7e8      	b.n	8007ab0 <_printf_float+0x238>
 8007ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dc39      	bgt.n	8007b58 <_printf_float+0x2e0>
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b54 <_printf_float+0x2dc>)
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f af1d 	beq.w	800792e <_printf_float+0xb6>
 8007af4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007af8:	ea59 0303 	orrs.w	r3, r9, r3
 8007afc:	d102      	bne.n	8007b04 <_printf_float+0x28c>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	07d9      	lsls	r1, r3, #31
 8007b02:	d5d7      	bpl.n	8007ab4 <_printf_float+0x23c>
 8007b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f af0d 	beq.w	800792e <_printf_float+0xb6>
 8007b14:	f04f 0a00 	mov.w	sl, #0
 8007b18:	f104 0b1a 	add.w	fp, r4, #26
 8007b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1e:	425b      	negs	r3, r3
 8007b20:	4553      	cmp	r3, sl
 8007b22:	dc01      	bgt.n	8007b28 <_printf_float+0x2b0>
 8007b24:	464b      	mov	r3, r9
 8007b26:	e793      	b.n	8007a50 <_printf_float+0x1d8>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	465a      	mov	r2, fp
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f aefb 	beq.w	800792e <_printf_float+0xb6>
 8007b38:	f10a 0a01 	add.w	sl, sl, #1
 8007b3c:	e7ee      	b.n	8007b1c <_printf_float+0x2a4>
 8007b3e:	bf00      	nop
 8007b40:	7fefffff 	.word	0x7fefffff
 8007b44:	0800a47c 	.word	0x0800a47c
 8007b48:	0800a478 	.word	0x0800a478
 8007b4c:	0800a484 	.word	0x0800a484
 8007b50:	0800a480 	.word	0x0800a480
 8007b54:	0800a488 	.word	0x0800a488
 8007b58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b5e:	4553      	cmp	r3, sl
 8007b60:	bfa8      	it	ge
 8007b62:	4653      	movge	r3, sl
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	4699      	mov	r9, r3
 8007b68:	dc36      	bgt.n	8007bd8 <_printf_float+0x360>
 8007b6a:	f04f 0b00 	mov.w	fp, #0
 8007b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b72:	f104 021a 	add.w	r2, r4, #26
 8007b76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b78:	9306      	str	r3, [sp, #24]
 8007b7a:	eba3 0309 	sub.w	r3, r3, r9
 8007b7e:	455b      	cmp	r3, fp
 8007b80:	dc31      	bgt.n	8007be6 <_printf_float+0x36e>
 8007b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b84:	459a      	cmp	sl, r3
 8007b86:	dc3a      	bgt.n	8007bfe <_printf_float+0x386>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	07da      	lsls	r2, r3, #31
 8007b8c:	d437      	bmi.n	8007bfe <_printf_float+0x386>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b90:	ebaa 0903 	sub.w	r9, sl, r3
 8007b94:	9b06      	ldr	r3, [sp, #24]
 8007b96:	ebaa 0303 	sub.w	r3, sl, r3
 8007b9a:	4599      	cmp	r9, r3
 8007b9c:	bfa8      	it	ge
 8007b9e:	4699      	movge	r9, r3
 8007ba0:	f1b9 0f00 	cmp.w	r9, #0
 8007ba4:	dc33      	bgt.n	8007c0e <_printf_float+0x396>
 8007ba6:	f04f 0800 	mov.w	r8, #0
 8007baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bae:	f104 0b1a 	add.w	fp, r4, #26
 8007bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8007bb8:	eba3 0309 	sub.w	r3, r3, r9
 8007bbc:	4543      	cmp	r3, r8
 8007bbe:	f77f af79 	ble.w	8007ab4 <_printf_float+0x23c>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	465a      	mov	r2, fp
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f aeae 	beq.w	800792e <_printf_float+0xb6>
 8007bd2:	f108 0801 	add.w	r8, r8, #1
 8007bd6:	e7ec      	b.n	8007bb2 <_printf_float+0x33a>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d1c2      	bne.n	8007b6a <_printf_float+0x2f2>
 8007be4:	e6a3      	b.n	800792e <_printf_float+0xb6>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	9206      	str	r2, [sp, #24]
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae9c 	beq.w	800792e <_printf_float+0xb6>
 8007bf6:	9a06      	ldr	r2, [sp, #24]
 8007bf8:	f10b 0b01 	add.w	fp, fp, #1
 8007bfc:	e7bb      	b.n	8007b76 <_printf_float+0x2fe>
 8007bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d1c0      	bne.n	8007b8e <_printf_float+0x316>
 8007c0c:	e68f      	b.n	800792e <_printf_float+0xb6>
 8007c0e:	9a06      	ldr	r2, [sp, #24]
 8007c10:	464b      	mov	r3, r9
 8007c12:	4442      	add	r2, r8
 8007c14:	4631      	mov	r1, r6
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d1c3      	bne.n	8007ba6 <_printf_float+0x32e>
 8007c1e:	e686      	b.n	800792e <_printf_float+0xb6>
 8007c20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c24:	f1ba 0f01 	cmp.w	sl, #1
 8007c28:	dc01      	bgt.n	8007c2e <_printf_float+0x3b6>
 8007c2a:	07db      	lsls	r3, r3, #31
 8007c2c:	d536      	bpl.n	8007c9c <_printf_float+0x424>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4642      	mov	r2, r8
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f ae78 	beq.w	800792e <_printf_float+0xb6>
 8007c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c42:	4631      	mov	r1, r6
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b8      	blx	r7
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f43f ae70 	beq.w	800792e <_printf_float+0xb6>
 8007c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c52:	2200      	movs	r2, #0
 8007c54:	2300      	movs	r3, #0
 8007c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c5a:	f7f8 ff55 	bl	8000b08 <__aeabi_dcmpeq>
 8007c5e:	b9c0      	cbnz	r0, 8007c92 <_printf_float+0x41a>
 8007c60:	4653      	mov	r3, sl
 8007c62:	f108 0201 	add.w	r2, r8, #1
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d10c      	bne.n	8007c8a <_printf_float+0x412>
 8007c70:	e65d      	b.n	800792e <_printf_float+0xb6>
 8007c72:	2301      	movs	r3, #1
 8007c74:	465a      	mov	r2, fp
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f43f ae56 	beq.w	800792e <_printf_float+0xb6>
 8007c82:	f108 0801 	add.w	r8, r8, #1
 8007c86:	45d0      	cmp	r8, sl
 8007c88:	dbf3      	blt.n	8007c72 <_printf_float+0x3fa>
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c90:	e6df      	b.n	8007a52 <_printf_float+0x1da>
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	f104 0b1a 	add.w	fp, r4, #26
 8007c9a:	e7f4      	b.n	8007c86 <_printf_float+0x40e>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	e7e1      	b.n	8007c66 <_printf_float+0x3ee>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	464a      	mov	r2, r9
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	f43f ae3e 	beq.w	800792e <_printf_float+0xb6>
 8007cb2:	f108 0801 	add.w	r8, r8, #1
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cba:	1a5b      	subs	r3, r3, r1
 8007cbc:	4543      	cmp	r3, r8
 8007cbe:	dcf0      	bgt.n	8007ca2 <_printf_float+0x42a>
 8007cc0:	e6fc      	b.n	8007abc <_printf_float+0x244>
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	f104 0919 	add.w	r9, r4, #25
 8007cca:	e7f4      	b.n	8007cb6 <_printf_float+0x43e>

08007ccc <_printf_common>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	4698      	mov	r8, r3
 8007cd4:	688a      	ldr	r2, [r1, #8]
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	bfb8      	it	lt
 8007ce0:	4613      	movlt	r3, r2
 8007ce2:	6033      	str	r3, [r6, #0]
 8007ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ce8:	4607      	mov	r7, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b10a      	cbz	r2, 8007cf2 <_printf_common+0x26>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	0699      	lsls	r1, r3, #26
 8007cf6:	bf42      	ittt	mi
 8007cf8:	6833      	ldrmi	r3, [r6, #0]
 8007cfa:	3302      	addmi	r3, #2
 8007cfc:	6033      	strmi	r3, [r6, #0]
 8007cfe:	6825      	ldr	r5, [r4, #0]
 8007d00:	f015 0506 	ands.w	r5, r5, #6
 8007d04:	d106      	bne.n	8007d14 <_printf_common+0x48>
 8007d06:	f104 0a19 	add.w	sl, r4, #25
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	6832      	ldr	r2, [r6, #0]
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc26      	bgt.n	8007d62 <_printf_common+0x96>
 8007d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d18:	6822      	ldr	r2, [r4, #0]
 8007d1a:	3b00      	subs	r3, #0
 8007d1c:	bf18      	it	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	0692      	lsls	r2, r2, #26
 8007d22:	d42b      	bmi.n	8007d7c <_printf_common+0xb0>
 8007d24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d28:	4641      	mov	r1, r8
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	47c8      	blx	r9
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d01e      	beq.n	8007d70 <_printf_common+0xa4>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	6922      	ldr	r2, [r4, #16]
 8007d36:	f003 0306 	and.w	r3, r3, #6
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	bf02      	ittt	eq
 8007d3e:	68e5      	ldreq	r5, [r4, #12]
 8007d40:	6833      	ldreq	r3, [r6, #0]
 8007d42:	1aed      	subeq	r5, r5, r3
 8007d44:	68a3      	ldr	r3, [r4, #8]
 8007d46:	bf0c      	ite	eq
 8007d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d4c:	2500      	movne	r5, #0
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	bfc4      	itt	gt
 8007d52:	1a9b      	subgt	r3, r3, r2
 8007d54:	18ed      	addgt	r5, r5, r3
 8007d56:	2600      	movs	r6, #0
 8007d58:	341a      	adds	r4, #26
 8007d5a:	42b5      	cmp	r5, r6
 8007d5c:	d11a      	bne.n	8007d94 <_printf_common+0xc8>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e008      	b.n	8007d74 <_printf_common+0xa8>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4652      	mov	r2, sl
 8007d66:	4641      	mov	r1, r8
 8007d68:	4638      	mov	r0, r7
 8007d6a:	47c8      	blx	r9
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d103      	bne.n	8007d78 <_printf_common+0xac>
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d78:	3501      	adds	r5, #1
 8007d7a:	e7c6      	b.n	8007d0a <_printf_common+0x3e>
 8007d7c:	18e1      	adds	r1, r4, r3
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	2030      	movs	r0, #48	@ 0x30
 8007d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d86:	4422      	add	r2, r4
 8007d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d90:	3302      	adds	r3, #2
 8007d92:	e7c7      	b.n	8007d24 <_printf_common+0x58>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4622      	mov	r2, r4
 8007d98:	4641      	mov	r1, r8
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	47c8      	blx	r9
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d0e6      	beq.n	8007d70 <_printf_common+0xa4>
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7d9      	b.n	8007d5a <_printf_common+0x8e>
	...

08007da8 <_printf_i>:
 8007da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	7e0f      	ldrb	r7, [r1, #24]
 8007dae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007db0:	2f78      	cmp	r7, #120	@ 0x78
 8007db2:	4691      	mov	r9, r2
 8007db4:	4680      	mov	r8, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	469a      	mov	sl, r3
 8007dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dbe:	d807      	bhi.n	8007dd0 <_printf_i+0x28>
 8007dc0:	2f62      	cmp	r7, #98	@ 0x62
 8007dc2:	d80a      	bhi.n	8007dda <_printf_i+0x32>
 8007dc4:	2f00      	cmp	r7, #0
 8007dc6:	f000 80d1 	beq.w	8007f6c <_printf_i+0x1c4>
 8007dca:	2f58      	cmp	r7, #88	@ 0x58
 8007dcc:	f000 80b8 	beq.w	8007f40 <_printf_i+0x198>
 8007dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dd8:	e03a      	b.n	8007e50 <_printf_i+0xa8>
 8007dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dde:	2b15      	cmp	r3, #21
 8007de0:	d8f6      	bhi.n	8007dd0 <_printf_i+0x28>
 8007de2:	a101      	add	r1, pc, #4	@ (adr r1, 8007de8 <_printf_i+0x40>)
 8007de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007de8:	08007e41 	.word	0x08007e41
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007dd1 	.word	0x08007dd1
 8007df4:	08007dd1 	.word	0x08007dd1
 8007df8:	08007dd1 	.word	0x08007dd1
 8007dfc:	08007dd1 	.word	0x08007dd1
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007dd1 	.word	0x08007dd1
 8007e08:	08007dd1 	.word	0x08007dd1
 8007e0c:	08007dd1 	.word	0x08007dd1
 8007e10:	08007dd1 	.word	0x08007dd1
 8007e14:	08007f53 	.word	0x08007f53
 8007e18:	08007e7f 	.word	0x08007e7f
 8007e1c:	08007f0d 	.word	0x08007f0d
 8007e20:	08007dd1 	.word	0x08007dd1
 8007e24:	08007dd1 	.word	0x08007dd1
 8007e28:	08007f75 	.word	0x08007f75
 8007e2c:	08007dd1 	.word	0x08007dd1
 8007e30:	08007e7f 	.word	0x08007e7f
 8007e34:	08007dd1 	.word	0x08007dd1
 8007e38:	08007dd1 	.word	0x08007dd1
 8007e3c:	08007f15 	.word	0x08007f15
 8007e40:	6833      	ldr	r3, [r6, #0]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6032      	str	r2, [r6, #0]
 8007e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e50:	2301      	movs	r3, #1
 8007e52:	e09c      	b.n	8007f8e <_printf_i+0x1e6>
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	6820      	ldr	r0, [r4, #0]
 8007e58:	1d19      	adds	r1, r3, #4
 8007e5a:	6031      	str	r1, [r6, #0]
 8007e5c:	0606      	lsls	r6, r0, #24
 8007e5e:	d501      	bpl.n	8007e64 <_printf_i+0xbc>
 8007e60:	681d      	ldr	r5, [r3, #0]
 8007e62:	e003      	b.n	8007e6c <_printf_i+0xc4>
 8007e64:	0645      	lsls	r5, r0, #25
 8007e66:	d5fb      	bpl.n	8007e60 <_printf_i+0xb8>
 8007e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xd0>
 8007e70:	232d      	movs	r3, #45	@ 0x2d
 8007e72:	426d      	negs	r5, r5
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e78:	4858      	ldr	r0, [pc, #352]	@ (8007fdc <_printf_i+0x234>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e011      	b.n	8007ea2 <_printf_i+0xfa>
 8007e7e:	6821      	ldr	r1, [r4, #0]
 8007e80:	6833      	ldr	r3, [r6, #0]
 8007e82:	0608      	lsls	r0, r1, #24
 8007e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e88:	d402      	bmi.n	8007e90 <_printf_i+0xe8>
 8007e8a:	0649      	lsls	r1, r1, #25
 8007e8c:	bf48      	it	mi
 8007e8e:	b2ad      	uxthmi	r5, r5
 8007e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e92:	4852      	ldr	r0, [pc, #328]	@ (8007fdc <_printf_i+0x234>)
 8007e94:	6033      	str	r3, [r6, #0]
 8007e96:	bf14      	ite	ne
 8007e98:	230a      	movne	r3, #10
 8007e9a:	2308      	moveq	r3, #8
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ea2:	6866      	ldr	r6, [r4, #4]
 8007ea4:	60a6      	str	r6, [r4, #8]
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	db05      	blt.n	8007eb6 <_printf_i+0x10e>
 8007eaa:	6821      	ldr	r1, [r4, #0]
 8007eac:	432e      	orrs	r6, r5
 8007eae:	f021 0104 	bic.w	r1, r1, #4
 8007eb2:	6021      	str	r1, [r4, #0]
 8007eb4:	d04b      	beq.n	8007f4e <_printf_i+0x1a6>
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ebc:	fb03 5711 	mls	r7, r3, r1, r5
 8007ec0:	5dc7      	ldrb	r7, [r0, r7]
 8007ec2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ec6:	462f      	mov	r7, r5
 8007ec8:	42bb      	cmp	r3, r7
 8007eca:	460d      	mov	r5, r1
 8007ecc:	d9f4      	bls.n	8007eb8 <_printf_i+0x110>
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d10b      	bne.n	8007eea <_printf_i+0x142>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	07df      	lsls	r7, r3, #31
 8007ed6:	d508      	bpl.n	8007eea <_printf_i+0x142>
 8007ed8:	6923      	ldr	r3, [r4, #16]
 8007eda:	6861      	ldr	r1, [r4, #4]
 8007edc:	4299      	cmp	r1, r3
 8007ede:	bfde      	ittt	le
 8007ee0:	2330      	movle	r3, #48	@ 0x30
 8007ee2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ee6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eea:	1b92      	subs	r2, r2, r6
 8007eec:	6122      	str	r2, [r4, #16]
 8007eee:	f8cd a000 	str.w	sl, [sp]
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	aa03      	add	r2, sp, #12
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4640      	mov	r0, r8
 8007efa:	f7ff fee7 	bl	8007ccc <_printf_common>
 8007efe:	3001      	adds	r0, #1
 8007f00:	d14a      	bne.n	8007f98 <_printf_i+0x1f0>
 8007f02:	f04f 30ff 	mov.w	r0, #4294967295
 8007f06:	b004      	add	sp, #16
 8007f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	f043 0320 	orr.w	r3, r3, #32
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	4832      	ldr	r0, [pc, #200]	@ (8007fe0 <_printf_i+0x238>)
 8007f16:	2778      	movs	r7, #120	@ 0x78
 8007f18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	6831      	ldr	r1, [r6, #0]
 8007f20:	061f      	lsls	r7, r3, #24
 8007f22:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f26:	d402      	bmi.n	8007f2e <_printf_i+0x186>
 8007f28:	065f      	lsls	r7, r3, #25
 8007f2a:	bf48      	it	mi
 8007f2c:	b2ad      	uxthmi	r5, r5
 8007f2e:	6031      	str	r1, [r6, #0]
 8007f30:	07d9      	lsls	r1, r3, #31
 8007f32:	bf44      	itt	mi
 8007f34:	f043 0320 	orrmi.w	r3, r3, #32
 8007f38:	6023      	strmi	r3, [r4, #0]
 8007f3a:	b11d      	cbz	r5, 8007f44 <_printf_i+0x19c>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	e7ad      	b.n	8007e9c <_printf_i+0xf4>
 8007f40:	4826      	ldr	r0, [pc, #152]	@ (8007fdc <_printf_i+0x234>)
 8007f42:	e7e9      	b.n	8007f18 <_printf_i+0x170>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	f023 0320 	bic.w	r3, r3, #32
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	e7f6      	b.n	8007f3c <_printf_i+0x194>
 8007f4e:	4616      	mov	r6, r2
 8007f50:	e7bd      	b.n	8007ece <_printf_i+0x126>
 8007f52:	6833      	ldr	r3, [r6, #0]
 8007f54:	6825      	ldr	r5, [r4, #0]
 8007f56:	6961      	ldr	r1, [r4, #20]
 8007f58:	1d18      	adds	r0, r3, #4
 8007f5a:	6030      	str	r0, [r6, #0]
 8007f5c:	062e      	lsls	r6, r5, #24
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	d501      	bpl.n	8007f66 <_printf_i+0x1be>
 8007f62:	6019      	str	r1, [r3, #0]
 8007f64:	e002      	b.n	8007f6c <_printf_i+0x1c4>
 8007f66:	0668      	lsls	r0, r5, #25
 8007f68:	d5fb      	bpl.n	8007f62 <_printf_i+0x1ba>
 8007f6a:	8019      	strh	r1, [r3, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	4616      	mov	r6, r2
 8007f72:	e7bc      	b.n	8007eee <_printf_i+0x146>
 8007f74:	6833      	ldr	r3, [r6, #0]
 8007f76:	1d1a      	adds	r2, r3, #4
 8007f78:	6032      	str	r2, [r6, #0]
 8007f7a:	681e      	ldr	r6, [r3, #0]
 8007f7c:	6862      	ldr	r2, [r4, #4]
 8007f7e:	2100      	movs	r1, #0
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7f8 f945 	bl	8000210 <memchr>
 8007f86:	b108      	cbz	r0, 8007f8c <_printf_i+0x1e4>
 8007f88:	1b80      	subs	r0, r0, r6
 8007f8a:	6060      	str	r0, [r4, #4]
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	6123      	str	r3, [r4, #16]
 8007f90:	2300      	movs	r3, #0
 8007f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f96:	e7aa      	b.n	8007eee <_printf_i+0x146>
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	47d0      	blx	sl
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d0ad      	beq.n	8007f02 <_printf_i+0x15a>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	079b      	lsls	r3, r3, #30
 8007faa:	d413      	bmi.n	8007fd4 <_printf_i+0x22c>
 8007fac:	68e0      	ldr	r0, [r4, #12]
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	4298      	cmp	r0, r3
 8007fb2:	bfb8      	it	lt
 8007fb4:	4618      	movlt	r0, r3
 8007fb6:	e7a6      	b.n	8007f06 <_printf_i+0x15e>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4632      	mov	r2, r6
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	47d0      	blx	sl
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d09d      	beq.n	8007f02 <_printf_i+0x15a>
 8007fc6:	3501      	adds	r5, #1
 8007fc8:	68e3      	ldr	r3, [r4, #12]
 8007fca:	9903      	ldr	r1, [sp, #12]
 8007fcc:	1a5b      	subs	r3, r3, r1
 8007fce:	42ab      	cmp	r3, r5
 8007fd0:	dcf2      	bgt.n	8007fb8 <_printf_i+0x210>
 8007fd2:	e7eb      	b.n	8007fac <_printf_i+0x204>
 8007fd4:	2500      	movs	r5, #0
 8007fd6:	f104 0619 	add.w	r6, r4, #25
 8007fda:	e7f5      	b.n	8007fc8 <_printf_i+0x220>
 8007fdc:	0800a48a 	.word	0x0800a48a
 8007fe0:	0800a49b 	.word	0x0800a49b

08007fe4 <std>:
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	b510      	push	{r4, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	e9c0 3300 	strd	r3, r3, [r0]
 8007fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ff2:	6083      	str	r3, [r0, #8]
 8007ff4:	8181      	strh	r1, [r0, #12]
 8007ff6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ff8:	81c2      	strh	r2, [r0, #14]
 8007ffa:	6183      	str	r3, [r0, #24]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	2208      	movs	r2, #8
 8008000:	305c      	adds	r0, #92	@ 0x5c
 8008002:	f000 f9f9 	bl	80083f8 <memset>
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <std+0x58>)
 8008008:	6263      	str	r3, [r4, #36]	@ 0x24
 800800a:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <std+0x5c>)
 800800c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800800e:	4b0d      	ldr	r3, [pc, #52]	@ (8008044 <std+0x60>)
 8008010:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008012:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <std+0x64>)
 8008014:	6323      	str	r3, [r4, #48]	@ 0x30
 8008016:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <std+0x68>)
 8008018:	6224      	str	r4, [r4, #32]
 800801a:	429c      	cmp	r4, r3
 800801c:	d006      	beq.n	800802c <std+0x48>
 800801e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008022:	4294      	cmp	r4, r2
 8008024:	d002      	beq.n	800802c <std+0x48>
 8008026:	33d0      	adds	r3, #208	@ 0xd0
 8008028:	429c      	cmp	r4, r3
 800802a:	d105      	bne.n	8008038 <std+0x54>
 800802c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	f000 baba 	b.w	80085ac <__retarget_lock_init_recursive>
 8008038:	bd10      	pop	{r4, pc}
 800803a:	bf00      	nop
 800803c:	08008249 	.word	0x08008249
 8008040:	0800826b 	.word	0x0800826b
 8008044:	080082a3 	.word	0x080082a3
 8008048:	080082c7 	.word	0x080082c7
 800804c:	20004d14 	.word	0x20004d14

08008050 <stdio_exit_handler>:
 8008050:	4a02      	ldr	r2, [pc, #8]	@ (800805c <stdio_exit_handler+0xc>)
 8008052:	4903      	ldr	r1, [pc, #12]	@ (8008060 <stdio_exit_handler+0x10>)
 8008054:	4803      	ldr	r0, [pc, #12]	@ (8008064 <stdio_exit_handler+0x14>)
 8008056:	f000 b869 	b.w	800812c <_fwalk_sglue>
 800805a:	bf00      	nop
 800805c:	20000010 	.word	0x20000010
 8008060:	08009f01 	.word	0x08009f01
 8008064:	20000020 	.word	0x20000020

08008068 <cleanup_stdio>:
 8008068:	6841      	ldr	r1, [r0, #4]
 800806a:	4b0c      	ldr	r3, [pc, #48]	@ (800809c <cleanup_stdio+0x34>)
 800806c:	4299      	cmp	r1, r3
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	d001      	beq.n	8008078 <cleanup_stdio+0x10>
 8008074:	f001 ff44 	bl	8009f00 <_fflush_r>
 8008078:	68a1      	ldr	r1, [r4, #8]
 800807a:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <cleanup_stdio+0x38>)
 800807c:	4299      	cmp	r1, r3
 800807e:	d002      	beq.n	8008086 <cleanup_stdio+0x1e>
 8008080:	4620      	mov	r0, r4
 8008082:	f001 ff3d 	bl	8009f00 <_fflush_r>
 8008086:	68e1      	ldr	r1, [r4, #12]
 8008088:	4b06      	ldr	r3, [pc, #24]	@ (80080a4 <cleanup_stdio+0x3c>)
 800808a:	4299      	cmp	r1, r3
 800808c:	d004      	beq.n	8008098 <cleanup_stdio+0x30>
 800808e:	4620      	mov	r0, r4
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f001 bf34 	b.w	8009f00 <_fflush_r>
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	20004d14 	.word	0x20004d14
 80080a0:	20004d7c 	.word	0x20004d7c
 80080a4:	20004de4 	.word	0x20004de4

080080a8 <global_stdio_init.part.0>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	4b0b      	ldr	r3, [pc, #44]	@ (80080d8 <global_stdio_init.part.0+0x30>)
 80080ac:	4c0b      	ldr	r4, [pc, #44]	@ (80080dc <global_stdio_init.part.0+0x34>)
 80080ae:	4a0c      	ldr	r2, [pc, #48]	@ (80080e0 <global_stdio_init.part.0+0x38>)
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	4620      	mov	r0, r4
 80080b4:	2200      	movs	r2, #0
 80080b6:	2104      	movs	r1, #4
 80080b8:	f7ff ff94 	bl	8007fe4 <std>
 80080bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080c0:	2201      	movs	r2, #1
 80080c2:	2109      	movs	r1, #9
 80080c4:	f7ff ff8e 	bl	8007fe4 <std>
 80080c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080cc:	2202      	movs	r2, #2
 80080ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d2:	2112      	movs	r1, #18
 80080d4:	f7ff bf86 	b.w	8007fe4 <std>
 80080d8:	20004e4c 	.word	0x20004e4c
 80080dc:	20004d14 	.word	0x20004d14
 80080e0:	08008051 	.word	0x08008051

080080e4 <__sfp_lock_acquire>:
 80080e4:	4801      	ldr	r0, [pc, #4]	@ (80080ec <__sfp_lock_acquire+0x8>)
 80080e6:	f000 ba62 	b.w	80085ae <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	20004e55 	.word	0x20004e55

080080f0 <__sfp_lock_release>:
 80080f0:	4801      	ldr	r0, [pc, #4]	@ (80080f8 <__sfp_lock_release+0x8>)
 80080f2:	f000 ba5d 	b.w	80085b0 <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	20004e55 	.word	0x20004e55

080080fc <__sinit>:
 80080fc:	b510      	push	{r4, lr}
 80080fe:	4604      	mov	r4, r0
 8008100:	f7ff fff0 	bl	80080e4 <__sfp_lock_acquire>
 8008104:	6a23      	ldr	r3, [r4, #32]
 8008106:	b11b      	cbz	r3, 8008110 <__sinit+0x14>
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f7ff bff0 	b.w	80080f0 <__sfp_lock_release>
 8008110:	4b04      	ldr	r3, [pc, #16]	@ (8008124 <__sinit+0x28>)
 8008112:	6223      	str	r3, [r4, #32]
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <__sinit+0x2c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f5      	bne.n	8008108 <__sinit+0xc>
 800811c:	f7ff ffc4 	bl	80080a8 <global_stdio_init.part.0>
 8008120:	e7f2      	b.n	8008108 <__sinit+0xc>
 8008122:	bf00      	nop
 8008124:	08008069 	.word	0x08008069
 8008128:	20004e4c 	.word	0x20004e4c

0800812c <_fwalk_sglue>:
 800812c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008130:	4607      	mov	r7, r0
 8008132:	4688      	mov	r8, r1
 8008134:	4614      	mov	r4, r2
 8008136:	2600      	movs	r6, #0
 8008138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800813c:	f1b9 0901 	subs.w	r9, r9, #1
 8008140:	d505      	bpl.n	800814e <_fwalk_sglue+0x22>
 8008142:	6824      	ldr	r4, [r4, #0]
 8008144:	2c00      	cmp	r4, #0
 8008146:	d1f7      	bne.n	8008138 <_fwalk_sglue+0xc>
 8008148:	4630      	mov	r0, r6
 800814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d907      	bls.n	8008164 <_fwalk_sglue+0x38>
 8008154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008158:	3301      	adds	r3, #1
 800815a:	d003      	beq.n	8008164 <_fwalk_sglue+0x38>
 800815c:	4629      	mov	r1, r5
 800815e:	4638      	mov	r0, r7
 8008160:	47c0      	blx	r8
 8008162:	4306      	orrs	r6, r0
 8008164:	3568      	adds	r5, #104	@ 0x68
 8008166:	e7e9      	b.n	800813c <_fwalk_sglue+0x10>

08008168 <iprintf>:
 8008168:	b40f      	push	{r0, r1, r2, r3}
 800816a:	b507      	push	{r0, r1, r2, lr}
 800816c:	4906      	ldr	r1, [pc, #24]	@ (8008188 <iprintf+0x20>)
 800816e:	ab04      	add	r3, sp, #16
 8008170:	6808      	ldr	r0, [r1, #0]
 8008172:	f853 2b04 	ldr.w	r2, [r3], #4
 8008176:	6881      	ldr	r1, [r0, #8]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	f001 fd25 	bl	8009bc8 <_vfiprintf_r>
 800817e:	b003      	add	sp, #12
 8008180:	f85d eb04 	ldr.w	lr, [sp], #4
 8008184:	b004      	add	sp, #16
 8008186:	4770      	bx	lr
 8008188:	2000001c 	.word	0x2000001c

0800818c <_puts_r>:
 800818c:	6a03      	ldr	r3, [r0, #32]
 800818e:	b570      	push	{r4, r5, r6, lr}
 8008190:	6884      	ldr	r4, [r0, #8]
 8008192:	4605      	mov	r5, r0
 8008194:	460e      	mov	r6, r1
 8008196:	b90b      	cbnz	r3, 800819c <_puts_r+0x10>
 8008198:	f7ff ffb0 	bl	80080fc <__sinit>
 800819c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800819e:	07db      	lsls	r3, r3, #31
 80081a0:	d405      	bmi.n	80081ae <_puts_r+0x22>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	0598      	lsls	r0, r3, #22
 80081a6:	d402      	bmi.n	80081ae <_puts_r+0x22>
 80081a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081aa:	f000 fa00 	bl	80085ae <__retarget_lock_acquire_recursive>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	0719      	lsls	r1, r3, #28
 80081b2:	d502      	bpl.n	80081ba <_puts_r+0x2e>
 80081b4:	6923      	ldr	r3, [r4, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d135      	bne.n	8008226 <_puts_r+0x9a>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 f8c5 	bl	800834c <__swsetup_r>
 80081c2:	b380      	cbz	r0, 8008226 <_puts_r+0x9a>
 80081c4:	f04f 35ff 	mov.w	r5, #4294967295
 80081c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081ca:	07da      	lsls	r2, r3, #31
 80081cc:	d405      	bmi.n	80081da <_puts_r+0x4e>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	059b      	lsls	r3, r3, #22
 80081d2:	d402      	bmi.n	80081da <_puts_r+0x4e>
 80081d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081d6:	f000 f9eb 	bl	80085b0 <__retarget_lock_release_recursive>
 80081da:	4628      	mov	r0, r5
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da04      	bge.n	80081ec <_puts_r+0x60>
 80081e2:	69a2      	ldr	r2, [r4, #24]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	dc17      	bgt.n	8008218 <_puts_r+0x8c>
 80081e8:	290a      	cmp	r1, #10
 80081ea:	d015      	beq.n	8008218 <_puts_r+0x8c>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	6022      	str	r2, [r4, #0]
 80081f2:	7019      	strb	r1, [r3, #0]
 80081f4:	68a3      	ldr	r3, [r4, #8]
 80081f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081fa:	3b01      	subs	r3, #1
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	2900      	cmp	r1, #0
 8008200:	d1ed      	bne.n	80081de <_puts_r+0x52>
 8008202:	2b00      	cmp	r3, #0
 8008204:	da11      	bge.n	800822a <_puts_r+0x9e>
 8008206:	4622      	mov	r2, r4
 8008208:	210a      	movs	r1, #10
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f85f 	bl	80082ce <__swbuf_r>
 8008210:	3001      	adds	r0, #1
 8008212:	d0d7      	beq.n	80081c4 <_puts_r+0x38>
 8008214:	250a      	movs	r5, #10
 8008216:	e7d7      	b.n	80081c8 <_puts_r+0x3c>
 8008218:	4622      	mov	r2, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f000 f857 	bl	80082ce <__swbuf_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d1e7      	bne.n	80081f4 <_puts_r+0x68>
 8008224:	e7ce      	b.n	80081c4 <_puts_r+0x38>
 8008226:	3e01      	subs	r6, #1
 8008228:	e7e4      	b.n	80081f4 <_puts_r+0x68>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	220a      	movs	r2, #10
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	e7ee      	b.n	8008214 <_puts_r+0x88>
	...

08008238 <puts>:
 8008238:	4b02      	ldr	r3, [pc, #8]	@ (8008244 <puts+0xc>)
 800823a:	4601      	mov	r1, r0
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	f7ff bfa5 	b.w	800818c <_puts_r>
 8008242:	bf00      	nop
 8008244:	2000001c 	.word	0x2000001c

08008248 <__sread>:
 8008248:	b510      	push	{r4, lr}
 800824a:	460c      	mov	r4, r1
 800824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008250:	f000 f95e 	bl	8008510 <_read_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	bfab      	itete	ge
 8008258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800825a:	89a3      	ldrhlt	r3, [r4, #12]
 800825c:	181b      	addge	r3, r3, r0
 800825e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008262:	bfac      	ite	ge
 8008264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008266:	81a3      	strhlt	r3, [r4, #12]
 8008268:	bd10      	pop	{r4, pc}

0800826a <__swrite>:
 800826a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826e:	461f      	mov	r7, r3
 8008270:	898b      	ldrh	r3, [r1, #12]
 8008272:	05db      	lsls	r3, r3, #23
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	4616      	mov	r6, r2
 800827a:	d505      	bpl.n	8008288 <__swrite+0x1e>
 800827c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008280:	2302      	movs	r3, #2
 8008282:	2200      	movs	r2, #0
 8008284:	f000 f932 	bl	80084ec <_lseek_r>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	4628      	mov	r0, r5
 800829a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800829e:	f000 b949 	b.w	8008534 <_write_r>

080082a2 <__sseek>:
 80082a2:	b510      	push	{r4, lr}
 80082a4:	460c      	mov	r4, r1
 80082a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082aa:	f000 f91f 	bl	80084ec <_lseek_r>
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	bf15      	itete	ne
 80082b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082be:	81a3      	strheq	r3, [r4, #12]
 80082c0:	bf18      	it	ne
 80082c2:	81a3      	strhne	r3, [r4, #12]
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <__sclose>:
 80082c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ca:	f000 b8a1 	b.w	8008410 <_close_r>

080082ce <__swbuf_r>:
 80082ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d0:	460e      	mov	r6, r1
 80082d2:	4614      	mov	r4, r2
 80082d4:	4605      	mov	r5, r0
 80082d6:	b118      	cbz	r0, 80082e0 <__swbuf_r+0x12>
 80082d8:	6a03      	ldr	r3, [r0, #32]
 80082da:	b90b      	cbnz	r3, 80082e0 <__swbuf_r+0x12>
 80082dc:	f7ff ff0e 	bl	80080fc <__sinit>
 80082e0:	69a3      	ldr	r3, [r4, #24]
 80082e2:	60a3      	str	r3, [r4, #8]
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	071a      	lsls	r2, r3, #28
 80082e8:	d501      	bpl.n	80082ee <__swbuf_r+0x20>
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	b943      	cbnz	r3, 8008300 <__swbuf_r+0x32>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f82b 	bl	800834c <__swsetup_r>
 80082f6:	b118      	cbz	r0, 8008300 <__swbuf_r+0x32>
 80082f8:	f04f 37ff 	mov.w	r7, #4294967295
 80082fc:	4638      	mov	r0, r7
 80082fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	6922      	ldr	r2, [r4, #16]
 8008304:	1a98      	subs	r0, r3, r2
 8008306:	6963      	ldr	r3, [r4, #20]
 8008308:	b2f6      	uxtb	r6, r6
 800830a:	4283      	cmp	r3, r0
 800830c:	4637      	mov	r7, r6
 800830e:	dc05      	bgt.n	800831c <__swbuf_r+0x4e>
 8008310:	4621      	mov	r1, r4
 8008312:	4628      	mov	r0, r5
 8008314:	f001 fdf4 	bl	8009f00 <_fflush_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	d1ed      	bne.n	80082f8 <__swbuf_r+0x2a>
 800831c:	68a3      	ldr	r3, [r4, #8]
 800831e:	3b01      	subs	r3, #1
 8008320:	60a3      	str	r3, [r4, #8]
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	6022      	str	r2, [r4, #0]
 8008328:	701e      	strb	r6, [r3, #0]
 800832a:	6962      	ldr	r2, [r4, #20]
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	429a      	cmp	r2, r3
 8008330:	d004      	beq.n	800833c <__swbuf_r+0x6e>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	07db      	lsls	r3, r3, #31
 8008336:	d5e1      	bpl.n	80082fc <__swbuf_r+0x2e>
 8008338:	2e0a      	cmp	r6, #10
 800833a:	d1df      	bne.n	80082fc <__swbuf_r+0x2e>
 800833c:	4621      	mov	r1, r4
 800833e:	4628      	mov	r0, r5
 8008340:	f001 fdde 	bl	8009f00 <_fflush_r>
 8008344:	2800      	cmp	r0, #0
 8008346:	d0d9      	beq.n	80082fc <__swbuf_r+0x2e>
 8008348:	e7d6      	b.n	80082f8 <__swbuf_r+0x2a>
	...

0800834c <__swsetup_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4b29      	ldr	r3, [pc, #164]	@ (80083f4 <__swsetup_r+0xa8>)
 8008350:	4605      	mov	r5, r0
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	460c      	mov	r4, r1
 8008356:	b118      	cbz	r0, 8008360 <__swsetup_r+0x14>
 8008358:	6a03      	ldr	r3, [r0, #32]
 800835a:	b90b      	cbnz	r3, 8008360 <__swsetup_r+0x14>
 800835c:	f7ff fece 	bl	80080fc <__sinit>
 8008360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008364:	0719      	lsls	r1, r3, #28
 8008366:	d422      	bmi.n	80083ae <__swsetup_r+0x62>
 8008368:	06da      	lsls	r2, r3, #27
 800836a:	d407      	bmi.n	800837c <__swsetup_r+0x30>
 800836c:	2209      	movs	r2, #9
 800836e:	602a      	str	r2, [r5, #0]
 8008370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008374:	81a3      	strh	r3, [r4, #12]
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	e033      	b.n	80083e4 <__swsetup_r+0x98>
 800837c:	0758      	lsls	r0, r3, #29
 800837e:	d512      	bpl.n	80083a6 <__swsetup_r+0x5a>
 8008380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008382:	b141      	cbz	r1, 8008396 <__swsetup_r+0x4a>
 8008384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008388:	4299      	cmp	r1, r3
 800838a:	d002      	beq.n	8008392 <__swsetup_r+0x46>
 800838c:	4628      	mov	r0, r5
 800838e:	f000 ff77 	bl	8009280 <_free_r>
 8008392:	2300      	movs	r3, #0
 8008394:	6363      	str	r3, [r4, #52]	@ 0x34
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	2300      	movs	r3, #0
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f043 0308 	orr.w	r3, r3, #8
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	b94b      	cbnz	r3, 80083c6 <__swsetup_r+0x7a>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083bc:	d003      	beq.n	80083c6 <__swsetup_r+0x7a>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f001 fdeb 	bl	8009f9c <__smakebuf_r>
 80083c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ca:	f013 0201 	ands.w	r2, r3, #1
 80083ce:	d00a      	beq.n	80083e6 <__swsetup_r+0x9a>
 80083d0:	2200      	movs	r2, #0
 80083d2:	60a2      	str	r2, [r4, #8]
 80083d4:	6962      	ldr	r2, [r4, #20]
 80083d6:	4252      	negs	r2, r2
 80083d8:	61a2      	str	r2, [r4, #24]
 80083da:	6922      	ldr	r2, [r4, #16]
 80083dc:	b942      	cbnz	r2, 80083f0 <__swsetup_r+0xa4>
 80083de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083e2:	d1c5      	bne.n	8008370 <__swsetup_r+0x24>
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
 80083e6:	0799      	lsls	r1, r3, #30
 80083e8:	bf58      	it	pl
 80083ea:	6962      	ldrpl	r2, [r4, #20]
 80083ec:	60a2      	str	r2, [r4, #8]
 80083ee:	e7f4      	b.n	80083da <__swsetup_r+0x8e>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e7f7      	b.n	80083e4 <__swsetup_r+0x98>
 80083f4:	2000001c 	.word	0x2000001c

080083f8 <memset>:
 80083f8:	4402      	add	r2, r0
 80083fa:	4603      	mov	r3, r0
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d100      	bne.n	8008402 <memset+0xa>
 8008400:	4770      	bx	lr
 8008402:	f803 1b01 	strb.w	r1, [r3], #1
 8008406:	e7f9      	b.n	80083fc <memset+0x4>

08008408 <_localeconv_r>:
 8008408:	4800      	ldr	r0, [pc, #0]	@ (800840c <_localeconv_r+0x4>)
 800840a:	4770      	bx	lr
 800840c:	2000015c 	.word	0x2000015c

08008410 <_close_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	@ (800842c <_close_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7f9 fb44 	bl	8001aa8 <_close>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_close_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_close_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20004e50 	.word	0x20004e50

08008430 <_reclaim_reent>:
 8008430:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <_reclaim_reent+0xb8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4283      	cmp	r3, r0
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	d053      	beq.n	80084e4 <_reclaim_reent+0xb4>
 800843c:	69c3      	ldr	r3, [r0, #28]
 800843e:	b31b      	cbz	r3, 8008488 <_reclaim_reent+0x58>
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	b163      	cbz	r3, 800845e <_reclaim_reent+0x2e>
 8008444:	2500      	movs	r5, #0
 8008446:	69e3      	ldr	r3, [r4, #28]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	5959      	ldr	r1, [r3, r5]
 800844c:	b9b1      	cbnz	r1, 800847c <_reclaim_reent+0x4c>
 800844e:	3504      	adds	r5, #4
 8008450:	2d80      	cmp	r5, #128	@ 0x80
 8008452:	d1f8      	bne.n	8008446 <_reclaim_reent+0x16>
 8008454:	69e3      	ldr	r3, [r4, #28]
 8008456:	4620      	mov	r0, r4
 8008458:	68d9      	ldr	r1, [r3, #12]
 800845a:	f000 ff11 	bl	8009280 <_free_r>
 800845e:	69e3      	ldr	r3, [r4, #28]
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	b111      	cbz	r1, 800846a <_reclaim_reent+0x3a>
 8008464:	4620      	mov	r0, r4
 8008466:	f000 ff0b 	bl	8009280 <_free_r>
 800846a:	69e3      	ldr	r3, [r4, #28]
 800846c:	689d      	ldr	r5, [r3, #8]
 800846e:	b15d      	cbz	r5, 8008488 <_reclaim_reent+0x58>
 8008470:	4629      	mov	r1, r5
 8008472:	4620      	mov	r0, r4
 8008474:	682d      	ldr	r5, [r5, #0]
 8008476:	f000 ff03 	bl	8009280 <_free_r>
 800847a:	e7f8      	b.n	800846e <_reclaim_reent+0x3e>
 800847c:	680e      	ldr	r6, [r1, #0]
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fefe 	bl	8009280 <_free_r>
 8008484:	4631      	mov	r1, r6
 8008486:	e7e1      	b.n	800844c <_reclaim_reent+0x1c>
 8008488:	6961      	ldr	r1, [r4, #20]
 800848a:	b111      	cbz	r1, 8008492 <_reclaim_reent+0x62>
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fef7 	bl	8009280 <_free_r>
 8008492:	69e1      	ldr	r1, [r4, #28]
 8008494:	b111      	cbz	r1, 800849c <_reclaim_reent+0x6c>
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fef2 	bl	8009280 <_free_r>
 800849c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800849e:	b111      	cbz	r1, 80084a6 <_reclaim_reent+0x76>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 feed 	bl	8009280 <_free_r>
 80084a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084a8:	b111      	cbz	r1, 80084b0 <_reclaim_reent+0x80>
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fee8 	bl	8009280 <_free_r>
 80084b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80084b2:	b111      	cbz	r1, 80084ba <_reclaim_reent+0x8a>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fee3 	bl	8009280 <_free_r>
 80084ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80084bc:	b111      	cbz	r1, 80084c4 <_reclaim_reent+0x94>
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 fede 	bl	8009280 <_free_r>
 80084c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80084c6:	b111      	cbz	r1, 80084ce <_reclaim_reent+0x9e>
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fed9 	bl	8009280 <_free_r>
 80084ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80084d0:	b111      	cbz	r1, 80084d8 <_reclaim_reent+0xa8>
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fed4 	bl	8009280 <_free_r>
 80084d8:	6a23      	ldr	r3, [r4, #32]
 80084da:	b11b      	cbz	r3, 80084e4 <_reclaim_reent+0xb4>
 80084dc:	4620      	mov	r0, r4
 80084de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084e2:	4718      	bx	r3
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
 80084e6:	bf00      	nop
 80084e8:	2000001c 	.word	0x2000001c

080084ec <_lseek_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d07      	ldr	r5, [pc, #28]	@ (800850c <_lseek_r+0x20>)
 80084f0:	4604      	mov	r4, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	602a      	str	r2, [r5, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f7f9 fafb 	bl	8001af6 <_lseek>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_lseek_r+0x1e>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_lseek_r+0x1e>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20004e50 	.word	0x20004e50

08008510 <_read_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d07      	ldr	r5, [pc, #28]	@ (8008530 <_read_r+0x20>)
 8008514:	4604      	mov	r4, r0
 8008516:	4608      	mov	r0, r1
 8008518:	4611      	mov	r1, r2
 800851a:	2200      	movs	r2, #0
 800851c:	602a      	str	r2, [r5, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	f7f9 faa5 	bl	8001a6e <_read>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_read_r+0x1e>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_read_r+0x1e>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	20004e50 	.word	0x20004e50

08008534 <_write_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d07      	ldr	r5, [pc, #28]	@ (8008554 <_write_r+0x20>)
 8008538:	4604      	mov	r4, r0
 800853a:	4608      	mov	r0, r1
 800853c:	4611      	mov	r1, r2
 800853e:	2200      	movs	r2, #0
 8008540:	602a      	str	r2, [r5, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f7f9 f8aa 	bl	800169c <_write>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_write_r+0x1e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_write_r+0x1e>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20004e50 	.word	0x20004e50

08008558 <__errno>:
 8008558:	4b01      	ldr	r3, [pc, #4]	@ (8008560 <__errno+0x8>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	2000001c 	.word	0x2000001c

08008564 <__libc_init_array>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	4d0d      	ldr	r5, [pc, #52]	@ (800859c <__libc_init_array+0x38>)
 8008568:	4c0d      	ldr	r4, [pc, #52]	@ (80085a0 <__libc_init_array+0x3c>)
 800856a:	1b64      	subs	r4, r4, r5
 800856c:	10a4      	asrs	r4, r4, #2
 800856e:	2600      	movs	r6, #0
 8008570:	42a6      	cmp	r6, r4
 8008572:	d109      	bne.n	8008588 <__libc_init_array+0x24>
 8008574:	4d0b      	ldr	r5, [pc, #44]	@ (80085a4 <__libc_init_array+0x40>)
 8008576:	4c0c      	ldr	r4, [pc, #48]	@ (80085a8 <__libc_init_array+0x44>)
 8008578:	f001 fe2e 	bl	800a1d8 <_init>
 800857c:	1b64      	subs	r4, r4, r5
 800857e:	10a4      	asrs	r4, r4, #2
 8008580:	2600      	movs	r6, #0
 8008582:	42a6      	cmp	r6, r4
 8008584:	d105      	bne.n	8008592 <__libc_init_array+0x2e>
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	f855 3b04 	ldr.w	r3, [r5], #4
 800858c:	4798      	blx	r3
 800858e:	3601      	adds	r6, #1
 8008590:	e7ee      	b.n	8008570 <__libc_init_array+0xc>
 8008592:	f855 3b04 	ldr.w	r3, [r5], #4
 8008596:	4798      	blx	r3
 8008598:	3601      	adds	r6, #1
 800859a:	e7f2      	b.n	8008582 <__libc_init_array+0x1e>
 800859c:	0800a7f4 	.word	0x0800a7f4
 80085a0:	0800a7f4 	.word	0x0800a7f4
 80085a4:	0800a7f4 	.word	0x0800a7f4
 80085a8:	0800a7f8 	.word	0x0800a7f8

080085ac <__retarget_lock_init_recursive>:
 80085ac:	4770      	bx	lr

080085ae <__retarget_lock_acquire_recursive>:
 80085ae:	4770      	bx	lr

080085b0 <__retarget_lock_release_recursive>:
 80085b0:	4770      	bx	lr

080085b2 <memcpy>:
 80085b2:	440a      	add	r2, r1
 80085b4:	4291      	cmp	r1, r2
 80085b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ba:	d100      	bne.n	80085be <memcpy+0xc>
 80085bc:	4770      	bx	lr
 80085be:	b510      	push	{r4, lr}
 80085c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085c8:	4291      	cmp	r1, r2
 80085ca:	d1f9      	bne.n	80085c0 <memcpy+0xe>
 80085cc:	bd10      	pop	{r4, pc}

080085ce <quorem>:
 80085ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d2:	6903      	ldr	r3, [r0, #16]
 80085d4:	690c      	ldr	r4, [r1, #16]
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	4607      	mov	r7, r0
 80085da:	db7e      	blt.n	80086da <quorem+0x10c>
 80085dc:	3c01      	subs	r4, #1
 80085de:	f101 0814 	add.w	r8, r1, #20
 80085e2:	00a3      	lsls	r3, r4, #2
 80085e4:	f100 0514 	add.w	r5, r0, #20
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085f8:	3301      	adds	r3, #1
 80085fa:	429a      	cmp	r2, r3
 80085fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008600:	fbb2 f6f3 	udiv	r6, r2, r3
 8008604:	d32e      	bcc.n	8008664 <quorem+0x96>
 8008606:	f04f 0a00 	mov.w	sl, #0
 800860a:	46c4      	mov	ip, r8
 800860c:	46ae      	mov	lr, r5
 800860e:	46d3      	mov	fp, sl
 8008610:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008614:	b298      	uxth	r0, r3
 8008616:	fb06 a000 	mla	r0, r6, r0, sl
 800861a:	0c02      	lsrs	r2, r0, #16
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	fb06 2303 	mla	r3, r6, r3, r2
 8008622:	f8de 2000 	ldr.w	r2, [lr]
 8008626:	b280      	uxth	r0, r0
 8008628:	b292      	uxth	r2, r2
 800862a:	1a12      	subs	r2, r2, r0
 800862c:	445a      	add	r2, fp
 800862e:	f8de 0000 	ldr.w	r0, [lr]
 8008632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008636:	b29b      	uxth	r3, r3
 8008638:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800863c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008640:	b292      	uxth	r2, r2
 8008642:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008646:	45e1      	cmp	r9, ip
 8008648:	f84e 2b04 	str.w	r2, [lr], #4
 800864c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008650:	d2de      	bcs.n	8008610 <quorem+0x42>
 8008652:	9b00      	ldr	r3, [sp, #0]
 8008654:	58eb      	ldr	r3, [r5, r3]
 8008656:	b92b      	cbnz	r3, 8008664 <quorem+0x96>
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	3b04      	subs	r3, #4
 800865c:	429d      	cmp	r5, r3
 800865e:	461a      	mov	r2, r3
 8008660:	d32f      	bcc.n	80086c2 <quorem+0xf4>
 8008662:	613c      	str	r4, [r7, #16]
 8008664:	4638      	mov	r0, r7
 8008666:	f001 f97d 	bl	8009964 <__mcmp>
 800866a:	2800      	cmp	r0, #0
 800866c:	db25      	blt.n	80086ba <quorem+0xec>
 800866e:	4629      	mov	r1, r5
 8008670:	2000      	movs	r0, #0
 8008672:	f858 2b04 	ldr.w	r2, [r8], #4
 8008676:	f8d1 c000 	ldr.w	ip, [r1]
 800867a:	fa1f fe82 	uxth.w	lr, r2
 800867e:	fa1f f38c 	uxth.w	r3, ip
 8008682:	eba3 030e 	sub.w	r3, r3, lr
 8008686:	4403      	add	r3, r0
 8008688:	0c12      	lsrs	r2, r2, #16
 800868a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800868e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008692:	b29b      	uxth	r3, r3
 8008694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008698:	45c1      	cmp	r9, r8
 800869a:	f841 3b04 	str.w	r3, [r1], #4
 800869e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80086a2:	d2e6      	bcs.n	8008672 <quorem+0xa4>
 80086a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ac:	b922      	cbnz	r2, 80086b8 <quorem+0xea>
 80086ae:	3b04      	subs	r3, #4
 80086b0:	429d      	cmp	r5, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	d30b      	bcc.n	80086ce <quorem+0x100>
 80086b6:	613c      	str	r4, [r7, #16]
 80086b8:	3601      	adds	r6, #1
 80086ba:	4630      	mov	r0, r6
 80086bc:	b003      	add	sp, #12
 80086be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	d1cb      	bne.n	8008662 <quorem+0x94>
 80086ca:	3c01      	subs	r4, #1
 80086cc:	e7c6      	b.n	800865c <quorem+0x8e>
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	d1ef      	bne.n	80086b6 <quorem+0xe8>
 80086d6:	3c01      	subs	r4, #1
 80086d8:	e7ea      	b.n	80086b0 <quorem+0xe2>
 80086da:	2000      	movs	r0, #0
 80086dc:	e7ee      	b.n	80086bc <quorem+0xee>
	...

080086e0 <_dtoa_r>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	69c7      	ldr	r7, [r0, #28]
 80086e6:	b097      	sub	sp, #92	@ 0x5c
 80086e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80086ec:	ec55 4b10 	vmov	r4, r5, d0
 80086f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80086f2:	9107      	str	r1, [sp, #28]
 80086f4:	4681      	mov	r9, r0
 80086f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80086f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80086fa:	b97f      	cbnz	r7, 800871c <_dtoa_r+0x3c>
 80086fc:	2010      	movs	r0, #16
 80086fe:	f000 fe09 	bl	8009314 <malloc>
 8008702:	4602      	mov	r2, r0
 8008704:	f8c9 001c 	str.w	r0, [r9, #28]
 8008708:	b920      	cbnz	r0, 8008714 <_dtoa_r+0x34>
 800870a:	4ba9      	ldr	r3, [pc, #676]	@ (80089b0 <_dtoa_r+0x2d0>)
 800870c:	21ef      	movs	r1, #239	@ 0xef
 800870e:	48a9      	ldr	r0, [pc, #676]	@ (80089b4 <_dtoa_r+0x2d4>)
 8008710:	f001 fcb2 	bl	800a078 <__assert_func>
 8008714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008718:	6007      	str	r7, [r0, #0]
 800871a:	60c7      	str	r7, [r0, #12]
 800871c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	b159      	cbz	r1, 800873c <_dtoa_r+0x5c>
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	604a      	str	r2, [r1, #4]
 8008728:	2301      	movs	r3, #1
 800872a:	4093      	lsls	r3, r2
 800872c:	608b      	str	r3, [r1, #8]
 800872e:	4648      	mov	r0, r9
 8008730:	f000 fee6 	bl	8009500 <_Bfree>
 8008734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	1e2b      	subs	r3, r5, #0
 800873e:	bfb9      	ittee	lt
 8008740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008744:	9305      	strlt	r3, [sp, #20]
 8008746:	2300      	movge	r3, #0
 8008748:	6033      	strge	r3, [r6, #0]
 800874a:	9f05      	ldr	r7, [sp, #20]
 800874c:	4b9a      	ldr	r3, [pc, #616]	@ (80089b8 <_dtoa_r+0x2d8>)
 800874e:	bfbc      	itt	lt
 8008750:	2201      	movlt	r2, #1
 8008752:	6032      	strlt	r2, [r6, #0]
 8008754:	43bb      	bics	r3, r7
 8008756:	d112      	bne.n	800877e <_dtoa_r+0x9e>
 8008758:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800875a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008764:	4323      	orrs	r3, r4
 8008766:	f000 855a 	beq.w	800921e <_dtoa_r+0xb3e>
 800876a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800876c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80089cc <_dtoa_r+0x2ec>
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 855c 	beq.w	800922e <_dtoa_r+0xb4e>
 8008776:	f10a 0303 	add.w	r3, sl, #3
 800877a:	f000 bd56 	b.w	800922a <_dtoa_r+0xb4a>
 800877e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008782:	2200      	movs	r2, #0
 8008784:	ec51 0b17 	vmov	r0, r1, d7
 8008788:	2300      	movs	r3, #0
 800878a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800878e:	f7f8 f9bb 	bl	8000b08 <__aeabi_dcmpeq>
 8008792:	4680      	mov	r8, r0
 8008794:	b158      	cbz	r0, 80087ae <_dtoa_r+0xce>
 8008796:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008798:	2301      	movs	r3, #1
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800879e:	b113      	cbz	r3, 80087a6 <_dtoa_r+0xc6>
 80087a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80087a2:	4b86      	ldr	r3, [pc, #536]	@ (80089bc <_dtoa_r+0x2dc>)
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80089d0 <_dtoa_r+0x2f0>
 80087aa:	f000 bd40 	b.w	800922e <_dtoa_r+0xb4e>
 80087ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80087b2:	aa14      	add	r2, sp, #80	@ 0x50
 80087b4:	a915      	add	r1, sp, #84	@ 0x54
 80087b6:	4648      	mov	r0, r9
 80087b8:	f001 f984 	bl	8009ac4 <__d2b>
 80087bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80087c0:	9002      	str	r0, [sp, #8]
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	d078      	beq.n	80088b8 <_dtoa_r+0x1d8>
 80087c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80087cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087e0:	4619      	mov	r1, r3
 80087e2:	2200      	movs	r2, #0
 80087e4:	4b76      	ldr	r3, [pc, #472]	@ (80089c0 <_dtoa_r+0x2e0>)
 80087e6:	f7f7 fd6f 	bl	80002c8 <__aeabi_dsub>
 80087ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8008998 <_dtoa_r+0x2b8>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 ff22 	bl	8000638 <__aeabi_dmul>
 80087f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80089a0 <_dtoa_r+0x2c0>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd67 	bl	80002cc <__adddf3>
 80087fe:	4604      	mov	r4, r0
 8008800:	4630      	mov	r0, r6
 8008802:	460d      	mov	r5, r1
 8008804:	f7f7 feae 	bl	8000564 <__aeabi_i2d>
 8008808:	a367      	add	r3, pc, #412	@ (adr r3, 80089a8 <_dtoa_r+0x2c8>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f7f7 ff13 	bl	8000638 <__aeabi_dmul>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f7 fd57 	bl	80002cc <__adddf3>
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	f7f8 f9b9 	bl	8000b98 <__aeabi_d2iz>
 8008826:	2200      	movs	r2, #0
 8008828:	4607      	mov	r7, r0
 800882a:	2300      	movs	r3, #0
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f8 f974 	bl	8000b1c <__aeabi_dcmplt>
 8008834:	b140      	cbz	r0, 8008848 <_dtoa_r+0x168>
 8008836:	4638      	mov	r0, r7
 8008838:	f7f7 fe94 	bl	8000564 <__aeabi_i2d>
 800883c:	4622      	mov	r2, r4
 800883e:	462b      	mov	r3, r5
 8008840:	f7f8 f962 	bl	8000b08 <__aeabi_dcmpeq>
 8008844:	b900      	cbnz	r0, 8008848 <_dtoa_r+0x168>
 8008846:	3f01      	subs	r7, #1
 8008848:	2f16      	cmp	r7, #22
 800884a:	d852      	bhi.n	80088f2 <_dtoa_r+0x212>
 800884c:	4b5d      	ldr	r3, [pc, #372]	@ (80089c4 <_dtoa_r+0x2e4>)
 800884e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800885a:	f7f8 f95f 	bl	8000b1c <__aeabi_dcmplt>
 800885e:	2800      	cmp	r0, #0
 8008860:	d049      	beq.n	80088f6 <_dtoa_r+0x216>
 8008862:	3f01      	subs	r7, #1
 8008864:	2300      	movs	r3, #0
 8008866:	9310      	str	r3, [sp, #64]	@ 0x40
 8008868:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800886a:	1b9b      	subs	r3, r3, r6
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	bf45      	ittet	mi
 8008870:	f1c3 0301 	rsbmi	r3, r3, #1
 8008874:	9300      	strmi	r3, [sp, #0]
 8008876:	2300      	movpl	r3, #0
 8008878:	2300      	movmi	r3, #0
 800887a:	9206      	str	r2, [sp, #24]
 800887c:	bf54      	ite	pl
 800887e:	9300      	strpl	r3, [sp, #0]
 8008880:	9306      	strmi	r3, [sp, #24]
 8008882:	2f00      	cmp	r7, #0
 8008884:	db39      	blt.n	80088fa <_dtoa_r+0x21a>
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	970d      	str	r7, [sp, #52]	@ 0x34
 800888a:	443b      	add	r3, r7
 800888c:	9306      	str	r3, [sp, #24]
 800888e:	2300      	movs	r3, #0
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	9b07      	ldr	r3, [sp, #28]
 8008894:	2b09      	cmp	r3, #9
 8008896:	d863      	bhi.n	8008960 <_dtoa_r+0x280>
 8008898:	2b05      	cmp	r3, #5
 800889a:	bfc4      	itt	gt
 800889c:	3b04      	subgt	r3, #4
 800889e:	9307      	strgt	r3, [sp, #28]
 80088a0:	9b07      	ldr	r3, [sp, #28]
 80088a2:	f1a3 0302 	sub.w	r3, r3, #2
 80088a6:	bfcc      	ite	gt
 80088a8:	2400      	movgt	r4, #0
 80088aa:	2401      	movle	r4, #1
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d863      	bhi.n	8008978 <_dtoa_r+0x298>
 80088b0:	e8df f003 	tbb	[pc, r3]
 80088b4:	2b375452 	.word	0x2b375452
 80088b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80088bc:	441e      	add	r6, r3
 80088be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	bfc1      	itttt	gt
 80088c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088ca:	409f      	lslgt	r7, r3
 80088cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088d4:	bfd6      	itet	le
 80088d6:	f1c3 0320 	rsble	r3, r3, #32
 80088da:	ea47 0003 	orrgt.w	r0, r7, r3
 80088de:	fa04 f003 	lslle.w	r0, r4, r3
 80088e2:	f7f7 fe2f 	bl	8000544 <__aeabi_ui2d>
 80088e6:	2201      	movs	r2, #1
 80088e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088ec:	3e01      	subs	r6, #1
 80088ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80088f0:	e776      	b.n	80087e0 <_dtoa_r+0x100>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7b7      	b.n	8008866 <_dtoa_r+0x186>
 80088f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80088f8:	e7b6      	b.n	8008868 <_dtoa_r+0x188>
 80088fa:	9b00      	ldr	r3, [sp, #0]
 80088fc:	1bdb      	subs	r3, r3, r7
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	427b      	negs	r3, r7
 8008902:	9308      	str	r3, [sp, #32]
 8008904:	2300      	movs	r3, #0
 8008906:	930d      	str	r3, [sp, #52]	@ 0x34
 8008908:	e7c3      	b.n	8008892 <_dtoa_r+0x1b2>
 800890a:	2301      	movs	r3, #1
 800890c:	9309      	str	r3, [sp, #36]	@ 0x24
 800890e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008910:	eb07 0b03 	add.w	fp, r7, r3
 8008914:	f10b 0301 	add.w	r3, fp, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	bfb8      	it	lt
 800891e:	2301      	movlt	r3, #1
 8008920:	e006      	b.n	8008930 <_dtoa_r+0x250>
 8008922:	2301      	movs	r3, #1
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008928:	2b00      	cmp	r3, #0
 800892a:	dd28      	ble.n	800897e <_dtoa_r+0x29e>
 800892c:	469b      	mov	fp, r3
 800892e:	9303      	str	r3, [sp, #12]
 8008930:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008934:	2100      	movs	r1, #0
 8008936:	2204      	movs	r2, #4
 8008938:	f102 0514 	add.w	r5, r2, #20
 800893c:	429d      	cmp	r5, r3
 800893e:	d926      	bls.n	800898e <_dtoa_r+0x2ae>
 8008940:	6041      	str	r1, [r0, #4]
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fd9c 	bl	8009480 <_Balloc>
 8008948:	4682      	mov	sl, r0
 800894a:	2800      	cmp	r0, #0
 800894c:	d142      	bne.n	80089d4 <_dtoa_r+0x2f4>
 800894e:	4b1e      	ldr	r3, [pc, #120]	@ (80089c8 <_dtoa_r+0x2e8>)
 8008950:	4602      	mov	r2, r0
 8008952:	f240 11af 	movw	r1, #431	@ 0x1af
 8008956:	e6da      	b.n	800870e <_dtoa_r+0x2e>
 8008958:	2300      	movs	r3, #0
 800895a:	e7e3      	b.n	8008924 <_dtoa_r+0x244>
 800895c:	2300      	movs	r3, #0
 800895e:	e7d5      	b.n	800890c <_dtoa_r+0x22c>
 8008960:	2401      	movs	r4, #1
 8008962:	2300      	movs	r3, #0
 8008964:	9307      	str	r3, [sp, #28]
 8008966:	9409      	str	r4, [sp, #36]	@ 0x24
 8008968:	f04f 3bff 	mov.w	fp, #4294967295
 800896c:	2200      	movs	r2, #0
 800896e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008972:	2312      	movs	r3, #18
 8008974:	920c      	str	r2, [sp, #48]	@ 0x30
 8008976:	e7db      	b.n	8008930 <_dtoa_r+0x250>
 8008978:	2301      	movs	r3, #1
 800897a:	9309      	str	r3, [sp, #36]	@ 0x24
 800897c:	e7f4      	b.n	8008968 <_dtoa_r+0x288>
 800897e:	f04f 0b01 	mov.w	fp, #1
 8008982:	f8cd b00c 	str.w	fp, [sp, #12]
 8008986:	465b      	mov	r3, fp
 8008988:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800898c:	e7d0      	b.n	8008930 <_dtoa_r+0x250>
 800898e:	3101      	adds	r1, #1
 8008990:	0052      	lsls	r2, r2, #1
 8008992:	e7d1      	b.n	8008938 <_dtoa_r+0x258>
 8008994:	f3af 8000 	nop.w
 8008998:	636f4361 	.word	0x636f4361
 800899c:	3fd287a7 	.word	0x3fd287a7
 80089a0:	8b60c8b3 	.word	0x8b60c8b3
 80089a4:	3fc68a28 	.word	0x3fc68a28
 80089a8:	509f79fb 	.word	0x509f79fb
 80089ac:	3fd34413 	.word	0x3fd34413
 80089b0:	0800a4b9 	.word	0x0800a4b9
 80089b4:	0800a4d0 	.word	0x0800a4d0
 80089b8:	7ff00000 	.word	0x7ff00000
 80089bc:	0800a489 	.word	0x0800a489
 80089c0:	3ff80000 	.word	0x3ff80000
 80089c4:	0800a620 	.word	0x0800a620
 80089c8:	0800a528 	.word	0x0800a528
 80089cc:	0800a4b5 	.word	0x0800a4b5
 80089d0:	0800a488 	.word	0x0800a488
 80089d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089d8:	6018      	str	r0, [r3, #0]
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	2b0e      	cmp	r3, #14
 80089de:	f200 80a1 	bhi.w	8008b24 <_dtoa_r+0x444>
 80089e2:	2c00      	cmp	r4, #0
 80089e4:	f000 809e 	beq.w	8008b24 <_dtoa_r+0x444>
 80089e8:	2f00      	cmp	r7, #0
 80089ea:	dd33      	ble.n	8008a54 <_dtoa_r+0x374>
 80089ec:	4b9c      	ldr	r3, [pc, #624]	@ (8008c60 <_dtoa_r+0x580>)
 80089ee:	f007 020f 	and.w	r2, r7, #15
 80089f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089f6:	ed93 7b00 	vldr	d7, [r3]
 80089fa:	05f8      	lsls	r0, r7, #23
 80089fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008a00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a04:	d516      	bpl.n	8008a34 <_dtoa_r+0x354>
 8008a06:	4b97      	ldr	r3, [pc, #604]	@ (8008c64 <_dtoa_r+0x584>)
 8008a08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a10:	f7f7 ff3c 	bl	800088c <__aeabi_ddiv>
 8008a14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a18:	f004 040f 	and.w	r4, r4, #15
 8008a1c:	2603      	movs	r6, #3
 8008a1e:	4d91      	ldr	r5, [pc, #580]	@ (8008c64 <_dtoa_r+0x584>)
 8008a20:	b954      	cbnz	r4, 8008a38 <_dtoa_r+0x358>
 8008a22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a2a:	f7f7 ff2f 	bl	800088c <__aeabi_ddiv>
 8008a2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a32:	e028      	b.n	8008a86 <_dtoa_r+0x3a6>
 8008a34:	2602      	movs	r6, #2
 8008a36:	e7f2      	b.n	8008a1e <_dtoa_r+0x33e>
 8008a38:	07e1      	lsls	r1, r4, #31
 8008a3a:	d508      	bpl.n	8008a4e <_dtoa_r+0x36e>
 8008a3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a44:	f7f7 fdf8 	bl	8000638 <__aeabi_dmul>
 8008a48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	1064      	asrs	r4, r4, #1
 8008a50:	3508      	adds	r5, #8
 8008a52:	e7e5      	b.n	8008a20 <_dtoa_r+0x340>
 8008a54:	f000 80af 	beq.w	8008bb6 <_dtoa_r+0x4d6>
 8008a58:	427c      	negs	r4, r7
 8008a5a:	4b81      	ldr	r3, [pc, #516]	@ (8008c60 <_dtoa_r+0x580>)
 8008a5c:	4d81      	ldr	r5, [pc, #516]	@ (8008c64 <_dtoa_r+0x584>)
 8008a5e:	f004 020f 	and.w	r2, r4, #15
 8008a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a6e:	f7f7 fde3 	bl	8000638 <__aeabi_dmul>
 8008a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a76:	1124      	asrs	r4, r4, #4
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2602      	movs	r6, #2
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	f040 808f 	bne.w	8008ba0 <_dtoa_r+0x4c0>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1d3      	bne.n	8008a2e <_dtoa_r+0x34e>
 8008a86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8094 	beq.w	8008bba <_dtoa_r+0x4da>
 8008a92:	4b75      	ldr	r3, [pc, #468]	@ (8008c68 <_dtoa_r+0x588>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f8 f83f 	bl	8000b1c <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f000 808b 	beq.w	8008bba <_dtoa_r+0x4da>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 8087 	beq.w	8008bba <_dtoa_r+0x4da>
 8008aac:	f1bb 0f00 	cmp.w	fp, #0
 8008ab0:	dd34      	ble.n	8008b1c <_dtoa_r+0x43c>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8008c6c <_dtoa_r+0x58c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 fdbd 	bl	8000638 <__aeabi_dmul>
 8008abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac2:	f107 38ff 	add.w	r8, r7, #4294967295
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	465c      	mov	r4, fp
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7f7 fd4a 	bl	8000564 <__aeabi_i2d>
 8008ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ad4:	f7f7 fdb0 	bl	8000638 <__aeabi_dmul>
 8008ad8:	4b65      	ldr	r3, [pc, #404]	@ (8008c70 <_dtoa_r+0x590>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	f7f7 fbf6 	bl	80002cc <__adddf3>
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ae6:	2c00      	cmp	r4, #0
 8008ae8:	d16a      	bne.n	8008bc0 <_dtoa_r+0x4e0>
 8008aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aee:	4b61      	ldr	r3, [pc, #388]	@ (8008c74 <_dtoa_r+0x594>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	f7f7 fbe9 	bl	80002c8 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008afe:	462a      	mov	r2, r5
 8008b00:	4633      	mov	r3, r6
 8008b02:	f7f8 f829 	bl	8000b58 <__aeabi_dcmpgt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f040 8298 	bne.w	800903c <_dtoa_r+0x95c>
 8008b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b10:	462a      	mov	r2, r5
 8008b12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b16:	f7f8 f801 	bl	8000b1c <__aeabi_dcmplt>
 8008b1a:	bb38      	cbnz	r0, 8008b6c <_dtoa_r+0x48c>
 8008b1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008b20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f2c0 8157 	blt.w	8008dda <_dtoa_r+0x6fa>
 8008b2c:	2f0e      	cmp	r7, #14
 8008b2e:	f300 8154 	bgt.w	8008dda <_dtoa_r+0x6fa>
 8008b32:	4b4b      	ldr	r3, [pc, #300]	@ (8008c60 <_dtoa_r+0x580>)
 8008b34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b38:	ed93 7b00 	vldr	d7, [r3]
 8008b3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	ed8d 7b00 	vstr	d7, [sp]
 8008b44:	f280 80e5 	bge.w	8008d12 <_dtoa_r+0x632>
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f300 80e1 	bgt.w	8008d12 <_dtoa_r+0x632>
 8008b50:	d10c      	bne.n	8008b6c <_dtoa_r+0x48c>
 8008b52:	4b48      	ldr	r3, [pc, #288]	@ (8008c74 <_dtoa_r+0x594>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	ec51 0b17 	vmov	r0, r1, d7
 8008b5a:	f7f7 fd6d 	bl	8000638 <__aeabi_dmul>
 8008b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b62:	f7f7 ffef 	bl	8000b44 <__aeabi_dcmpge>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f000 8266 	beq.w	8009038 <_dtoa_r+0x958>
 8008b6c:	2400      	movs	r4, #0
 8008b6e:	4625      	mov	r5, r4
 8008b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b72:	4656      	mov	r6, sl
 8008b74:	ea6f 0803 	mvn.w	r8, r3
 8008b78:	2700      	movs	r7, #0
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	f000 fcbf 	bl	8009500 <_Bfree>
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	f000 80bd 	beq.w	8008d02 <_dtoa_r+0x622>
 8008b88:	b12f      	cbz	r7, 8008b96 <_dtoa_r+0x4b6>
 8008b8a:	42af      	cmp	r7, r5
 8008b8c:	d003      	beq.n	8008b96 <_dtoa_r+0x4b6>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4648      	mov	r0, r9
 8008b92:	f000 fcb5 	bl	8009500 <_Bfree>
 8008b96:	4629      	mov	r1, r5
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f000 fcb1 	bl	8009500 <_Bfree>
 8008b9e:	e0b0      	b.n	8008d02 <_dtoa_r+0x622>
 8008ba0:	07e2      	lsls	r2, r4, #31
 8008ba2:	d505      	bpl.n	8008bb0 <_dtoa_r+0x4d0>
 8008ba4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ba8:	f7f7 fd46 	bl	8000638 <__aeabi_dmul>
 8008bac:	3601      	adds	r6, #1
 8008bae:	2301      	movs	r3, #1
 8008bb0:	1064      	asrs	r4, r4, #1
 8008bb2:	3508      	adds	r5, #8
 8008bb4:	e762      	b.n	8008a7c <_dtoa_r+0x39c>
 8008bb6:	2602      	movs	r6, #2
 8008bb8:	e765      	b.n	8008a86 <_dtoa_r+0x3a6>
 8008bba:	9c03      	ldr	r4, [sp, #12]
 8008bbc:	46b8      	mov	r8, r7
 8008bbe:	e784      	b.n	8008aca <_dtoa_r+0x3ea>
 8008bc0:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <_dtoa_r+0x580>)
 8008bc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bcc:	4454      	add	r4, sl
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d054      	beq.n	8008c7c <_dtoa_r+0x59c>
 8008bd2:	4929      	ldr	r1, [pc, #164]	@ (8008c78 <_dtoa_r+0x598>)
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f7f7 fe59 	bl	800088c <__aeabi_ddiv>
 8008bda:	4633      	mov	r3, r6
 8008bdc:	462a      	mov	r2, r5
 8008bde:	f7f7 fb73 	bl	80002c8 <__aeabi_dsub>
 8008be2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008be6:	4656      	mov	r6, sl
 8008be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bec:	f7f7 ffd4 	bl	8000b98 <__aeabi_d2iz>
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	f7f7 fcb7 	bl	8000564 <__aeabi_i2d>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bfe:	f7f7 fb63 	bl	80002c8 <__aeabi_dsub>
 8008c02:	3530      	adds	r5, #48	@ 0x30
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c0c:	f806 5b01 	strb.w	r5, [r6], #1
 8008c10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c14:	f7f7 ff82 	bl	8000b1c <__aeabi_dcmplt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d172      	bne.n	8008d02 <_dtoa_r+0x622>
 8008c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c20:	4911      	ldr	r1, [pc, #68]	@ (8008c68 <_dtoa_r+0x588>)
 8008c22:	2000      	movs	r0, #0
 8008c24:	f7f7 fb50 	bl	80002c8 <__aeabi_dsub>
 8008c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c2c:	f7f7 ff76 	bl	8000b1c <__aeabi_dcmplt>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	f040 80b4 	bne.w	8008d9e <_dtoa_r+0x6be>
 8008c36:	42a6      	cmp	r6, r4
 8008c38:	f43f af70 	beq.w	8008b1c <_dtoa_r+0x43c>
 8008c3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c40:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <_dtoa_r+0x58c>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fcf8 	bl	8000638 <__aeabi_dmul>
 8008c48:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <_dtoa_r+0x58c>)
 8008c4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c4e:	2200      	movs	r2, #0
 8008c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c54:	f7f7 fcf0 	bl	8000638 <__aeabi_dmul>
 8008c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c5c:	e7c4      	b.n	8008be8 <_dtoa_r+0x508>
 8008c5e:	bf00      	nop
 8008c60:	0800a620 	.word	0x0800a620
 8008c64:	0800a5f8 	.word	0x0800a5f8
 8008c68:	3ff00000 	.word	0x3ff00000
 8008c6c:	40240000 	.word	0x40240000
 8008c70:	401c0000 	.word	0x401c0000
 8008c74:	40140000 	.word	0x40140000
 8008c78:	3fe00000 	.word	0x3fe00000
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f7f7 fcda 	bl	8000638 <__aeabi_dmul>
 8008c84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008c8a:	4656      	mov	r6, sl
 8008c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c90:	f7f7 ff82 	bl	8000b98 <__aeabi_d2iz>
 8008c94:	4605      	mov	r5, r0
 8008c96:	f7f7 fc65 	bl	8000564 <__aeabi_i2d>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ca2:	f7f7 fb11 	bl	80002c8 <__aeabi_dsub>
 8008ca6:	3530      	adds	r5, #48	@ 0x30
 8008ca8:	f806 5b01 	strb.w	r5, [r6], #1
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	42a6      	cmp	r6, r4
 8008cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	d124      	bne.n	8008d06 <_dtoa_r+0x626>
 8008cbc:	4baf      	ldr	r3, [pc, #700]	@ (8008f7c <_dtoa_r+0x89c>)
 8008cbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008cc2:	f7f7 fb03 	bl	80002cc <__adddf3>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cce:	f7f7 ff43 	bl	8000b58 <__aeabi_dcmpgt>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d163      	bne.n	8008d9e <_dtoa_r+0x6be>
 8008cd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008cda:	49a8      	ldr	r1, [pc, #672]	@ (8008f7c <_dtoa_r+0x89c>)
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f7f7 faf3 	bl	80002c8 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cea:	f7f7 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f43f af14 	beq.w	8008b1c <_dtoa_r+0x43c>
 8008cf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008cf6:	1e73      	subs	r3, r6, #1
 8008cf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cfe:	2b30      	cmp	r3, #48	@ 0x30
 8008d00:	d0f8      	beq.n	8008cf4 <_dtoa_r+0x614>
 8008d02:	4647      	mov	r7, r8
 8008d04:	e03b      	b.n	8008d7e <_dtoa_r+0x69e>
 8008d06:	4b9e      	ldr	r3, [pc, #632]	@ (8008f80 <_dtoa_r+0x8a0>)
 8008d08:	f7f7 fc96 	bl	8000638 <__aeabi_dmul>
 8008d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d10:	e7bc      	b.n	8008c8c <_dtoa_r+0x5ac>
 8008d12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d16:	4656      	mov	r6, sl
 8008d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 fdb4 	bl	800088c <__aeabi_ddiv>
 8008d24:	f7f7 ff38 	bl	8000b98 <__aeabi_d2iz>
 8008d28:	4680      	mov	r8, r0
 8008d2a:	f7f7 fc1b 	bl	8000564 <__aeabi_i2d>
 8008d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d32:	f7f7 fc81 	bl	8000638 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d42:	f7f7 fac1 	bl	80002c8 <__aeabi_dsub>
 8008d46:	f806 4b01 	strb.w	r4, [r6], #1
 8008d4a:	9d03      	ldr	r5, [sp, #12]
 8008d4c:	eba6 040a 	sub.w	r4, r6, sl
 8008d50:	42a5      	cmp	r5, r4
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	d133      	bne.n	8008dc0 <_dtoa_r+0x6e0>
 8008d58:	f7f7 fab8 	bl	80002cc <__adddf3>
 8008d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d60:	4604      	mov	r4, r0
 8008d62:	460d      	mov	r5, r1
 8008d64:	f7f7 fef8 	bl	8000b58 <__aeabi_dcmpgt>
 8008d68:	b9c0      	cbnz	r0, 8008d9c <_dtoa_r+0x6bc>
 8008d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fec9 	bl	8000b08 <__aeabi_dcmpeq>
 8008d76:	b110      	cbz	r0, 8008d7e <_dtoa_r+0x69e>
 8008d78:	f018 0f01 	tst.w	r8, #1
 8008d7c:	d10e      	bne.n	8008d9c <_dtoa_r+0x6bc>
 8008d7e:	9902      	ldr	r1, [sp, #8]
 8008d80:	4648      	mov	r0, r9
 8008d82:	f000 fbbd 	bl	8009500 <_Bfree>
 8008d86:	2300      	movs	r3, #0
 8008d88:	7033      	strb	r3, [r6, #0]
 8008d8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d8c:	3701      	adds	r7, #1
 8008d8e:	601f      	str	r7, [r3, #0]
 8008d90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 824b 	beq.w	800922e <_dtoa_r+0xb4e>
 8008d98:	601e      	str	r6, [r3, #0]
 8008d9a:	e248      	b.n	800922e <_dtoa_r+0xb4e>
 8008d9c:	46b8      	mov	r8, r7
 8008d9e:	4633      	mov	r3, r6
 8008da0:	461e      	mov	r6, r3
 8008da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008da6:	2a39      	cmp	r2, #57	@ 0x39
 8008da8:	d106      	bne.n	8008db8 <_dtoa_r+0x6d8>
 8008daa:	459a      	cmp	sl, r3
 8008dac:	d1f8      	bne.n	8008da0 <_dtoa_r+0x6c0>
 8008dae:	2230      	movs	r2, #48	@ 0x30
 8008db0:	f108 0801 	add.w	r8, r8, #1
 8008db4:	f88a 2000 	strb.w	r2, [sl]
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	3201      	adds	r2, #1
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e7a0      	b.n	8008d02 <_dtoa_r+0x622>
 8008dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8008f80 <_dtoa_r+0x8a0>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f7f7 fc38 	bl	8000638 <__aeabi_dmul>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	f7f7 fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d09f      	beq.n	8008d18 <_dtoa_r+0x638>
 8008dd8:	e7d1      	b.n	8008d7e <_dtoa_r+0x69e>
 8008dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	f000 80ea 	beq.w	8008fb6 <_dtoa_r+0x8d6>
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	2a01      	cmp	r2, #1
 8008de6:	f300 80cd 	bgt.w	8008f84 <_dtoa_r+0x8a4>
 8008dea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dec:	2a00      	cmp	r2, #0
 8008dee:	f000 80c1 	beq.w	8008f74 <_dtoa_r+0x894>
 8008df2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008df6:	9c08      	ldr	r4, [sp, #32]
 8008df8:	9e00      	ldr	r6, [sp, #0]
 8008dfa:	9a00      	ldr	r2, [sp, #0]
 8008dfc:	441a      	add	r2, r3
 8008dfe:	9200      	str	r2, [sp, #0]
 8008e00:	9a06      	ldr	r2, [sp, #24]
 8008e02:	2101      	movs	r1, #1
 8008e04:	441a      	add	r2, r3
 8008e06:	4648      	mov	r0, r9
 8008e08:	9206      	str	r2, [sp, #24]
 8008e0a:	f000 fc2d 	bl	8009668 <__i2b>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b166      	cbz	r6, 8008e2c <_dtoa_r+0x74c>
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd09      	ble.n	8008e2c <_dtoa_r+0x74c>
 8008e18:	42b3      	cmp	r3, r6
 8008e1a:	9a00      	ldr	r2, [sp, #0]
 8008e1c:	bfa8      	it	ge
 8008e1e:	4633      	movge	r3, r6
 8008e20:	1ad2      	subs	r2, r2, r3
 8008e22:	9200      	str	r2, [sp, #0]
 8008e24:	9a06      	ldr	r2, [sp, #24]
 8008e26:	1af6      	subs	r6, r6, r3
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	9306      	str	r3, [sp, #24]
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	b30b      	cbz	r3, 8008e74 <_dtoa_r+0x794>
 8008e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 80c6 	beq.w	8008fc4 <_dtoa_r+0x8e4>
 8008e38:	2c00      	cmp	r4, #0
 8008e3a:	f000 80c0 	beq.w	8008fbe <_dtoa_r+0x8de>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4622      	mov	r2, r4
 8008e42:	4648      	mov	r0, r9
 8008e44:	f000 fcc8 	bl	80097d8 <__pow5mult>
 8008e48:	9a02      	ldr	r2, [sp, #8]
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	4648      	mov	r0, r9
 8008e50:	f000 fc20 	bl	8009694 <__multiply>
 8008e54:	9902      	ldr	r1, [sp, #8]
 8008e56:	4680      	mov	r8, r0
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f000 fb51 	bl	8009500 <_Bfree>
 8008e5e:	9b08      	ldr	r3, [sp, #32]
 8008e60:	1b1b      	subs	r3, r3, r4
 8008e62:	9308      	str	r3, [sp, #32]
 8008e64:	f000 80b1 	beq.w	8008fca <_dtoa_r+0x8ea>
 8008e68:	9a08      	ldr	r2, [sp, #32]
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	4648      	mov	r0, r9
 8008e6e:	f000 fcb3 	bl	80097d8 <__pow5mult>
 8008e72:	9002      	str	r0, [sp, #8]
 8008e74:	2101      	movs	r1, #1
 8008e76:	4648      	mov	r0, r9
 8008e78:	f000 fbf6 	bl	8009668 <__i2b>
 8008e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e7e:	4604      	mov	r4, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 81d8 	beq.w	8009236 <_dtoa_r+0xb56>
 8008e86:	461a      	mov	r2, r3
 8008e88:	4601      	mov	r1, r0
 8008e8a:	4648      	mov	r0, r9
 8008e8c:	f000 fca4 	bl	80097d8 <__pow5mult>
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	4604      	mov	r4, r0
 8008e96:	f300 809f 	bgt.w	8008fd8 <_dtoa_r+0x8f8>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f040 8097 	bne.w	8008fd0 <_dtoa_r+0x8f0>
 8008ea2:	9b05      	ldr	r3, [sp, #20]
 8008ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f040 8093 	bne.w	8008fd4 <_dtoa_r+0x8f4>
 8008eae:	9b05      	ldr	r3, [sp, #20]
 8008eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eb4:	0d1b      	lsrs	r3, r3, #20
 8008eb6:	051b      	lsls	r3, r3, #20
 8008eb8:	b133      	cbz	r3, 8008ec8 <_dtoa_r+0x7e8>
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	9b06      	ldr	r3, [sp, #24]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	9306      	str	r3, [sp, #24]
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 81b8 	beq.w	8009242 <_dtoa_r+0xb62>
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ed8:	6918      	ldr	r0, [r3, #16]
 8008eda:	f000 fb79 	bl	80095d0 <__hi0bits>
 8008ede:	f1c0 0020 	rsb	r0, r0, #32
 8008ee2:	9b06      	ldr	r3, [sp, #24]
 8008ee4:	4418      	add	r0, r3
 8008ee6:	f010 001f 	ands.w	r0, r0, #31
 8008eea:	f000 8082 	beq.w	8008ff2 <_dtoa_r+0x912>
 8008eee:	f1c0 0320 	rsb	r3, r0, #32
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	dd73      	ble.n	8008fde <_dtoa_r+0x8fe>
 8008ef6:	9b00      	ldr	r3, [sp, #0]
 8008ef8:	f1c0 001c 	rsb	r0, r0, #28
 8008efc:	4403      	add	r3, r0
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	4403      	add	r3, r0
 8008f04:	4406      	add	r6, r0
 8008f06:	9306      	str	r3, [sp, #24]
 8008f08:	9b00      	ldr	r3, [sp, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dd05      	ble.n	8008f1a <_dtoa_r+0x83a>
 8008f0e:	9902      	ldr	r1, [sp, #8]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4648      	mov	r0, r9
 8008f14:	f000 fcba 	bl	800988c <__lshift>
 8008f18:	9002      	str	r0, [sp, #8]
 8008f1a:	9b06      	ldr	r3, [sp, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd05      	ble.n	8008f2c <_dtoa_r+0x84c>
 8008f20:	4621      	mov	r1, r4
 8008f22:	461a      	mov	r2, r3
 8008f24:	4648      	mov	r0, r9
 8008f26:	f000 fcb1 	bl	800988c <__lshift>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d061      	beq.n	8008ff6 <_dtoa_r+0x916>
 8008f32:	9802      	ldr	r0, [sp, #8]
 8008f34:	4621      	mov	r1, r4
 8008f36:	f000 fd15 	bl	8009964 <__mcmp>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	da5b      	bge.n	8008ff6 <_dtoa_r+0x916>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9902      	ldr	r1, [sp, #8]
 8008f42:	220a      	movs	r2, #10
 8008f44:	4648      	mov	r0, r9
 8008f46:	f000 fafd 	bl	8009544 <__multadd>
 8008f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 8177 	beq.w	8009246 <_dtoa_r+0xb66>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	220a      	movs	r2, #10
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f000 faf0 	bl	8009544 <__multadd>
 8008f64:	f1bb 0f00 	cmp.w	fp, #0
 8008f68:	4605      	mov	r5, r0
 8008f6a:	dc6f      	bgt.n	800904c <_dtoa_r+0x96c>
 8008f6c:	9b07      	ldr	r3, [sp, #28]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	dc49      	bgt.n	8009006 <_dtoa_r+0x926>
 8008f72:	e06b      	b.n	800904c <_dtoa_r+0x96c>
 8008f74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f7a:	e73c      	b.n	8008df6 <_dtoa_r+0x716>
 8008f7c:	3fe00000 	.word	0x3fe00000
 8008f80:	40240000 	.word	0x40240000
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1e5c      	subs	r4, r3, #1
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	db09      	blt.n	8008fa2 <_dtoa_r+0x8c2>
 8008f8e:	1b1c      	subs	r4, r3, r4
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f6bf af30 	bge.w	8008df8 <_dtoa_r+0x718>
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	9a03      	ldr	r2, [sp, #12]
 8008f9c:	1a9e      	subs	r6, r3, r2
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e72b      	b.n	8008dfa <_dtoa_r+0x71a>
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fa6:	9408      	str	r4, [sp, #32]
 8008fa8:	1ae3      	subs	r3, r4, r3
 8008faa:	441a      	add	r2, r3
 8008fac:	9e00      	ldr	r6, [sp, #0]
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008fb2:	2400      	movs	r4, #0
 8008fb4:	e721      	b.n	8008dfa <_dtoa_r+0x71a>
 8008fb6:	9c08      	ldr	r4, [sp, #32]
 8008fb8:	9e00      	ldr	r6, [sp, #0]
 8008fba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008fbc:	e728      	b.n	8008e10 <_dtoa_r+0x730>
 8008fbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008fc2:	e751      	b.n	8008e68 <_dtoa_r+0x788>
 8008fc4:	9a08      	ldr	r2, [sp, #32]
 8008fc6:	9902      	ldr	r1, [sp, #8]
 8008fc8:	e750      	b.n	8008e6c <_dtoa_r+0x78c>
 8008fca:	f8cd 8008 	str.w	r8, [sp, #8]
 8008fce:	e751      	b.n	8008e74 <_dtoa_r+0x794>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e779      	b.n	8008ec8 <_dtoa_r+0x7e8>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	e777      	b.n	8008ec8 <_dtoa_r+0x7e8>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9308      	str	r3, [sp, #32]
 8008fdc:	e779      	b.n	8008ed2 <_dtoa_r+0x7f2>
 8008fde:	d093      	beq.n	8008f08 <_dtoa_r+0x828>
 8008fe0:	9a00      	ldr	r2, [sp, #0]
 8008fe2:	331c      	adds	r3, #28
 8008fe4:	441a      	add	r2, r3
 8008fe6:	9200      	str	r2, [sp, #0]
 8008fe8:	9a06      	ldr	r2, [sp, #24]
 8008fea:	441a      	add	r2, r3
 8008fec:	441e      	add	r6, r3
 8008fee:	9206      	str	r2, [sp, #24]
 8008ff0:	e78a      	b.n	8008f08 <_dtoa_r+0x828>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	e7f4      	b.n	8008fe0 <_dtoa_r+0x900>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	46b8      	mov	r8, r7
 8008ffc:	dc20      	bgt.n	8009040 <_dtoa_r+0x960>
 8008ffe:	469b      	mov	fp, r3
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	2b02      	cmp	r3, #2
 8009004:	dd1e      	ble.n	8009044 <_dtoa_r+0x964>
 8009006:	f1bb 0f00 	cmp.w	fp, #0
 800900a:	f47f adb1 	bne.w	8008b70 <_dtoa_r+0x490>
 800900e:	4621      	mov	r1, r4
 8009010:	465b      	mov	r3, fp
 8009012:	2205      	movs	r2, #5
 8009014:	4648      	mov	r0, r9
 8009016:	f000 fa95 	bl	8009544 <__multadd>
 800901a:	4601      	mov	r1, r0
 800901c:	4604      	mov	r4, r0
 800901e:	9802      	ldr	r0, [sp, #8]
 8009020:	f000 fca0 	bl	8009964 <__mcmp>
 8009024:	2800      	cmp	r0, #0
 8009026:	f77f ada3 	ble.w	8008b70 <_dtoa_r+0x490>
 800902a:	4656      	mov	r6, sl
 800902c:	2331      	movs	r3, #49	@ 0x31
 800902e:	f806 3b01 	strb.w	r3, [r6], #1
 8009032:	f108 0801 	add.w	r8, r8, #1
 8009036:	e59f      	b.n	8008b78 <_dtoa_r+0x498>
 8009038:	9c03      	ldr	r4, [sp, #12]
 800903a:	46b8      	mov	r8, r7
 800903c:	4625      	mov	r5, r4
 800903e:	e7f4      	b.n	800902a <_dtoa_r+0x94a>
 8009040:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8101 	beq.w	800924e <_dtoa_r+0xb6e>
 800904c:	2e00      	cmp	r6, #0
 800904e:	dd05      	ble.n	800905c <_dtoa_r+0x97c>
 8009050:	4629      	mov	r1, r5
 8009052:	4632      	mov	r2, r6
 8009054:	4648      	mov	r0, r9
 8009056:	f000 fc19 	bl	800988c <__lshift>
 800905a:	4605      	mov	r5, r0
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d05c      	beq.n	800911c <_dtoa_r+0xa3c>
 8009062:	6869      	ldr	r1, [r5, #4]
 8009064:	4648      	mov	r0, r9
 8009066:	f000 fa0b 	bl	8009480 <_Balloc>
 800906a:	4606      	mov	r6, r0
 800906c:	b928      	cbnz	r0, 800907a <_dtoa_r+0x99a>
 800906e:	4b82      	ldr	r3, [pc, #520]	@ (8009278 <_dtoa_r+0xb98>)
 8009070:	4602      	mov	r2, r0
 8009072:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009076:	f7ff bb4a 	b.w	800870e <_dtoa_r+0x2e>
 800907a:	692a      	ldr	r2, [r5, #16]
 800907c:	3202      	adds	r2, #2
 800907e:	0092      	lsls	r2, r2, #2
 8009080:	f105 010c 	add.w	r1, r5, #12
 8009084:	300c      	adds	r0, #12
 8009086:	f7ff fa94 	bl	80085b2 <memcpy>
 800908a:	2201      	movs	r2, #1
 800908c:	4631      	mov	r1, r6
 800908e:	4648      	mov	r0, r9
 8009090:	f000 fbfc 	bl	800988c <__lshift>
 8009094:	f10a 0301 	add.w	r3, sl, #1
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	eb0a 030b 	add.w	r3, sl, fp
 800909e:	9308      	str	r3, [sp, #32]
 80090a0:	9b04      	ldr	r3, [sp, #16]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	462f      	mov	r7, r5
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	4605      	mov	r5, r0
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	9802      	ldr	r0, [sp, #8]
 80090b0:	4621      	mov	r1, r4
 80090b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80090b6:	f7ff fa8a 	bl	80085ce <quorem>
 80090ba:	4603      	mov	r3, r0
 80090bc:	3330      	adds	r3, #48	@ 0x30
 80090be:	9003      	str	r0, [sp, #12]
 80090c0:	4639      	mov	r1, r7
 80090c2:	9802      	ldr	r0, [sp, #8]
 80090c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c6:	f000 fc4d 	bl	8009964 <__mcmp>
 80090ca:	462a      	mov	r2, r5
 80090cc:	9004      	str	r0, [sp, #16]
 80090ce:	4621      	mov	r1, r4
 80090d0:	4648      	mov	r0, r9
 80090d2:	f000 fc63 	bl	800999c <__mdiff>
 80090d6:	68c2      	ldr	r2, [r0, #12]
 80090d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090da:	4606      	mov	r6, r0
 80090dc:	bb02      	cbnz	r2, 8009120 <_dtoa_r+0xa40>
 80090de:	4601      	mov	r1, r0
 80090e0:	9802      	ldr	r0, [sp, #8]
 80090e2:	f000 fc3f 	bl	8009964 <__mcmp>
 80090e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e8:	4602      	mov	r2, r0
 80090ea:	4631      	mov	r1, r6
 80090ec:	4648      	mov	r0, r9
 80090ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80090f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80090f2:	f000 fa05 	bl	8009500 <_Bfree>
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80090fa:	9e00      	ldr	r6, [sp, #0]
 80090fc:	ea42 0103 	orr.w	r1, r2, r3
 8009100:	9b06      	ldr	r3, [sp, #24]
 8009102:	4319      	orrs	r1, r3
 8009104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009106:	d10d      	bne.n	8009124 <_dtoa_r+0xa44>
 8009108:	2b39      	cmp	r3, #57	@ 0x39
 800910a:	d027      	beq.n	800915c <_dtoa_r+0xa7c>
 800910c:	9a04      	ldr	r2, [sp, #16]
 800910e:	2a00      	cmp	r2, #0
 8009110:	dd01      	ble.n	8009116 <_dtoa_r+0xa36>
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	3331      	adds	r3, #49	@ 0x31
 8009116:	f88b 3000 	strb.w	r3, [fp]
 800911a:	e52e      	b.n	8008b7a <_dtoa_r+0x49a>
 800911c:	4628      	mov	r0, r5
 800911e:	e7b9      	b.n	8009094 <_dtoa_r+0x9b4>
 8009120:	2201      	movs	r2, #1
 8009122:	e7e2      	b.n	80090ea <_dtoa_r+0xa0a>
 8009124:	9904      	ldr	r1, [sp, #16]
 8009126:	2900      	cmp	r1, #0
 8009128:	db04      	blt.n	8009134 <_dtoa_r+0xa54>
 800912a:	9807      	ldr	r0, [sp, #28]
 800912c:	4301      	orrs	r1, r0
 800912e:	9806      	ldr	r0, [sp, #24]
 8009130:	4301      	orrs	r1, r0
 8009132:	d120      	bne.n	8009176 <_dtoa_r+0xa96>
 8009134:	2a00      	cmp	r2, #0
 8009136:	ddee      	ble.n	8009116 <_dtoa_r+0xa36>
 8009138:	9902      	ldr	r1, [sp, #8]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2201      	movs	r2, #1
 800913e:	4648      	mov	r0, r9
 8009140:	f000 fba4 	bl	800988c <__lshift>
 8009144:	4621      	mov	r1, r4
 8009146:	9002      	str	r0, [sp, #8]
 8009148:	f000 fc0c 	bl	8009964 <__mcmp>
 800914c:	2800      	cmp	r0, #0
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	dc02      	bgt.n	8009158 <_dtoa_r+0xa78>
 8009152:	d1e0      	bne.n	8009116 <_dtoa_r+0xa36>
 8009154:	07da      	lsls	r2, r3, #31
 8009156:	d5de      	bpl.n	8009116 <_dtoa_r+0xa36>
 8009158:	2b39      	cmp	r3, #57	@ 0x39
 800915a:	d1da      	bne.n	8009112 <_dtoa_r+0xa32>
 800915c:	2339      	movs	r3, #57	@ 0x39
 800915e:	f88b 3000 	strb.w	r3, [fp]
 8009162:	4633      	mov	r3, r6
 8009164:	461e      	mov	r6, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800916c:	2a39      	cmp	r2, #57	@ 0x39
 800916e:	d04e      	beq.n	800920e <_dtoa_r+0xb2e>
 8009170:	3201      	adds	r2, #1
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	e501      	b.n	8008b7a <_dtoa_r+0x49a>
 8009176:	2a00      	cmp	r2, #0
 8009178:	dd03      	ble.n	8009182 <_dtoa_r+0xaa2>
 800917a:	2b39      	cmp	r3, #57	@ 0x39
 800917c:	d0ee      	beq.n	800915c <_dtoa_r+0xa7c>
 800917e:	3301      	adds	r3, #1
 8009180:	e7c9      	b.n	8009116 <_dtoa_r+0xa36>
 8009182:	9a00      	ldr	r2, [sp, #0]
 8009184:	9908      	ldr	r1, [sp, #32]
 8009186:	f802 3c01 	strb.w	r3, [r2, #-1]
 800918a:	428a      	cmp	r2, r1
 800918c:	d028      	beq.n	80091e0 <_dtoa_r+0xb00>
 800918e:	9902      	ldr	r1, [sp, #8]
 8009190:	2300      	movs	r3, #0
 8009192:	220a      	movs	r2, #10
 8009194:	4648      	mov	r0, r9
 8009196:	f000 f9d5 	bl	8009544 <__multadd>
 800919a:	42af      	cmp	r7, r5
 800919c:	9002      	str	r0, [sp, #8]
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	f04f 020a 	mov.w	r2, #10
 80091a6:	4639      	mov	r1, r7
 80091a8:	4648      	mov	r0, r9
 80091aa:	d107      	bne.n	80091bc <_dtoa_r+0xadc>
 80091ac:	f000 f9ca 	bl	8009544 <__multadd>
 80091b0:	4607      	mov	r7, r0
 80091b2:	4605      	mov	r5, r0
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	3301      	adds	r3, #1
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	e777      	b.n	80090ac <_dtoa_r+0x9cc>
 80091bc:	f000 f9c2 	bl	8009544 <__multadd>
 80091c0:	4629      	mov	r1, r5
 80091c2:	4607      	mov	r7, r0
 80091c4:	2300      	movs	r3, #0
 80091c6:	220a      	movs	r2, #10
 80091c8:	4648      	mov	r0, r9
 80091ca:	f000 f9bb 	bl	8009544 <__multadd>
 80091ce:	4605      	mov	r5, r0
 80091d0:	e7f0      	b.n	80091b4 <_dtoa_r+0xad4>
 80091d2:	f1bb 0f00 	cmp.w	fp, #0
 80091d6:	bfcc      	ite	gt
 80091d8:	465e      	movgt	r6, fp
 80091da:	2601      	movle	r6, #1
 80091dc:	4456      	add	r6, sl
 80091de:	2700      	movs	r7, #0
 80091e0:	9902      	ldr	r1, [sp, #8]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2201      	movs	r2, #1
 80091e6:	4648      	mov	r0, r9
 80091e8:	f000 fb50 	bl	800988c <__lshift>
 80091ec:	4621      	mov	r1, r4
 80091ee:	9002      	str	r0, [sp, #8]
 80091f0:	f000 fbb8 	bl	8009964 <__mcmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	dcb4      	bgt.n	8009162 <_dtoa_r+0xa82>
 80091f8:	d102      	bne.n	8009200 <_dtoa_r+0xb20>
 80091fa:	9b00      	ldr	r3, [sp, #0]
 80091fc:	07db      	lsls	r3, r3, #31
 80091fe:	d4b0      	bmi.n	8009162 <_dtoa_r+0xa82>
 8009200:	4633      	mov	r3, r6
 8009202:	461e      	mov	r6, r3
 8009204:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009208:	2a30      	cmp	r2, #48	@ 0x30
 800920a:	d0fa      	beq.n	8009202 <_dtoa_r+0xb22>
 800920c:	e4b5      	b.n	8008b7a <_dtoa_r+0x49a>
 800920e:	459a      	cmp	sl, r3
 8009210:	d1a8      	bne.n	8009164 <_dtoa_r+0xa84>
 8009212:	2331      	movs	r3, #49	@ 0x31
 8009214:	f108 0801 	add.w	r8, r8, #1
 8009218:	f88a 3000 	strb.w	r3, [sl]
 800921c:	e4ad      	b.n	8008b7a <_dtoa_r+0x49a>
 800921e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009220:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800927c <_dtoa_r+0xb9c>
 8009224:	b11b      	cbz	r3, 800922e <_dtoa_r+0xb4e>
 8009226:	f10a 0308 	add.w	r3, sl, #8
 800922a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	4650      	mov	r0, sl
 8009230:	b017      	add	sp, #92	@ 0x5c
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	9b07      	ldr	r3, [sp, #28]
 8009238:	2b01      	cmp	r3, #1
 800923a:	f77f ae2e 	ble.w	8008e9a <_dtoa_r+0x7ba>
 800923e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009240:	9308      	str	r3, [sp, #32]
 8009242:	2001      	movs	r0, #1
 8009244:	e64d      	b.n	8008ee2 <_dtoa_r+0x802>
 8009246:	f1bb 0f00 	cmp.w	fp, #0
 800924a:	f77f aed9 	ble.w	8009000 <_dtoa_r+0x920>
 800924e:	4656      	mov	r6, sl
 8009250:	9802      	ldr	r0, [sp, #8]
 8009252:	4621      	mov	r1, r4
 8009254:	f7ff f9bb 	bl	80085ce <quorem>
 8009258:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800925c:	f806 3b01 	strb.w	r3, [r6], #1
 8009260:	eba6 020a 	sub.w	r2, r6, sl
 8009264:	4593      	cmp	fp, r2
 8009266:	ddb4      	ble.n	80091d2 <_dtoa_r+0xaf2>
 8009268:	9902      	ldr	r1, [sp, #8]
 800926a:	2300      	movs	r3, #0
 800926c:	220a      	movs	r2, #10
 800926e:	4648      	mov	r0, r9
 8009270:	f000 f968 	bl	8009544 <__multadd>
 8009274:	9002      	str	r0, [sp, #8]
 8009276:	e7eb      	b.n	8009250 <_dtoa_r+0xb70>
 8009278:	0800a528 	.word	0x0800a528
 800927c:	0800a4ac 	.word	0x0800a4ac

08009280 <_free_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4605      	mov	r5, r0
 8009284:	2900      	cmp	r1, #0
 8009286:	d041      	beq.n	800930c <_free_r+0x8c>
 8009288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928c:	1f0c      	subs	r4, r1, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	18e4      	addlt	r4, r4, r3
 8009294:	f000 f8e8 	bl	8009468 <__malloc_lock>
 8009298:	4a1d      	ldr	r2, [pc, #116]	@ (8009310 <_free_r+0x90>)
 800929a:	6813      	ldr	r3, [r2, #0]
 800929c:	b933      	cbnz	r3, 80092ac <_free_r+0x2c>
 800929e:	6063      	str	r3, [r4, #4]
 80092a0:	6014      	str	r4, [r2, #0]
 80092a2:	4628      	mov	r0, r5
 80092a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092a8:	f000 b8e4 	b.w	8009474 <__malloc_unlock>
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	d908      	bls.n	80092c2 <_free_r+0x42>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	1821      	adds	r1, r4, r0
 80092b4:	428b      	cmp	r3, r1
 80092b6:	bf01      	itttt	eq
 80092b8:	6819      	ldreq	r1, [r3, #0]
 80092ba:	685b      	ldreq	r3, [r3, #4]
 80092bc:	1809      	addeq	r1, r1, r0
 80092be:	6021      	streq	r1, [r4, #0]
 80092c0:	e7ed      	b.n	800929e <_free_r+0x1e>
 80092c2:	461a      	mov	r2, r3
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	b10b      	cbz	r3, 80092cc <_free_r+0x4c>
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d9fa      	bls.n	80092c2 <_free_r+0x42>
 80092cc:	6811      	ldr	r1, [r2, #0]
 80092ce:	1850      	adds	r0, r2, r1
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d10b      	bne.n	80092ec <_free_r+0x6c>
 80092d4:	6820      	ldr	r0, [r4, #0]
 80092d6:	4401      	add	r1, r0
 80092d8:	1850      	adds	r0, r2, r1
 80092da:	4283      	cmp	r3, r0
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	d1e0      	bne.n	80092a2 <_free_r+0x22>
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	6053      	str	r3, [r2, #4]
 80092e6:	4408      	add	r0, r1
 80092e8:	6010      	str	r0, [r2, #0]
 80092ea:	e7da      	b.n	80092a2 <_free_r+0x22>
 80092ec:	d902      	bls.n	80092f4 <_free_r+0x74>
 80092ee:	230c      	movs	r3, #12
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	e7d6      	b.n	80092a2 <_free_r+0x22>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	1821      	adds	r1, r4, r0
 80092f8:	428b      	cmp	r3, r1
 80092fa:	bf04      	itt	eq
 80092fc:	6819      	ldreq	r1, [r3, #0]
 80092fe:	685b      	ldreq	r3, [r3, #4]
 8009300:	6063      	str	r3, [r4, #4]
 8009302:	bf04      	itt	eq
 8009304:	1809      	addeq	r1, r1, r0
 8009306:	6021      	streq	r1, [r4, #0]
 8009308:	6054      	str	r4, [r2, #4]
 800930a:	e7ca      	b.n	80092a2 <_free_r+0x22>
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	bf00      	nop
 8009310:	20004e5c 	.word	0x20004e5c

08009314 <malloc>:
 8009314:	4b02      	ldr	r3, [pc, #8]	@ (8009320 <malloc+0xc>)
 8009316:	4601      	mov	r1, r0
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	f000 b825 	b.w	8009368 <_malloc_r>
 800931e:	bf00      	nop
 8009320:	2000001c 	.word	0x2000001c

08009324 <sbrk_aligned>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	4e0f      	ldr	r6, [pc, #60]	@ (8009364 <sbrk_aligned+0x40>)
 8009328:	460c      	mov	r4, r1
 800932a:	6831      	ldr	r1, [r6, #0]
 800932c:	4605      	mov	r5, r0
 800932e:	b911      	cbnz	r1, 8009336 <sbrk_aligned+0x12>
 8009330:	f000 fe92 	bl	800a058 <_sbrk_r>
 8009334:	6030      	str	r0, [r6, #0]
 8009336:	4621      	mov	r1, r4
 8009338:	4628      	mov	r0, r5
 800933a:	f000 fe8d 	bl	800a058 <_sbrk_r>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d103      	bne.n	800934a <sbrk_aligned+0x26>
 8009342:	f04f 34ff 	mov.w	r4, #4294967295
 8009346:	4620      	mov	r0, r4
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	1cc4      	adds	r4, r0, #3
 800934c:	f024 0403 	bic.w	r4, r4, #3
 8009350:	42a0      	cmp	r0, r4
 8009352:	d0f8      	beq.n	8009346 <sbrk_aligned+0x22>
 8009354:	1a21      	subs	r1, r4, r0
 8009356:	4628      	mov	r0, r5
 8009358:	f000 fe7e 	bl	800a058 <_sbrk_r>
 800935c:	3001      	adds	r0, #1
 800935e:	d1f2      	bne.n	8009346 <sbrk_aligned+0x22>
 8009360:	e7ef      	b.n	8009342 <sbrk_aligned+0x1e>
 8009362:	bf00      	nop
 8009364:	20004e58 	.word	0x20004e58

08009368 <_malloc_r>:
 8009368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800936c:	1ccd      	adds	r5, r1, #3
 800936e:	f025 0503 	bic.w	r5, r5, #3
 8009372:	3508      	adds	r5, #8
 8009374:	2d0c      	cmp	r5, #12
 8009376:	bf38      	it	cc
 8009378:	250c      	movcc	r5, #12
 800937a:	2d00      	cmp	r5, #0
 800937c:	4606      	mov	r6, r0
 800937e:	db01      	blt.n	8009384 <_malloc_r+0x1c>
 8009380:	42a9      	cmp	r1, r5
 8009382:	d904      	bls.n	800938e <_malloc_r+0x26>
 8009384:	230c      	movs	r3, #12
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	2000      	movs	r0, #0
 800938a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009464 <_malloc_r+0xfc>
 8009392:	f000 f869 	bl	8009468 <__malloc_lock>
 8009396:	f8d8 3000 	ldr.w	r3, [r8]
 800939a:	461c      	mov	r4, r3
 800939c:	bb44      	cbnz	r4, 80093f0 <_malloc_r+0x88>
 800939e:	4629      	mov	r1, r5
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7ff ffbf 	bl	8009324 <sbrk_aligned>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	4604      	mov	r4, r0
 80093aa:	d158      	bne.n	800945e <_malloc_r+0xf6>
 80093ac:	f8d8 4000 	ldr.w	r4, [r8]
 80093b0:	4627      	mov	r7, r4
 80093b2:	2f00      	cmp	r7, #0
 80093b4:	d143      	bne.n	800943e <_malloc_r+0xd6>
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	d04b      	beq.n	8009452 <_malloc_r+0xea>
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	4639      	mov	r1, r7
 80093be:	4630      	mov	r0, r6
 80093c0:	eb04 0903 	add.w	r9, r4, r3
 80093c4:	f000 fe48 	bl	800a058 <_sbrk_r>
 80093c8:	4581      	cmp	r9, r0
 80093ca:	d142      	bne.n	8009452 <_malloc_r+0xea>
 80093cc:	6821      	ldr	r1, [r4, #0]
 80093ce:	1a6d      	subs	r5, r5, r1
 80093d0:	4629      	mov	r1, r5
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7ff ffa6 	bl	8009324 <sbrk_aligned>
 80093d8:	3001      	adds	r0, #1
 80093da:	d03a      	beq.n	8009452 <_malloc_r+0xea>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	442b      	add	r3, r5
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	f8d8 3000 	ldr.w	r3, [r8]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	bb62      	cbnz	r2, 8009444 <_malloc_r+0xdc>
 80093ea:	f8c8 7000 	str.w	r7, [r8]
 80093ee:	e00f      	b.n	8009410 <_malloc_r+0xa8>
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	1b52      	subs	r2, r2, r5
 80093f4:	d420      	bmi.n	8009438 <_malloc_r+0xd0>
 80093f6:	2a0b      	cmp	r2, #11
 80093f8:	d917      	bls.n	800942a <_malloc_r+0xc2>
 80093fa:	1961      	adds	r1, r4, r5
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	6025      	str	r5, [r4, #0]
 8009400:	bf18      	it	ne
 8009402:	6059      	strne	r1, [r3, #4]
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	bf08      	it	eq
 8009408:	f8c8 1000 	streq.w	r1, [r8]
 800940c:	5162      	str	r2, [r4, r5]
 800940e:	604b      	str	r3, [r1, #4]
 8009410:	4630      	mov	r0, r6
 8009412:	f000 f82f 	bl	8009474 <__malloc_unlock>
 8009416:	f104 000b 	add.w	r0, r4, #11
 800941a:	1d23      	adds	r3, r4, #4
 800941c:	f020 0007 	bic.w	r0, r0, #7
 8009420:	1ac2      	subs	r2, r0, r3
 8009422:	bf1c      	itt	ne
 8009424:	1a1b      	subne	r3, r3, r0
 8009426:	50a3      	strne	r3, [r4, r2]
 8009428:	e7af      	b.n	800938a <_malloc_r+0x22>
 800942a:	6862      	ldr	r2, [r4, #4]
 800942c:	42a3      	cmp	r3, r4
 800942e:	bf0c      	ite	eq
 8009430:	f8c8 2000 	streq.w	r2, [r8]
 8009434:	605a      	strne	r2, [r3, #4]
 8009436:	e7eb      	b.n	8009410 <_malloc_r+0xa8>
 8009438:	4623      	mov	r3, r4
 800943a:	6864      	ldr	r4, [r4, #4]
 800943c:	e7ae      	b.n	800939c <_malloc_r+0x34>
 800943e:	463c      	mov	r4, r7
 8009440:	687f      	ldr	r7, [r7, #4]
 8009442:	e7b6      	b.n	80093b2 <_malloc_r+0x4a>
 8009444:	461a      	mov	r2, r3
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	42a3      	cmp	r3, r4
 800944a:	d1fb      	bne.n	8009444 <_malloc_r+0xdc>
 800944c:	2300      	movs	r3, #0
 800944e:	6053      	str	r3, [r2, #4]
 8009450:	e7de      	b.n	8009410 <_malloc_r+0xa8>
 8009452:	230c      	movs	r3, #12
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	4630      	mov	r0, r6
 8009458:	f000 f80c 	bl	8009474 <__malloc_unlock>
 800945c:	e794      	b.n	8009388 <_malloc_r+0x20>
 800945e:	6005      	str	r5, [r0, #0]
 8009460:	e7d6      	b.n	8009410 <_malloc_r+0xa8>
 8009462:	bf00      	nop
 8009464:	20004e5c 	.word	0x20004e5c

08009468 <__malloc_lock>:
 8009468:	4801      	ldr	r0, [pc, #4]	@ (8009470 <__malloc_lock+0x8>)
 800946a:	f7ff b8a0 	b.w	80085ae <__retarget_lock_acquire_recursive>
 800946e:	bf00      	nop
 8009470:	20004e54 	.word	0x20004e54

08009474 <__malloc_unlock>:
 8009474:	4801      	ldr	r0, [pc, #4]	@ (800947c <__malloc_unlock+0x8>)
 8009476:	f7ff b89b 	b.w	80085b0 <__retarget_lock_release_recursive>
 800947a:	bf00      	nop
 800947c:	20004e54 	.word	0x20004e54

08009480 <_Balloc>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	69c6      	ldr	r6, [r0, #28]
 8009484:	4604      	mov	r4, r0
 8009486:	460d      	mov	r5, r1
 8009488:	b976      	cbnz	r6, 80094a8 <_Balloc+0x28>
 800948a:	2010      	movs	r0, #16
 800948c:	f7ff ff42 	bl	8009314 <malloc>
 8009490:	4602      	mov	r2, r0
 8009492:	61e0      	str	r0, [r4, #28]
 8009494:	b920      	cbnz	r0, 80094a0 <_Balloc+0x20>
 8009496:	4b18      	ldr	r3, [pc, #96]	@ (80094f8 <_Balloc+0x78>)
 8009498:	4818      	ldr	r0, [pc, #96]	@ (80094fc <_Balloc+0x7c>)
 800949a:	216b      	movs	r1, #107	@ 0x6b
 800949c:	f000 fdec 	bl	800a078 <__assert_func>
 80094a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a4:	6006      	str	r6, [r0, #0]
 80094a6:	60c6      	str	r6, [r0, #12]
 80094a8:	69e6      	ldr	r6, [r4, #28]
 80094aa:	68f3      	ldr	r3, [r6, #12]
 80094ac:	b183      	cbz	r3, 80094d0 <_Balloc+0x50>
 80094ae:	69e3      	ldr	r3, [r4, #28]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094b6:	b9b8      	cbnz	r0, 80094e8 <_Balloc+0x68>
 80094b8:	2101      	movs	r1, #1
 80094ba:	fa01 f605 	lsl.w	r6, r1, r5
 80094be:	1d72      	adds	r2, r6, #5
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fdf6 	bl	800a0b4 <_calloc_r>
 80094c8:	b160      	cbz	r0, 80094e4 <_Balloc+0x64>
 80094ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094ce:	e00e      	b.n	80094ee <_Balloc+0x6e>
 80094d0:	2221      	movs	r2, #33	@ 0x21
 80094d2:	2104      	movs	r1, #4
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fded 	bl	800a0b4 <_calloc_r>
 80094da:	69e3      	ldr	r3, [r4, #28]
 80094dc:	60f0      	str	r0, [r6, #12]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e4      	bne.n	80094ae <_Balloc+0x2e>
 80094e4:	2000      	movs	r0, #0
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	6802      	ldr	r2, [r0, #0]
 80094ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094ee:	2300      	movs	r3, #0
 80094f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094f4:	e7f7      	b.n	80094e6 <_Balloc+0x66>
 80094f6:	bf00      	nop
 80094f8:	0800a4b9 	.word	0x0800a4b9
 80094fc:	0800a539 	.word	0x0800a539

08009500 <_Bfree>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	69c6      	ldr	r6, [r0, #28]
 8009504:	4605      	mov	r5, r0
 8009506:	460c      	mov	r4, r1
 8009508:	b976      	cbnz	r6, 8009528 <_Bfree+0x28>
 800950a:	2010      	movs	r0, #16
 800950c:	f7ff ff02 	bl	8009314 <malloc>
 8009510:	4602      	mov	r2, r0
 8009512:	61e8      	str	r0, [r5, #28]
 8009514:	b920      	cbnz	r0, 8009520 <_Bfree+0x20>
 8009516:	4b09      	ldr	r3, [pc, #36]	@ (800953c <_Bfree+0x3c>)
 8009518:	4809      	ldr	r0, [pc, #36]	@ (8009540 <_Bfree+0x40>)
 800951a:	218f      	movs	r1, #143	@ 0x8f
 800951c:	f000 fdac 	bl	800a078 <__assert_func>
 8009520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009524:	6006      	str	r6, [r0, #0]
 8009526:	60c6      	str	r6, [r0, #12]
 8009528:	b13c      	cbz	r4, 800953a <_Bfree+0x3a>
 800952a:	69eb      	ldr	r3, [r5, #28]
 800952c:	6862      	ldr	r2, [r4, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009534:	6021      	str	r1, [r4, #0]
 8009536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	0800a4b9 	.word	0x0800a4b9
 8009540:	0800a539 	.word	0x0800a539

08009544 <__multadd>:
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	690d      	ldr	r5, [r1, #16]
 800954a:	4607      	mov	r7, r0
 800954c:	460c      	mov	r4, r1
 800954e:	461e      	mov	r6, r3
 8009550:	f101 0c14 	add.w	ip, r1, #20
 8009554:	2000      	movs	r0, #0
 8009556:	f8dc 3000 	ldr.w	r3, [ip]
 800955a:	b299      	uxth	r1, r3
 800955c:	fb02 6101 	mla	r1, r2, r1, r6
 8009560:	0c1e      	lsrs	r6, r3, #16
 8009562:	0c0b      	lsrs	r3, r1, #16
 8009564:	fb02 3306 	mla	r3, r2, r6, r3
 8009568:	b289      	uxth	r1, r1
 800956a:	3001      	adds	r0, #1
 800956c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009570:	4285      	cmp	r5, r0
 8009572:	f84c 1b04 	str.w	r1, [ip], #4
 8009576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800957a:	dcec      	bgt.n	8009556 <__multadd+0x12>
 800957c:	b30e      	cbz	r6, 80095c2 <__multadd+0x7e>
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	42ab      	cmp	r3, r5
 8009582:	dc19      	bgt.n	80095b8 <__multadd+0x74>
 8009584:	6861      	ldr	r1, [r4, #4]
 8009586:	4638      	mov	r0, r7
 8009588:	3101      	adds	r1, #1
 800958a:	f7ff ff79 	bl	8009480 <_Balloc>
 800958e:	4680      	mov	r8, r0
 8009590:	b928      	cbnz	r0, 800959e <__multadd+0x5a>
 8009592:	4602      	mov	r2, r0
 8009594:	4b0c      	ldr	r3, [pc, #48]	@ (80095c8 <__multadd+0x84>)
 8009596:	480d      	ldr	r0, [pc, #52]	@ (80095cc <__multadd+0x88>)
 8009598:	21ba      	movs	r1, #186	@ 0xba
 800959a:	f000 fd6d 	bl	800a078 <__assert_func>
 800959e:	6922      	ldr	r2, [r4, #16]
 80095a0:	3202      	adds	r2, #2
 80095a2:	f104 010c 	add.w	r1, r4, #12
 80095a6:	0092      	lsls	r2, r2, #2
 80095a8:	300c      	adds	r0, #12
 80095aa:	f7ff f802 	bl	80085b2 <memcpy>
 80095ae:	4621      	mov	r1, r4
 80095b0:	4638      	mov	r0, r7
 80095b2:	f7ff ffa5 	bl	8009500 <_Bfree>
 80095b6:	4644      	mov	r4, r8
 80095b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095bc:	3501      	adds	r5, #1
 80095be:	615e      	str	r6, [r3, #20]
 80095c0:	6125      	str	r5, [r4, #16]
 80095c2:	4620      	mov	r0, r4
 80095c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c8:	0800a528 	.word	0x0800a528
 80095cc:	0800a539 	.word	0x0800a539

080095d0 <__hi0bits>:
 80095d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095d4:	4603      	mov	r3, r0
 80095d6:	bf36      	itet	cc
 80095d8:	0403      	lslcc	r3, r0, #16
 80095da:	2000      	movcs	r0, #0
 80095dc:	2010      	movcc	r0, #16
 80095de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095e2:	bf3c      	itt	cc
 80095e4:	021b      	lslcc	r3, r3, #8
 80095e6:	3008      	addcc	r0, #8
 80095e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095ec:	bf3c      	itt	cc
 80095ee:	011b      	lslcc	r3, r3, #4
 80095f0:	3004      	addcc	r0, #4
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f6:	bf3c      	itt	cc
 80095f8:	009b      	lslcc	r3, r3, #2
 80095fa:	3002      	addcc	r0, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	db05      	blt.n	800960c <__hi0bits+0x3c>
 8009600:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009604:	f100 0001 	add.w	r0, r0, #1
 8009608:	bf08      	it	eq
 800960a:	2020      	moveq	r0, #32
 800960c:	4770      	bx	lr

0800960e <__lo0bits>:
 800960e:	6803      	ldr	r3, [r0, #0]
 8009610:	4602      	mov	r2, r0
 8009612:	f013 0007 	ands.w	r0, r3, #7
 8009616:	d00b      	beq.n	8009630 <__lo0bits+0x22>
 8009618:	07d9      	lsls	r1, r3, #31
 800961a:	d421      	bmi.n	8009660 <__lo0bits+0x52>
 800961c:	0798      	lsls	r0, r3, #30
 800961e:	bf49      	itett	mi
 8009620:	085b      	lsrmi	r3, r3, #1
 8009622:	089b      	lsrpl	r3, r3, #2
 8009624:	2001      	movmi	r0, #1
 8009626:	6013      	strmi	r3, [r2, #0]
 8009628:	bf5c      	itt	pl
 800962a:	6013      	strpl	r3, [r2, #0]
 800962c:	2002      	movpl	r0, #2
 800962e:	4770      	bx	lr
 8009630:	b299      	uxth	r1, r3
 8009632:	b909      	cbnz	r1, 8009638 <__lo0bits+0x2a>
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	2010      	movs	r0, #16
 8009638:	b2d9      	uxtb	r1, r3
 800963a:	b909      	cbnz	r1, 8009640 <__lo0bits+0x32>
 800963c:	3008      	adds	r0, #8
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	0719      	lsls	r1, r3, #28
 8009642:	bf04      	itt	eq
 8009644:	091b      	lsreq	r3, r3, #4
 8009646:	3004      	addeq	r0, #4
 8009648:	0799      	lsls	r1, r3, #30
 800964a:	bf04      	itt	eq
 800964c:	089b      	lsreq	r3, r3, #2
 800964e:	3002      	addeq	r0, #2
 8009650:	07d9      	lsls	r1, r3, #31
 8009652:	d403      	bmi.n	800965c <__lo0bits+0x4e>
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	f100 0001 	add.w	r0, r0, #1
 800965a:	d003      	beq.n	8009664 <__lo0bits+0x56>
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	4770      	bx	lr
 8009660:	2000      	movs	r0, #0
 8009662:	4770      	bx	lr
 8009664:	2020      	movs	r0, #32
 8009666:	4770      	bx	lr

08009668 <__i2b>:
 8009668:	b510      	push	{r4, lr}
 800966a:	460c      	mov	r4, r1
 800966c:	2101      	movs	r1, #1
 800966e:	f7ff ff07 	bl	8009480 <_Balloc>
 8009672:	4602      	mov	r2, r0
 8009674:	b928      	cbnz	r0, 8009682 <__i2b+0x1a>
 8009676:	4b05      	ldr	r3, [pc, #20]	@ (800968c <__i2b+0x24>)
 8009678:	4805      	ldr	r0, [pc, #20]	@ (8009690 <__i2b+0x28>)
 800967a:	f240 1145 	movw	r1, #325	@ 0x145
 800967e:	f000 fcfb 	bl	800a078 <__assert_func>
 8009682:	2301      	movs	r3, #1
 8009684:	6144      	str	r4, [r0, #20]
 8009686:	6103      	str	r3, [r0, #16]
 8009688:	bd10      	pop	{r4, pc}
 800968a:	bf00      	nop
 800968c:	0800a528 	.word	0x0800a528
 8009690:	0800a539 	.word	0x0800a539

08009694 <__multiply>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	4617      	mov	r7, r2
 800969a:	690a      	ldr	r2, [r1, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	429a      	cmp	r2, r3
 80096a0:	bfa8      	it	ge
 80096a2:	463b      	movge	r3, r7
 80096a4:	4689      	mov	r9, r1
 80096a6:	bfa4      	itt	ge
 80096a8:	460f      	movge	r7, r1
 80096aa:	4699      	movge	r9, r3
 80096ac:	693d      	ldr	r5, [r7, #16]
 80096ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	eb05 060a 	add.w	r6, r5, sl
 80096ba:	42b3      	cmp	r3, r6
 80096bc:	b085      	sub	sp, #20
 80096be:	bfb8      	it	lt
 80096c0:	3101      	addlt	r1, #1
 80096c2:	f7ff fedd 	bl	8009480 <_Balloc>
 80096c6:	b930      	cbnz	r0, 80096d6 <__multiply+0x42>
 80096c8:	4602      	mov	r2, r0
 80096ca:	4b41      	ldr	r3, [pc, #260]	@ (80097d0 <__multiply+0x13c>)
 80096cc:	4841      	ldr	r0, [pc, #260]	@ (80097d4 <__multiply+0x140>)
 80096ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096d2:	f000 fcd1 	bl	800a078 <__assert_func>
 80096d6:	f100 0414 	add.w	r4, r0, #20
 80096da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80096de:	4623      	mov	r3, r4
 80096e0:	2200      	movs	r2, #0
 80096e2:	4573      	cmp	r3, lr
 80096e4:	d320      	bcc.n	8009728 <__multiply+0x94>
 80096e6:	f107 0814 	add.w	r8, r7, #20
 80096ea:	f109 0114 	add.w	r1, r9, #20
 80096ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80096f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	1beb      	subs	r3, r5, r7
 80096fa:	3b15      	subs	r3, #21
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	3304      	adds	r3, #4
 8009702:	3715      	adds	r7, #21
 8009704:	42bd      	cmp	r5, r7
 8009706:	bf38      	it	cc
 8009708:	2304      	movcc	r3, #4
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	9b02      	ldr	r3, [sp, #8]
 800970e:	9103      	str	r1, [sp, #12]
 8009710:	428b      	cmp	r3, r1
 8009712:	d80c      	bhi.n	800972e <__multiply+0x9a>
 8009714:	2e00      	cmp	r6, #0
 8009716:	dd03      	ble.n	8009720 <__multiply+0x8c>
 8009718:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800971c:	2b00      	cmp	r3, #0
 800971e:	d055      	beq.n	80097cc <__multiply+0x138>
 8009720:	6106      	str	r6, [r0, #16]
 8009722:	b005      	add	sp, #20
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	f843 2b04 	str.w	r2, [r3], #4
 800972c:	e7d9      	b.n	80096e2 <__multiply+0x4e>
 800972e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009732:	f1ba 0f00 	cmp.w	sl, #0
 8009736:	d01f      	beq.n	8009778 <__multiply+0xe4>
 8009738:	46c4      	mov	ip, r8
 800973a:	46a1      	mov	r9, r4
 800973c:	2700      	movs	r7, #0
 800973e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009742:	f8d9 3000 	ldr.w	r3, [r9]
 8009746:	fa1f fb82 	uxth.w	fp, r2
 800974a:	b29b      	uxth	r3, r3
 800974c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009750:	443b      	add	r3, r7
 8009752:	f8d9 7000 	ldr.w	r7, [r9]
 8009756:	0c12      	lsrs	r2, r2, #16
 8009758:	0c3f      	lsrs	r7, r7, #16
 800975a:	fb0a 7202 	mla	r2, sl, r2, r7
 800975e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009762:	b29b      	uxth	r3, r3
 8009764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009768:	4565      	cmp	r5, ip
 800976a:	f849 3b04 	str.w	r3, [r9], #4
 800976e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009772:	d8e4      	bhi.n	800973e <__multiply+0xaa>
 8009774:	9b01      	ldr	r3, [sp, #4]
 8009776:	50e7      	str	r7, [r4, r3]
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800977e:	3104      	adds	r1, #4
 8009780:	f1b9 0f00 	cmp.w	r9, #0
 8009784:	d020      	beq.n	80097c8 <__multiply+0x134>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	4647      	mov	r7, r8
 800978a:	46a4      	mov	ip, r4
 800978c:	f04f 0a00 	mov.w	sl, #0
 8009790:	f8b7 b000 	ldrh.w	fp, [r7]
 8009794:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009798:	fb09 220b 	mla	r2, r9, fp, r2
 800979c:	4452      	add	r2, sl
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a4:	f84c 3b04 	str.w	r3, [ip], #4
 80097a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80097ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80097b4:	fb09 330a 	mla	r3, r9, sl, r3
 80097b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80097bc:	42bd      	cmp	r5, r7
 80097be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097c2:	d8e5      	bhi.n	8009790 <__multiply+0xfc>
 80097c4:	9a01      	ldr	r2, [sp, #4]
 80097c6:	50a3      	str	r3, [r4, r2]
 80097c8:	3404      	adds	r4, #4
 80097ca:	e79f      	b.n	800970c <__multiply+0x78>
 80097cc:	3e01      	subs	r6, #1
 80097ce:	e7a1      	b.n	8009714 <__multiply+0x80>
 80097d0:	0800a528 	.word	0x0800a528
 80097d4:	0800a539 	.word	0x0800a539

080097d8 <__pow5mult>:
 80097d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	4615      	mov	r5, r2
 80097de:	f012 0203 	ands.w	r2, r2, #3
 80097e2:	4607      	mov	r7, r0
 80097e4:	460e      	mov	r6, r1
 80097e6:	d007      	beq.n	80097f8 <__pow5mult+0x20>
 80097e8:	4c25      	ldr	r4, [pc, #148]	@ (8009880 <__pow5mult+0xa8>)
 80097ea:	3a01      	subs	r2, #1
 80097ec:	2300      	movs	r3, #0
 80097ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097f2:	f7ff fea7 	bl	8009544 <__multadd>
 80097f6:	4606      	mov	r6, r0
 80097f8:	10ad      	asrs	r5, r5, #2
 80097fa:	d03d      	beq.n	8009878 <__pow5mult+0xa0>
 80097fc:	69fc      	ldr	r4, [r7, #28]
 80097fe:	b97c      	cbnz	r4, 8009820 <__pow5mult+0x48>
 8009800:	2010      	movs	r0, #16
 8009802:	f7ff fd87 	bl	8009314 <malloc>
 8009806:	4602      	mov	r2, r0
 8009808:	61f8      	str	r0, [r7, #28]
 800980a:	b928      	cbnz	r0, 8009818 <__pow5mult+0x40>
 800980c:	4b1d      	ldr	r3, [pc, #116]	@ (8009884 <__pow5mult+0xac>)
 800980e:	481e      	ldr	r0, [pc, #120]	@ (8009888 <__pow5mult+0xb0>)
 8009810:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009814:	f000 fc30 	bl	800a078 <__assert_func>
 8009818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800981c:	6004      	str	r4, [r0, #0]
 800981e:	60c4      	str	r4, [r0, #12]
 8009820:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009828:	b94c      	cbnz	r4, 800983e <__pow5mult+0x66>
 800982a:	f240 2171 	movw	r1, #625	@ 0x271
 800982e:	4638      	mov	r0, r7
 8009830:	f7ff ff1a 	bl	8009668 <__i2b>
 8009834:	2300      	movs	r3, #0
 8009836:	f8c8 0008 	str.w	r0, [r8, #8]
 800983a:	4604      	mov	r4, r0
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	f04f 0900 	mov.w	r9, #0
 8009842:	07eb      	lsls	r3, r5, #31
 8009844:	d50a      	bpl.n	800985c <__pow5mult+0x84>
 8009846:	4631      	mov	r1, r6
 8009848:	4622      	mov	r2, r4
 800984a:	4638      	mov	r0, r7
 800984c:	f7ff ff22 	bl	8009694 <__multiply>
 8009850:	4631      	mov	r1, r6
 8009852:	4680      	mov	r8, r0
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff fe53 	bl	8009500 <_Bfree>
 800985a:	4646      	mov	r6, r8
 800985c:	106d      	asrs	r5, r5, #1
 800985e:	d00b      	beq.n	8009878 <__pow5mult+0xa0>
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	b938      	cbnz	r0, 8009874 <__pow5mult+0x9c>
 8009864:	4622      	mov	r2, r4
 8009866:	4621      	mov	r1, r4
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff13 	bl	8009694 <__multiply>
 800986e:	6020      	str	r0, [r4, #0]
 8009870:	f8c0 9000 	str.w	r9, [r0]
 8009874:	4604      	mov	r4, r0
 8009876:	e7e4      	b.n	8009842 <__pow5mult+0x6a>
 8009878:	4630      	mov	r0, r6
 800987a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987e:	bf00      	nop
 8009880:	0800a5ec 	.word	0x0800a5ec
 8009884:	0800a4b9 	.word	0x0800a4b9
 8009888:	0800a539 	.word	0x0800a539

0800988c <__lshift>:
 800988c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	460c      	mov	r4, r1
 8009892:	6849      	ldr	r1, [r1, #4]
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	4607      	mov	r7, r0
 800989e:	4691      	mov	r9, r2
 80098a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098a4:	f108 0601 	add.w	r6, r8, #1
 80098a8:	42b3      	cmp	r3, r6
 80098aa:	db0b      	blt.n	80098c4 <__lshift+0x38>
 80098ac:	4638      	mov	r0, r7
 80098ae:	f7ff fde7 	bl	8009480 <_Balloc>
 80098b2:	4605      	mov	r5, r0
 80098b4:	b948      	cbnz	r0, 80098ca <__lshift+0x3e>
 80098b6:	4602      	mov	r2, r0
 80098b8:	4b28      	ldr	r3, [pc, #160]	@ (800995c <__lshift+0xd0>)
 80098ba:	4829      	ldr	r0, [pc, #164]	@ (8009960 <__lshift+0xd4>)
 80098bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098c0:	f000 fbda 	bl	800a078 <__assert_func>
 80098c4:	3101      	adds	r1, #1
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	e7ee      	b.n	80098a8 <__lshift+0x1c>
 80098ca:	2300      	movs	r3, #0
 80098cc:	f100 0114 	add.w	r1, r0, #20
 80098d0:	f100 0210 	add.w	r2, r0, #16
 80098d4:	4618      	mov	r0, r3
 80098d6:	4553      	cmp	r3, sl
 80098d8:	db33      	blt.n	8009942 <__lshift+0xb6>
 80098da:	6920      	ldr	r0, [r4, #16]
 80098dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098e0:	f104 0314 	add.w	r3, r4, #20
 80098e4:	f019 091f 	ands.w	r9, r9, #31
 80098e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098f0:	d02b      	beq.n	800994a <__lshift+0xbe>
 80098f2:	f1c9 0e20 	rsb	lr, r9, #32
 80098f6:	468a      	mov	sl, r1
 80098f8:	2200      	movs	r2, #0
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009900:	4310      	orrs	r0, r2
 8009902:	f84a 0b04 	str.w	r0, [sl], #4
 8009906:	f853 2b04 	ldr.w	r2, [r3], #4
 800990a:	459c      	cmp	ip, r3
 800990c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009910:	d8f3      	bhi.n	80098fa <__lshift+0x6e>
 8009912:	ebac 0304 	sub.w	r3, ip, r4
 8009916:	3b15      	subs	r3, #21
 8009918:	f023 0303 	bic.w	r3, r3, #3
 800991c:	3304      	adds	r3, #4
 800991e:	f104 0015 	add.w	r0, r4, #21
 8009922:	4560      	cmp	r0, ip
 8009924:	bf88      	it	hi
 8009926:	2304      	movhi	r3, #4
 8009928:	50ca      	str	r2, [r1, r3]
 800992a:	b10a      	cbz	r2, 8009930 <__lshift+0xa4>
 800992c:	f108 0602 	add.w	r6, r8, #2
 8009930:	3e01      	subs	r6, #1
 8009932:	4638      	mov	r0, r7
 8009934:	612e      	str	r6, [r5, #16]
 8009936:	4621      	mov	r1, r4
 8009938:	f7ff fde2 	bl	8009500 <_Bfree>
 800993c:	4628      	mov	r0, r5
 800993e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009942:	f842 0f04 	str.w	r0, [r2, #4]!
 8009946:	3301      	adds	r3, #1
 8009948:	e7c5      	b.n	80098d6 <__lshift+0x4a>
 800994a:	3904      	subs	r1, #4
 800994c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009950:	f841 2f04 	str.w	r2, [r1, #4]!
 8009954:	459c      	cmp	ip, r3
 8009956:	d8f9      	bhi.n	800994c <__lshift+0xc0>
 8009958:	e7ea      	b.n	8009930 <__lshift+0xa4>
 800995a:	bf00      	nop
 800995c:	0800a528 	.word	0x0800a528
 8009960:	0800a539 	.word	0x0800a539

08009964 <__mcmp>:
 8009964:	690a      	ldr	r2, [r1, #16]
 8009966:	4603      	mov	r3, r0
 8009968:	6900      	ldr	r0, [r0, #16]
 800996a:	1a80      	subs	r0, r0, r2
 800996c:	b530      	push	{r4, r5, lr}
 800996e:	d10e      	bne.n	800998e <__mcmp+0x2a>
 8009970:	3314      	adds	r3, #20
 8009972:	3114      	adds	r1, #20
 8009974:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009978:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800997c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009980:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009984:	4295      	cmp	r5, r2
 8009986:	d003      	beq.n	8009990 <__mcmp+0x2c>
 8009988:	d205      	bcs.n	8009996 <__mcmp+0x32>
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	bd30      	pop	{r4, r5, pc}
 8009990:	42a3      	cmp	r3, r4
 8009992:	d3f3      	bcc.n	800997c <__mcmp+0x18>
 8009994:	e7fb      	b.n	800998e <__mcmp+0x2a>
 8009996:	2001      	movs	r0, #1
 8009998:	e7f9      	b.n	800998e <__mcmp+0x2a>
	...

0800999c <__mdiff>:
 800999c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	4689      	mov	r9, r1
 80099a2:	4606      	mov	r6, r0
 80099a4:	4611      	mov	r1, r2
 80099a6:	4648      	mov	r0, r9
 80099a8:	4614      	mov	r4, r2
 80099aa:	f7ff ffdb 	bl	8009964 <__mcmp>
 80099ae:	1e05      	subs	r5, r0, #0
 80099b0:	d112      	bne.n	80099d8 <__mdiff+0x3c>
 80099b2:	4629      	mov	r1, r5
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff fd63 	bl	8009480 <_Balloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	b928      	cbnz	r0, 80099ca <__mdiff+0x2e>
 80099be:	4b3f      	ldr	r3, [pc, #252]	@ (8009abc <__mdiff+0x120>)
 80099c0:	f240 2137 	movw	r1, #567	@ 0x237
 80099c4:	483e      	ldr	r0, [pc, #248]	@ (8009ac0 <__mdiff+0x124>)
 80099c6:	f000 fb57 	bl	800a078 <__assert_func>
 80099ca:	2301      	movs	r3, #1
 80099cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099d0:	4610      	mov	r0, r2
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	bfbc      	itt	lt
 80099da:	464b      	movlt	r3, r9
 80099dc:	46a1      	movlt	r9, r4
 80099de:	4630      	mov	r0, r6
 80099e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099e4:	bfba      	itte	lt
 80099e6:	461c      	movlt	r4, r3
 80099e8:	2501      	movlt	r5, #1
 80099ea:	2500      	movge	r5, #0
 80099ec:	f7ff fd48 	bl	8009480 <_Balloc>
 80099f0:	4602      	mov	r2, r0
 80099f2:	b918      	cbnz	r0, 80099fc <__mdiff+0x60>
 80099f4:	4b31      	ldr	r3, [pc, #196]	@ (8009abc <__mdiff+0x120>)
 80099f6:	f240 2145 	movw	r1, #581	@ 0x245
 80099fa:	e7e3      	b.n	80099c4 <__mdiff+0x28>
 80099fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a00:	6926      	ldr	r6, [r4, #16]
 8009a02:	60c5      	str	r5, [r0, #12]
 8009a04:	f109 0310 	add.w	r3, r9, #16
 8009a08:	f109 0514 	add.w	r5, r9, #20
 8009a0c:	f104 0e14 	add.w	lr, r4, #20
 8009a10:	f100 0b14 	add.w	fp, r0, #20
 8009a14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	46d9      	mov	r9, fp
 8009a20:	f04f 0c00 	mov.w	ip, #0
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	fa1f f38a 	uxth.w	r3, sl
 8009a34:	4619      	mov	r1, r3
 8009a36:	b283      	uxth	r3, r0
 8009a38:	1acb      	subs	r3, r1, r3
 8009a3a:	0c00      	lsrs	r0, r0, #16
 8009a3c:	4463      	add	r3, ip
 8009a3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a4c:	4576      	cmp	r6, lr
 8009a4e:	f849 3b04 	str.w	r3, [r9], #4
 8009a52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a56:	d8e5      	bhi.n	8009a24 <__mdiff+0x88>
 8009a58:	1b33      	subs	r3, r6, r4
 8009a5a:	3b15      	subs	r3, #21
 8009a5c:	f023 0303 	bic.w	r3, r3, #3
 8009a60:	3415      	adds	r4, #21
 8009a62:	3304      	adds	r3, #4
 8009a64:	42a6      	cmp	r6, r4
 8009a66:	bf38      	it	cc
 8009a68:	2304      	movcc	r3, #4
 8009a6a:	441d      	add	r5, r3
 8009a6c:	445b      	add	r3, fp
 8009a6e:	461e      	mov	r6, r3
 8009a70:	462c      	mov	r4, r5
 8009a72:	4544      	cmp	r4, r8
 8009a74:	d30e      	bcc.n	8009a94 <__mdiff+0xf8>
 8009a76:	f108 0103 	add.w	r1, r8, #3
 8009a7a:	1b49      	subs	r1, r1, r5
 8009a7c:	f021 0103 	bic.w	r1, r1, #3
 8009a80:	3d03      	subs	r5, #3
 8009a82:	45a8      	cmp	r8, r5
 8009a84:	bf38      	it	cc
 8009a86:	2100      	movcc	r1, #0
 8009a88:	440b      	add	r3, r1
 8009a8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a8e:	b191      	cbz	r1, 8009ab6 <__mdiff+0x11a>
 8009a90:	6117      	str	r7, [r2, #16]
 8009a92:	e79d      	b.n	80099d0 <__mdiff+0x34>
 8009a94:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a98:	46e6      	mov	lr, ip
 8009a9a:	0c08      	lsrs	r0, r1, #16
 8009a9c:	fa1c fc81 	uxtah	ip, ip, r1
 8009aa0:	4471      	add	r1, lr
 8009aa2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009aa6:	b289      	uxth	r1, r1
 8009aa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009aac:	f846 1b04 	str.w	r1, [r6], #4
 8009ab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ab4:	e7dd      	b.n	8009a72 <__mdiff+0xd6>
 8009ab6:	3f01      	subs	r7, #1
 8009ab8:	e7e7      	b.n	8009a8a <__mdiff+0xee>
 8009aba:	bf00      	nop
 8009abc:	0800a528 	.word	0x0800a528
 8009ac0:	0800a539 	.word	0x0800a539

08009ac4 <__d2b>:
 8009ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ac8:	460f      	mov	r7, r1
 8009aca:	2101      	movs	r1, #1
 8009acc:	ec59 8b10 	vmov	r8, r9, d0
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	f7ff fcd5 	bl	8009480 <_Balloc>
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	b930      	cbnz	r0, 8009ae8 <__d2b+0x24>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b23      	ldr	r3, [pc, #140]	@ (8009b6c <__d2b+0xa8>)
 8009ade:	4824      	ldr	r0, [pc, #144]	@ (8009b70 <__d2b+0xac>)
 8009ae0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ae4:	f000 fac8 	bl	800a078 <__assert_func>
 8009ae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009aec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009af0:	b10d      	cbz	r5, 8009af6 <__d2b+0x32>
 8009af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	f1b8 0300 	subs.w	r3, r8, #0
 8009afc:	d023      	beq.n	8009b46 <__d2b+0x82>
 8009afe:	4668      	mov	r0, sp
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	f7ff fd84 	bl	800960e <__lo0bits>
 8009b06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b0a:	b1d0      	cbz	r0, 8009b42 <__d2b+0x7e>
 8009b0c:	f1c0 0320 	rsb	r3, r0, #32
 8009b10:	fa02 f303 	lsl.w	r3, r2, r3
 8009b14:	430b      	orrs	r3, r1
 8009b16:	40c2      	lsrs	r2, r0
 8009b18:	6163      	str	r3, [r4, #20]
 8009b1a:	9201      	str	r2, [sp, #4]
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	61a3      	str	r3, [r4, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	bf0c      	ite	eq
 8009b24:	2201      	moveq	r2, #1
 8009b26:	2202      	movne	r2, #2
 8009b28:	6122      	str	r2, [r4, #16]
 8009b2a:	b1a5      	cbz	r5, 8009b56 <__d2b+0x92>
 8009b2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b30:	4405      	add	r5, r0
 8009b32:	603d      	str	r5, [r7, #0]
 8009b34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	b003      	add	sp, #12
 8009b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b42:	6161      	str	r1, [r4, #20]
 8009b44:	e7ea      	b.n	8009b1c <__d2b+0x58>
 8009b46:	a801      	add	r0, sp, #4
 8009b48:	f7ff fd61 	bl	800960e <__lo0bits>
 8009b4c:	9b01      	ldr	r3, [sp, #4]
 8009b4e:	6163      	str	r3, [r4, #20]
 8009b50:	3020      	adds	r0, #32
 8009b52:	2201      	movs	r2, #1
 8009b54:	e7e8      	b.n	8009b28 <__d2b+0x64>
 8009b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b5e:	6038      	str	r0, [r7, #0]
 8009b60:	6918      	ldr	r0, [r3, #16]
 8009b62:	f7ff fd35 	bl	80095d0 <__hi0bits>
 8009b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b6a:	e7e5      	b.n	8009b38 <__d2b+0x74>
 8009b6c:	0800a528 	.word	0x0800a528
 8009b70:	0800a539 	.word	0x0800a539

08009b74 <__sfputc_r>:
 8009b74:	6893      	ldr	r3, [r2, #8]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	b410      	push	{r4}
 8009b7c:	6093      	str	r3, [r2, #8]
 8009b7e:	da08      	bge.n	8009b92 <__sfputc_r+0x1e>
 8009b80:	6994      	ldr	r4, [r2, #24]
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	db01      	blt.n	8009b8a <__sfputc_r+0x16>
 8009b86:	290a      	cmp	r1, #10
 8009b88:	d103      	bne.n	8009b92 <__sfputc_r+0x1e>
 8009b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8e:	f7fe bb9e 	b.w	80082ce <__swbuf_r>
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	1c58      	adds	r0, r3, #1
 8009b96:	6010      	str	r0, [r2, #0]
 8009b98:	7019      	strb	r1, [r3, #0]
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <__sfputs_r>:
 8009ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	18d5      	adds	r5, r2, r3
 8009bac:	42ac      	cmp	r4, r5
 8009bae:	d101      	bne.n	8009bb4 <__sfputs_r+0x12>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e007      	b.n	8009bc4 <__sfputs_r+0x22>
 8009bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb8:	463a      	mov	r2, r7
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ffda 	bl	8009b74 <__sfputc_r>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d1f3      	bne.n	8009bac <__sfputs_r+0xa>
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bc8 <_vfiprintf_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	460d      	mov	r5, r1
 8009bce:	b09d      	sub	sp, #116	@ 0x74
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_vfiprintf_r+0x18>
 8009bd8:	6a03      	ldr	r3, [r0, #32]
 8009bda:	b90b      	cbnz	r3, 8009be0 <_vfiprintf_r+0x18>
 8009bdc:	f7fe fa8e 	bl	80080fc <__sinit>
 8009be0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009be2:	07d9      	lsls	r1, r3, #31
 8009be4:	d405      	bmi.n	8009bf2 <_vfiprintf_r+0x2a>
 8009be6:	89ab      	ldrh	r3, [r5, #12]
 8009be8:	059a      	lsls	r2, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_vfiprintf_r+0x2a>
 8009bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bee:	f7fe fcde 	bl	80085ae <__retarget_lock_acquire_recursive>
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	071b      	lsls	r3, r3, #28
 8009bf6:	d501      	bpl.n	8009bfc <_vfiprintf_r+0x34>
 8009bf8:	692b      	ldr	r3, [r5, #16]
 8009bfa:	b99b      	cbnz	r3, 8009c24 <_vfiprintf_r+0x5c>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7fe fba4 	bl	800834c <__swsetup_r>
 8009c04:	b170      	cbz	r0, 8009c24 <_vfiprintf_r+0x5c>
 8009c06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c08:	07dc      	lsls	r4, r3, #31
 8009c0a:	d504      	bpl.n	8009c16 <_vfiprintf_r+0x4e>
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	b01d      	add	sp, #116	@ 0x74
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	0598      	lsls	r0, r3, #22
 8009c1a:	d4f7      	bmi.n	8009c0c <_vfiprintf_r+0x44>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c1e:	f7fe fcc7 	bl	80085b0 <__retarget_lock_release_recursive>
 8009c22:	e7f3      	b.n	8009c0c <_vfiprintf_r+0x44>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c28:	2320      	movs	r3, #32
 8009c2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c32:	2330      	movs	r3, #48	@ 0x30
 8009c34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009de4 <_vfiprintf_r+0x21c>
 8009c38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	4623      	mov	r3, r4
 8009c42:	469a      	mov	sl, r3
 8009c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c48:	b10a      	cbz	r2, 8009c4e <_vfiprintf_r+0x86>
 8009c4a:	2a25      	cmp	r2, #37	@ 0x25
 8009c4c:	d1f9      	bne.n	8009c42 <_vfiprintf_r+0x7a>
 8009c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c52:	d00b      	beq.n	8009c6c <_vfiprintf_r+0xa4>
 8009c54:	465b      	mov	r3, fp
 8009c56:	4622      	mov	r2, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ffa1 	bl	8009ba2 <__sfputs_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f000 80a7 	beq.w	8009db4 <_vfiprintf_r+0x1ec>
 8009c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c68:	445a      	add	r2, fp
 8009c6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 809f 	beq.w	8009db4 <_vfiprintf_r+0x1ec>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295
 8009c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c80:	f10a 0a01 	add.w	sl, sl, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c8e:	4654      	mov	r4, sl
 8009c90:	2205      	movs	r2, #5
 8009c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c96:	4853      	ldr	r0, [pc, #332]	@ (8009de4 <_vfiprintf_r+0x21c>)
 8009c98:	f7f6 faba 	bl	8000210 <memchr>
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	b9d8      	cbnz	r0, 8009cd8 <_vfiprintf_r+0x110>
 8009ca0:	06d1      	lsls	r1, r2, #27
 8009ca2:	bf44      	itt	mi
 8009ca4:	2320      	movmi	r3, #32
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009caa:	0713      	lsls	r3, r2, #28
 8009cac:	bf44      	itt	mi
 8009cae:	232b      	movmi	r3, #43	@ 0x2b
 8009cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cba:	d015      	beq.n	8009ce8 <_vfiprintf_r+0x120>
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ccc:	3b30      	subs	r3, #48	@ 0x30
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d94b      	bls.n	8009d6a <_vfiprintf_r+0x1a2>
 8009cd2:	b1b0      	cbz	r0, 8009d02 <_vfiprintf_r+0x13a>
 8009cd4:	9207      	str	r2, [sp, #28]
 8009cd6:	e014      	b.n	8009d02 <_vfiprintf_r+0x13a>
 8009cd8:	eba0 0308 	sub.w	r3, r0, r8
 8009cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	46a2      	mov	sl, r4
 8009ce6:	e7d2      	b.n	8009c8e <_vfiprintf_r+0xc6>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	1d19      	adds	r1, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	9103      	str	r1, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfbb      	ittet	lt
 8009cf4:	425b      	neglt	r3, r3
 8009cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cfa:	9307      	strge	r3, [sp, #28]
 8009cfc:	9307      	strlt	r3, [sp, #28]
 8009cfe:	bfb8      	it	lt
 8009d00:	9204      	strlt	r2, [sp, #16]
 8009d02:	7823      	ldrb	r3, [r4, #0]
 8009d04:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d06:	d10a      	bne.n	8009d1e <_vfiprintf_r+0x156>
 8009d08:	7863      	ldrb	r3, [r4, #1]
 8009d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d0c:	d132      	bne.n	8009d74 <_vfiprintf_r+0x1ac>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d1a      	adds	r2, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9203      	str	r2, [sp, #12]
 8009d16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d1a:	3402      	adds	r4, #2
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009df4 <_vfiprintf_r+0x22c>
 8009d22:	7821      	ldrb	r1, [r4, #0]
 8009d24:	2203      	movs	r2, #3
 8009d26:	4650      	mov	r0, sl
 8009d28:	f7f6 fa72 	bl	8000210 <memchr>
 8009d2c:	b138      	cbz	r0, 8009d3e <_vfiprintf_r+0x176>
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	eba0 000a 	sub.w	r0, r0, sl
 8009d34:	2240      	movs	r2, #64	@ 0x40
 8009d36:	4082      	lsls	r2, r0
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	3401      	adds	r4, #1
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d42:	4829      	ldr	r0, [pc, #164]	@ (8009de8 <_vfiprintf_r+0x220>)
 8009d44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d48:	2206      	movs	r2, #6
 8009d4a:	f7f6 fa61 	bl	8000210 <memchr>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d03f      	beq.n	8009dd2 <_vfiprintf_r+0x20a>
 8009d52:	4b26      	ldr	r3, [pc, #152]	@ (8009dec <_vfiprintf_r+0x224>)
 8009d54:	bb1b      	cbnz	r3, 8009d9e <_vfiprintf_r+0x1d6>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	3307      	adds	r3, #7
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	3308      	adds	r3, #8
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d64:	443b      	add	r3, r7
 8009d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d68:	e76a      	b.n	8009c40 <_vfiprintf_r+0x78>
 8009d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d6e:	460c      	mov	r4, r1
 8009d70:	2001      	movs	r0, #1
 8009d72:	e7a8      	b.n	8009cc6 <_vfiprintf_r+0xfe>
 8009d74:	2300      	movs	r3, #0
 8009d76:	3401      	adds	r4, #1
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f04f 0c0a 	mov.w	ip, #10
 8009d80:	4620      	mov	r0, r4
 8009d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d86:	3a30      	subs	r2, #48	@ 0x30
 8009d88:	2a09      	cmp	r2, #9
 8009d8a:	d903      	bls.n	8009d94 <_vfiprintf_r+0x1cc>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0c6      	beq.n	8009d1e <_vfiprintf_r+0x156>
 8009d90:	9105      	str	r1, [sp, #20]
 8009d92:	e7c4      	b.n	8009d1e <_vfiprintf_r+0x156>
 8009d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d98:	4604      	mov	r4, r0
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e7f0      	b.n	8009d80 <_vfiprintf_r+0x1b8>
 8009d9e:	ab03      	add	r3, sp, #12
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	462a      	mov	r2, r5
 8009da4:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <_vfiprintf_r+0x228>)
 8009da6:	a904      	add	r1, sp, #16
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7fd fd65 	bl	8007878 <_printf_float>
 8009dae:	4607      	mov	r7, r0
 8009db0:	1c78      	adds	r0, r7, #1
 8009db2:	d1d6      	bne.n	8009d62 <_vfiprintf_r+0x19a>
 8009db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009db6:	07d9      	lsls	r1, r3, #31
 8009db8:	d405      	bmi.n	8009dc6 <_vfiprintf_r+0x1fe>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	059a      	lsls	r2, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_vfiprintf_r+0x1fe>
 8009dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dc2:	f7fe fbf5 	bl	80085b0 <__retarget_lock_release_recursive>
 8009dc6:	89ab      	ldrh	r3, [r5, #12]
 8009dc8:	065b      	lsls	r3, r3, #25
 8009dca:	f53f af1f 	bmi.w	8009c0c <_vfiprintf_r+0x44>
 8009dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dd0:	e71e      	b.n	8009c10 <_vfiprintf_r+0x48>
 8009dd2:	ab03      	add	r3, sp, #12
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <_vfiprintf_r+0x228>)
 8009dda:	a904      	add	r1, sp, #16
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7fd ffe3 	bl	8007da8 <_printf_i>
 8009de2:	e7e4      	b.n	8009dae <_vfiprintf_r+0x1e6>
 8009de4:	0800a592 	.word	0x0800a592
 8009de8:	0800a59c 	.word	0x0800a59c
 8009dec:	08007879 	.word	0x08007879
 8009df0:	08009ba3 	.word	0x08009ba3
 8009df4:	0800a598 	.word	0x0800a598

08009df8 <__sflush_r>:
 8009df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	0716      	lsls	r6, r2, #28
 8009e02:	4605      	mov	r5, r0
 8009e04:	460c      	mov	r4, r1
 8009e06:	d454      	bmi.n	8009eb2 <__sflush_r+0xba>
 8009e08:	684b      	ldr	r3, [r1, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dc02      	bgt.n	8009e14 <__sflush_r+0x1c>
 8009e0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dd48      	ble.n	8009ea6 <__sflush_r+0xae>
 8009e14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d045      	beq.n	8009ea6 <__sflush_r+0xae>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e20:	682f      	ldr	r7, [r5, #0]
 8009e22:	6a21      	ldr	r1, [r4, #32]
 8009e24:	602b      	str	r3, [r5, #0]
 8009e26:	d030      	beq.n	8009e8a <__sflush_r+0x92>
 8009e28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	0759      	lsls	r1, r3, #29
 8009e2e:	d505      	bpl.n	8009e3c <__sflush_r+0x44>
 8009e30:	6863      	ldr	r3, [r4, #4]
 8009e32:	1ad2      	subs	r2, r2, r3
 8009e34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e36:	b10b      	cbz	r3, 8009e3c <__sflush_r+0x44>
 8009e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e3a:	1ad2      	subs	r2, r2, r3
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b0      	blx	r6
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	d106      	bne.n	8009e5a <__sflush_r+0x62>
 8009e4c:	6829      	ldr	r1, [r5, #0]
 8009e4e:	291d      	cmp	r1, #29
 8009e50:	d82b      	bhi.n	8009eaa <__sflush_r+0xb2>
 8009e52:	4a2a      	ldr	r2, [pc, #168]	@ (8009efc <__sflush_r+0x104>)
 8009e54:	40ca      	lsrs	r2, r1
 8009e56:	07d6      	lsls	r6, r2, #31
 8009e58:	d527      	bpl.n	8009eaa <__sflush_r+0xb2>
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	6062      	str	r2, [r4, #4]
 8009e5e:	04d9      	lsls	r1, r3, #19
 8009e60:	6922      	ldr	r2, [r4, #16]
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	d504      	bpl.n	8009e70 <__sflush_r+0x78>
 8009e66:	1c42      	adds	r2, r0, #1
 8009e68:	d101      	bne.n	8009e6e <__sflush_r+0x76>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b903      	cbnz	r3, 8009e70 <__sflush_r+0x78>
 8009e6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e72:	602f      	str	r7, [r5, #0]
 8009e74:	b1b9      	cbz	r1, 8009ea6 <__sflush_r+0xae>
 8009e76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d002      	beq.n	8009e84 <__sflush_r+0x8c>
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f7ff f9fe 	bl	8009280 <_free_r>
 8009e84:	2300      	movs	r3, #0
 8009e86:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e88:	e00d      	b.n	8009ea6 <__sflush_r+0xae>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b0      	blx	r6
 8009e90:	4602      	mov	r2, r0
 8009e92:	1c50      	adds	r0, r2, #1
 8009e94:	d1c9      	bne.n	8009e2a <__sflush_r+0x32>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0c6      	beq.n	8009e2a <__sflush_r+0x32>
 8009e9c:	2b1d      	cmp	r3, #29
 8009e9e:	d001      	beq.n	8009ea4 <__sflush_r+0xac>
 8009ea0:	2b16      	cmp	r3, #22
 8009ea2:	d11e      	bne.n	8009ee2 <__sflush_r+0xea>
 8009ea4:	602f      	str	r7, [r5, #0]
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e022      	b.n	8009ef0 <__sflush_r+0xf8>
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	e01b      	b.n	8009eea <__sflush_r+0xf2>
 8009eb2:	690f      	ldr	r7, [r1, #16]
 8009eb4:	2f00      	cmp	r7, #0
 8009eb6:	d0f6      	beq.n	8009ea6 <__sflush_r+0xae>
 8009eb8:	0793      	lsls	r3, r2, #30
 8009eba:	680e      	ldr	r6, [r1, #0]
 8009ebc:	bf08      	it	eq
 8009ebe:	694b      	ldreq	r3, [r1, #20]
 8009ec0:	600f      	str	r7, [r1, #0]
 8009ec2:	bf18      	it	ne
 8009ec4:	2300      	movne	r3, #0
 8009ec6:	eba6 0807 	sub.w	r8, r6, r7
 8009eca:	608b      	str	r3, [r1, #8]
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	dde9      	ble.n	8009ea6 <__sflush_r+0xae>
 8009ed2:	6a21      	ldr	r1, [r4, #32]
 8009ed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ed6:	4643      	mov	r3, r8
 8009ed8:	463a      	mov	r2, r7
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b0      	blx	r6
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	dc08      	bgt.n	8009ef4 <__sflush_r+0xfc>
 8009ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef4:	4407      	add	r7, r0
 8009ef6:	eba8 0800 	sub.w	r8, r8, r0
 8009efa:	e7e7      	b.n	8009ecc <__sflush_r+0xd4>
 8009efc:	20400001 	.word	0x20400001

08009f00 <_fflush_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	4605      	mov	r5, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	b913      	cbnz	r3, 8009f10 <_fflush_r+0x10>
 8009f0a:	2500      	movs	r5, #0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	b118      	cbz	r0, 8009f1a <_fflush_r+0x1a>
 8009f12:	6a03      	ldr	r3, [r0, #32]
 8009f14:	b90b      	cbnz	r3, 8009f1a <_fflush_r+0x1a>
 8009f16:	f7fe f8f1 	bl	80080fc <__sinit>
 8009f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0f3      	beq.n	8009f0a <_fflush_r+0xa>
 8009f22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f24:	07d0      	lsls	r0, r2, #31
 8009f26:	d404      	bmi.n	8009f32 <_fflush_r+0x32>
 8009f28:	0599      	lsls	r1, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_fflush_r+0x32>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f2e:	f7fe fb3e 	bl	80085ae <__retarget_lock_acquire_recursive>
 8009f32:	4628      	mov	r0, r5
 8009f34:	4621      	mov	r1, r4
 8009f36:	f7ff ff5f 	bl	8009df8 <__sflush_r>
 8009f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f3c:	07da      	lsls	r2, r3, #31
 8009f3e:	4605      	mov	r5, r0
 8009f40:	d4e4      	bmi.n	8009f0c <_fflush_r+0xc>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	059b      	lsls	r3, r3, #22
 8009f46:	d4e1      	bmi.n	8009f0c <_fflush_r+0xc>
 8009f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f4a:	f7fe fb31 	bl	80085b0 <__retarget_lock_release_recursive>
 8009f4e:	e7dd      	b.n	8009f0c <_fflush_r+0xc>

08009f50 <__swhatbuf_r>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	460c      	mov	r4, r1
 8009f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	b096      	sub	sp, #88	@ 0x58
 8009f5c:	4615      	mov	r5, r2
 8009f5e:	461e      	mov	r6, r3
 8009f60:	da0d      	bge.n	8009f7e <__swhatbuf_r+0x2e>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f68:	f04f 0100 	mov.w	r1, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	2340      	movne	r3, #64	@ 0x40
 8009f70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f74:	2000      	movs	r0, #0
 8009f76:	6031      	str	r1, [r6, #0]
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	b016      	add	sp, #88	@ 0x58
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f000 f848 	bl	800a014 <_fstat_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dbec      	blt.n	8009f62 <__swhatbuf_r+0x12>
 8009f88:	9901      	ldr	r1, [sp, #4]
 8009f8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f92:	4259      	negs	r1, r3
 8009f94:	4159      	adcs	r1, r3
 8009f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f9a:	e7eb      	b.n	8009f74 <__swhatbuf_r+0x24>

08009f9c <__smakebuf_r>:
 8009f9c:	898b      	ldrh	r3, [r1, #12]
 8009f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa0:	079d      	lsls	r5, r3, #30
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	d507      	bpl.n	8009fb8 <__smakebuf_r+0x1c>
 8009fa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	6163      	str	r3, [r4, #20]
 8009fb4:	b003      	add	sp, #12
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	ab01      	add	r3, sp, #4
 8009fba:	466a      	mov	r2, sp
 8009fbc:	f7ff ffc8 	bl	8009f50 <__swhatbuf_r>
 8009fc0:	9f00      	ldr	r7, [sp, #0]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff f9ce 	bl	8009368 <_malloc_r>
 8009fcc:	b948      	cbnz	r0, 8009fe2 <__smakebuf_r+0x46>
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	059a      	lsls	r2, r3, #22
 8009fd4:	d4ee      	bmi.n	8009fb4 <__smakebuf_r+0x18>
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	f043 0302 	orr.w	r3, r3, #2
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	e7e2      	b.n	8009fa8 <__smakebuf_r+0xc>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	6020      	str	r0, [r4, #0]
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ff2:	b15b      	cbz	r3, 800a00c <__smakebuf_r+0x70>
 8009ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 f81d 	bl	800a038 <_isatty_r>
 8009ffe:	b128      	cbz	r0, 800a00c <__smakebuf_r+0x70>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	431d      	orrs	r5, r3
 800a010:	81a5      	strh	r5, [r4, #12]
 800a012:	e7cf      	b.n	8009fb4 <__smakebuf_r+0x18>

0800a014 <_fstat_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d07      	ldr	r5, [pc, #28]	@ (800a034 <_fstat_r+0x20>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	4611      	mov	r1, r2
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	f7f7 fd4d 	bl	8001ac0 <_fstat>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d102      	bne.n	800a030 <_fstat_r+0x1c>
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	b103      	cbz	r3, 800a030 <_fstat_r+0x1c>
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	bd38      	pop	{r3, r4, r5, pc}
 800a032:	bf00      	nop
 800a034:	20004e50 	.word	0x20004e50

0800a038 <_isatty_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d06      	ldr	r5, [pc, #24]	@ (800a054 <_isatty_r+0x1c>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	f7f7 fd4c 	bl	8001ae0 <_isatty>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_isatty_r+0x1a>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_isatty_r+0x1a>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20004e50 	.word	0x20004e50

0800a058 <_sbrk_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4d06      	ldr	r5, [pc, #24]	@ (800a074 <_sbrk_r+0x1c>)
 800a05c:	2300      	movs	r3, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	f7f7 fd54 	bl	8001b10 <_sbrk>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_sbrk_r+0x1a>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_sbrk_r+0x1a>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	20004e50 	.word	0x20004e50

0800a078 <__assert_func>:
 800a078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a07a:	4614      	mov	r4, r2
 800a07c:	461a      	mov	r2, r3
 800a07e:	4b09      	ldr	r3, [pc, #36]	@ (800a0a4 <__assert_func+0x2c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4605      	mov	r5, r0
 800a084:	68d8      	ldr	r0, [r3, #12]
 800a086:	b14c      	cbz	r4, 800a09c <__assert_func+0x24>
 800a088:	4b07      	ldr	r3, [pc, #28]	@ (800a0a8 <__assert_func+0x30>)
 800a08a:	9100      	str	r1, [sp, #0]
 800a08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a090:	4906      	ldr	r1, [pc, #24]	@ (800a0ac <__assert_func+0x34>)
 800a092:	462b      	mov	r3, r5
 800a094:	f000 f842 	bl	800a11c <fiprintf>
 800a098:	f000 f852 	bl	800a140 <abort>
 800a09c:	4b04      	ldr	r3, [pc, #16]	@ (800a0b0 <__assert_func+0x38>)
 800a09e:	461c      	mov	r4, r3
 800a0a0:	e7f3      	b.n	800a08a <__assert_func+0x12>
 800a0a2:	bf00      	nop
 800a0a4:	2000001c 	.word	0x2000001c
 800a0a8:	0800a5ad 	.word	0x0800a5ad
 800a0ac:	0800a5ba 	.word	0x0800a5ba
 800a0b0:	0800a5e8 	.word	0x0800a5e8

0800a0b4 <_calloc_r>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a0ba:	b934      	cbnz	r4, 800a0ca <_calloc_r+0x16>
 800a0bc:	4629      	mov	r1, r5
 800a0be:	f7ff f953 	bl	8009368 <_malloc_r>
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	b928      	cbnz	r0, 800a0d2 <_calloc_r+0x1e>
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ca:	220c      	movs	r2, #12
 800a0cc:	6002      	str	r2, [r0, #0]
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	e7f9      	b.n	800a0c6 <_calloc_r+0x12>
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7fe f98f 	bl	80083f8 <memset>
 800a0da:	e7f4      	b.n	800a0c6 <_calloc_r+0x12>

0800a0dc <__ascii_mbtowc>:
 800a0dc:	b082      	sub	sp, #8
 800a0de:	b901      	cbnz	r1, 800a0e2 <__ascii_mbtowc+0x6>
 800a0e0:	a901      	add	r1, sp, #4
 800a0e2:	b142      	cbz	r2, 800a0f6 <__ascii_mbtowc+0x1a>
 800a0e4:	b14b      	cbz	r3, 800a0fa <__ascii_mbtowc+0x1e>
 800a0e6:	7813      	ldrb	r3, [r2, #0]
 800a0e8:	600b      	str	r3, [r1, #0]
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	1e10      	subs	r0, r2, #0
 800a0ee:	bf18      	it	ne
 800a0f0:	2001      	movne	r0, #1
 800a0f2:	b002      	add	sp, #8
 800a0f4:	4770      	bx	lr
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	e7fb      	b.n	800a0f2 <__ascii_mbtowc+0x16>
 800a0fa:	f06f 0001 	mvn.w	r0, #1
 800a0fe:	e7f8      	b.n	800a0f2 <__ascii_mbtowc+0x16>

0800a100 <__ascii_wctomb>:
 800a100:	4603      	mov	r3, r0
 800a102:	4608      	mov	r0, r1
 800a104:	b141      	cbz	r1, 800a118 <__ascii_wctomb+0x18>
 800a106:	2aff      	cmp	r2, #255	@ 0xff
 800a108:	d904      	bls.n	800a114 <__ascii_wctomb+0x14>
 800a10a:	228a      	movs	r2, #138	@ 0x8a
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	f04f 30ff 	mov.w	r0, #4294967295
 800a112:	4770      	bx	lr
 800a114:	700a      	strb	r2, [r1, #0]
 800a116:	2001      	movs	r0, #1
 800a118:	4770      	bx	lr
	...

0800a11c <fiprintf>:
 800a11c:	b40e      	push	{r1, r2, r3}
 800a11e:	b503      	push	{r0, r1, lr}
 800a120:	4601      	mov	r1, r0
 800a122:	ab03      	add	r3, sp, #12
 800a124:	4805      	ldr	r0, [pc, #20]	@ (800a13c <fiprintf+0x20>)
 800a126:	f853 2b04 	ldr.w	r2, [r3], #4
 800a12a:	6800      	ldr	r0, [r0, #0]
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	f7ff fd4b 	bl	8009bc8 <_vfiprintf_r>
 800a132:	b002      	add	sp, #8
 800a134:	f85d eb04 	ldr.w	lr, [sp], #4
 800a138:	b003      	add	sp, #12
 800a13a:	4770      	bx	lr
 800a13c:	2000001c 	.word	0x2000001c

0800a140 <abort>:
 800a140:	b508      	push	{r3, lr}
 800a142:	2006      	movs	r0, #6
 800a144:	f000 f82c 	bl	800a1a0 <raise>
 800a148:	2001      	movs	r0, #1
 800a14a:	f7f7 fc85 	bl	8001a58 <_exit>

0800a14e <_raise_r>:
 800a14e:	291f      	cmp	r1, #31
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4605      	mov	r5, r0
 800a154:	460c      	mov	r4, r1
 800a156:	d904      	bls.n	800a162 <_raise_r+0x14>
 800a158:	2316      	movs	r3, #22
 800a15a:	6003      	str	r3, [r0, #0]
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295
 800a160:	bd38      	pop	{r3, r4, r5, pc}
 800a162:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a164:	b112      	cbz	r2, 800a16c <_raise_r+0x1e>
 800a166:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a16a:	b94b      	cbnz	r3, 800a180 <_raise_r+0x32>
 800a16c:	4628      	mov	r0, r5
 800a16e:	f000 f831 	bl	800a1d4 <_getpid_r>
 800a172:	4622      	mov	r2, r4
 800a174:	4601      	mov	r1, r0
 800a176:	4628      	mov	r0, r5
 800a178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a17c:	f000 b818 	b.w	800a1b0 <_kill_r>
 800a180:	2b01      	cmp	r3, #1
 800a182:	d00a      	beq.n	800a19a <_raise_r+0x4c>
 800a184:	1c59      	adds	r1, r3, #1
 800a186:	d103      	bne.n	800a190 <_raise_r+0x42>
 800a188:	2316      	movs	r3, #22
 800a18a:	6003      	str	r3, [r0, #0]
 800a18c:	2001      	movs	r0, #1
 800a18e:	e7e7      	b.n	800a160 <_raise_r+0x12>
 800a190:	2100      	movs	r1, #0
 800a192:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a196:	4620      	mov	r0, r4
 800a198:	4798      	blx	r3
 800a19a:	2000      	movs	r0, #0
 800a19c:	e7e0      	b.n	800a160 <_raise_r+0x12>
	...

0800a1a0 <raise>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	@ (800a1ac <raise+0xc>)
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f7ff bfd2 	b.w	800a14e <_raise_r>
 800a1aa:	bf00      	nop
 800a1ac:	2000001c 	.word	0x2000001c

0800a1b0 <_kill_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d07      	ldr	r5, [pc, #28]	@ (800a1d0 <_kill_r+0x20>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	f7f7 fc3b 	bl	8001a38 <_kill>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d102      	bne.n	800a1cc <_kill_r+0x1c>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	b103      	cbz	r3, 800a1cc <_kill_r+0x1c>
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20004e50 	.word	0x20004e50

0800a1d4 <_getpid_r>:
 800a1d4:	f7f7 bc28 	b.w	8001a28 <_getpid>

0800a1d8 <_init>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr

0800a1e4 <_fini>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	bf00      	nop
 800a1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ea:	bc08      	pop	{r3}
 800a1ec:	469e      	mov	lr, r3
 800a1ee:	4770      	bx	lr
